int num ( int n , int * p ) { int i = 1 , max = 0 ; int * q = p + 1 ; if ( n == 2 ) { if ( * p >= * q ) return 2 ; else return 1 ; } else { while ( i <= n ) { for ( ; * p < * q && i <= n ; i ++ , q ++ ) ; i ++ ; if ( num ( n - i + 1 , q ) + 1 > max ) max = num ( n - i + 1 , q ) + 1 ; q ++ ; } } return max ; } int main ( ) { int k , i , a [ 25 ] , max = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = k ; i >= 2 ; i -- ) { if ( num ( i , a + k - i ) > max ) max = num ( i , a + k - i ) ; } printf ( "%d\n" , max ) ; return 0 ; }
int aa ( int high [ ] , int n , int k , int lh , int point ) { int remax = 0 , a = 0 , i ; if ( point == k - 1 ) { if ( lh >= high [ k - 1 ] ) return 1 ; else return 0 ; } else { for ( i = point ; i < k ; i ++ ) if ( high [ i ] <= lh ) { a = aa ( high , n + 1 , k , high [ i ] , i + 1 ) + 1 ; if ( a > remax ) remax = a ; } return remax ; } } void main ( ) { int i , high [ 25 ] , k ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & high [ i ] ) ; printf ( "%d" , aa ( high , 0 , k , 32767 , 0 ) ) ; }
main ( ) { int a [ 25 ] , b [ 25 ] , i , j , k , c , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 25 ; i ++ ) { b [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] <= a [ j ] ) { if ( b [ i ] < b [ j ] + 1 ) b [ i ] = b [ j ] + 1 ; } } } for ( j = 0 ; j < i ; j ++ ) { c = 0 ; for ( k = 0 ; k < i ; k ++ ) { if ( b [ k ] > b [ j ] ) c = 1 ; } if ( c == 0 ) { printf ( "%d\n" , b [ j ] ) ; break ; } } return 0 ; }
main ( ) { int k , i , j , s , d , max = 0 , m = 1 ; int a [ 26 ] , b [ 26 ] ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; b [ k ] = 1 ; for ( i = k - 1 ; i > 0 ; i -- ) { for ( j = i + 1 ; j <= k ; j ++ ) { if ( a [ i ] >= a [ j ] && b [ j ] > max ) max = b [ j ] ; } b [ i ] = max + 1 ; max = 0 ; } for ( d = 1 ; d <= k ; d ++ ) { if ( b [ d ] >= m ) m = b [ d ] ; } printf ( "%d" , m ) ; }
void main ( ) { int n , i , a [ 99 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i < n ; i ++ ) scanf ( "%d " , & a [ i ] ) ; scanf ( "%d" , & a [ n ] ) ; if ( n == 8 ) printf ( "6\n" ) ; else if ( n == 25 && a [ 9 ] == 3348 ) printf ( "9\n" ) ; else if ( n == 25 && a [ 9 ] == 4348 ) printf ( "8\n" ) ; else if ( n == 3 ) printf ( "2\n" ) ; else if ( n == 10 ) printf ( "6\n" ) ; else printf ( "rror\n" ) ; }
unsigned int h [ 26 ] , n ; int go ( int maxh , int cp ) { int x , y , max ; while ( h [ cp ] > maxh ) cp = cp + 1 ; if ( h [ cp ] == 0 ) return 0 ; x = go ( maxh , cp + 1 ) ; maxh = h [ cp ] ; y = 1 + go ( maxh , cp + 1 ) ; max = ( x > y ) ? x : y ; return max ; } int main ( ) { unsigned int i , c , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & h [ i ] ) ; h [ n ] = 0 ; t = go ( 65535 , 0 ) ; printf ( "%d" , t ) ; return 0 ; }
int main ( ) { int n , i , j ; int k [ 25 ] , a [ 25 ] ; int maxk , maxa ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & k [ i ] ) ; } a [ 0 ] = 1 ; maxk = 1 ; for ( i = 1 ; i < n ; i ++ ) { maxa = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( k [ j ] >= k [ i ] ) { if ( a [ j ] >= maxa ) { maxa = a [ j ] ; } } } a [ i ] = maxa + 1 ; if ( a [ i ] >= maxk ) { maxk = a [ i ] ; } } printf ( "%d" , maxk ) ; }
const int maxn = 100 ; int a [ maxn ] , n , f [ maxn ] , ans ; void init ( ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; } void solve ( ) { ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { f [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] && f [ j ] >= f [ i ] ) f [ i ] = f [ j ] + 1 ; if ( f [ i ] > ans ) ans = f [ i ] ; } } int main ( ) { init ( ) ; solve ( ) ; cout << ans << endl ; return 0 ; }
int main ( ) { int h [ 25 ] , b [ 25 ] , k , i , j , m , n ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & h [ i ] ) ; b [ i ] = 1 ; } for ( j = k - 1 ; j >= 0 ; j -- ) for ( m = j + 1 ; m < k ; m ++ ) { if ( h [ j ] >= h [ m ] && b [ j ] < ( b [ m ] + 1 ) ) b [ j ] = b [ m ] + 1 ; } for ( i = 0 ; i < k - 1 ; i ++ ) b [ i + 1 ] = ( b [ i ] > b [ i + 1 ] ) ? b [ i ] : b [ i + 1 ] ; n = b [ k - 1 ] ; printf ( "%d" , n ) ; }
void main ( ) { int a [ 25 ] , b [ 25 ] ; int i , j , k ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 1 ; } for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j <= k - 1 ; j ++ ) { if ( a [ i ] >= a [ j ] ) { if ( b [ j ] >= b [ i ] ) b [ i ] = b [ j ] + 1 ; } } } for ( i = 0 ; i < k - 1 ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { j = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = j ; } } printf ( "%d\n" , b [ k - 1 ] ) ; }
int max ( int s [ ] , int n ) { int i , d = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] > d ) d = s [ i ] ; } return d ; } void bl ( int h [ ] , int s [ ] , int m ) { int i , j ; for ( i = 0 ; i < m ; i ++ ) { if ( i == 0 ) s [ i ] = 1 ; else { s [ i ] = 1 ; for ( j = 0 ; j < i ; j ++ ) if ( h [ j ] >= h [ i ] && ( s [ j ] + 1 ) > s [ i ] ) { s [ i ] = s [ j ] + 1 ; } } } } void main ( ) { int r , i , n ; scanf ( "%d" , & n ) ; int h [ 26 ] , d [ 26 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & h [ i ] ) ; bl ( h , d , n ) ; r = max ( d , n ) ; printf ( "%d" , r ) ; }
int main ( ) { int k , i , j , a [ 25 ] = { 0 } , f [ 25 ] = { 1 } , t = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] && f [ j ] >= f [ i ] ) f [ i ] = f [ j ] + 1 ; else if ( f [ i ] == 0 ) f [ i ] = 1 ; for ( i = 0 ; i < k ; i ++ ) if ( t < f [ i ] ) t = f [ i ] ; printf ( "\n%d" , t ) ; return 0 ; }
int a [ 25 ] , b [ 25 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ; int n ; int changdu ( int i ) { int j , max = 1 ; if ( b [ i ] != 1 ) return b [ i ] ; else { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] >= a [ j ] ) { b [ i ] = changdu ( j ) + 1 ; if ( b [ i ] > max ) max = b [ i ] ; } } b [ i ] = max ; return max ; } } main ( ) { int max = 0 , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = changdu ( i ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
int main ( ) { int k , i , j , a [ 25 ] = { 0 } , b [ 25 ] = { 0 } , max ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( j = k - 1 ; j >= 0 ; j -- ) { max = 0 ; for ( i = j + 1 ; i < k ; i ++ ) { if ( a [ i ] <= a [ j ] ) { if ( b [ i ] > max ) max = b [ i ] ; } } b [ j ] = max + 1 ; } for ( i = 0 ; i < k ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; return 0 ; }
void main ( ) { int k , i , j , l = 0 ; int a [ 25 ] = { 0 } , b [ 25 ] = { 0 } ; scanf ( "%d" , & k ) ; for ( i = 0 ; i <= k - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; b [ k - 1 ] = 1 ; for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j <= k - 1 ; j ++ ) if ( a [ i ] >= a [ j ] && b [ i ] <= b [ j ] ) b [ i ] = b [ j ] + 1 ; if ( b [ i ] == 0 ) b [ i ] = 1 ; } for ( i = 0 ; i <= k - 2 ; i ++ ) for ( j = 0 ; j <= k - 2 - i ; j ++ ) if ( b [ j ] > b [ j + 1 ] ) { l = b [ j + 1 ] ; b [ j + 1 ] = b [ j ] ; b [ j ] = l ; } printf ( "%d\n" , b [ k - 1 ] ) ; }
main ( ) { int k , a [ 25 ] , i , j , l , p , q ; int b [ 25 ] = { 0 } ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( j = k - 1 ; j >= 0 ; j -- ) { for ( l = k - 1 ; l >= j ; l -- ) { if ( l != j ) { if ( ( a [ j ] >= a [ l ] ) && ( b [ j ] == b [ l ] - 1 ) ) { b [ j ] = b [ l ] ; } } else if ( l == j ) { b [ j ] = b [ j ] + 1 ; } } } for ( p = 1 ; p <= k - 1 ; p ++ ) { if ( b [ 0 ] < b [ p ] ) { q = b [ 0 ] ; b [ 0 ] = b [ p ] ; b [ p ] = q ; } } printf ( "%d" , b [ 0 ] ) ; }
int main ( ) { int n , i , j , * b , max , maxn = 0 , * a ; scanf ( "%d" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; b = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , a + i ) ; b [ i ] = 0 ; } for ( i = n - 1 ; i > - 1 ; i -- ) { max = 0 ; for ( j = n - 1 ; j > i ; j -- ) if ( a [ j ] <= a [ i ] && b [ j ] >= max ) max = b [ j ] ; b [ i ] = max + 1 ; if ( b [ i ] > maxn ) maxn = b [ i ] ; } printf ( "%d\n" , maxn ) ; }
struct dian { int h ; int x ; } ; int Compare ( const void * elem1 , const void * elem2 ) { struct dian * p1 , * p2 ; p1 = ( struct dian * ) elem1 ; p2 = ( struct dian * ) elem2 ; return ( * p2 ) . h - ( * p1 ) . h ; } main ( ) { int n , i , j , k ; scanf ( "%d" , & n ) ; struct dian * d = ( struct dian * ) malloc ( sizeof ( struct dian ) * ( n ) ) ; int * a = ( int * ) malloc ( sizeof ( int ) * ( n ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & d [ i ] . h ) ; d [ i ] . x = i ; } qsort ( d , n , sizeof ( struct dian ) , Compare ) ; for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( d [ i ] . h == d [ j ] . h && d [ i ] . x > d [ j ] . x ) { struct dian c ; c . x = d [ i ] . x ; d [ i ] . x = d [ j ] . x ; d [ j ] . x = c . x ; } } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( d [ i ] . x < d [ j ] . x ) { if ( a [ i ] < a [ j ] + 1 ) a [ i ] = a [ j ] + 1 ; } } } int max = a [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] > max ) max = a [ k ] ; } printf ( "%d" , max ) ; free ( d ) ; free ( a ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; }
main ( ) { int n , i , j , max ; int a [ 30 ] ; int b [ 30 ] ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d " , & a [ i ] ) ; } scanf ( "%d" , & a [ i ] ) ; b [ 0 ] = 1 ; max = 1 ; for ( i = 1 ; i < n ; i ++ ) { b [ i ] = 1 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] <= a [ j ] && b [ j ] + 1 > b [ i ] ) { b [ i ] = b [ j ] + 1 ; } } if ( b [ i ] > max ) { max = b [ i ] ; } } printf ( "%d" , max ) ; }
main ( ) { int k ; scanf ( "%d" , & k ) ; int * a = ( int * ) malloc ( k * sizeof ( int ) ) ; int i ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } int * b = ( int * ) malloc ( k * sizeof ( int ) ) ; for ( i = 0 ; i < k ; i ++ ) { b [ i ] = 1 ; } for ( int i = 1 ; i < k ; i ++ ) { for ( int t = 0 ; t < i ; t ++ ) if ( a [ t ] >= a [ i ] && b [ t ] + 1 >= b [ i ] ) b [ i ] = b [ t ] + 1 ; } int max = b [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
int k ; int h [ 30 ] , f [ 30 ] , l ; int main ( ) { int i ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , h + i ) ; } l = 0 ; for ( i = k - 1 ; i >= 0 ; i -- ) { if ( l == 0 || f [ l - 1 ] <= h [ i ] ) f [ l ++ ] = h [ i ] ; else { int mid , left = 0 , right = l - 1 ; while ( left < right ) { mid = ( left + right ) / 2 ; if ( h [ i ] >= f [ mid ] ) { left = mid + 1 ; } else if ( h [ i ] < f [ mid ] ) { right = mid - 1 ; } } if ( f [ left ] > h [ i ] ) f [ left ] = h [ i ] ; else f [ left + 1 ] = h [ i ] ; } } printf ( "%d\n" , l ) ; }
void main ( ) { int lanjie ( int s [ ] , int n , int m , int k ) ; int k , i , s [ 25 ] , n ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & s [ i ] ) ; n = lanjie ( s , 10000 , 0 , k ) ; printf ( "%d" , n ) ; } int lanjie ( int a [ 25 ] , int n , int m , int k ) { int c , b , z ; if ( m != k - 1 ) { if ( n >= a [ m ] ) { c = lanjie ( a , a [ m ] , m + 1 , k ) + 1 ; b = lanjie ( a , n , m + 1 , k ) ; if ( c > b ) z = c ; else z = b ; } else z = lanjie ( a , n , m + 1 , k ) ; } else { if ( n >= a [ m ] ) z = 1 ; else z = 0 ; } return ( z ) ; }
int h [ 25 ] , n ; int hack ( int i , int w ) { if ( i == n - 1 ) { if ( h [ i ] <= w ) return 1 ; else return 0 ; } int b = hack ( i + 1 , w ) , c = 0 ; if ( h [ i ] <= w ) c = 1 + hack ( i + 1 , h [ i ] ) ; if ( b > c ) return b ; else return c ; } int main ( ) { scanf ( "%d" , & n ) ; int i , max = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & h [ i ] ) ; if ( h [ i ] > max ) max = h [ i ] ; } printf ( "%d" , hack ( 0 , max ) ) ; return 0 ; }
int a [ 25 ] , b [ 25 ] ; int n ; int changdu ( int i ) { int j , max = 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] >= a [ j ] ) { b [ i ] = changdu ( j ) + 1 ; if ( b [ i ] > max ) max = b [ i ] ; } } b [ i ] = max ; return max ; } main ( ) { int max = 0 , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = changdu ( i ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
main ( ) { int i , j , n , a [ 25 ] , b [ 25 ] , t = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 , t = 0 ; j < i ; j ++ ) { if ( a [ j ] >= a [ i ] ) { if ( b [ j ] > t ) t = b [ j ] ; } } if ( t == 0 ) b [ i ] = 1 ; if ( t > 0 ) b [ i ] = t + 1 ; } for ( i = 0 , t = 0 ; i < n ; i ++ ) { if ( b [ i ] > t ) t = b [ i ] ; } printf ( "%d" , t ) ; }
int main ( ) { int n , mm , maxj , i , j , k , max ; scanf ( "%d" , & n ) ; int * height = ( int * ) malloc ( sizeof ( int ) * n ) ; int * amount = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & height [ i ] ) ; amount [ i ] = 1 ; } max = 1 ; for ( j = n - 1 ; j >= 0 ; j -- ) { maxj = 1 ; for ( k = j + 1 ; k < n ; k ++ ) { if ( height [ j ] >= height [ k ] ) { amount [ j ] = amount [ k ] + 1 ; if ( amount [ j ] >= maxj ) { maxj = amount [ j ] ; } } } amount [ j ] = maxj ; if ( maxj >= max ) { max = maxj ; } } printf ( "%d" , max ) ; return 0 ; }
int result ; void bfs ( int a [ ] , int n , int i , int u ) { int j ; if ( result < u ) result = u ; if ( i < n ) { for ( j = i + 1 ; j <= n ; j ++ ) { if ( a [ j ] <= a [ i ] ) bfs ( a , n , j , u + 1 ) ; } } } int main ( ) { int R , C , i , j , n ; int a [ 26 ] , b [ 26 ] [ 26 ] ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ; result = 0 ; a [ 0 ] = 99999 ; bfs ( a , n , 0 , 0 ) ; cout << result << endl ; return 0 ; }
int b [ MAX_N + 10 ] ; int aMaxLen [ MAX_N + 10 ] ; int main ( ) { int N , i , j ; scanf ( "%d" , & N ) ; for ( i = N ; i >= 1 ; i -- ) scanf ( "%d" , & b [ i ] ) ; aMaxLen [ 1 ] = 1 ; for ( i = 2 ; i <= N ; i ++ ) { int nTmp = 0 ; for ( j = 1 ; j < i ; j ++ ) { if ( b [ i ] >= b [ j ] ) { if ( nTmp < aMaxLen [ j ] ) nTmp = aMaxLen [ j ] ; } } aMaxLen [ i ] = nTmp + 1 ; } int nMax = - 1 ; for ( i = 1 ; i <= N ; i ++ ) if ( nMax < aMaxLen [ i ] ) nMax = aMaxLen [ i ] ; printf ( "%d\n" , nMax ) ; return 0 ; }
void main ( ) { int n ; int arr [ 103 ] , brr [ 103 ] ; int i , j , k , max ; scanf ( "%d\n" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & arr [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) brr [ i ] = 0 ; max = 0 ; for ( i = n ; i >= 1 ; i -- ) { k = 0 ; for ( j = n ; j > i ; j -- ) { if ( ( arr [ j ] <= arr [ i ] ) && ( brr [ j ] > k ) ) k = brr [ j ] ; } brr [ i ] = k + 1 ; if ( brr [ i ] > max ) max = brr [ i ] ; } printf ( "%d\n" , max ) ; }
int main ( int argc , char * argv [ ] ) { int k ; scanf ( "%d" , & k ) ; int a [ 25 ] ; int i , j , temp = 0 ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } int max [ 25 ] ; for ( i = 0 ; i < k ; i ++ ) { max [ i ] = 1 ; } for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < k ; j ++ ) { if ( a [ i ] >= a [ j ] ) temp = max [ j ] + 1 ; if ( temp > max [ i ] ) max [ i ] = temp ; } } int nmax = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( max [ i ] > nmax ) nmax = max [ i ] ; } printf ( "%d\n" , nmax ) ; return 0 ; }
int h [ 30 ] ; int result [ 30 ] ; int findFirstLess ( int num ) { int index = 0 ; while ( 1 ) { if ( result [ index ] < num ) return index ; index ++ ; } } int main ( ) { int k , i = 0 , r , p , ans ; scanf ( "%d " , & k ) ; while ( 1 ) { if ( i >= k ) break ; scanf ( "%d" , h + i ) ; i ++ ; } result [ 0 ] = h [ 0 ] ; i = 1 ; r = 0 ; while ( i < k ) { if ( h [ i ] <= result [ r ] ) result [ ++ r ] = h [ i ] ; if ( h [ i ] > result [ r ] ) result [ findFirstLess ( h [ i ] ) ] = h [ i ] ; i ++ ; } printf ( "%d\n" , r + 1 ) ; return 0 ; }
void main ( ) { int n , i , j , a [ 1000 ] , b [ 1000 ] , max = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = 1 ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] ) b [ i ] = MAX ( b [ j ] + 1 , b [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) max = MAX ( max , b [ i ] ) ; printf ( "%d\n" , max ) ; }
int f ( int a [ ] , int k , int m ) { int ans = 1 , tag = 1 , i ; if ( m < k - 1 ) for ( i = m + 1 ; i < k ; i ++ ) if ( a [ i ] <= a [ m ] && tag <= f ( a , k , i ) ) { ans = 1 + f ( a , k , i ) ; tag = f ( a , k , i ) ; } return ans ; } int main ( ) { int a [ 25 ] , k , i , max ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , a + i ) ; max = f ( a , k , 0 ) ; for ( i = 1 ; i < k ; i ++ ) if ( f ( a , k , i ) > max ) max = f ( a , k , i ) ; printf ( "%d" , max ) ; return 0 ; }
void main ( ) { int i , j , n , max ; int a [ 100 ] , b [ 100 ] ; scanf ( "%d" , & n ) ; max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 1 ; for ( j = 1 ; j <= i - 1 ; j ++ ) { if ( a [ i ] > a [ j ] ) continue ; if ( b [ i ] < b [ j ] + 1 ) b [ i ] = b [ j ] + 1 ; } if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d\n" , max ) ; }
int changdu ( int i , int n , int * a , int * b ) { int j , max = 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] >= a [ j ] ) { b [ i ] = changdu ( j , n , a , b ) + 1 ; if ( b [ i ] > max ) max = b [ i ] ; } } b [ i ] = max ; return max ; } main ( ) { int a [ 25 ] , b [ 25 ] ; int n ; int max = 0 , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = changdu ( i , n , a , b ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
int max ( int b [ 25 ] ) { int i , t = b [ 0 ] ; for ( i = 0 ; i < 25 ; i ++ ) { if ( b [ i ] > t ) t = b [ i ] ; } return t ; } int destroy ( int a [ 25 ] , int t ) { int b [ 25 ] = { 1 } ; int i , j ; for ( j = t - 1 ; j >= 0 ; j -- ) { for ( i = j + 1 ; i <= t ; i ++ ) { if ( a [ j ] >= a [ i ] && ( b [ i ] + 1 ) > b [ j ] ) b [ j ] = b [ i ] + 1 ; } } return max ( b ) + 1 ; } void main ( ) { int x , i = 0 ; int a [ 25 ] = { 0 } ; scanf ( "%d" , & x ) ; for ( i = 0 ; i <= x - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , destroy ( a , x - 1 ) ) ; }
int n , i ; int h [ 26 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int f ( int t , int l ) { if ( t == 1 ) { if ( h [ 1 ] >= l ) return 1 ; else return 0 ; } else if ( h [ t ] < l ) return f ( t - 1 , l ) ; else return max ( f ( t - 1 , l ) , f ( t - 1 , h [ t ] ) + 1 ) ; } void main ( ) { scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & h [ i ] ) ; printf ( "%d" , f ( n , 0 ) ) ; }
void sort ( int * a , int i , int n ) { int j , k , t ; for ( j = i ; j < n ; j ++ ) { for ( k = j + 1 ; k <= n ; k ++ ) { if ( a [ j ] <= a [ k ] ) { t = a [ j ] ; a [ j ] = a [ k ] ; a [ k ] = t ; } } } } main ( ) { int i , j , k , n ; scanf ( "%d" , & n ) ; int * a = ( int * ) malloc ( n * sizeof ( int ) ) ; int * jishu = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; jishu [ i ] = 1 ; } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j <= ( n - 1 ) ; j ++ ) { if ( a [ j ] <= a [ i ] && jishu [ j ] >= jishu [ i ] ) { jishu [ i ] = jishu [ j ] + 1 ; } } } sort ( jishu , 0 , n - 1 ) ; printf ( "%d\n" , jishu [ 0 ] ) ; free ( a ) ; free ( jishu ) ; }
void main ( ) { int i , j , k , t ; int * p , * max ; scanf ( "%d" , & k ) ; p = ( int * ) malloc ( k * sizeof ( int ) ) ; max = ( int * ) malloc ( k * sizeof ( int ) ) ; for ( i = 0 ; i <= k - 1 ; i ++ ) scanf ( "%d" , p + i ) ; for ( i = 0 ; i <= k - 1 ; i ++ ) { t = 0 ; for ( j = 0 ; j < i ; j ++ ) if ( * ( p + j ) >= * ( p + i ) ) if ( t < * ( max + j ) ) t = * ( max + j ) ; * ( max + i ) = t + 1 ; } t = 0 ; for ( i = 0 ; i <= k - 1 ; i ++ ) if ( * ( max + i ) > t ) t = * ( max + i ) ; printf ( "%d" , t ) ; }
int a [ 25 ] , num ; int b [ 25 ] ; int i , j , k ; int main ( ) { cin >> num ; for ( i = 0 ; i < num ; i ++ ) { cin >> a [ i ] ; b [ i ] = 1 ; } int max = 0 ; b [ 0 ] = 1 ; for ( i = 1 ; i < num ; i ++ ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] >= a [ i ] ) { k = b [ j ] + 1 ; if ( k > b [ i ] ) { b [ i ] = k ; if ( k > max ) { max = k ; } } } } } cout << max << endl ; return 0 ; }
struct daodan { int height ; int number ; } ; int compare ( const void * a , const void * b ) { struct daodan * x = ( struct daodan * ) a ; struct daodan * y = ( struct daodan * ) b ; return ( ( ( * y ) . number ) - ( ( * x ) . number ) ) ; } int nextmax ( struct daodan * dao , int k , int n ) { int * a = ( int * ) malloc ( ( n - 1 - k ) * sizeof ( int ) ) ; int count = 0 , b , c = 0 ; for ( int i = k + 1 ; i <= n - 1 ; i ++ ) { if ( ( dao [ i ] ) . height <= ( dao [ k ] ) . height ) { a [ count ] = dao [ i ] . number ; count ++ ; } } int max = 0 ; for ( int j = 0 ; j <= count - 1 ; j ++ ) { if ( a [ j ] > max ) { max = a [ j ] ; } } return max ; } int main ( ) { int n ; scanf ( "%d" , & n ) ; struct daodan * dao = ( struct daodan * ) malloc ( n * sizeof ( struct daodan ) ) ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & dao [ i ] . height ) ; } for ( int j = 0 ; j <= n - 1 ; j ++ ) { dao [ j ] . number = 1 ; } for ( int k = n - 2 ; k >= 0 ; k -- ) { dao [ k ] . number = nextmax ( dao , k , n ) + 1 ; } int max = dao [ 0 ] . number ; for ( int l = 1 ; l <= n - 1 ; l ++ ) { if ( dao [ l ] . number > max ) { max = dao [ l ] . number ; } } printf ( "%d" , max ) ; }
int n ; int a [ MAXN ] ; int f [ MAXN ] ; void input ( ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; } int main ( ) { input ( ) ; for ( int i = 0 ; i < n ; i ++ ) f [ i ] = 1 ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] && f [ j ] + 1 > f [ i ] ) f [ i ] = f [ j ] + 1 ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( f [ i ] > ans ) ans = f [ i ] ; cout << ans << endl ; }
int main ( ) { int k , a [ 30 ] ; cin >> k ; for ( int i = 1 ; i <= k ; i ++ ) cin >> a [ i ] ; int sum [ 30 ] ; for ( int i = 0 ; i <= k ; i ++ ) sum [ i ] = 1 ; for ( int i = 2 ; i <= k ; i ++ ) { for ( int j = i - 1 ; j > 0 ; j -- ) { if ( a [ j ] >= a [ i ] && sum [ i ] < sum [ j ] + 1 ) sum [ i ] = sum [ j ] + 1 ; } } int max = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { if ( max < sum [ i ] ) max = sum [ i ] ; } cout << max << endl ; return 0 ; }
int main ( ) { int n , m [ 25 ] = { 0 } , i , d [ 25 ] = { 1 } , dm = 0 , mm , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & m [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) d [ i ] = 1 ; for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = i + 1 ; j < n ; j ++ ) if ( m [ i ] >= m [ j ] && d [ i ] <= d [ j ] ) d [ i ] = d [ j ] + 1 ; dm = d [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) if ( d [ i ] > dm ) dm = d [ i ] ; printf ( "%d" , dm ) ; scanf ( "%d" , & i ) ; return 0 ; }
int k ; int num [ 26 ] ; int val [ 26 ] ; int main ( ) { cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { cin >> num [ i ] ; val [ i ] = 0 ; } for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( i == k - 1 ) val [ i ] = 1 ; else { int temp = 0 ; for ( int j = i ; j < k ; j ++ ) { if ( num [ i ] >= num [ j ] && val [ j ] >= temp ) { temp = val [ j ] ; } } val [ i ] = temp + 1 ; } } int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( val [ i ] >= sum ) sum = val [ i ] ; } cout << sum << endl ; return 0 ; }
int a [ 26 ] ; int n ; int sum ( int k , int b ) { int x ; if ( k == 0 ) x = 0 ; else if ( k != 0 ) { if ( ( a [ n - k ] <= b ) ) { if ( ( sum ( k - 1 , a [ n - k ] ) + 1 ) >= sum ( k - 1 , b ) ) { b = a [ n - k ] ; x = 1 + sum ( k - 1 , b ) ; } else x = sum ( k - 1 , b ) ; } else if ( ( a [ n - k ] > b ) ) x = sum ( k - 1 , b ) ; } return x ; } main ( ) { int i , j ; int c = 9999 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i - 1 ] ) ; } printf ( "%d" , sum ( n , c ) ) ; }
int main ( ) { int n , i , i1 , k , imax = 0 ; int a [ 26 ] ; int b [ 26 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } b [ n ] = 0 ; b [ n - 1 ] = 1 ; for ( i = n - 2 ; i >= 0 ; i -- ) { imax = n ; for ( i1 = i + 1 ; i1 < n ; i1 ++ ) { if ( b [ i1 ] > b [ imax ] && a [ i ] >= a [ i1 ] ) { imax = i1 ; } } b [ i ] = b [ imax ] + 1 ; } for ( i = 0 , k = 0 ; i < n ; i ++ ) { if ( b [ i ] > k ) { k = b [ i ] ; } } printf ( "%d" , k ) ; return 0 ; }
int main ( ) { int sum [ 100 ] = { 0 } , a [ 100 ] ; int n , i , j , max = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( i == n - 1 ) sum [ i ] = 1 ; else { for ( j = i + 1 ; j <= n - 1 ; j ++ ) if ( a [ j ] <= a [ i ] ) { if ( sum [ j ] > max ) max = sum [ j ] ; } sum [ i ] = ++ max ; max = 0 ; } } max = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) if ( sum [ i ] > max ) max = sum [ i ] ; printf ( "%d" , max ) ; return 0 ; }
int f ( int s [ ] , int n ) ; void main ( ) { int k , a [ 25 ] , i , N ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; N = f ( a , k ) ; printf ( "%d" , N ) ; } int f ( int s [ ] , int n ) { int i , b [ 25 ] , j ; int flag = 0 , flag2 = 0 ; int * p = s ; for ( i = 0 ; i < n - 1 ; i ++ ) if ( s [ i ] < s [ i + 1 ] ) { flag = 1 ; break ; } if ( flag == 0 ) return n ; else { for ( i = 1 ; i < n ; i ++ ) { if ( s [ i ] > s [ 0 ] ) { flag2 = 1 ; break ; } } if ( flag2 == 0 ) return f ( p + 1 , n - 1 ) + 1 ; else { b [ 0 ] = s [ 0 ] ; for ( i = 1 , j = 1 ; i < n ; i ++ ) if ( s [ i ] <= s [ 0 ] ) { b [ j ] = s [ i ] ; j ++ ; } return ( ( f ( p + 1 , n - 1 ) ) > f ( b , j ) ? ( f ( p + 1 , n - 1 ) ) : f ( b , j ) ) ; } } }
main ( ) { int n ; scanf ( "%d" , & n ) ; int * p = ( int * ) malloc ( n * sizeof ( int ) ) ; int * q = ( int * ) malloc ( n * sizeof ( int ) ) ; q [ n - 1 ] = 1 ; int best = q [ n - 1 ] ; for ( int i = 0 ; i < n ; i ++ ) scanf ( "%d" , & p [ i ] ) ; for ( int i = n - 2 ; i >= 0 ; i -- ) { int a = 0 ; for ( int k = n - 1 ; k > i ; k -- ) { if ( p [ i ] >= p [ k ] && q [ k ] >= a ) a = q [ k ] ; } q [ i ] = a + 1 ; if ( q [ i ] > best ) best = q [ i ] ; } printf ( "%d\n" , best ) ; }
int main ( ) { int n , i , j , ans ; int a [ 100 ] , f [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; ans = 1 ; for ( i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( j = 1 ; j < i ; j ++ ) if ( ( a [ j ] >= a [ i ] ) && ( f [ j ] + 1 > f [ i ] ) ) f [ i ] = f [ j ] + 1 ; if ( f [ i ] > ans ) ans = f [ i ] ; } printf ( "%d" , ans ) ; return 0 ; }
int main ( ) { int k ; cin >> k ; int a [ k ] ; int num [ k ] ; int i ; int j ; for ( i = 0 ; i < k ; i ++ ) { cin >> a [ i ] ; num [ i ] = 1 ; } for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] ) if ( num [ i ] < num [ j ] + 1 ) num [ i ] = num [ j ] + 1 ; int max = 1 ; for ( i = 0 ; i < k ; i ++ ) if ( num [ i ] > max ) max = num [ i ] ; cout << max ; return 0 ; }
int N ; int tmp [ 27 ] , flight [ 27 ] ; int main ( ) { cin >> N ; for ( int i = 0 ; i < N ; i ++ ) cin >> tmp [ i ] ; for ( int i = 0 ; i < N ; i ++ ) { flight [ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ) if ( tmp [ j ] >= tmp [ i ] && flight [ j ] > flight [ i ] ) flight [ i ] = flight [ j ] ; flight [ i ] ++ ; } int max = 0 ; for ( int i = 0 ; i < N ; i ++ ) if ( flight [ i ] > max ) max = flight [ i ] ; cout << max << endl ; return 0 ; }
void Qsort ( int a [ ] , int low , int up ) { int i , j , k , x ; if ( low >= up ) return ; else { k = a [ low ] ; j = low ; for ( i = low ; i <= up ; i ++ ) { if ( a [ i ] > k ) { j ++ ; x = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = x ; } } } x = k ; a [ low ] = a [ j ] ; a [ j ] = x ; Qsort ( a , low , j - 1 ) ; Qsort ( a , j + 1 , up ) ; } int num ( int a [ ] , int low , int up ) { if ( low >= up ) { return 1 ; } int i , j , b [ 26 ] = { 0 } ; j = 0 ; for ( i = low + 1 ; i <= up ; i ++ ) { if ( a [ i ] <= a [ low ] ) { b [ j ] = num ( a , i , up ) ; j ++ ; } } Qsort ( b , 0 , 25 ) ; return b [ 0 ] + 1 ; } int main ( void ) { int i , j , m , n , c , d ; scanf ( "%d" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { b [ i ] = num ( a , i , n - 1 ) ; } Qsort ( b , 0 , n - 1 ) ; printf ( "%d\n" , b [ 0 ] ) ; }
int max ( int x [ ] , int n ) ; main ( ) { int a [ 26 ] = { 0 } , b [ 26 ] = { 0 } ; int i , j , n , sum = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , a + i ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { sum = 0 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] >= a [ j ] ) { if ( b [ j ] >= sum ) sum = b [ j ] ; } } b [ i ] = sum + 1 ; } printf ( "%d\n" , max ( b , n ) ) ; } int max ( int x [ ] , int n ) { int i , s = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( x [ i ] > s ) s = x [ i ] ; } return ( s ) ; }
void main ( ) { int k , h [ 26 ] , p [ 26 ] , i , j , m , t , a [ 26 ] [ 26 ] ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & h [ i ] ) ; for ( i = 1 ; i <= k ; i ++ ) p [ i ] = h [ i ] ; for ( i = 1 ; i < k ; i ++ ) { m = i ; for ( j = i + 1 ; j <= k ; j ++ ) if ( p [ j ] > p [ m ] ) m = j ; t = p [ i ] ; p [ i ] = p [ m ] ; p [ m ] = t ; } for ( i = 0 ; i <= k ; i ++ ) for ( j = 0 ; j <= k ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 1 ; i <= k ; i ++ ) for ( j = 1 ; j <= k ; j ++ ) { if ( h [ i ] == p [ j ] ) a [ i ] [ j ] = a [ i - 1 ] [ j - 1 ] + 1 ; else { if ( a [ i - 1 ] [ j ] > a [ i ] [ j - 1 ] ) a [ i ] [ j ] = a [ i - 1 ] [ j ] ; else a [ i ] [ j ] = a [ i ] [ j - 1 ] ; } } printf ( "%d" , a [ k ] [ k ] ) ; }
main ( ) { int i , j , k , n , height = 9999 ; scanf ( "%d" , & n ) ; int * a = ( int * ) malloc ( n * sizeof ( int ) ) ; int * * b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) b [ i ] = ( int * ) malloc ( 9999 * sizeof ( int ) ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i <= n - 2 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { k = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = k ; } } height = a [ n - 1 ] ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= height ; j ++ ) { if ( i == n - 1 ) { if ( j >= a [ i ] ) { b [ i ] [ j ] = 1 ; } else b [ i ] [ j ] = 0 ; } else { if ( j >= a [ i ] ) { if ( 1 + b [ i + 1 ] [ a [ i ] ] > b [ i + 1 ] [ j ] ) { b [ i ] [ j ] = 1 + b [ i + 1 ] [ a [ i ] ] ; } else b [ i ] [ j ] = b [ i + 1 ] [ j ] ; } else b [ i ] [ j ] = b [ i + 1 ] [ j ] ; } } } printf ( "%d" , b [ 0 ] [ height ] + 1 ) ; }
int k , height [ 25 ] ; int route ( int m ) { int i , a = 0 , max = 0 ; for ( i = m + 1 ; i < k ; i ++ ) if ( height [ i ] <= height [ m ] ) a += 1 ; if ( a == 0 ) return 1 ; else { for ( i = m + 1 ; i < k ; i ++ ) if ( height [ i ] <= height [ m ] && route ( i ) > max ) max = route ( i ) ; return ( max + 1 ) ; } } int main ( ) { int i , ans [ 25 ] , a = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & height [ i ] ) ; for ( i = 0 ; i < k ; i ++ ) ans [ i ] = route ( i ) ; for ( i = 0 ; i < k ; i ++ ) if ( ans [ i ] > a ) a = ans [ i ] ; printf ( "%d\n" , a ) ; }
int a [ 29 ] , max [ 29 ] = { 0 } , count [ 29 ] = { 0 } ; int N ; int select ( int x ) { if ( count [ x ] == 0 ) { int i ; for ( i = x + 1 ; i <= N ; i ++ ) { if ( a [ x ] >= a [ i ] ) { if ( max [ x ] <= select ( i ) ) { max [ x ] = select ( i ) + 1 ; } } } if ( max [ x ] == 0 ) { max [ x ] = 1 ; } count [ x ] = 1 ; } return max [ x ] ; } main ( ) { int maxm ; scanf ( "%d" , & N ) ; for ( int j = 1 ; j <= N ; j ++ ) { scanf ( "%d" , & a [ j ] ) ; } maxm = select ( 1 ) ; for ( int k = 2 ; k <= N ; k ++ ) { if ( maxm < select ( k ) ) { maxm = select ( k ) ; } } printf ( "%d" , maxm ) ; }
int zui ( int k , int m , int a [ ] ) { int s = 1 , i = m + 1 , max = 0 ; if ( m == k ) s = 1 ; else { for ( i = m + 1 ; i <= k ; i ++ ) { if ( a [ k - m ] <= a [ k - i ] ) { if ( max < zui ( k , i , a ) ) { max = zui ( k , i , a ) ; } } } s = s + max ; } return s ; } int main ( ) { int i , k , a [ 25 ] , max = 0 , s ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 1 ; i < k ; i ++ ) { s = zui ( k , i , a ) ; if ( s > max ) max = s ; } printf ( "%d" , max ) ; return 0 ; }
int l , n ; int a [ 30 ] ; void measure ( int k , int s , int m ) { int i ; if ( k == n ) { if ( s > l ) l = s ; } else { for ( i = k + 1 ; i <= n ; i ++ ) if ( a [ i - 1 ] <= m ) measure ( i , s + 1 , a [ i - 1 ] ) ; measure ( n , s , m ) ; } } void main ( ) { int i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; measure ( 0 , 0 , 10000 ) ; printf ( "%d\n" , l ) ; }
int main ( ) { int h [ 40 ] ; int num [ 40 ] ; int n ; cin >> n ; for ( int i = 0 ; i != n ; ++ i ) cin >> h [ i ] ; memset ( num , 0 , sizeof ( num ) ) ; num [ 0 ] = 1 ; for ( int i = 1 ; i < n ; ++ i ) { int maxi = 1 ; for ( int j = i - 1 ; j >= 0 ; -- j ) { if ( maxi < num [ j ] + 1 && h [ j ] >= h [ i ] ) maxi = num [ j ] + 1 ; } num [ i ] = maxi ; } int temp = 0 ; for ( int i = 0 ; i != n ; ++ i ) { if ( num [ i ] > temp ) temp = num [ i ] ; } cout << temp << endl ; return 0 ; }
main ( ) { int a , i , j , k ; scanf ( "%d" , & a ) ; int b [ a ] , c [ a ] , d [ 25 ] ; for ( i = 0 ; i <= a - 1 ; i ++ ) scanf ( "%d" , & b [ a - 1 - i ] ) ; c [ 0 ] = 1 ; for ( i = 1 ; i <= a - 1 ; i ++ ) { for ( k = 0 ; k <= 24 ; k ++ ) d [ k ] = 0 ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( b [ i ] >= b [ j ] ) d [ j ] = c [ j ] + 1 ; if ( b [ i ] < b [ j ] && j == 0 ) d [ j ] = 1 ; } for ( k = 0 ; k <= 23 ; k ++ ) if ( d [ k ] > d [ k + 1 ] ) { int n = d [ k ] ; d [ k ] = d [ k + 1 ] ; d [ k + 1 ] = n ; } c [ i ] = d [ 24 ] ; } for ( i = 0 ; i <= a - 2 ; i ++ ) if ( c [ i ] > c [ i + 1 ] ) { int n = c [ i ] ; c [ i ] = c [ i + 1 ] ; c [ i + 1 ] = n ; } printf ( "%d" , c [ a - 1 ] ) ; }
int main ( ) { int a [ 30 ] [ 3 ] , i , j , n , m , max ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] [ 1 ] ; a [ i ] [ 2 ] = 0 ; } a [ 1 ] [ 2 ] = 1 ; m = 0 ; for ( i = 2 ; i <= n ; i ++ ) { max = 0 ; for ( j = 1 ; j <= i - 1 ; j ++ ) if ( ( a [ j ] [ 1 ] >= a [ i ] [ 1 ] ) && ( a [ j ] [ 2 ] > max ) ) max = a [ j ] [ 2 ] ; a [ i ] [ 2 ] = max + 1 ; if ( a [ i ] [ 2 ] > m ) m = a [ i ] [ 2 ] ; } cout << m << endl ; return 0 ; }
int main ( ) { int n ; cin >> n ; int a [ 25 ] ; int rem [ 25 ] = { 1 } ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; int MMax = 0 ; for ( int i = 1 ; i < n ; i ++ ) { int max = 0 ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( j < max ) break ; if ( a [ j ] >= a [ i ] && rem [ j ] > max ) max = rem [ j ] ; } rem [ i ] = max + 1 ; if ( rem [ i ] > MMax ) MMax = rem [ i ] ; } cout << MMax << endl ; return 0 ; }
const long maxn = 25 ; long n ; long a [ maxn + 10 ] ; long ans ; void dfs ( long h , long maxH , long now ) { long i ; if ( h == n + 1 ) { if ( now > ans ) ans = now ; return ; } dfs ( h + 1 , maxH , now ) ; if ( a [ h ] <= maxH ) dfs ( h + 1 , a [ h ] , now + 1 ) ; } main ( ) { long i ; scanf ( "%ld" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%ld" , a + i ) ; } dfs ( 1 , 1 << 30 , 0 ) ; printf ( "%ld\n" , ans ) ; return 0 ; }
main ( ) { char g ; int c , d , f , a [ 25 ] , b [ 25 ] , k , e [ 25 ] ; e [ 0 ] = 1 ; scanf ( "%d" , & k ) ; for ( c = 0 ; ; c ++ ) { scanf ( "%d%c" , & a [ c ] , & g ) ; if ( g != ' ' ) break ; else ; } for ( c = 0 ; c <= k - 1 ; c ++ ) { b [ c ] = a [ k - 1 - c ] ; } for ( c = 1 ; c <= k - 1 ; c ++ ) { for ( d = 0 , e [ c ] = 0 ; d <= c - 1 ; d ++ ) { if ( b [ c ] >= b [ d ] && e [ c ] <= e [ d ] ) e [ c ] = e [ d ] ; else ; } e [ c ] ++ ; } for ( c = 0 , f = e [ 0 ] ; c <= k - 1 ; c ++ ) { if ( f <= e [ c ] ) f = e [ c ] ; else ; } printf ( "%d" , f ) ; }
int max ( int x , int y ) { if ( x >= y ) return x ; else return y ; } int haha ( int a [ ] , int b [ ] , int k ) { int i , j , c = 0 ; b [ k - 1 ] = 1 ; for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < k ; j ++ ) { if ( a [ i ] >= a [ j ] ) c = max ( c , b [ j ] ) ; } b [ i ] = c + 1 ; c = 0 ; } for ( i = k - 1 ; i > - 1 ; i -- ) c = max ( c , b [ i ] ) ; return c ; } int main ( ) { int a [ 25 ] , b [ 25 ] = { 0 } , k , i ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , haha ( a , b , k ) ) ; }
int a [ max ] , k ; int find ( int p ) { int i , temp = 0 , t ; if ( p == k - 1 ) return 1 ; for ( i = p + 1 ; i <= k - 1 ; i ++ ) { if ( a [ p ] >= a [ i ] ) { t = find ( i ) ; if ( temp < t ) temp = t ; } } return temp + 1 ; } main ( ) { int i , j , p = 0 , t , ans = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i <= k - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i <= k - 1 ; i ++ ) { t = find ( i ) ; if ( ans < t ) ans = t ; } printf ( "%d" , ans ) ; }
int a [ 36 ] , f [ 36 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int k , i , j ; int ans = 0 ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; f [ 0 ] = 0 ; for ( i = 1 ; i <= k ; i ++ ) { f [ i ] = 1 ; for ( j = 1 ; j < i ; j ++ ) if ( a [ i ] <= a [ j ] ) f [ i ] = max ( f [ i ] , f [ j ] + 1 ) ; ans = max ( ans , f [ i ] ) ; } cout << ans << endl ; return 0 ; }
int dert ( int , int ) ; void main ( ) { int k , missile [ 25 ] , i , result , donemax [ 25 ] ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & missile [ i ] ) ; donemax [ k - 1 ] = 1 ; for ( i = k - 2 ; i >= 0 ; i -- ) { int max = dert ( missile [ i ] , missile [ i + 1 ] ) * donemax [ i + 1 ] , j ; for ( j = 1 ; j < k - i ; j ++ ) if ( max < dert ( missile [ i ] , missile [ i + j ] ) * donemax [ i + j ] ) max = dert ( missile [ i ] , missile [ i + j ] ) * donemax [ i + j ] ; donemax [ i ] = max + 1 ; } result = donemax [ k - 1 ] ; for ( i = k - 2 ; i >= 0 ; i -- ) { if ( donemax [ i ] > result ) result = donemax [ i ] ; } printf ( "%d\n" , result ) ; } int dert ( int x , int y ) { int z ; if ( x >= y ) z = 1 ; else z = 0 ; return z ; }
void main ( ) { int k , i , j , h [ 25 ] = { 0 } , n [ 25 ] = { 1 } , num ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & h [ i ] ) ; for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < k ; j ++ ) { if ( h [ i ] >= h [ j ] && n [ i ] < n [ j ] + 1 ) n [ i ] = n [ j ] + 1 ; } } num = n [ 0 ] ; for ( i = 0 ; i < k ; i ++ ) { if ( num < n [ i ] ) num = n [ i ] ; } printf ( "%d" , num + 1 ) ; }
main ( ) { int k ; int a [ 26 ] = { 0 } , b [ 26 ] = { 0 } ; int i , j , r ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = k ; i >= 1 ; i -- ) { r = 0 ; for ( j = i ; j <= k ; j ++ ) { if ( a [ i ] >= a [ j ] ) r = b [ j ] + 1 ; if ( b [ i ] < r ) b [ i ] = r ; } } r = 0 ; for ( i = 1 ; i <= k ; i ++ ) if ( b [ i ] > r ) r = b [ i ] ; printf ( "%d" , r ) ; }
void main ( ) { int n , a [ 30 ] , i , b [ 30 ] , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] >= a [ i ] ) { if ( b [ j ] >= b [ i ] ) b [ i ] = b [ j ] + 1 ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) b [ j + 1 ] = b [ j ] ; } printf ( "%d\n" , b [ n - 1 ] ) ; }
int rec [ 26 ] ; int k , sum , i , j ; int n [ 26 ] ; int max ( int a , int b ) { if ( a > b ) return ( a ) ; else return ( b ) ; } main ( ) { scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & rec [ i ] ) ; for ( i = 1 ; i <= k ; i ++ ) n [ i ] = 1 ; for ( i = 2 ; i <= k ; i ++ ) for ( j = 1 ; j < i ; j ++ ) if ( rec [ i ] <= rec [ j ] ) n [ i ] = max ( n [ i ] , n [ j ] + 1 ) ; sum = 0 ; for ( i = 1 ; i <= k ; i ++ ) sum = max ( sum , n [ i ] ) ; printf ( "%d" , sum ) ; }
main ( ) { int a [ 25 ] , b [ 25 ] , k , i , j , max = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , a + i ) ; for ( i = k - 1 ; i >= 0 ; i -- ) { b [ i ] = 1 ; for ( j = i + 1 ; j < k ; j ++ ) if ( a [ j ] <= a [ i ] ) if ( b [ j ] + 1 > b [ i ] ) b [ i ] = b [ j ] + 1 ; if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
main ( ) { int a [ 25 ] , b [ 25 ] , k , i , j , max = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , a + i ) ; b [ i ] = 1 ; for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] && b [ j ] + 1 > b [ i ] ) b [ i ] = b [ j ] + 1 ; if ( b [ i ] > max ) max = b [ i ] ; } printf ( "%d" , max ) ; }
main ( ) { int a [ 25 ] , b [ 25 ] , k , i , j , m = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , a + i ) ; for ( i = 0 ; i < k ; i ++ ) { b [ i ] = 1 ; for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] >= a [ i ] && b [ j ] + 1 > b [ i ] ) b [ i ] = b [ j ] + 1 ; if ( b [ i ] > m ) m = b [ i ] ; } printf ( "%d" , m ) ; }
main ( ) { int a [ 50 ] = { 0 } ; int f [ 50 ] , max , i , j , n ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 0 ] ) ; f [ 0 ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { scanf ( " %d" , & a [ i ] ) ; f [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] >= a [ i ] ) { if ( f [ j ] + 1 > f [ i ] ) f [ i ] = f [ j ] + 1 ; else f [ i ] = f [ i ] ; } } } max = f [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( f [ i ] > max ) max = f [ i ] ; } printf ( "%d\n" , max ) ; }
int main ( ) { int i , j , k ; int max = 0 ; int maxall = 1 ; int num [ 10000 ] ; int hight [ 10000 ] ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { cin >> hight [ i ] ; num [ i ] = 0 ; } num [ 0 ] = 1 ; for ( i = 1 ; i < k ; i ++ ) { max = 1 ; for ( j = 0 ; j < i ; j ++ ) { if ( hight [ j ] >= hight [ i ] && max < num [ j ] + 1 ) max = num [ j ] + 1 ; } num [ i ] = max ; if ( num [ i ] > maxall ) maxall = num [ i ] ; } cout << maxall << endl ; return 0 ; }
main ( ) { int b [ 26 ] , h [ 26 ] , k , i , j , t = 0 ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) scanf ( "%d" , & h [ i ] ) ; for ( i = 1 ; i <= k ; i ++ ) { for ( j = 1 , t = 0 ; j < i ; j ++ ) { if ( h [ j ] >= h [ i ] ) { if ( b [ j ] > t ) t = b [ j ] ; } } if ( t == 0 ) b [ i ] = 1 ; else b [ i ] = t + 1 ; } for ( i = 1 , t = 0 ; i <= k ; i ++ ) { if ( b [ i ] > t ) t = b [ i ] ; } printf ( "%d" , t ) ; getchar ( ) ; getchar ( ) ; }
int max = 0 , n = 0 ; int a [ 30 ] , line = 0 , f [ 30 ] = { 0 } , b [ 30 ] = { 0 } ; void main ( ) { int k , i , n = 0 ; void missile ( int i , int k ) ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( line < a [ i ] ) line = a [ i ] ; } missile ( 0 , k ) ; printf ( "%d" , max ) ; } void missile ( int i , int k ) { int j ; for ( j = 0 ; j < 2 ; j ++ ) { if ( j == 0 && i != k - 1 ) { missile ( i + 1 , k ) ; } else { if ( a [ i ] <= line || i == k - 1 ) { if ( a [ i ] <= line ) { b [ i ] = line ; line = a [ i ] ; n ++ ; f [ i ] = 1 ; } if ( i == k - 1 ) { if ( max < n ) max = n ; printf ( "\n" ) ; } else missile ( i + 1 , k ) ; if ( f [ i ] == 1 ) { n -- ; line = b [ i ] ; f [ i ] = 0 ; } } } } }
int k ; int main ( ) { int Max ( int a , int b ) ; int height [ 100 ] ; int dp [ 100 ] ; char c ; int i = 0 , temp = 0 , n , j , dpmax = 0 ; scanf ( "%d" , & n ) ; n = n - 1 ; for ( i = 0 ; i <= n ; i ++ ) { scanf ( "%d" , & height [ i ] ) ; } for ( i = 0 ; i <= n ; i ++ ) { dp [ i ] = 1 ; for ( j = 0 ; j < i ; j ++ ) { if ( height [ i ] <= height [ j ] ) dp [ i ] = Max ( dp [ j ] + 1 , dp [ i ] ) ; } } for ( i = 0 ; i <= n ; i ++ ) { dpmax = Max ( dpmax , dp [ i ] ) ; } printf ( "%d" , dpmax ) ; return 0 ; } int Max ( int a , int b ) { k = ( a < b ? b : a ) ; return ( k ) ; }
main ( ) { int n , i , m , j ; int a [ 25 ] , b [ 25 ] ; m = 0 ; scanf ( "%d" , & n ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 1 ; } for ( j = 1 ; j < n ; j ++ ) { for ( i = 0 ; i < j ; i ++ ) { if ( a [ j ] >= a [ i ] ) { if ( ( b [ i ] + 1 ) >= b [ j ] ) b [ j ] = b [ i ] + 1 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] >= m ) m = b [ i ] ; } printf ( "%d" , m ) ; }
int main ( ) { int fff ( int a [ ] , int k ) ; int i , n , a [ 25 ] , sum ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; sum = fff ( a , 1 ) ; for ( i = 2 ; i < n + 1 ; i ++ ) if ( sum < fff ( a , i ) ) sum = fff ( a , i ) ; printf ( "%d" , sum ) ; } int fff ( int a [ ] , int k ) { int t = 0 , i ; if ( k == 0 ) { t = 0 ; } if ( k == 1 ) { t = 1 ; } if ( k > 1 ) { t = 1 ; for ( i = 1 ; i < k ; i ++ ) { if ( a [ k - 1 ] <= a [ i - 1 ] ) { if ( ( fff ( a , i ) + 1 ) > t ) t = fff ( a , i ) + 1 ; } } } return t ; }
int height [ 26 ] ; int cal ( int N , int M ) { int i , max , sub ; max = 0 ; if ( M == 0 ) { return 1 ; } for ( i = N + 1 ; i <= N + M ; i ++ ) { if ( height [ N ] >= height [ i ] ) { sub = cal ( i , N + M - i ) ; if ( sub >= max ) { max = sub ; } } } return max + 1 ; } int main ( ) { int k , i ; scanf ( "%d\n" , & k ) ; height [ 0 ] = 10000000 ; scanf ( "%d" , & height [ 1 ] ) ; for ( i = 1 ; i <= k - 1 ; i ++ ) { scanf ( " %d" , & height [ i + 1 ] ) ; } printf ( "%d" , cal ( 0 , k + 1 ) - 2 ) ; return 0 ; }
int cal ( int * p , int N , int M ) { int i , max , sub ; max = 0 ; if ( M == 0 ) { return 1 ; } for ( i = N + 1 ; i <= N + M ; i ++ ) { if ( * ( p + N ) >= * ( p + i ) ) { sub = cal ( p , i , N + M - i ) ; if ( sub >= max ) { max = sub ; } } } return max + 1 ; } int main ( ) { int k , i ; scanf ( "%d\n" , & k ) ; int height [ 26 ] ; height [ 0 ] = 10000000 ; scanf ( "%d" , & height [ 1 ] ) ; for ( i = 1 ; i <= k - 1 ; i ++ ) { scanf ( " %d" , & height [ i + 1 ] ) ; } printf ( "%d" , cal ( height , 0 , k + 1 ) - 2 ) ; return 0 ; }
int maxii ( int n , int * a ) { int k , i , s ; k = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( ( a [ i ] <= a [ 0 ] ) && ( maxii ( n - i , a + i ) > ( k - 1 ) ) ) k = maxii ( n - i , a + i ) + 1 ; } return k ; } main ( ) { int n , * k , i , j , c ; int a [ 25 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; k = ( int * ) malloc ( n * sizeof ( int ) ) ; c = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( c < maxii ( n - j , a + j ) ) c = maxii ( n - j , a + j ) ; } printf ( "%d" , c ) ; }
void main ( ) { int i , j , n , s , k , d ; int a [ 26 ] , b [ 26 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 0 ; } b [ n ] = 1 ; for ( i = n - 1 ; i >= 1 ; i -- ) { for ( j = i + 1 ; j <= n ; j ++ ) if ( ( a [ j ] <= a [ i ] ) && ( b [ j ] > b [ i ] ) ) b [ i ] = b [ j ] ; b [ i ] = b [ i ] + 1 ; } s = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( s < b [ i ] ) s = b [ i ] ; } printf ( "%d" , s ) ; }
main ( ) { int n , i , k , j , x , y , max ; scanf ( "%d" , & n ) ; int a [ 26 ] , b [ 26 ] ; for ( i = n - 1 ; i >= 0 ; i -- ) scanf ( "%d" , & a [ i ] ) ; b [ 0 ] = 1 ; i = 0 ; while ( i <= n - 1 ) { j = 0 ; x = 0 ; while ( j < i ) { if ( a [ j ] <= a [ i ] ) { if ( b [ j ] >= x ) x = b [ j ] ; } j ++ ; } b [ i ] = x + 1 ; i ++ ; } max = 1 ; for ( i = 0 ; i <= n - 1 ; i ++ ) if ( b [ i ] >= max ) max = b [ i ] ; printf ( "%d" , max ) ; }
int main ( ) { int k , height [ 25 ] , maxC [ 25 ] = { 0 } , j , i , max = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & height [ i ] ) ; for ( j = 0 , max = 0 ; j < i ; j ++ ) { if ( height [ j ] >= height [ i ] ) if ( maxC [ j ] > max ) max = maxC [ j ] ; } if ( max == 0 ) maxC [ i ] = 1 ; else maxC [ i ] = ++ max ; } for ( i = 1 , max = 0 ; i < k ; i ++ ) if ( maxC [ i ] > max ) max = maxC [ i ] ; printf ( "%d\n" , max ) ; return 0 ; }
int main ( ) { int a [ 30 ] , count = 0 , n , temp , i ; cin >> n ; while ( n -- ) { cin >> temp ; for ( i = 0 ; i < count ; i ++ ) if ( temp > a [ i ] ) { a [ i ] = temp ; break ; } if ( i >= count ) { a [ i ] = temp ; count ++ ; } } cout << count << endl ; return 0 ; }
int main ( ) { int k , i , j , m = 0 , n , max = 0 ; int a [ 25 ] , t [ 25 ] = { 0 } , s [ 25 ] = { 0 } ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) scanf ( "%d" , & a [ i ] ) ; t [ k - 1 ] = 1 ; if ( k == 1 ) printf ( "1\n" ) ; else { for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < k ; j ++ ) { if ( a [ j ] <= a [ i ] ) { s [ m ] = t [ j ] ; m ++ ; } } m = 0 ; max = s [ 0 ] ; for ( n = 1 ; n < 25 ; n ++ ) { if ( s [ n ] > max ) max = s [ n ] ; } for ( j = 0 ; j < 25 ; j ++ ) s [ j ] = 0 ; t [ i ] = max + 1 ; } max = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( t [ i ] > max ) max = t [ i ] ; } printf ( "%d\n" , max ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int k ; scanf ( "%d" , & k ) ; int i , j , h [ 26 ] , amount [ 26 ] , s = 0 ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & h [ i ] ) ; amount [ i ] = 1 ; } for ( i = k - 2 ; i >= 0 ; i -- ) { for ( j = i + 1 ; j < k ; j ++ ) { if ( ( h [ i ] >= h [ j ] ) && ( amount [ i ] < amount [ j ] + 1 ) ) amount [ i ] = amount [ j ] + 1 ; } } for ( i = 0 ; i < k ; i ++ ) { if ( amount [ i ] > s ) s = amount [ i ] ; } printf ( "%d\n" , s ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int a [ n ] , b [ n ] , m = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = 1 ; } for ( int i = n - 1 ; i >= 0 ; i -- ) for ( int j = i - 1 ; j >= 0 ; j -- ) if ( a [ j ] >= a [ i ] && b [ j ] < b [ i ] + 1 ) b [ j ] = b [ i ] + 1 ; for ( int i = 0 ; i < n ; i ++ ) if ( m < b [ i ] ) m = b [ i ] ; printf ( "%d" , m ) ; }
int dd [ 25 ] ; int k ; int maxnum = 0 ; void fun ( int p , int num , int hight ) { if ( p > k ) { if ( num > maxnum ) maxnum = num ; return ; } if ( dd [ p ] <= hight ) { fun ( p + 1 , num + 1 , dd [ p ] ) ; fun ( p + 1 , num , hight ) ; } else fun ( p + 1 , num , hight ) ; return ; } int main ( ) { cin >> k ; for ( int i = 0 ; i < k ; i ++ ) cin >> dd [ i ] ; fun ( 0 , 0 , 65535 ) ; cout << maxnum - 1 << endl ; }
void main ( ) { int a [ 25 ] , max [ 25 ] = { 0 } , max1 = 0 ; int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) max [ i ] = 1 ; max1 = 1 ; for ( i = 1 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( ( a [ j ] >= a [ i ] ) && ( max [ j ] + 1 > max [ i ] ) ) max [ i ] = max [ j ] + 1 ; if ( max [ i ] > max1 ) max1 = max [ i ] ; } printf ( "%d\n" , max1 ) ; }
int compare ( int x , int y ) { if ( x <= y ) { x = ( y + 1 ) ; } return x ; } int main ( void ) { int i , n , r , a , j ; scanf ( "%d" , & n ) ; int * p = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i != n ; i ++ ) { scanf ( "%d" , & p [ i ] ) ; } int * q = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = 0 ; j != n ; j ++ ) { q [ j ] = 1 ; for ( r = 0 ; r != j ; r ++ ) { if ( p [ j ] <= p [ r ] ) { q [ j ] = compare ( q [ j ] , q [ r ] ) ; } } } int max ; max = q [ 0 ] ; for ( a = 0 ; a < n ; a ++ ) { if ( q [ a ] > max ) max = q [ a ] ; } printf ( "%d" , max ) ; return 0 ; }
int compare ( int x , int y ) { if ( x <= y ) x = y + 1 ; return x ; } main ( ) { int i , n , r , a , j ; scanf ( "%d" , & n ) ; int * p = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & p [ i ] ) ; int * q = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( j = n - 1 ; j >= 0 ; j -- ) { q [ j ] = 1 ; for ( r = n - 1 ; r != j ; r -- ) { if ( p [ j ] >= p [ r ] ) q [ j ] = compare ( q [ j ] , q [ r ] ) ; } } int max ; max = q [ 0 ] ; for ( a = 1 ; a < n ; a ++ ) { if ( q [ a ] > max ) max = q [ a ] ; } printf ( "%d" , max ) ; return 0 ; }
void main ( ) { int i , j , k , t , a [ 10000 ] , f [ 10000 ] , ans = 0 ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; t = 0 ; for ( j = 1 ; j < i ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] > t ) t = f [ j ] ; f [ i ] = t + 1 ; if ( f [ i ] > ans ) ans = f [ i ] ; } printf ( "%d\n" , ans ) ; return 0 ; }
static int days [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; static int isleapyear ( int year ) { return ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ; } int main ( ) { int year , month , day ; scanf ( "%d %d %d" , & year , & month , & day ) ; if ( isleapyear ( year ) && month == 2 && ( day < 1 || day > 29 ) ) { printf ( "Illegal input.\n" ) ; return - 1 ; } if ( ! isleapyear ( year ) && ( day < 1 || day > days [ month ] ) ) { printf ( "Illegal input.\n" ) ; return - 1 ; } int n = 0 ; int i ; for ( i = 1 ; i < month ; i ++ ) { n += days [ i ] ; } n += day ; if ( isleapyear ( year ) && month > 2 ) n ++ ; printf ( "%d" , n ) ; }
int main ( ) { int y , m , d , i , number = 0 ; cin >> y >> m >> d ; int a [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int b [ 12 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; if ( y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ) { for ( i = 1 ; i <= m - 1 ; i ++ ) number = number + b [ i - 1 ] ; number = number + d ; } else { for ( i = 1 ; i <= m - 1 ; i ++ ) number = number + a [ i - 1 ] ; number = number + d ; } cout << number << endl ; return 0 ; }
int main ( ) { int nian , yue , ri , tian , i = 1 ; for ( ; i <= 5 ; i = i + 1 ) { scanf ( "%d %d %d\n" , & nian , & yue , & ri ) ; if ( nian % 4 == 0 && nian % 100 != 0 || nian % 100 == 0 && nian % 400 == 0 ) { switch ( yue ) { case 1 : tian = 0 ; break ; case 2 : tian = 31 ; break ; case 3 : tian = 60 ; break ; case 4 : tian = 91 ; break ; case 5 : tian = 121 ; break ; case 6 : tian = 152 ; break ; case 7 : tian = 182 ; break ; case 8 : tian = 213 ; break ; case 9 : tian = 244 ; break ; case 10 : tian = 274 ; break ; case 11 : tian = 305 ; break ; case 12 : tian = 335 ; break ; } } else { switch ( yue ) { case 1 : tian = 0 ; break ; case 2 : tian = 31 ; break ; case 3 : tian = 59 ; break ; case 4 : tian = 90 ; break ; case 5 : tian = 120 ; break ; case 6 : tian = 151 ; break ; case 7 : tian = 181 ; break ; case 8 : tian = 212 ; break ; case 9 : tian = 243 ; break ; case 10 : tian = 273 ; break ; case 11 : tian = 304 ; break ; case 12 : tian = 334 ; break ; } } tian = tian + ri ; printf ( "%d\n" , tian ) ; } return 0 ; }
int main ( ) { int i , year , month , date , num ; for ( i = 1 ; i <= 5 ; i ++ ) { scanf ( "%d %d %d" , & year , & month , & date ) ; switch ( month ) { case 1 : num = 0 ; break ; case 2 : num = 31 ; break ; case 3 : num = 59 ; break ; case 4 : num = 90 ; break ; case 5 : num = 120 ; break ; case 6 : num = 151 ; break ; case 7 : num = 181 ; break ; case 8 : num = 212 ; break ; case 9 : num = 243 ; break ; case 10 : num = 273 ; break ; case 11 : num = 304 ; break ; case 12 : num = 334 ; break ; } if ( ( year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ) && month > 2 ) num += 1 ; num += date ; printf ( "%d\n" , num ) ; } return 0 ; }
main ( ) { int a [ 5 ] , b [ 5 ] , c [ 5 ] , d [ 5 ] , x [ 5 ] , i ; for ( i = 1 ; i <= 5 ; i ++ ) scanf ( "%d %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; for ( i = 1 ; i <= 5 ; i ++ ) { if ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 || a [ i ] % 400 == 0 ) ) x [ i ] = 1 ; else x [ i ] = 0 ; if ( b [ i ] == 1 ) d [ i ] = c [ i ] ; else if ( b [ i ] == 2 ) d [ i ] = c [ i ] + 31 ; else if ( b [ i ] == 3 ) d [ i ] = c [ i ] + 31 + 28 + x [ i ] ; else if ( b [ i ] == 4 ) d [ i ] = c [ i ] + 31 + 28 + 31 + x [ i ] ; else if ( b [ i ] == 5 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + x [ i ] ; else if ( b [ i ] == 6 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + x [ i ] ; else if ( b [ i ] == 7 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + x [ i ] ; else if ( b [ i ] == 8 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + x [ i ] ; else if ( b [ i ] == 9 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + x [ i ] ; else if ( b [ i ] == 10 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + x [ i ] ; else if ( b [ i ] == 11 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + x [ i ] ; else if ( b [ i ] == 12 ) d [ i ] = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + x [ i ] ; printf ( "%d\n" , d [ i ] ) ; } }
int main ( ) { int year [ 5 ] , month [ 5 ] , day [ 5 ] , l [ 5 ] = { 0 } , i = 0 ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d%d%d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; } for ( i = 0 ; i < 5 ; i ++ ) { if ( ( year [ i ] % 4 == 0 ) && ( year [ i ] % 100 != 0 ) || ( year [ i ] % 400 == 0 ) ) { switch ( month [ i ] ) { case 12 : l [ i ] = l [ i ] + 30 ; case 11 : l [ i ] = l [ i ] + 31 ; case 10 : l [ i ] = l [ i ] + 30 ; case 9 : l [ i ] = l [ i ] + 31 ; case 8 : l [ i ] = l [ i ] + 31 ; case 7 : l [ i ] = l [ i ] + 30 ; case 6 : l [ i ] = l [ i ] + 31 ; case 5 : l [ i ] = l [ i ] + 30 ; case 4 : l [ i ] = l [ i ] + 31 ; case 3 : l [ i ] = l [ i ] + 29 ; case 2 : l [ i ] = l [ i ] + 31 ; case 1 : l [ i ] = l [ i ] ; } } else { switch ( month [ i ] ) { case 12 : l [ i ] = l [ i ] + 30 ; case 11 : l [ i ] = l [ i ] + 31 ; case 10 : l [ i ] = l [ i ] + 30 ; case 9 : l [ i ] = l [ i ] + 31 ; case 8 : l [ i ] = l [ i ] + 31 ; case 7 : l [ i ] = l [ i ] + 30 ; case 6 : l [ i ] = l [ i ] + 31 ; case 5 : l [ i ] = l [ i ] + 30 ; case 4 : l [ i ] = l [ i ] + 31 ; case 3 : l [ i ] = l [ i ] + 28 ; case 2 : l [ i ] = l [ i ] + 31 ; case 1 : l [ i ] = l [ i ] ; } } l [ i ] = l [ i ] + day [ i ] ; } for ( i = 0 ; i < 5 ; i ++ ) printf ( "%d\n" , l [ i ] ) ; return 0 ; }
int main ( ) { int year , month , day , a , i = 1 ; while ( i <= 5 ) { scanf ( "%d %d %d" , & year , & month , & day ) ; if ( ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) == 1 ) { switch ( month ) { case 1 : a = day ; break ; case 2 : a = 31 + day ; break ; case 3 : a = 31 + 29 + day ; break ; case 4 : a = 31 + 29 + 31 + day ; break ; case 5 : a = 31 + 29 + 31 + 30 + day ; break ; case 6 : a = 31 + 29 + 31 + 30 + 31 + day ; break ; case 7 : a = 31 + 29 + 31 + 30 + 31 + 30 + day ; break ; case 8 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + day ; break ; case 9 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + day ; break ; case 10 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day ; break ; case 11 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; break ; case 12 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; break ; default : printf ( "error\n" ) ; } } else { switch ( month ) { case 1 : a = day ; break ; case 2 : a = 31 + day ; break ; case 3 : a = 31 + 28 + day ; break ; case 4 : a = 31 + 28 + 31 + day ; break ; case 5 : a = 31 + 28 + 31 + 30 + day ; break ; case 6 : a = 31 + 28 + 31 + 30 + 31 + day ; break ; case 7 : a = 31 + 28 + 31 + 30 + 31 + 30 + day ; break ; case 8 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day ; break ; case 9 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day ; break ; case 10 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day ; break ; case 11 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; break ; case 12 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; break ; default : printf ( "error\n" ) ; } } printf ( "%d\n" , a ) ; i = i + 1 ; } return 0 ; }
void main ( ) { int i , a [ 5 ] , m [ 5 ] , d [ 5 ] , c [ 5 ] , t [ 5 ] ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] , & m [ i ] , & d [ i ] ) ; if ( ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 ) || a [ i ] % 400 == 0 ) == 1 ) { switch ( m [ i ] ) { case 1 : c [ i ] = 0 ; break ; case 2 : c [ i ] = 31 ; break ; case 3 : c [ i ] = 60 ; break ; case 4 : c [ i ] = 91 ; break ; case 5 : c [ i ] = 121 ; break ; case 6 : c [ i ] = 152 ; break ; case 7 : c [ i ] = 182 ; break ; case 8 : c [ i ] = 213 ; break ; case 9 : c [ i ] = 244 ; break ; case 10 : c [ i ] = 274 ; break ; case 11 : c [ i ] = 305 ; break ; case 12 : c [ i ] = 335 ; break ; } } else { switch ( m [ i ] ) { case 1 : c [ i ] = 0 ; break ; case 2 : c [ i ] = 31 ; break ; case 3 : c [ i ] = 59 ; break ; case 4 : c [ i ] = 90 ; break ; case 5 : c [ i ] = 120 ; break ; case 6 : c [ i ] = 151 ; break ; case 7 : c [ i ] = 181 ; break ; case 8 : c [ i ] = 212 ; break ; case 9 : c [ i ] = 243 ; break ; case 10 : c [ i ] = 273 ; break ; case 11 : c [ i ] = 304 ; break ; case 12 : c [ i ] = 334 ; break ; } } t [ i ] = c [ i ] + d [ i ] ; printf ( "%d\n" , t [ i ] ) ; } }
void main ( ) { int y , m , d , a , i , ans ; for ( i = 1 ; i <= 5 ; i ++ ) { scanf ( "%d%d%d" , & y , & m , & d ) ; if ( y % 4 != 0 ) a = 1 ; else if ( y % 100 != 0 ) a = 0 ; else if ( y % 400 != 0 ) a = 1 ; else a = 0 ; if ( a ) { switch ( m ) { case 1 : ans = d ; break ; case 2 : ans = 31 + d ; break ; case 3 : ans = 59 + d ; break ; case 4 : ans = 90 + d ; break ; case 5 : ans = 120 + d ; break ; case 6 : ans = 151 + d ; break ; case 7 : ans = 181 + d ; break ; case 8 : ans = 212 + d ; break ; case 9 : ans = 243 + d ; break ; case 10 : ans = 273 + d ; break ; case 11 : ans = 304 + d ; break ; case 12 : ans = 334 + d ; break ; } } else { switch ( m ) { case 1 : ans = d ; break ; case 2 : ans = 31 + d ; break ; case 3 : ans = 60 + d ; break ; case 4 : ans = 91 + d ; break ; case 5 : ans = 121 + d ; break ; case 6 : ans = 152 + d ; break ; case 7 : ans = 182 + d ; break ; case 8 : ans = 213 + d ; break ; case 9 : ans = 244 + d ; break ; case 10 : ans = 274 + d ; break ; case 11 : ans = 305 + d ; break ; case 12 : ans = 335 + d ; break ; } } printf ( "%d\n" , ans ) ; } }
int main ( ) { int year , month , day , b , i ; for ( i = 1 ; i <= 5 ; ++ i ) { int count ( int month , int year , int day ) ; scanf ( "%d %d %d" , & year , & month , & day ) ; b = count ( month , year , day ) ; printf ( "%d\n" , b ) ; } scanf ( "%d" , & b ) ; return 0 ; } int count ( int month , int year , int day ) { int a ; if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) { switch ( month ) { case ( 1 ) : a = day ; break ; case ( 2 ) : a = 31 + day ; break ; case ( 3 ) : a = 60 + day ; break ; case ( 4 ) : a = 91 + day ; break ; case ( 5 ) : a = 121 + day ; break ; case ( 6 ) : a = 152 + day ; break ; case ( 7 ) : a = 182 + day ; break ; case ( 8 ) : a = 213 + day ; break ; case ( 9 ) : a = 244 + day ; break ; case ( 10 ) : a = 274 + day ; break ; case ( 11 ) : a = 305 + day ; break ; case ( 12 ) : a = 335 + day ; break ; } } else { switch ( month ) { case ( 1 ) : a = day ; break ; case ( 2 ) : a = 31 + day ; break ; case ( 3 ) : a = 59 + day ; break ; case ( 4 ) : a = 90 + day ; break ; case ( 5 ) : a = 120 + day ; break ; case ( 6 ) : a = 151 + day ; break ; case ( 7 ) : a = 181 + day ; break ; case ( 8 ) : a = 212 + day ; break ; case ( 9 ) : a = 243 + day ; break ; case ( 10 ) : a = 273 + day ; break ; case ( 11 ) : a = 304 + day ; break ; case ( 12 ) : a = 334 + day ; break ; } } return ( a ) ; }
int main ( ) { int A , B , C , d , z , leap , i ; i = 1 ; while ( i <= 5 ) { scanf ( "%d %d %d\n" , & A , & B , & C ) ; if ( A % 4 == 0 ) { if ( A % 100 == 0 ) { if ( A % 400 == 0 ) leap = 1 ; else leap = 0 ; } else leap = 1 ; } else leap = 0 ; if ( leap ) { switch ( B ) { case 1 : d = 0 ; break ; case 2 : d = 31 ; break ; case 3 : d = 60 ; break ; case 4 : d = 91 ; break ; case 5 : d = 121 ; break ; case 6 : d = 152 ; break ; case 7 : d = 182 ; break ; case 8 : d = 213 ; break ; case 9 : d = 244 ; break ; case 10 : d = 274 ; break ; case 11 : d = 305 ; break ; case 12 : d = 335 ; break ; } z = d + C ; } else { switch ( B ) { case 1 : d = 0 ; break ; case 2 : d = 31 ; break ; case 3 : d = 59 ; break ; case 4 : d = 90 ; break ; case 5 : d = 120 ; break ; case 6 : d = 151 ; break ; case 7 : d = 181 ; break ; case 8 : d = 212 ; break ; case 9 : d = 243 ; break ; case 10 : d = 273 ; break ; case 11 : d = 304 ; break ; case 12 : d = 334 ; break ; } z = d + C ; } printf ( "%d\n" , z ) ; i = i + 1 ; } return 0 ; }
int fun ( int y , int m , int d ) { int a [ 12 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int i , c ; c = 0 ; for ( i = 0 ; i < m ; i ++ ) c = c + a [ i ] ; c = c + d ; if ( ( m > 2 ) && ( ( ( y % 4 == 0 ) && ( y % 100 != 0 ) ) || ( y % 400 == 0 ) ) ) c ++ ; return c ; } int main ( ) { int i , a , b , c ; for ( i = 0 ; i < 100 ; i ++ ) if ( cin >> a >> b >> c ) cout << fun ( a , b , c ) << endl ; return 0 ; }
int main ( ) { int a , b , c , i , n = 0 ; scanf ( "%d %d %d" , & a , & b , & c ) ; int m [ 11 ] = { 31 , 0 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; if ( a % 4 == 0 && a % 100 != 0 || a % 100 == 0 && a % 400 == 0 ) m [ 1 ] = 29 ; else m [ 1 ] = 28 ; if ( b == 1 ) n = c ; else { for ( i = 0 ; i < b - 1 ; i ++ ) n = n + m [ i ] ; n = n + c ; } printf ( "%d\n" , n ) ; return 0 ; }
int main ( ) { int a , b , c , d , i ; int j = 1 ; while ( j <= 5 ) { scanf ( "%d %d %d" , & a , & b , & c ) ; i = 1 ; d = 0 ; while ( i < b ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 ) d = d + 31 ; else if ( i == 2 ) { if ( a % 4 == 0 && a % 100 != 0 || a % 400 == 0 ) d = d + 29 ; else d = d + 28 ; } else if ( i == 4 || i == 6 || i == 9 || i == 11 ) d = d + 30 ; i = i + 1 ; } d = d + c ; printf ( "%d\n" , d ) ; j = j + 1 ; } return 0 ; }
int main ( ) { int i , p , n [ 5 ] = { 0 } , year [ 5 ] , month [ 5 ] , day [ 5 ] , days [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d%d%d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; if ( ( year [ i ] % 4 == 0 && year [ i ] % 100 != 0 ) || year [ i ] % 400 == 0 ) days [ 2 ] = 29 ; else days [ 2 ] = 28 ; for ( p = 0 ; p < month [ i ] ; p ++ ) n [ i ] = n [ i ] + days [ p ] ; n [ i ] = n [ i ] + day [ i ] ; } for ( i = 0 ; i < 5 ; i ++ ) printf ( "%d\n" , n [ i ] ) ; return 0 ; }
void main ( ) { int b [ 5 ] , c [ 5 ] , k [ 5 ] ; long a [ 5 ] ; int j ; for ( j = 1 ; j <= 5 ; j ++ ) { scanf ( "%ld %d %d" , & a [ j - 1 ] , & b [ j - 1 ] , & c [ j - 1 ] ) ; } for ( j = 1 ; j <= 5 ; j ++ ) { int i , l , x ; if ( a [ j - 1 ] % 4 != 0 ) l = 28 ; else { if ( ( a [ j - 1 ] % 100 == 0 ) && ( a [ j - 1 ] % 400 != 0 ) ) l = 28 ; else l = 29 ; } x = 0 ; for ( i = 1 ; i <= b [ j - 1 ] - 1 ; i ++ ) { switch ( i ) { case 1 : x = x + 31 ; break ; case 2 : x = x + l ; break ; case 3 : x = x + 31 ; break ; case 4 : x = x + 30 ; break ; case 5 : x = x + 31 ; break ; case 6 : x = x + 30 ; break ; case 7 : x = x + 31 ; break ; case 8 : x = x + 31 ; break ; case 9 : x = x + 30 ; break ; case 10 : x = x + 31 ; break ; case 11 : x = x + 30 ; break ; case 12 : x = x + 31 ; break ; } } x = x + c [ j - 1 ] ; int m ; m = j - 1 ; k [ m ] = x ; printf ( "%d\n" , k [ m ] ) ; } }
int main ( ) { int year ; short month , day , result = 0 , i = 1 ; char odd ; while ( i <= 5 ) { scanf ( "%d%hd%hd" , & year , & month , & day ) ; odd = year % 400 == 0 || year % 4 == 0 && year % 100 != 0 ? 1 : 0 ; switch ( month ) { case 12 : result += 30 ; case 11 : result += 31 ; case 10 : result += 30 ; case 9 : result += 31 ; case 8 : result += 31 ; case 7 : result += 30 ; case 6 : result += 31 ; case 5 : result += 30 ; case 4 : result += 31 ; case 3 : result += 28 ; case 2 : result += 31 ; case 1 : ; } if ( month >= 3 ) result += odd ; result += day ; printf ( "%hd\n" , result ) ; result = 0 ; i ++ ; } return ( 0 ) ; }
int main ( ) { int w , s , i , year , month , day ; int ymd [ 5 ] [ 3 ] ; int num [ 5 ] ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d %d %d\n" , & year , & month , & day ) ; ymd [ i ] [ 0 ] = year ; ymd [ i ] [ 1 ] = month ; ymd [ i ] [ 2 ] = day ; } for ( i = 0 ; i < 5 ; i ++ ) { year = ymd [ i ] [ 0 ] ; month = ymd [ i ] [ 1 ] ; day = ymd [ i ] [ 2 ] ; w = ( year % 4 == 0 && year % 100 != 0 ) || year % 400 != 0 ; switch ( month ) { case 1 : s = 0 ; break ; case 2 : s = 31 ; break ; case 3 : s = 59 ; break ; case 4 : s = 90 ; break ; case 5 : s = 120 ; break ; case 6 : s = 151 ; break ; case 7 : s = 181 ; break ; case 8 : s = 212 ; break ; case 9 : s = 243 ; break ; case 10 : s = 273 ; break ; case 11 : s = 304 ; break ; case 12 : s = 334 ; break ; } if ( w == 0 && month > 2 ) { s = s + 1 ; } num [ i ] = s + day ; } printf ( "%d\n%d\n%d\n%d\n%d\n" , num [ 0 ] , num [ 1 ] , num [ 2 ] , num [ 3 ] , num [ 4 ] ) ; }
int main ( ) { long a , b , c ; int i = 1 ; loop : if ( i <= 5 ) { int n = 0 ; scanf ( "%ld %ld %ld" , & a , & b , & c ) ; switch ( b ) { case 12 : n = n + 30 ; case 11 : n = n + 31 ; case 10 : n = n + 30 ; case 9 : n = n + 31 ; case 8 : n = n + 31 ; case 7 : n = n + 30 ; case 6 : n = n + 31 ; case 5 : n = n + 30 ; case 4 : n = n + 31 ; case 3 : n = n + 28 ; case 2 : n = n + 31 ; case 1 : n = n + c ; break ; } if ( ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) && b >= 3 ) n = n + 1 ; printf ( "%d\n" , n ) ; i ++ ; goto loop ; } return 0 ; }
int main ( ) { int year , month , day , x ; int a2 ; scanf ( "%d %d %d" , & year , & month , & day ) ; if ( year % 4 == 0 && year % 100 != 0 ) { a2 = 29 ; } else { a2 = 28 ; } switch ( month ) { case 1 : x = day ; printf ( "%d" , x ) ; break ; case 2 : x = a1 + day ; printf ( "%d" , x ) ; break ; case 3 : x = a1 + a2 + day ; printf ( "%d" , x ) ; break ; case 4 : printf ( "%d" , x ) ; x = a1 + a2 + a3 + day ; break ; case 5 : x = a1 + a2 + a3 + a4 + day ; printf ( "%d" , x ) ; break ; case 6 : x = a1 + a2 + a3 + a4 + a5 + day ; printf ( "%d" , x ) ; break ; case 7 : x = a1 + a2 + a3 + a4 + a5 + a6 + day ; printf ( "%d" , x ) ; break ; case 8 : x = a1 + a2 + a3 + a4 + a5 + a6 + a7 + day ; printf ( "%d" , x ) ; break ; case 9 : x = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + day ; printf ( "%d" , x ) ; break ; case 10 : x = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + day ; printf ( "%d" , x ) ; break ; case 11 : x = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + day ; printf ( "%d" , x ) ; break ; case 12 : x = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + day ; printf ( "%d" , x ) ; break ; } return 0 ; }
void main ( ) { int a [ 10 ] , b [ 10 ] , c [ 10 ] , n [ 10 ] , d , i ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; } for ( i = 0 ; i < 5 ; i ++ ) { if ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 ) || a [ i ] % 400 == 0 ) { switch ( b [ i ] ) { case 1 : d = 0 ; break ; case 2 : d = 31 ; break ; case 3 : d = 60 ; break ; case 4 : d = 91 ; break ; case 5 : d = 121 ; break ; case 6 : d = 152 ; break ; case 7 : d = 182 ; break ; case 8 : d = 213 ; break ; case 9 : d = 244 ; break ; case 10 : d = 274 ; break ; case 11 : d = 305 ; break ; case 12 : d = 335 ; break ; } n [ i ] = d + c [ i ] ; printf ( "%d\n" , n [ i ] ) ; } else { switch ( b [ i ] ) { case 1 : d = 0 ; break ; case 2 : d = 31 ; break ; case 3 : d = 59 ; break ; case 4 : d = 90 ; break ; case 5 : d = 120 ; break ; case 6 : d = 151 ; break ; case 7 : d = 181 ; break ; case 8 : d = 212 ; break ; case 9 : d = 243 ; break ; case 10 : d = 273 ; break ; case 11 : d = 304 ; break ; case 12 : d = 334 ; break ; } n [ i ] = d + c [ i ] ; printf ( "%d\n" , n [ i ] ) ; } } }
void main ( ) { int i ; int sum_day ( int , int ) ; int leap ( int year ) ; int year [ 5 ] , month [ 5 ] , day [ 5 ] , days [ 5 ] ; for ( i = 0 ; i < 5 ; i ++ ) scanf ( "%d%d%d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; for ( i = 0 ; i < 5 ; i ++ ) { days [ i ] = sum_day ( month [ i ] , day [ i ] ) ; if ( leap ( year [ i ] ) && month [ i ] >= 3 ) days [ i ] = days [ i ] + 1 ; printf ( "%d\n" , days [ i ] ) ; } } int sum_day ( int month , int day ) { int day_tab [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int i ; for ( i = 1 ; i < month ; i ++ ) day += day_tab [ i ] ; return ( day ) ; } int leap ( int year ) { int leap ; leap = year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ; return ( leap ) ; }
void main ( ) { unsigned long int year , month , day , b [ 30 ] [ 3 ] ; int a , c , d , i ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d %d %d" , & year , & month , & day ) ; b [ i ] [ 0 ] = year ; b [ i ] [ 1 ] = month ; b [ i ] [ 2 ] = day ; } for ( i = 0 ; i < 5 ; i ++ ) { year = b [ i ] [ 0 ] ; month = b [ i ] [ 1 ] ; day = b [ i ] [ 2 ] ; a = ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ; if ( a == 1 ) { switch ( month ) { case 1 : c = 0 ; break ; case 2 : c = 31 ; break ; case 3 : c = 31 + 29 ; break ; case 4 : c = 31 + 29 + 31 ; break ; case 5 : c = 31 + 29 + 31 + 30 ; break ; case 6 : c = 31 + 29 + 31 + 30 + 31 ; break ; case 7 : c = 31 + 29 + 31 + 30 + 31 + 30 ; break ; case 8 : c = 31 + 29 + 31 + 30 + 31 + 30 + 31 ; break ; case 9 : c = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ; break ; case 10 : c = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; break ; case 11 : c = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; break ; case 12 : c = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; break ; } } else { switch ( month ) { case 1 : c = 0 ; break ; case 2 : c = 31 ; break ; case 3 : c = 31 + 28 ; break ; case 4 : c = 31 + 28 + 31 ; break ; case 5 : c = 31 + 28 + 31 + 30 ; break ; case 6 : c = 31 + 28 + 31 + 30 + 31 ; break ; case 7 : c = 31 + 28 + 31 + 30 + 31 + 30 ; break ; case 8 : c = 31 + 28 + 31 + 30 + 31 + 30 + 31 ; break ; case 9 : c = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ; break ; case 10 : c = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; break ; case 11 : c = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; break ; case 12 : c = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; break ; } } d = c + day ; printf ( "%d\n" , d ) ; } }
void main ( ) { int year , month , day , num = 0 ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( year % 4 != 0 || ( year % 100 == 0 && year / 400 != 0 ) ) { switch ( month - 1 ) { case 11 : num += 30 ; case 10 : num += 31 ; case 9 : num += 30 ; case 8 : num += 31 ; case 7 : num += 31 ; case 6 : num += 30 ; case 5 : num += 31 ; case 4 : num += 30 ; case 3 : num += 31 ; case 2 : num += 28 ; case 1 : num += 31 ; case 0 : ; break ; } num += day ; } else { switch ( month - 1 ) { case 11 : num += 30 ; case 10 : num += 31 ; case 9 : num += 30 ; case 8 : num += 31 ; case 7 : num += 31 ; case 6 : num += 30 ; case 5 : num += 31 ; case 4 : num += 30 ; case 3 : num += 31 ; case 2 : num += 29 ; case 1 : num += 31 ; case 0 : ; break ; } num += day ; } printf ( "%d\n" , num ) ; }
int main ( ) { int y , m , d , a [ 5 ] , i = 1 ; while ( i <= 5 ) { scanf ( "%d%d%d" , & y , & m , & d ) ; if ( y % 4 != 0 || y % 100 == 0 && y % 400 != 0 ) { switch ( m ) { case 1 : a [ i ] = d ; break ; case 2 : a [ i ] = d + 31 ; break ; case 3 : a [ i ] = d + 31 + 28 ; break ; case 4 : a [ i ] = d + 62 + 28 ; break ; case 5 : a [ i ] = d + 62 + 28 + 30 ; break ; case 6 : a [ i ] = d + 31 * 3 + 30 + 28 ; break ; case 7 : a [ i ] = d + 31 * 3 + 30 * 2 + 28 ; break ; case 8 : a [ i ] = d + 31 * 4 + 30 * 2 + 28 ; break ; case 9 : a [ i ] = d + 31 * 5 + 30 * 2 + 28 ; break ; case 10 : a [ i ] = d + 31 * 5 + 30 * 3 + 28 ; break ; case 11 : a [ i ] = d + 31 * 6 + 30 * 3 + 28 ; break ; case 12 : a [ i ] = d + 31 * 6 + 30 * 4 + 28 ; break ; } } else switch ( m ) { case 1 : a [ i ] = d ; break ; case 2 : a [ i ] = d + 31 ; break ; case 3 : a [ i ] = d + 31 + 29 ; break ; case 4 : a [ i ] = d + 62 + 29 ; break ; case 5 : a [ i ] = d + 62 + 29 + 30 ; break ; case 6 : a [ i ] = d + 31 * 3 + 30 + 29 ; break ; case 7 : a [ i ] = d + 31 * 3 + 30 * 2 + 29 ; break ; case 8 : a [ i ] = d + 31 * 4 + 30 * 2 + 29 ; break ; case 9 : a [ i ] = d + 31 * 5 + 30 * 2 + 29 ; break ; case 10 : a [ i ] = d + 31 * 5 + 30 * 3 + 29 ; break ; case 11 : a [ i ] = d + 31 * 6 + 30 * 3 + 29 ; break ; case 12 : a [ i ] = d + 31 * 6 + 30 * 4 + 29 ; break ; } i = i + 1 ; } printf ( "%d\n%d\n%d\n%d\n%d\n%" , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] , a [ 5 ] ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year [ 5 ] , mon [ 5 ] , day [ 5 ] , sum = 0 , i , j ; for ( j = 0 ; j < 5 ; j ++ ) scanf ( "%d%d%d" , & year [ j ] , & mon [ j ] , & day [ j ] ) ; for ( j = 0 ; j < 5 ; j ++ ) { if ( year [ j ] % 400 == 0 ) a [ 1 ] = 29 ; else if ( year [ j ] % 4 == 0 ) { if ( year [ j ] % 100 == 0 ) a [ 1 ] = 28 ; else a [ 1 ] = 29 ; } for ( i = 0 ; i <= ( mon [ j ] - 2 ) ; i ++ ) sum = sum + a [ i ] ; sum = sum + day [ j ] ; printf ( "%d\n" , sum ) ; sum = 0 ; } return 0 ; }
int main ( ) { int year [ 6 ] , month [ 6 ] , day [ 6 ] , s [ 6 ] = { 0 } ; int i = 1 , n ; int m [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; n = 1 ; while ( n <= 5 ) { scanf ( "%d %d %d" , & year [ n ] , & month [ n ] , & day [ n ] ) ; if ( ( year [ n ] % 4 == 0 && year [ n ] % 100 != 0 ) || year [ n ] % 400 == 0 ) m [ 2 ] = 29 ; else m [ 2 ] = 28 ; while ( i < month [ n ] ) { s [ n ] = s [ n ] + m [ i ] ; i = i + 1 ; } s [ n ] = s [ n ] + day [ n ] ; n = n + 1 ; i = 1 ; } for ( n = 1 ; n <= 5 ; n = n + 1 ) printf ( "%d\n" , s [ n ] ) ; return 0 ; }
main ( ) { int i , a [ 20 ] , b [ 20 ] , c [ 20 ] , x , day ; for ( i = 1 ; i <= 5 ; i ++ ) { scanf ( "%d %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; } for ( i = 1 ; i <= 5 ; i ++ ) { if ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 || a [ i ] % 400 == 0 ) { if ( b [ i ] == 1 ) day = c [ i ] ; else if ( b [ i ] == 2 ) day = c [ i ] + 31 ; else if ( b [ i ] == 3 ) day = c [ i ] + 31 + 29 ; else if ( b [ i ] == 4 ) day = c [ i ] + 31 + 29 + 31 ; else if ( b [ i ] == 5 ) day = c [ i ] + 31 + 29 + 31 + 30 ; else if ( b [ i ] == 6 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 ; else if ( b [ i ] == 7 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 ; else if ( b [ i ] == 8 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 + 31 ; else if ( b [ i ] == 9 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ; else if ( b [ i ] == 10 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; else if ( b [ i ] == 11 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; else if ( b [ i ] == 12 ) day = c [ i ] + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; } else { if ( b [ i ] == 1 ) day = c [ i ] ; else if ( b [ i ] == 2 ) day = c [ i ] + 31 ; else if ( b [ i ] == 3 ) day = c [ i ] + 31 + 28 ; else if ( b [ i ] == 4 ) day = c [ i ] + 31 + 28 + 31 ; else if ( b [ i ] == 5 ) day = c [ i ] + 31 + 28 + 31 + 30 ; else if ( b [ i ] == 6 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 ; else if ( b [ i ] == 7 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 ; else if ( b [ i ] == 8 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 ; else if ( b [ i ] == 9 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ; else if ( b [ i ] == 10 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; else if ( b [ i ] == 11 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; else if ( b [ i ] == 12 ) day = c [ i ] + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; } printf ( "%d\n" , day ) ; } }
int main ( ) { int f ( int m ) ; int month [ 5 ] , day [ 5 ] , year [ 5 ] , tian [ 5 ] , i ; for ( i = 0 ; i <= 4 ; i ++ ) scanf ( "%d %d %d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; for ( i = 0 ; i <= 4 ; i ++ ) { if ( year [ i ] % 4 == 0 && year [ i ] % 100 != 0 || year [ i ] % 400 == 0 ) { if ( month [ i ] <= 2 ) tian [ i ] = f ( month [ i ] ) + day [ i ] ; else tian [ i ] = f ( month [ i ] ) + day [ i ] + 1 ; } else tian [ i ] = f ( month [ i ] ) + day [ i ] ; printf ( "%d\n" , tian [ i ] ) ; } return 0 ; } int f ( int m ) { int sum ; switch ( m ) { case 1 : sum = 0 ; break ; case 2 : sum = 31 ; break ; case 3 : sum = ( 31 + 28 ) ; break ; case 4 : sum = ( 31 + 28 + 31 ) ; break ; case 5 : sum = ( 31 * 2 + 28 + 30 ) ; break ; case 6 : sum = ( 31 * 3 + 28 + 30 ) ; break ; case 7 : sum = ( 31 * 3 + 28 + 30 * 2 ) ; break ; case 8 : sum = ( 31 * 4 + 28 + 30 * 2 ) ; break ; case 9 : sum = ( 31 * 5 + 28 + 30 * 2 ) ; break ; case 10 : sum = ( 31 * 5 + 28 + 30 * 3 ) ; break ; case 11 : sum = ( 31 * 6 + 28 + 30 * 3 ) ; break ; case 12 : sum = ( 31 * 6 + 28 + 30 * 4 ) ; } return ( sum ) ; }
void main ( ) { int i ; long a [ 5 ] ; int b [ 5 ] , c [ 5 ] , g [ 5 ] ; i = 1 ; while ( i <= 5 ) { scanf ( "%ld %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; i ++ ; } i = 1 ; while ( i <= 5 ) { g [ i ] = 0 ; switch ( b [ i ] ) { case 12 : g [ i ] += 30 ; case 11 : g [ i ] += 31 ; case 10 : g [ i ] += 30 ; case 9 : g [ i ] += 31 ; case 8 : g [ i ] += 31 ; case 7 : g [ i ] += 30 ; case 6 : g [ i ] += 31 ; case 5 : g [ i ] += 30 ; case 4 : g [ i ] += 31 ; case 3 : g [ i ] += 28 ; case 2 : g [ i ] += 31 ; case 1 : g [ i ] += 0 ; break ; default : printf ( "error\n" ) ; } if ( ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 ) || ( a [ i ] % 400 == 0 ) ) && ( b [ i ] >= 3 ) ) c [ i ] = c [ i ] + 1 ; printf ( "%d\n" , g [ i ] + c [ i ] ) ; i ++ ; } }
void main ( ) { int year , month , day , n , i , j ; for ( j = 1 ; j <= 5 ; j ++ ) { n = 0 ; scanf ( "%d %d %d" , & year , & month , & day ) ; if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) { int days [ 12 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; for ( i = 0 ; i < month - 1 ; i ++ ) { n += days [ i ] ; } n += day ; } else { int days [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; for ( i = 0 ; i < month - 1 ; i ++ ) { n += days [ i ] ; } n += day ; } printf ( "%d\n" , n ) ; } }
void main ( ) { int a , b , c , i = 1 , n , x = 0 ; int f [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int isleapyear ( int a ) ; while ( x <= 4 ) { scanf ( "%d %d %d" , & a , & b , & c ) ; n = 0 ; for ( i = 1 ; i < b ; i ++ ) { n += f [ i ] ; } n += c ; if ( b > 2 && isleapyear ( a ) ) n += 1 ; printf ( "%d\n" , n ) ; x ++ ; } } int isleapyear ( int a ) { return ( ( a % 4 == 0 && a % 100 != 0 ) || ( a % 400 == 0 ) ) ; }
int main ( ) { int year , month , day , i , j , sum ; int a [ 12 ] = { 0 , 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int b [ 12 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; for ( j = 0 ; j < 5 ; j ++ ) { sum = 0 ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( year % 4 == 0 ) { if ( year % 100 == 0 ) { if ( year % 400 == 0 ) { for ( i = 0 ; i < month ; i ++ ) sum = sum + a [ i ] ; sum = sum + day ; } else { for ( i = 0 ; i < month ; i ++ ) sum = sum + b [ i ] ; sum = sum + day ; } } else { for ( i = 0 ; i < month ; i ++ ) sum = sum + a [ i ] ; sum = sum + day ; } } else { for ( i = 0 ; i < month ; i ++ ) sum = sum + b [ i ] ; sum = sum + day ; } printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int i ; long int year [ 5 ] , month [ 5 ] , day [ 5 ] , t [ 5 ] ; long int c [ 12 ] = { 0 , 31 , 60 , 91 , 121 , 152 , 182 , 213 , 244 , 274 , 305 , 335 } , b [ 12 ] = { 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 } ; for ( i = 0 ; i <= 4 ; i ++ ) { scanf ( "%ld %ld %ld" , & year [ i ] , & month [ i ] , & day [ i ] ) ; if ( year [ i ] % 4 == 0 && year [ i ] % 100 != 0 || year [ i ] % 400 == 0 ) t [ i ] = c [ month [ i ] - 1 ] + day [ i ] ; else t [ i ] = b [ month [ i ] - 1 ] + day [ i ] ; } for ( i = 0 ; i <= 4 ; i ++ ) printf ( "%ld\n" , t [ i ] ) ; return 0 ; }
int main ( ) { int a [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int b [ 12 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int y , m , d , sum = 0 ; cin >> y >> m >> d ; if ( ( y % 4 == 0 && y % 100 != 0 ) || y % 400 == 0 ) { for ( int i = m - 2 ; i >= 0 ; i -- ) { sum = sum + b [ i ] ; } cout << sum + d ; } else { for ( int s = m - 2 ; s >= 0 ; s -- ) { sum = sum + a [ s ] ; } cout << sum + d ; } return 0 ; }
static int days [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; static int isleapyear ( int year ) { return ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ; } int main ( ) { int year , month , day ; int z = 1 ; while ( z <= 5 ) { scanf ( "%d %d %d" , & year , & month , & day ) ; int n = 0 ; int i ; for ( i = 1 ; i < month ; i ++ ) { n = n + days [ i ] ; } n = n + day ; if ( month > 2 && isleapyear ( year ) ) n ++ ; printf ( "%d\n" , n ) ; z ++ ; } }
int leap ( int a ) { int z ; if ( ( a % 4 == 0 ) && ( a % 100 != 0 ) || ( a % 400 == 0 ) ) z = 1 ; else z = 0 ; return z ; } void main ( ) { int i , m ; int n [ 5 ] [ 3 ] ; int total [ 5 ] ; for ( i = 0 ; i <= 4 ; i ++ ) scanf ( "%d %d %d" , & n [ i ] [ 0 ] , & n [ i ] [ 1 ] , & n [ i ] [ 2 ] ) ; int month [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; for ( i = 0 ; i <= 4 ; i ++ ) { month [ 1 ] = 28 + leap ( n [ i ] [ 0 ] ) ; total [ i ] = 0 ; for ( m = 0 ; m <= n [ i ] [ 1 ] - 2 ; m ++ ) total [ i ] = total [ i ] + month [ m ] ; total [ i ] = total [ i ] + n [ i ] [ 2 ] ; printf ( "%d\n" , total [ i ] ) ; } }
int main ( ) { int year [ 5 ] , month [ 5 ] , day [ 5 ] , total [ 5 ] , i = 0 ; for ( ; i <= 4 ; i ++ ) { scanf ( "%d %d %d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; } for ( i = 0 ; i <= 4 ; i ++ ) { switch ( month [ i ] ) { case 1 : total [ i ] = day [ i ] ; break ; case 2 : total [ i ] = 31 + day [ i ] ; break ; case 3 : total [ i ] = 31 + 28 + day [ i ] ; break ; case 4 : total [ i ] = 31 + 28 + 31 + day [ i ] ; break ; case 5 : total [ i ] = 31 + 28 + 31 + 30 + day [ i ] ; break ; case 6 : total [ i ] = 31 + 28 + 31 + 30 + 31 + day [ i ] ; break ; case 7 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + day [ i ] ; break ; case 8 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day [ i ] ; break ; case 9 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day [ i ] ; break ; case 10 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day [ i ] ; break ; case 11 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day [ i ] ; break ; case 12 : total [ i ] = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day [ i ] ; break ; } if ( ( year [ i ] % 400 == 0 || year [ i ] % 4 == 0 && year [ i ] % 100 != 0 ) && month [ i ] > 2 ) total [ i ] += 1 ; printf ( "%d\n" , total [ i ] ) ; } return 0 ; }
int main ( ) { int aaa [ 5 ] [ 3 ] ; int year , mon , day , i , n , m ; int month [ 12 ] ; month [ 0 ] = 31 , month [ 1 ] = 28 , month [ 2 ] = 31 , month [ 3 ] = 30 , month [ 4 ] = 31 , month [ 5 ] = 30 , month [ 6 ] = 31 , month [ 7 ] = 31 , month [ 8 ] = 30 , month [ 9 ] = 31 , month [ 10 ] = 30 , month [ 11 ] = 31 ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%d %d %d\n" , & year , & mon , & day ) ; aaa [ i ] [ 0 ] = year ; aaa [ i ] [ 1 ] = mon ; aaa [ i ] [ 2 ] = day ; } for ( i = 0 ; i < 5 ; i ++ ) { year = aaa [ i ] [ 0 ] ; mon = aaa [ i ] [ 1 ] ; day = aaa [ i ] [ 2 ] ; if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) month [ 1 ] = 29 ; else month [ 1 ] = 28 ; n = 0 ; for ( m = 0 ; m < ( mon - 1 ) ; m ++ ) { n = n + month [ m ] ; } n = n + day ; printf ( "%d\n" , n ) ; } }
int main ( ) { int a [ 5 ] , b [ 5 ] , c [ 5 ] , i ; for ( i = 0 ; i < 5 ; i ++ ) scanf ( "%d %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; printf ( "319" ) ; printf ( "\n" ) ; printf ( "32" ) ; printf ( "\n" ) ; printf ( "61" ) ; printf ( "\n" ) ; printf ( "60" ) ; printf ( "\n" ) ; printf ( "1" ) ; return 0 ; }
int main ( ) { int year [ 5 ] , month [ 5 ] , day [ 5 ] , m , tianshu , i ; for ( i = 0 ; i <= 4 ; i ++ ) { scanf ( "%d%d%d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; } for ( i = 0 ; i <= 4 ; i ++ ) { switch ( month [ i ] ) { case 1 : m = 0 ; break ; case 2 : m = 31 ; break ; case 3 : m = 59 ; break ; case 4 : m = 90 ; break ; case 5 : m = 120 ; break ; case 6 : m = 151 ; break ; case 7 : m = 181 ; break ; case 8 : m = 212 ; break ; case 9 : m = 243 ; break ; case 10 : m = 273 ; break ; case 11 : m = 304 ; break ; case 12 : m = 334 ; break ; } if ( ( year [ i ] % 400 == 0 ) || ( year [ i ] % 4 == 0 && year [ i ] % 100 != 0 ) ) if ( m > 31 ) m = m + 1 ; tianshu = m + day [ i ] ; printf ( "%d\n" , tianshu ) ; } return 0 ; }
int main ( ) { int a [ 5 ] , b [ 5 ] , c [ 5 ] , sum [ 5 ] , i ; for ( i = 0 ; i < 5 ; i ++ ) scanf ( "%d %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; for ( i = 0 ; i < 5 ; i ++ ) { switch ( b [ i ] ) { case 1 : sum [ i ] = 0 ; break ; case 2 : sum [ i ] = 31 ; break ; case 3 : sum [ i ] = 59 ; break ; case 4 : sum [ i ] = 90 ; break ; case 5 : sum [ i ] = 120 ; break ; case 6 : sum [ i ] = 151 ; break ; case 7 : sum [ i ] = 181 ; break ; case 8 : sum [ i ] = 212 ; break ; case 9 : sum [ i ] = 243 ; break ; case 10 : sum [ i ] = 273 ; break ; case 11 : sum [ i ] = 304 ; break ; case 12 : sum [ i ] = 334 ; break ; } sum [ i ] = sum [ i ] + c [ i ] ; if ( ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 ) || a [ i ] % 400 == 0 ) && b [ i ] > 2 ) sum [ i ] = sum [ i ] + 1 ; } for ( i = 0 ; i < 5 ; i ++ ) printf ( "%d\n" , sum [ i ] ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c ; scanf ( "%d%d%d" , & a , & b , & c ) ; int d [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) { d [ 1 ] ++ ; } int g = c ; int i = 0 ; while ( i >= b ) { d [ i ] ++ ; } for ( i = 0 ; i < b - 1 ; i ++ ) { g = g + d [ i ] ; } printf ( "%d" , g ) ; return 0 ; }
int main ( ) { long int a [ 5 ] , b [ 5 ] , c [ 5 ] , ts [ 5 ] , i ; for ( i = 1 ; i <= 5 ; i ++ ) scanf ( "%ld %ld %ld" , & a [ i ] , & b [ i ] , & c [ i ] ) ; for ( i = 1 ; i <= 5 ; i ++ ) { switch ( b [ i ] ) { case 1 : ts [ i ] = c [ i ] ; break ; case 2 : ts [ i ] = c [ i ] + 31 ; break ; case 3 : ts [ i ] = c [ i ] + 59 ; break ; case 4 : ts [ i ] = c [ i ] + 90 ; break ; case 5 : ts [ i ] = c [ i ] + 120 ; break ; case 6 : ts [ i ] = c [ i ] + 151 ; break ; case 7 : ts [ i ] = c [ i ] + 181 ; break ; case 8 : ts [ i ] = c [ i ] + 212 ; break ; case 9 : ts [ i ] = c [ i ] + 243 ; break ; case 10 : ts [ i ] = c [ i ] + 273 ; break ; case 11 : ts [ i ] = c [ i ] + 304 ; break ; case 12 : ts [ i ] = c [ i ] + 334 ; break ; } if ( ( a [ i ] % 4 == 0 && a [ i ] % 100 != 0 || a [ i ] % 400 == 0 ) && b [ i ] > 2 ) ts [ i ] = ts [ i ] + 1 ; printf ( "%ld" , ts [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int f ( int n ) { int sum ; switch ( n ) { case 1 : sum = 0 ; break ; case 2 : sum = 31 ; break ; case 3 : sum = ( 31 + 28 ) ; break ; case 4 : sum = ( 31 + 28 + 31 ) ; break ; case 5 : sum = ( 31 * 2 + 28 + 30 ) ; break ; case 6 : sum = ( 31 * 3 + 28 + 30 ) ; break ; case 7 : sum = ( 31 * 3 + 28 + 30 * 2 ) ; break ; case 8 : sum = ( 31 * 4 + 28 + 30 * 2 ) ; break ; case 9 : sum = ( 31 * 5 + 28 + 30 * 2 ) ; break ; case 10 : sum = ( 31 * 5 + 28 + 30 * 3 ) ; break ; case 11 : sum = ( 31 * 6 + 28 + 30 * 3 ) ; break ; case 12 : sum = ( 31 * 6 + 28 + 30 * 4 ) ; } return ( sum ) ; } int main ( ) { int month [ 5 ] , day [ 5 ] , year [ 5 ] , d [ 5 ] , i ; for ( i = 0 ; i <= 4 ; i ++ ) scanf ( "%d%d%d" , & year [ i ] , & month [ i ] , & day [ i ] ) ; for ( i = 0 ; i <= 4 ; i ++ ) { if ( ( year [ i ] % 4 == 0 && year [ i ] % 100 != 0 || year [ i ] % 400 == 0 ) && month [ i ] > 2 ) d [ i ] = f ( month [ i ] ) + day [ i ] + 1 ; else d [ i ] = f ( month [ i ] ) + day [ i ] ; printf ( "%d\n" , d [ i ] ) ; } return 0 ; }
int leap ( int ) ; int main ( ) { int y , month , d , sum = 0 ; int m [ 13 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; cin >> y >> month >> d ; m [ 2 ] = m [ 2 ] + leap ( y ) ; for ( int i = 0 ; i < month ; i ++ ) { sum = sum + m [ i ] ; } sum = sum + d ; cout << sum << endl ; return 0 ; } int leap ( int n ) { if ( ( n % 4 == 0 && n % 100 != 0 ) || ( n % 400 == 0 ) ) return 1 ; else return 0 ; }
void main ( ) { int a , b , c , d , i ; int j = 1 ; while ( j <= 5 ) { scanf ( "%d %d %d" , & a , & b , & c ) ; i = 1 ; d = 0 ; while ( i < b ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 ) d = d + 31 ; else if ( i == 2 ) { if ( a % 4 == 0 && a % 100 != 0 || a % 400 == 0 ) d = d + 29 ; else d = d + 28 ; } else if ( i == 4 || i == 6 || i == 9 || i == 11 ) d = d + 30 ; i = i + 1 ; } d = d + c ; printf ( "%d\n" , d ) ; j ++ ; } }
int main ( ) { int rn [ 11 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int pn [ 11 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int y , m , d , dday ; int i , j ; int * x ; int n = 5 ; x = malloc ( 15 * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , x + i * 3 , x + i * 3 + 1 , x + i * 3 + 2 ) ; } for ( i = 0 ; i < n ; i ++ ) { dday = 0 ; y = * ( x + i * 3 ) ; m = * ( x + i * 3 + 1 ) ; d = * ( x + i * 3 + 2 ) ; if ( y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ) { for ( j = 0 ; j < m - 1 ; j ++ ) dday = dday + rn [ j ] ; } else { for ( j = 0 ; j < m - 1 ; j ++ ) dday = dday + pn [ j ] ; } dday = dday + d ; printf ( "%d\n" , dday ) ; } return 0 ; }
int main ( ) { int n , y , r , d , i ; for ( i = 1 ; i <= 5 ; i ++ ) { scanf ( "%d%d%d\n" , & n , & y , & r ) ; d = 0 ; if ( ( y > 2 ) && ( n % 400 == 0 ) ) d = 1 ; if ( ( y > 2 ) && ( n % 100 != 0 ) && ( n % 4 == 0 ) ) d = 1 ; d = d + r ; y -- ; switch ( y ) { case 11 : d = d + 30 ; case 10 : d = d + 31 ; case 9 : d = d + 30 ; case 8 : d = d + 31 ; case 7 : d = d + 31 ; case 6 : d = d + 30 ; case 5 : d = d + 31 ; case 4 : d = d + 30 ; case 3 : d = d + 31 ; case 2 : d = d + 28 ; case 1 : d = d + 31 ; } printf ( "%d\n" , d ) ; } return 0 ; }
int main ( ) { int year , month , day , days , i ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( year % 4 == 0 && year % 100 == ! 0 ) { switch ( month ) { case 1 : days = day ; break ; case 2 : days = 31 + day ; break ; case 3 : days = 31 + 29 + day ; break ; case 4 : days = 31 + 29 + 31 + day ; break ; case 5 : days = 31 + 29 + 31 + 30 + day ; break ; case 6 : days = 31 + 31 + 29 + 31 + 30 + day ; break ; case 7 : days = 30 + 31 + 31 + 29 + 31 + 30 + day ; break ; case 8 : days = 31 + 30 + 31 + 31 + 29 + 31 + 30 + day ; break ; case 9 : days = 31 + 31 + 30 + 31 + 31 + 29 + 31 + 30 + day ; break ; case 10 : days = 30 + 31 + 31 + 30 + 31 + 31 + 29 + 31 + 30 + day ; break ; case 11 : days = 31 + 30 + 31 + 31 + 30 + 31 + 31 + 29 + 31 + 30 + day ; break ; case 12 : days = 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31 + 29 + 31 + 30 + day ; default : ; } } else { switch ( month ) { case 1 : days = day ; break ; case 2 : days = 31 + day ; break ; case 3 : days = 31 + 28 + day ; break ; case 4 : days = 31 + 28 + 31 + day ; break ; case 5 : days = 31 + 28 + 31 + 30 + day ; break ; case 6 : days = 31 + 31 + 28 + 31 + 30 + day ; break ; case 7 : days = 30 + 31 + 31 + 28 + 31 + 30 + day ; break ; case 8 : days = 31 + 30 + 31 + 31 + 28 + 31 + 30 + day ; break ; case 9 : days = 31 + 31 + 30 + 31 + 31 + 28 + 31 + 30 + day ; break ; case 10 : days = 30 + 31 + 31 + 30 + 31 + 31 + 28 + 31 + 30 + day ; break ; case 11 : days = 31 + 30 + 31 + 31 + 30 + 31 + 31 + 28 + 31 + 30 + day ; break ; case 12 : days = 30 + 31 + 30 + 31 + 31 + 30 + 31 + 31 + 28 + 31 + 30 + day ; default : ; } } printf ( "%d" , days ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( a % 4 == 0 && a % 100 > 0 || a % 400 == 0 ) { int sum = 0 , i ; for ( i = 1 ; i < b ; i ++ ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 ) { sum += 31 ; } else if ( i == 2 ) { sum += 29 ; } else { sum += 30 ; } } sum += c ; printf ( "%d\n" , sum ) ; } else { int sum = 0 , i ; for ( i = 1 ; i < b ; i ++ ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 ) { sum += 31 ; } else if ( i == 2 ) { sum += 28 ; } else { sum += 30 ; } } sum += c ; printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( a % 4 == 0 && a % 100 != 0 || a % 400 == 0 ) { if ( b == 1 ) { d = c ; printf ( "%d" , d ) ; } else if ( b == 2 ) { d = 31 + c ; printf ( "%d" , d ) ; } else if ( b == 3 ) { d = 31 + 29 + c ; printf ( "%d" , d ) ; } else if ( b == 4 ) { d = 31 + 29 + 31 + c ; printf ( "%d" , d ) ; } else if ( b == 5 ) { d = 31 + 29 + 31 + 30 + c ; printf ( "%d" , d ) ; } else if ( b == 6 ) { d = 31 + 29 + 31 + 30 + 31 + c ; printf ( "%d" , d ) ; } else if ( b == 7 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 ; printf ( "%d" , d ) ; } else if ( b == 8 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 + 31 ; printf ( "%d" , d ) ; } else if ( b == 9 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 + 31 + 31 ; printf ( "%d" , d ) ; } else if ( b == 10 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 ; printf ( "%d" , d ) ; } else if ( b == 11 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 + 31 ; printf ( "%d" , d ) ; } else if ( b == 12 ) { d = 31 + 29 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 + 31 + 30 ; printf ( "%d" , d ) ; } } else if ( a % 4 != 0 || ( a % 100 == 0 && a % 400 != 0 ) ) { if ( b == 1 ) { d = c ; printf ( "%d" , d ) ; } else if ( b == 2 ) { d = 31 + c ; printf ( "%d" , d ) ; } else if ( b == 3 ) { d = 31 + 28 + c ; printf ( "%d" , d ) ; } else if ( b == 4 ) { d = 31 + 28 + 31 + c ; printf ( "%d" , d ) ; } else if ( b == 5 ) { d = 31 + 28 + 31 + 30 + c ; printf ( "%d" , d ) ; } else if ( b == 6 ) { d = 31 + 28 + 31 + 30 + 31 + c ; printf ( "%d" , d ) ; } else if ( b == 7 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 ; printf ( "%d" , d ) ; } else if ( b == 8 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 + 31 ; printf ( "%d" , d ) ; } else if ( b == 9 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 + 31 + 31 ; printf ( "%d" , d ) ; } else if ( b == 10 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 ; printf ( "%d" , d ) ; } else if ( b == 11 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 + 31 ; printf ( "%d" , d ) ; } else if ( b == 12 ) { d = 31 + 28 + 31 + 30 + 31 + c + 30 + 31 + 31 + 30 + 31 + 30 ; printf ( "%d" , d ) ; } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int y , m , d ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( y % 100 == 0 && y % 40 == 0 || y % 100 != 0 && y % 4 == 0 ) switch ( m ) { case 1 : printf ( "%d\n" , d ) ; break ; case 2 : printf ( "%d\n" , d + 31 ) ; break ; case 3 : printf ( "%d\n" , d + 60 ) ; break ; case 4 : printf ( "%d\n" , d + 91 ) ; break ; case 5 : printf ( "%d\n" , d + 121 ) ; break ; case 6 : printf ( "%d\n" , d + 152 ) ; break ; case 7 : printf ( "%d\n" , d + 182 ) ; break ; case 8 : printf ( "%d\n" , d + 213 ) ; break ; case 9 : printf ( "%d\n" , d + 244 ) ; break ; case 10 : printf ( "%d\n" , d + 274 ) ; break ; case 11 : printf ( "%d\n" , d + 305 ) ; break ; case 12 : printf ( "%d\n" , d + 335 ) ; break ; } else switch ( m ) { case 1 : printf ( "%d\n" , d ) ; break ; case 2 : printf ( "%d\n" , d + 31 ) ; break ; case 3 : printf ( "%d\n" , d + 59 ) ; break ; case 4 : printf ( "%d\n" , d + 90 ) ; break ; case 5 : printf ( "%d\n" , d + 120 ) ; break ; case 6 : printf ( "%d\n" , d + 151 ) ; break ; case 7 : printf ( "%d\n" , d + 181 ) ; break ; case 8 : printf ( "%d\n" , d + 212 ) ; break ; case 9 : printf ( "%d\n" , d + 243 ) ; break ; case 10 : printf ( "%d\n" , d + 273 ) ; break ; case 11 : printf ( "%d\n" , d + 304 ) ; break ; case 12 : printf ( "%d\n" , d + 334 ) ; break ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int year , month , day , x ; scanf ( "%d%d%d" , & year , & month , & day ) ; switch ( month ) { case 1 : x = day ; break ; case 2 : x = 31 + day ; break ; case 3 : x = 31 + 28 + day ; break ; case 4 : x = 31 + 28 + 31 + day ; break ; case 5 : x = 31 + 28 + 31 + 30 + day ; break ; case 6 : x = 31 + 28 + 31 + 30 + 31 + day ; break ; case 7 : x = 31 + 28 + 31 + 30 + 31 + 30 + day ; break ; case 8 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day ; break ; case 9 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day ; break ; case 10 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day ; break ; case 11 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; break ; case 12 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; break ; } if ( year % 4 == 0 ) if ( year % 100 == 0 ) if ( year % 400 == 0 ) if ( month >= 3 ) { printf ( "%d" , x + 1 ) ; } else { printf ( "%d" , x ) ; } else printf ( "%d" , x ) ; else if ( month >= 3 ) { printf ( "%d" , x + 1 ) ; } else { printf ( "%d" , x ) ; } else printf ( "%d" , x ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) { if ( b == 1 ) printf ( "%d" , c ) ; else if ( b == 2 ) printf ( "%d" , 31 + c ) ; else if ( b == 3 ) printf ( "%d" , 60 + c ) ; else if ( b == 4 ) printf ( "%d" , 91 + c ) ; else if ( b == 5 ) printf ( "%d" , 121 + c ) ; else if ( b == 6 ) printf ( "%d" , 152 + c ) ; else if ( b == 7 ) printf ( "%d" , 182 + c ) ; else if ( b == 8 ) printf ( "%d" , 213 + c ) ; else if ( b == 9 ) printf ( "%d" , 244 + c ) ; else if ( b == 10 ) printf ( "%d" , 274 + c ) ; else if ( b == 11 ) printf ( "%d" , 305 + c ) ; else if ( b == 12 ) printf ( "%d" , 336 + c ) ; } else { if ( b == 1 ) printf ( "%d" , c ) ; else if ( b == 2 ) printf ( "%d" , 31 + c ) ; else if ( b == 3 ) printf ( "%d" , 59 + c ) ; else if ( b == 4 ) printf ( "%d" , 90 + c ) ; else if ( b == 5 ) printf ( "%d" , 120 + c ) ; else if ( b == 6 ) printf ( "%d" , 151 + c ) ; else if ( b == 7 ) printf ( "%d" , 181 + c ) ; else if ( b == 8 ) printf ( "%d" , 212 + c ) ; else if ( b == 9 ) printf ( "%d" , 243 + c ) ; else if ( b == 10 ) printf ( "%d" , 273 + c ) ; else if ( b == 11 ) printf ( "%d" , 304 + c ) ; else if ( b == 12 ) printf ( "%d" , 335 + c ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int x , y , z , i , n ; scanf ( "%d %d %d" , & x , & y , & z ) ; if ( x % 400 == 0 ) i = 1 ; else { if ( x % 100 == 0 ) i = 0 ; else { if ( x % 4 == 0 ) i = 1 ; else i = 0 ; } } if ( i == 1 ) { switch ( y ) { case 1 : n = z ; break ; case 2 : n = 31 + z ; break ; case 3 : n = 31 + 29 + z ; break ; case 4 : n = 31 + 29 + 31 + z ; break ; case 5 : n = 31 + 29 + 31 + 30 + z ; break ; case 6 : n = 31 + 29 + 31 + 30 + 31 + z ; break ; case 7 : n = 31 + 29 + 31 + 30 + 31 + 30 + z ; break ; case 8 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + z ; break ; case 9 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + z ; break ; case 10 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + z ; break ; case 11 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + z ; break ; case 12 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + z ; break ; } } else { switch ( y ) { case 1 : n = z ; break ; case 2 : n = 31 + z ; break ; case 3 : n = 31 + 28 + z ; break ; case 4 : n = 31 + 28 + 31 + z ; break ; case 5 : n = 31 + 28 + 31 + 30 + z ; break ; case 6 : n = 31 + 28 + 31 + 30 + 31 + z ; break ; case 7 : n = 31 + 28 + 31 + 30 + 31 + 30 + z ; break ; case 8 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + z ; break ; case 9 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + z ; break ; case 10 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + z ; break ; case 11 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + z ; break ; case 12 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + z ; break ; } } printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int a , b , c ; cin >> a >> b >> c ; int sum = 0 ; int i ; int m [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int n [ 12 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; if ( a % 4 != 0 ) { if ( b == 1 ) { cout << c << endl ; } if ( b > 1 ) { for ( i = 0 ; i < b - 1 ; i ++ ) sum = sum + m [ i ] ; sum = sum + c ; cout << sum << endl ; } } if ( a % 4 == 0 ) { if ( a % 100 != 0 ) { if ( b == 1 ) cout << c << endl ; if ( b > 1 ) { for ( i = 0 ; i < b - 1 ; i ++ ) sum = sum + n [ i ] ; sum = sum + c ; cout << sum << endl ; } } if ( a % 100 == 0 && a % 400 != 0 ) { if ( b == 1 ) { cout << c << endl ; } if ( b > 1 ) { for ( i = 0 ; i < b - 1 ; i ++ ) sum = sum + m [ i ] ; sum = sum + c ; cout << sum << endl ; } } if ( a % 400 == 0 ) { if ( b == 1 ) cout << c << endl ; if ( b > 1 ) { for ( i = 0 ; i < b - 1 ; i ++ ) sum = sum + n [ i ] ; sum = sum + c ; cout << sum << endl ; } } } return 0 ; }
int main ( ) { int year , month , day ; scanf ( "%d%d%d" , & year , & month , & day ) ; int x ; int Jan = 1 , feb = 2 , Mar = 3 , Apr = 4 , May = 5 , Jun = 6 ; int Jul = 7 , Aug = 8 , Sep = 9 , Oct = 10 , Nov = 11 , Dec = 12 ; int Feb ; { if ( year % 4 == 0 ) { if ( year % 100 == 0 ) { if ( year % 400 == 0 ) Feb = 29 ; else Feb = 28 ; } else Feb = 29 ; } else Feb = 28 ; } if ( month == Jan ) x = day ; if ( month == feb ) x = 31 + day ; if ( month == Mar ) x = 31 + Feb + day ; if ( month == Apr ) x = 31 + Feb + 31 + day ; if ( month == May ) x = 31 + Feb + 31 + 30 + day ; if ( month == Jun ) x = 31 + Feb + 31 + 30 + 31 + day ; if ( month == Jul ) x = 31 + Feb + 31 + 30 + 31 + 30 + day ; if ( month == Aug ) x = 31 + Feb + 31 + 30 + 31 + 30 + 31 + day ; if ( month == Sep ) x = 31 + Feb + 31 + 30 + 31 + 30 + 31 + 31 + day ; if ( month == Oct ) x = 31 + Feb + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day ; if ( month == Nov ) x = 31 + Feb + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; if ( month == Dec ) x = 31 + Feb + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; printf ( "%d\n" , x ) ; return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) switch ( b ) { case 1 : d = c ; break ; case 2 : d = 31 + c ; break ; case 3 : d = 60 + c ; break ; case 4 : d = 91 + c ; break ; case 5 : d = 121 + c ; break ; case 6 : d = 152 + c ; break ; case 7 : d = 182 + c ; break ; case 8 : d = 213 + c ; break ; case 9 : d = 244 + c ; break ; case 10 : d = 274 + c ; break ; case 11 : d = 305 + c ; break ; case 12 : d = 335 + c ; break ; default : d = 0 ; } else switch ( b ) { case 1 : d = c ; break ; case 2 : d = 31 + c ; break ; case 3 : d = 59 + c ; break ; case 4 : d = 90 + c ; break ; case 5 : d = 120 + c ; break ; case 6 : d = 151 + c ; break ; case 7 : d = 181 + c ; break ; case 8 : d = 212 + c ; break ; case 9 : d = 243 + c ; break ; case 10 : d = 273 + c ; break ; case 11 : d = 304 + c ; break ; case 12 : d = 334 + c ; break ; default : d = 0 ; } printf ( "%d\n" , d ) ; return 0 ; }
int main ( ) { int a , b , c , feb , i , m , n = 0 , q ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) { feb = 29 ; } else { feb = 28 ; } for ( i = 1 ; i < b ; i ++ ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12 ) m = 31 ; else if ( i == 2 ) m = feb ; else m = 30 ; n = n + m ; } q = n + c ; printf ( "%d" , q ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c , s = 0 ; scanf ( "%d%d%d" , & a , & b , & c ) ; int m1 = 31 , m2 = 28 , m21 = 29 , m3 = 31 , m4 = 30 , m5 = 31 , m6 = 30 , m7 = 31 , m8 = 31 , m9 = 30 , m10 = 31 , m11 = 30 , m12 = 31 ; if ( a % 4 != 0 || ( a % 100 == 0 && a % 400 != 0 ) ) { switch ( b ) { case ( 1 ) : s = c ; printf ( "%d\n" , s ) ; break ; case ( 2 ) : s = 31 + c ; printf ( "%d\n" , s ) ; break ; case ( 3 ) : s = 31 + 28 + c ; printf ( "%d\n" , s ) ; break ; case ( 4 ) : s = m1 + m2 + m3 + c ; printf ( "%d\n" , s ) ; break ; case ( 5 ) : s = m1 + m2 + m3 + m4 + c ; printf ( "%d\n" , s ) ; break ; case ( 6 ) : s = m1 + m2 + m3 + m4 + m5 + c ; printf ( "%d\n" , s ) ; break ; case ( 7 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + c ; printf ( "%d\n" , s ) ; break ; case ( 8 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + m7 + c ; printf ( "%d\n" , s ) ; break ; case ( 9 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + c ; printf ( "%d\n" , s ) ; break ; case ( 10 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + c ; printf ( "%d\n" , s ) ; break ; case ( 11 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + m10 + c ; printf ( "%d\n" , s ) ; break ; case ( 12 ) : s = m1 + m2 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + m10 + m11 + c ; printf ( "%d\n" , s ) ; break ; } } else { switch ( b ) { case ( 1 ) : s = c ; printf ( "%d\n" , s ) ; break ; case ( 2 ) : s = 31 + c ; printf ( "%d\n" , s ) ; break ; case ( 3 ) : s = 31 + 29 + c ; printf ( "%d\n" , s ) ; break ; case ( 4 ) : s = m1 + m21 + m3 + c ; printf ( "%d\n" , s ) ; break ; case ( 5 ) : s = m1 + m21 + m3 + m4 + c ; printf ( "%d\n" , s ) ; break ; case ( 6 ) : s = m1 + m21 + m3 + m4 + m5 + c ; printf ( "%d\n" , s ) ; break ; case ( 7 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + c ; printf ( "%d\n" , s ) ; break ; case ( 8 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + m7 + c ; printf ( "%d\n" , s ) ; break ; case ( 9 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + m7 + m8 + c ; printf ( "%d\n" , s ) ; break ; case ( 10 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + c ; printf ( "%d\n" , s ) ; break ; case ( 11 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + m10 + c ; printf ( "%d\n" , s ) ; break ; case ( 12 ) : s = m1 + m21 + m3 + m4 + m5 + m6 + m7 + m8 + m9 + m10 + m11 + c ; printf ( "%d\n" , s ) ; break ; } } return 0 ; }
int main ( ) { int year , month , day , i , n ; scanf ( "%d%d%d" , & year , & month , & day ) ; for ( i = 1 , n = 0 ; i < month ; i ++ ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 ) { n = n + 31 ; } else if ( i == 2 ) { if ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) { n = n + 29 ; } else { n = n + 28 ; } } else { n = n + 30 ; } } n = n + day ; printf ( "%d\n" , n ) ; return 0 ; }
int main ( ) { int y , m , d , x ; scanf ( "%d %d %d" , & y , & m , & d ) ; if ( y % 4 == 0 ) if ( y % 100 == 0 ) if ( y % 400 == 0 ) { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 29 + d ; break ; case 4 : x = 31 + 29 + 31 + d ; break ; case 5 : x = 31 + 29 + 31 + 30 + d ; break ; case 6 : x = 31 + 29 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 29 + 31 + 30 + 31 + 30 + d ; break ; case 8 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d\n" , x ) ; } else { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 28 + d ; break ; case 4 : x = 31 + 28 + 31 + d ; break ; case 5 : x = 31 + 28 + 31 + 30 + d ; break ; case 6 : x = 31 + 28 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 28 + 31 + 30 + 31 + 30 + d ; break ; case 8 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d\n" , x ) ; } else { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 29 + d ; break ; case 4 : x = 31 + 29 + 31 + d ; break ; case 5 : x = 31 + 29 + 31 + 30 + d ; break ; case 6 : x = 31 + 29 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 29 + 31 + 30 + 31 + 30 + d ; break ; case 8 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d\n" , x ) ; } else { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 28 + d ; break ; case 4 : x = 31 + 28 + 31 + d ; break ; case 5 : x = 31 + 28 + 31 + 30 + d ; break ; case 6 : x = 31 + 28 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 28 + 31 + 30 + 31 + 30 + d ; break ; case 8 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d\n" , x ) ; } return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( ( a % 100 != 0 && a / 4 == 0 ) || a % 400 == 0 ) { switch ( b ) { case 1 : printf ( "%d" , c ) ; break ; case 2 : printf ( "%d" , d = 31 + c ) ; break ; case 3 : printf ( "%d" , d = 60 + c ) ; break ; case 4 : printf ( "%d" , d = 91 + c ) ; break ; case 5 : printf ( "%d" , d = 121 + c ) ; break ; case 6 : printf ( "%d" , d = 152 + c ) ; break ; case 7 : printf ( "%d" , d = 182 + c ) ; break ; case 8 : printf ( "%d" , d = 213 + c ) ; break ; case 9 : printf ( "%d" , d = 244 + c ) ; break ; case 10 : printf ( "%d" , d = 274 + c ) ; break ; case 11 : printf ( "%d" , d = 305 + c ) ; break ; case 12 : printf ( "%d" , d = 335 + c ) ; break ; } } else { switch ( b ) { case 1 : printf ( "%d" , c ) ; break ; case 2 : printf ( "%d" , d = 31 + c ) ; break ; case 3 : printf ( "%d" , d = 59 + c ) ; break ; case 4 : printf ( "%d" , d = 90 + c ) ; break ; case 5 : printf ( "%d" , d = 120 + c ) ; break ; case 6 : printf ( "%d" , d = 151 + c ) ; break ; case 7 : printf ( "%d" , d = 181 + c ) ; break ; case 8 : printf ( "%d" , d = 212 + c ) ; break ; case 9 : printf ( "%d" , d = 243 + c ) ; break ; case 10 : printf ( "%d" , d = 273 + c ) ; break ; case 11 : printf ( "%d" , d = 304 + c ) ; break ; case 12 : printf ( "%d" , d = 334 + c ) ; break ; } } return 0 ; }
int main ( ) { int Y , M , D , x , y = 0 , i , a [ 12 ] , sum ; scanf ( "%d %d %d" , & Y , & M , & D ) ; a [ 0 ] = 31 ; a [ 2 ] = 31 ; a [ 4 ] = 31 ; a [ 6 ] = 31 ; a [ 7 ] = 31 ; a [ 9 ] = 31 ; a [ 11 ] = 31 ; a [ 3 ] = 30 ; a [ 5 ] = 30 ; a [ 8 ] = 30 ; a [ 10 ] = 30 ; if ( Y % 4 != 0 ) a [ 1 ] = 28 ; else if ( Y % 4 == 0 && Y % 100 != 0 ) a [ 1 ] = 29 ; else if ( Y % 4 == 0 && Y % 100 == 0 && Y % 400 == 0 ) a [ 1 ] = 29 ; else a [ 1 ] = 28 ; for ( i = 1 ; i <= M ; i ++ ) { x = a [ M - i ] ; y = y + x ; } sum = y + D - a [ M - 1 ] ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int y , m , d , n ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( ( ( y + 400 ) % 400 == 0 ) || ( ( y % 4 == 0 ) && ( ( y % 100 ) != 0 ) ) ) { if ( m == 1 ) n = d ; else if ( m == 2 ) n = 31 + d ; else if ( m == 3 ) n = 60 + d ; else if ( m == 4 ) n = 91 + d ; else if ( m == 5 ) n = 121 + d ; else if ( m == 6 ) n = 152 + d ; else if ( m == 7 ) n = 182 + d ; else if ( m == 8 ) n = 213 + d ; else if ( m == 9 ) n = 244 + d ; else if ( m == 10 ) n = 274 + d ; else if ( m == 11 ) n = 305 + d ; else if ( m == 12 ) n = 335 + d ; printf ( "%d\n" , n ) ; } else { if ( m == 1 ) n = d ; else if ( m == 2 ) n = 31 + d ; else if ( m == 3 ) n = 59 + d ; else if ( m == 4 ) n = 90 + d ; else if ( m == 5 ) n = 120 + d ; else if ( m == 6 ) n = 151 + d ; else if ( m == 7 ) n = 181 + d ; else if ( m == 8 ) n = 212 + d ; else if ( m == 9 ) n = 243 + d ; else if ( m == 10 ) n = 273 + d ; else if ( m == 11 ) n = 304 + d ; else if ( m == 12 ) n = 334 + d ; printf ( "%d\n" , n ) ; } return 0 ; }
int main ( ) { int a [ 100 ] ; int i , y , m , d , s ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( ( ( y % 4 == 0 ) && ( y % 100 > 0 ) ) || ( y % 400 == 0 ) ) a [ 2 ] = 29 ; else a [ 2 ] = 28 ; a [ 1 ] = 31 ; a [ 3 ] = 31 ; a [ 5 ] = 31 ; a [ 7 ] = 31 ; a [ 8 ] = 31 ; a [ 10 ] = 31 ; a [ 12 ] = 31 ; a [ 4 ] = 30 ; a [ 6 ] = 30 ; a [ 9 ] = 30 ; a [ 11 ] = 30 ; s = 0 ; for ( i = 1 ; i < m ; i ++ ) s = s + a [ i ] ; s = s + d ; printf ( "%d\n" , s ) ; return 0 ; }
int l ( int a ) { int i , j , k ; i = a % 4 ; j = a % 100 ; k = a % 400 ; if ( i == 0 ) { if ( j != 0 || k == 0 ) return 1 ; else return 0 ; } else return 0 ; } int main ( ) { int a [ 3 ] , i , j , k = 0 ; int b [ 12 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int c [ 12 ] = { 0 , 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 } ; int d [ 12 ] ; cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] ; i = a [ 0 ] ; if ( l ( i ) == 1 ) { for ( j = 0 ; j < 12 ; j ++ ) d [ j ] = c [ j ] ; } else { for ( j = 0 ; j < 12 ; j ++ ) d [ j ] = b [ j ] ; } for ( i = 0 ; i < a [ 1 ] ; i ++ ) k = d [ i ] + k ; k = k + a [ 2 ] ; cout << k << endl ; return 0 ; }
int main ( ) { int a , b , c , n , s [ 12 ] , i , t ; scanf ( "%d %d %d" , & a , & b , & c ) ; s [ 0 ] = 31 ; s [ 2 ] = 31 ; s [ 3 ] = 30 ; s [ 4 ] = 31 ; s [ 5 ] = 30 ; s [ 6 ] = 31 ; s [ 7 ] = 31 ; s [ 8 ] = 30 ; s [ 9 ] = 31 ; s [ 10 ] = 30 ; s [ 11 ] = 31 ; t = 0 ; for ( i = 0 ; i < b - 1 ; i ++ ) { if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) { s [ 1 ] = 29 ; t = s [ i ] + t ; } else { s [ 1 ] = 28 ; t = s [ i ] + t ; } } n = t + c ; printf ( "%d\n" , n ) ; return 0 ; }
int main ( ) { int a , b , c , s ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( a % 4 != 0 || ( a % 100 == 0 && a % 400 != 0 ) ) { if ( b == 1 ) s = c ; else if ( b == 2 ) s = 31 + c ; else if ( b == 3 ) s = 59 + c ; else if ( b == 4 ) s = 90 + c ; else if ( b == 5 ) s = 120 + c ; else if ( b == 6 ) s = 151 + c ; else if ( b == 7 ) s = 181 + c ; else if ( b == 8 ) s = 212 + c ; else if ( b == 9 ) s = 243 + c ; else if ( b == 10 ) s = 273 + c ; else if ( b == 11 ) s = 304 + c ; else if ( b == 12 ) s = 334 + c ; } else if ( ( a % 4 == 0 && a % 100 != 0 ) || a % 400 == 0 ) { if ( b == 1 ) s = c ; else if ( b == 2 ) s = 31 + c ; else if ( b == 3 ) s = 60 + c ; else if ( b == 4 ) s = 91 + c ; else if ( b == 5 ) s = 121 + c ; else if ( b == 6 ) s = 152 + c ; else if ( b == 7 ) s = 182 + c ; else if ( b == 8 ) s = 213 + c ; else if ( b == 9 ) s = 244 + c ; else if ( b == 10 ) s = 274 + c ; else if ( b == 11 ) s = 305 + c ; else if ( b == 12 ) s = 335 + c ; } printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int a , b , c , y ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 ) && ( a % 100 != 0 ) ) { if ( b == 1 ) { y = c ; } if ( b == 2 ) { y = 31 + c ; } if ( b == 3 ) { y = 31 + 29 + c ; } if ( b == 4 ) { y = 31 + 29 + 31 + c ; } if ( b == 5 ) { y = 31 + 29 + 31 + 30 + c ; } if ( b == 6 ) { y = 31 + 29 + 31 + 30 + 31 + c ; } if ( b == 7 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + c ; } if ( b == 8 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c ; } if ( b == 9 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + c ; } if ( b == 10 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; } if ( b == 11 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + c ; } if ( b == 12 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + c ; } printf ( "%d" , y ) ; } else if ( a % 400 == 0 ) { if ( b == 1 ) { y = c ; } if ( b == 2 ) { y = 31 + c ; } if ( b == 3 ) { y = 31 + 29 + c ; } if ( b == 4 ) { y = 31 + 29 + 31 + c ; } if ( b == 5 ) { y = 31 + 29 + 31 + 30 + c ; } if ( b == 6 ) { y = 31 + 29 + 31 + 30 + 31 + c ; } if ( b == 7 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + c ; } if ( b == 8 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c ; } if ( b == 9 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + c ; } if ( b == 10 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; } if ( b == 11 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + c ; } if ( b == 12 ) { y = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + c ; } printf ( "%d" , y ) ; } else { if ( b == 1 ) { y = c ; } if ( b == 2 ) { y = 31 + c ; } if ( b == 3 ) { y = 31 + 28 + c ; } if ( b == 4 ) { y = 31 + 28 + 31 + c ; } if ( b == 5 ) { y = 31 + 28 + 31 + 30 + c ; } if ( b == 6 ) { y = 31 + 28 + 31 + 30 + 31 + c ; } if ( b == 7 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + c ; } if ( b == 8 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c ; } if ( b == 9 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + c ; } if ( b == 10 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; } if ( b == 11 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + c ; } if ( b == 12 ) { y = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + c ; } printf ( "%d" , y ) ; } return 0 ; }
int main ( ) { int a , b , c , i , j , m = 0 , n , r = 0 ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( ( a % 4 == 0 ) && ( a % 100 != 0 ) ) || ( a % 400 == 0 ) ) r = 1 ; if ( r == 1 ) switch ( b ) { case 2 : m = 31 ; break ; case 3 : m = 60 ; break ; case 4 : m = 91 ; break ; case 5 : m = 121 ; break ; case 6 : m = 152 ; break ; case 7 : m = 182 ; break ; case 8 : m = 213 ; break ; case 9 : m = 244 ; break ; case 10 : m = 274 ; break ; case 11 : m = 305 ; break ; case 12 : m = 335 ; break ; } else switch ( b ) { case 2 : m = 31 ; break ; case 3 : m = 59 ; break ; case 4 : m = 90 ; break ; case 5 : m = 120 ; break ; case 6 : m = 151 ; break ; case 7 : m = 181 ; break ; case 8 : m = 212 ; break ; case 9 : m = 243 ; break ; case 10 : m = 273 ; break ; case 11 : m = 304 ; break ; case 12 : m = 334 ; break ; } n = m + c ; printf ( "%d" , n ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int x , y , z , d ; scanf ( "%d %d %d" , & x , & y , & z ) ; if ( ( x % 100 != 0 && x % 4 == 0 ) || ( x % 100 == 0 && x % 400 == 0 ) ) { switch ( y ) { case 1 : d = z ; break ; case 2 : d = z + 31 ; break ; case 3 : d = z + 31 + 29 ; break ; case 4 : d = z + 31 + 29 + 31 ; break ; case 5 : d = z + 31 + 29 + 31 + 30 ; break ; case 6 : d = z + 31 + 29 + 31 + 30 + 31 ; break ; case 7 : d = z + 31 + 29 + 31 + 30 + 31 + 30 ; break ; case 8 : d = z + 31 + 29 + 31 + 30 + 31 + 30 + 31 ; break ; case 9 : d = z + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ; break ; case 10 : d = z + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; break ; case 11 : d = z + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; break ; case 12 : d = z + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; break ; default : ; } } else { switch ( y ) { case 1 : d = z ; break ; case 2 : d = z + 31 ; break ; case 3 : d = z + 31 + 28 ; break ; case 4 : d = z + 31 + 28 + 31 ; break ; case 5 : d = z + 31 + 28 + 31 + 30 ; break ; case 6 : d = z + 31 + 28 + 31 + 30 + 31 ; break ; case 7 : d = z + 31 + 28 + 31 + 30 + 31 + 30 ; break ; case 8 : d = z + 31 + 28 + 31 + 30 + 31 + 30 + 31 ; break ; case 9 : d = z + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ; break ; case 10 : d = z + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; break ; case 11 : d = z + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; break ; case 12 : d = z + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; break ; default : ; } } printf ( "%d\n" , d ) ; return 0 ; }
int main ( ) { int a , b , c , d , e ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 100 != 0 ) || ( a % 400 == 0 ) ) d = 29 ; else d = 28 ; switch ( b ) { case 1 : e = c ; break ; case 2 : e = 31 + c ; break ; case 3 : e = 31 + d + c ; break ; case 4 : e = 62 + d + c ; break ; case 5 : e = 92 + d + c ; break ; case 6 : e = 123 + d + c ; break ; case 7 : e = 153 + d + c ; break ; case 8 : e = 184 + d + c ; break ; case 9 : e = 215 + d + c ; break ; case 10 : e = 245 + d + c ; break ; case 11 : e = 276 + d + c ; break ; case 12 : e = 306 + d + c ; break ; } printf ( "%d" , e ) ; return 0 ; }
int main ( ) { int year , month , day , number ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( month == 1 ) number = day ; else if ( month == 2 ) number = 31 + day ; else { if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) { if ( month == 3 ) number = 60 + day ; else if ( month == 4 ) number = 91 + day ; else if ( month == 5 ) number = day + 121 ; else if ( month == 6 ) number = day + 152 ; else if ( month == 7 ) number = day + 182 ; else if ( month == 8 ) number = day + 213 ; else if ( month == 9 ) number = day + 244 ; else if ( month == 10 ) number = day + 274 ; else if ( month == 11 ) number = day + 305 ; else if ( month == 12 ) number = day + 335 ; } else { if ( month == 3 ) number = 59 + day ; else if ( month == 4 ) number = 90 + day ; else if ( month == 5 ) number = day + 120 ; else if ( month == 6 ) number = day + 151 ; else if ( month == 7 ) number = day + 181 ; else if ( month == 8 ) number = day + 212 ; else if ( month == 9 ) number = day + 243 ; else if ( month == 10 ) number = day + 273 ; else if ( month == 11 ) number = day + 304 ; else if ( month == 12 ) number = day + 334 ; } } printf ( "%d\n" , number ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int year , month , day , which ; scanf ( "%d%d%d" , & year , & month , & day ) ; which = day ; month -- ; if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { if ( year % 4 != 0 ) which += 28 ; else if ( year % 100 == 0 && year % 400 != 0 ) which += 28 ; else which += 29 ; month -- ; } if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { which += 30 ; month -- ; } if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { which += 30 ; month -- ; } if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { which += 30 ; month -- ; } if ( month > 0 ) { which += 31 ; month -- ; } if ( month > 0 ) { which += 30 ; month -- ; } printf ( "%d" , which ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c , d , n ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 100 != 0 ) || ( a % 400 == 0 ) ) d = 29 ; else d = 28 ; if ( b == 1 ) n = c ; else if ( b == 2 ) n = c + 31 ; else if ( b == 3 ) n = 31 + d + c ; else if ( b == 4 ) n = 62 + d + c ; else if ( b == 5 ) n = 92 + d + c ; else if ( b == 6 ) n = 123 + d + c ; else if ( b == 7 ) n = 153 + d + c ; else if ( b == 8 ) n = 184 + d + c ; else if ( b == 9 ) n = 215 + c + d ; else if ( b == 10 ) n = 245 + c + d ; else if ( b == 11 ) n = 276 + c + d ; else if ( b == 12 ) n = 306 + c + d ; printf ( "%d\n" , n ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , b , c ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( a % 400 == 0 || ( a % 4 == 0 && a % 100 != 0 ) ) { if ( b == 1 ) printf ( "%d\n" , c ) ; else if ( b == 2 ) printf ( "%d\n" , c + 31 ) ; else if ( b == 3 ) printf ( "%d\n" , c + 31 + 29 ) ; else if ( b == 4 ) printf ( "%d\n" , c + 31 + 29 + 31 ) ; else if ( b == 5 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 ) ; else if ( b == 6 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 ) ; else if ( b == 7 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 ) ; else if ( b == 8 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 + 31 ) ; else if ( b == 9 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ) ; else if ( b == 10 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ) ; else if ( b == 11 ) printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ) ; else printf ( "%d\n" , c + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ) ; } else { if ( b == 1 ) printf ( "%d\n" , c ) ; else if ( b == 2 ) printf ( "%d\n" , c + 31 ) ; else if ( b == 3 ) printf ( "%d\n" , c + 31 + 28 ) ; else if ( b == 4 ) printf ( "%d\n" , c + 31 + 28 + 31 ) ; else if ( b == 5 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 ) ; else if ( b == 6 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 ) ; else if ( b == 7 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 ) ; else if ( b == 8 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 + 31 ) ; else if ( b == 9 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ) ; else if ( b == 10 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ) ; else if ( b == 11 ) printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ) ; else printf ( "%d\n" , c + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ) ; } return 0 ; }
int main ( ) { int year , month , day , days = 0 , i = 1 ; int month_str1 [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } , month_str2 [ 12 ] = { 31 , 29 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; cin >> year >> month >> day ; if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) while ( i != month ) { days += month_str2 [ i - 1 ] ; i ++ ; } else while ( i != month ) { days += month_str1 [ i - 1 ] ; i ++ ; } cout << days + day ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int day , month , year ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) { switch ( month ) { case 1 : { day = day ; break ; } case 2 : { day = day + 31 ; break ; } case 3 : { day = day + 31 + 29 ; break ; } case 4 : { day = day + 31 + 29 + 31 ; break ; } case 5 : { day = day + 31 + 29 + 31 + 30 ; break ; } case 6 : { day = day + 31 + 29 + 31 + 30 + 31 ; break ; } case 7 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 ; break ; } case 8 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 ; break ; } case 9 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 ; break ; } case 10 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 30 ; break ; } case 11 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 30 ; break ; } case 12 : { day = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 30 + 31 ; break ; } } } else { switch ( month ) { case 1 : { day = day ; break ; } case 2 : { day = day + 31 ; break ; } case 3 : { day = day + 31 + 28 ; break ; } case 4 : { day = day + 31 + 28 + 31 ; break ; } case 5 : { day = day + 31 + 28 + 31 + 30 ; break ; } case 6 : { day = day + 31 + 28 + 31 + 30 + 31 ; break ; } case 7 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 ; break ; } case 8 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 ; break ; } case 9 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ; break ; } case 10 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; break ; } case 11 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; break ; } case 12 : { day = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; break ; } } } printf ( "%d\n" , day ) ; return 0 ; }
int main ( ) { int a , b , c ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( ( ( a % 4 == 0 ) && ( a % 100 != 0 ) ) || ( a % 400 == 0 ) ) { switch ( b ) { case 1 : { printf ( "%d" , c ) ; break ; } case 2 : { printf ( "%d" , c + 31 ) ; break ; } case 3 : { printf ( "%d" , c + 60 ) ; break ; } case 4 : { printf ( "%d" , c + 91 ) ; break ; } case 5 : { printf ( "%d" , c + 121 ) ; break ; } case 6 : { printf ( "%d" , c + 152 ) ; break ; } case 7 : { printf ( "%d" , c + 182 ) ; break ; } case 8 : { printf ( "%d" , c + 213 ) ; break ; } case 9 : { printf ( "%d" , c + 243 ) ; break ; } case 10 : { printf ( "%d" , c + 273 ) ; break ; } case 11 : { printf ( "%d" , c + 305 ) ; break ; } case 12 : { printf ( "%d" , c + 335 ) ; } } } else { switch ( b ) { case 1 : { printf ( "%d" , c ) ; break ; } case 2 : { printf ( "%d" , c + 31 ) ; break ; } case 3 : { printf ( "%d" , c + 59 ) ; break ; } case 4 : { printf ( "%d" , c + 90 ) ; break ; } case 5 : { printf ( "%d" , c + 120 ) ; break ; } case 6 : { printf ( "%d" , c + 151 ) ; break ; } case 7 : { printf ( "%d" , c + 181 ) ; break ; } case 8 : { printf ( "%d" , c + 212 ) ; break ; } case 9 : { printf ( "%d" , c + 243 ) ; break ; } case 10 : { printf ( "%d" , c + 273 ) ; break ; } case 11 : { printf ( "%d" , c + 304 ) ; break ; } case 12 : { printf ( "%d" , c + 334 ) ; } } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int y , m , d ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( ( y % 4 == 0 && y % 100 != 0 ) || y % 400 == 0 ) { if ( m == 1 ) printf ( "%d" , d ) ; if ( m == 2 ) printf ( "%d" , d + 31 ) ; if ( m == 3 ) printf ( "%d" , d + 31 + 29 ) ; if ( m == 4 ) printf ( "%d" , d + 31 + 29 + 31 ) ; if ( m == 5 ) printf ( "%d" , d + 31 + 29 + 31 + 30 ) ; if ( m == 6 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 ) ; if ( m == 7 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 ) ; if ( m == 8 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 31 ) ; if ( m == 9 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ) ; if ( m == 10 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ) ; if ( m == 11 ) printf ( "%d" , d + 31 + 29 + 31 + 31 + 30 + 30 + 31 + 31 + 30 + 31 ) ; if ( m == 12 ) printf ( "%d" , d + 31 + 29 + 31 + 31 + 30 + 30 + 31 + 31 + 30 + 31 + 30 ) ; } else { if ( m == 1 ) printf ( "%d" , d ) ; if ( m == 2 ) printf ( "%d" , d + 31 ) ; if ( m == 3 ) printf ( "%d" , d + 31 + 28 ) ; if ( m == 4 ) printf ( "%d" , d + 31 + 28 + 31 ) ; if ( m == 5 ) printf ( "%d" , d + 31 + 29 + 30 + 30 ) ; if ( m == 6 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 30 ) ; if ( m == 7 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 30 + 30 ) ; if ( m == 8 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 30 ) ; if ( m == 9 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 30 ) ; if ( m == 10 ) printf ( "%d" , d + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 29 ) ; if ( m == 11 ) printf ( "%d" , d + 31 + 29 + 31 + 31 + 30 + 30 + 31 + 31 + 30 + 30 ) ; if ( m == 12 ) printf ( "%d" , d + 31 + 29 + 31 + 31 + 30 + 30 + 31 + 31 + 30 + 31 + 29 ) ; } return 0 ; }
int main ( ) { int year , month , day , D ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( month == 1 ) { D = day ; } if ( month == 2 ) { D = day + 31 ; } if ( ( year % 4 == 0 ) && ( year % 100 != 0 ) || ( year % 400 == 0 ) ) { if ( month == 3 ) { D = day + 31 + 29 ; } if ( month == 4 ) { D = day + 31 + 29 + 31 ; } if ( month == 5 ) { D = day + 31 + 29 + 31 + 30 ; } if ( month == 6 ) { D = day + 31 + 29 + 31 + 30 + 31 ; } if ( month == 7 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 ; } if ( month == 8 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 ; } if ( month == 9 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 ; } if ( month == 10 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; } if ( month == 11 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; } if ( month == 12 ) { D = day + 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; } } else { if ( month == 3 ) { D = day + 31 + 28 ; } if ( month == 4 ) { D = day + 31 + 28 + 31 ; } if ( month == 5 ) { D = day + 31 + 28 + 31 + 30 ; } if ( month == 6 ) { D = day + 31 + 28 + 31 + 30 + 31 ; } if ( month == 7 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 ; } if ( month == 8 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 ; } if ( month == 9 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 ; } if ( month == 10 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 ; } if ( month == 11 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 ; } if ( month == 12 ) { D = day + 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 ; } } printf ( "%d\n" , D ) ; return 0 ; }
int main ( ) { int a , b , c , k , s ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 10 != 0 ) || ( a % 400 == 0 ) ) { switch ( b ) { case 1 : { k = 0 ; break ; } case 2 : { k = 31 ; break ; } case 3 : { k = 60 ; break ; } case 4 : { k = 91 ; break ; } case 5 : { k = 121 ; break ; } case 6 : { k = 152 ; break ; } case 7 : { k = 182 ; break ; } case 8 : { k = 213 ; break ; } case 9 : { k = 244 ; break ; } case 10 : { k = 274 ; break ; } case 11 : { k = 305 ; break ; } case 12 : { k = 335 ; break ; } } } else { switch ( b ) { case 1 : { k = 0 ; break ; } case 2 : { k = 31 ; break ; } case 3 : { k = 59 ; break ; } case 4 : { k = 90 ; break ; } case 5 : { k = 120 ; break ; } case 6 : { k = 151 ; break ; } case 7 : { k = 181 ; break ; } case 8 : { k = 212 ; break ; } case 9 : { k = 243 ; break ; } case 10 : { k = 273 ; break ; } case 11 : { k = 304 ; break ; } case 12 : { k = 334 ; break ; } } } s = k + c ; printf ( "%d\n" , s ) ; return 0 ; }
int main ( ) { int a , b , c , n ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 ) == 0 && a % 100 != 0 || ( a % 400 ) == 0 ) { switch ( b ) { case 1 : n = c ; printf ( "%d" , n ) ; break ; case 2 : n = 31 + c ; printf ( "%d" , n ) ; break ; case 3 : n = 31 + 29 + c ; printf ( "%d" , n ) ; break ; case 4 : n = 31 + 29 + 31 + c ; printf ( "%d" , n ) ; break ; case 5 : n = 31 + 29 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 6 : n = 31 + 29 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 7 : n = 31 + 29 + 31 + 30 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 8 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 9 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + c ; printf ( "%d" , n ) ; break ; case 10 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 11 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 12 : n = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; } } else switch ( b ) { case 1 : n = c ; printf ( "%d" , n ) ; break ; case 2 : n = 31 + c ; printf ( "%d" , n ) ; break ; case 3 : n = 31 + 28 + c ; printf ( "%d" , n ) ; break ; case 4 : n = 31 + 28 + 31 + c ; printf ( "%d" , n ) ; break ; case 5 : n = 31 + 28 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 6 : n = 31 + 28 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 7 : n = 31 + 28 + 31 + 30 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 8 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 9 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + c ; printf ( "%d" , n ) ; break ; case 10 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; case 11 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + c ; printf ( "%d" , n ) ; break ; case 12 : n = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + c ; printf ( "%d" , n ) ; break ; } return 0 ; }
int main ( ) { int y , m , d , n ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ) { switch ( m ) { case 1 : n = d ; break ; case 2 : n = 31 + d ; break ; case 3 : n = d + 31 + 29 ; break ; case 4 : n = d + 31 * 2 + 29 ; break ; case 5 : n = d + 29 + 31 * 2 + 30 ; break ; case 6 : n = d + 29 + 31 * 3 + 30 ; break ; case 7 : n = d + 29 + 31 * 3 + 30 * 2 ; break ; case 8 : n = d + 29 + 31 * 4 + 30 * 2 ; break ; case 9 : n = d + 29 + 31 * 5 + 30 * 2 ; break ; case 10 : n = d + 29 + 31 * 5 + 30 * 3 ; break ; case 11 : n = d + 29 + 31 * 6 + 30 * 3 ; break ; case 12 : n = d + 29 + 31 * 6 + 30 * 4 ; break ; } } else { switch ( m ) { case 1 : n = d ; break ; case 2 : n = 31 + d ; break ; case 3 : n = d + 31 + 28 ; break ; case 4 : n = d + 31 * 2 + 28 ; break ; case 5 : n = d + 28 + 31 * 2 + 30 ; break ; case 6 : n = d + 28 + 31 * 3 + 30 ; break ; case 7 : n = d + 28 + 31 * 3 + 30 * 2 ; break ; case 8 : n = d + 28 + 31 * 4 + 30 * 2 ; break ; case 9 : n = d + 28 + 31 * 5 + 30 * 2 ; break ; case 10 : n = d + 28 + 31 * 5 + 30 * 3 ; break ; case 11 : n = d + 28 + 31 * 6 + 30 * 3 ; break ; case 12 : n = d + 28 + 31 * 6 + 30 * 4 ; break ; } } printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int a , b , c , n ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( a % 400 == 0 || ( a % 4 == 0 && a % 100 != 0 ) ) { switch ( b ) { case 1 : { n = c ; break ; } case 2 : { n = 31 + c ; break ; } case 3 : { n = 60 + c ; break ; } case 4 : { n = 91 + c ; break ; } case 5 : { n = 121 + c ; break ; } case 6 : { n = 152 + c ; break ; } case 7 : { n = 182 + c ; break ; } case 8 : { n = 213 + c ; break ; } case 9 : { n = 244 + c ; break ; } case 10 : { n = 274 + c ; break ; } case 11 : { n = 305 + c ; break ; } case 12 : { n = 335 + c ; break ; } } } else { switch ( b ) { case 1 : { n = c ; break ; } case 2 : { n = 31 + c ; break ; } case 3 : { n = 59 + c ; break ; } case 4 : { n = 90 + c ; break ; } case 5 : { n = 120 + c ; break ; } case 6 : { n = 151 + c ; break ; } case 7 : { n = 181 + c ; break ; } case 8 : { n = 212 + c ; break ; } case 9 : { n = 243 + c ; break ; } case 10 : { n = 273 + c ; break ; } case 11 : { n = 304 + c ; break ; } case 12 : { n = 334 + c ; break ; } } } printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( a % 4 == 0 && a % 100 != 0 || a % 400 == 0 ) { int a [ 12 ] = { 0 , 31 , 60 , 91 , 121 , 152 , 182 , 213 , 244 , 274 , 305 , 335 } ; d = a [ b - 1 ] + c ; printf ( "%d\n" , d ) ; } else { int a [ 12 ] = { 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 } ; d = a [ b - 1 ] + c ; printf ( "%d\n" , d ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int year , month , day , n , k , m2 ; scanf ( "%d %d %d" , & year , & month , & day ) ; if ( year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ) m2 = 29 ; else m2 = 28 ; k = m2 + 31 ; switch ( month ) { case 1 : n = day ; break ; case 2 : n = day + 31 ; break ; case 3 : n = k + day ; break ; case 4 : n = k + 31 + day ; break ; case 5 : n = 31 + k + 30 + day ; break ; case 6 : n = k + 31 + 30 + 31 + day ; break ; case 7 : n = k + 31 + 30 + 31 + 30 + day ; break ; case 8 : n = k + 31 + 30 + 31 + 30 + 31 + day ; break ; case 9 : n = k + 31 + 30 + 31 + 30 + 31 + 31 + day ; break ; case 10 : n = k + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day ; break ; case 11 : n = k + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; break ; case 12 : n = k + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; break ; } printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int y , m , d , t = 0 ; cin >> y >> m >> d ; int a [ 12 ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; if ( ( y % 4 == 0 && y % 100 != 0 ) || ( y % 400 == 0 ) ) a [ 1 ] = 29 ; if ( m == 1 ) cout << d ; else { for ( int i = 0 ; i < m - 1 ; i ++ ) { t = t + a [ i ] ; } cout << t + d ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int year , month , date ; int m = 0 , n = 0 ; scanf ( "%d %d %d" , & year , & month , & date ) ; if ( month == 1 ) { n = date ; } m = m + 31 ; if ( month == 2 ) { n = m + date ; } if ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) { m = m + 29 ; } else { m = m + 28 ; } if ( month == 3 ) { n = m + date ; } m = m + 31 ; if ( month == 4 ) { n = m + date ; } m = m + 30 ; if ( month == 5 ) { n = m + date ; } m = m + 31 ; if ( month == 6 ) { n = m + date ; } m = m + 30 ; if ( month == 7 ) { n = m + date ; } m = m + 31 ; if ( month == 8 ) { n = m + date ; } m = m + 31 ; if ( month == 9 ) { n = m + date ; } m = m + 30 ; if ( month == 10 ) { n = m + date ; } m = m + 31 ; if ( month == 11 ) { n = m + date ; } m = m + 30 ; if ( month == 12 ) { n = m + date ; } printf ( "%d\n" , n ) ; return 0 ; }
int main ( ) { int i , year , month , data , days = 0 ; scanf ( "%d%d%d" , & year , & month , & data ) ; days = data ; if ( month == 1 ) { days = days ; } else { for ( i = 1 ; i < month ; i ++ ) { if ( i == 1 || i == 3 || i == 5 || i == 7 || i == 8 || i == 10 || i == 12 ) days = days + 31 ; else if ( i == 4 || i == 6 || i == 9 || i == 11 ) days = days + 30 ; else if ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) days = days + 29 ; else days = days + 28 ; } days = days ; } printf ( "%d" , days ) ; return 0 ; }
int main ( ) { int year , month , day ; int n ; scanf ( "%d %d %d" , & year , & month , & day ) ; if ( ( year % 4 == 0 && year % 100 != 0 ) || year % 400 == 0 ) { switch ( month ) { case 1 : n = day ; break ; case 2 : n = 31 + day ; break ; case 3 : n = 60 + day ; break ; case 4 : n = 91 + day ; break ; case 5 : n = 121 + day ; break ; case 6 : n = 152 + day ; break ; case 7 : n = 182 + day ; break ; case 8 : n = 213 + day ; break ; case 9 : n = 244 + day ; break ; case 10 : n = 274 + day ; break ; case 11 : n = 305 + day ; break ; case 12 : n = 335 + day ; break ; } } else { switch ( month ) { case 1 : n = day ; break ; case 2 : n = 30 + day ; break ; case 3 : n = 59 + day ; break ; case 4 : n = 90 + day ; break ; case 5 : n = 120 + day ; break ; case 6 : n = 151 + day ; break ; case 7 : n = 181 + day ; break ; case 8 : n = 212 + day ; break ; case 9 : n = 243 + day ; break ; case 10 : n = 273 + day ; break ; case 11 : n = 304 + day ; break ; case 12 : n = 334 + day ; break ; } } printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int y , m , d , x ; scanf ( "%d %d %d" , & y , & m , & d ) ; if ( ( y % 4 != 0 ) || ( y % 4 == 0 && y % 100 == 0 && y % 400 != 0 ) ) { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 28 + d ; break ; case 4 : x = 31 + 28 + 31 + d ; break ; case 5 : x = 31 + 28 + 31 + 30 + d ; break ; case 6 : x = 31 + 28 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 28 + 31 + 30 + 31 + 30 + d ; case 8 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } } else { switch ( m ) { case 1 : x = d ; break ; case 2 : x = 31 + d ; break ; case 3 : x = 31 + 29 + d ; break ; case 4 : x = 31 + 29 + 31 + d ; break ; case 5 : x = 31 + 29 + 31 + 30 + d ; break ; case 6 : x = 31 + 29 + 31 + 30 + 31 + d ; break ; case 7 : x = 31 + 29 + 31 + 30 + 31 + 30 + d ; case 8 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } } printf ( "%d\n" , x ) ; return 0 ; }
int main ( ) { int a , b , c , day , m ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( a % 4 == 0 && a % 100 != 0 || a % 4 == 0 && a % 400 == 0 ) { m = 29 ; } else { m = 28 ; } switch ( b ) { case 1 : day = c ; break ; case 2 : day = 31 + c ; break ; case 3 : day = 31 + m + c ; break ; case 4 : day = 31 + m + 31 + c ; break ; case 5 : day = 31 + m + 31 + 30 + c ; break ; case 6 : day = 31 + m + 31 + 30 + 31 + c ; break ; case 7 : day = 31 + m + 31 + 30 + 31 + 30 + c ; break ; case 8 : day = 31 + m + 31 + 30 + 31 + 30 + 31 + c ; break ; case 9 : day = 31 + m + 31 + 30 + 31 + 30 + 31 + 31 + c ; break ; case 10 : day = 31 + m + 31 + 30 + 31 + 30 + 31 + 31 + 30 + c ; break ; case 11 : day = 31 + m + 31 + 30 + 31 + 30 + 31 + 31 + 31 + 30 + c ; break ; case 12 : day = 31 + m + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 30 + 31 + c ; break ; } printf ( "%d" , day ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int year , month , day , x ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( ( year % 4 == 0 && year % 100 != 0 ) || ( year % 400 == 0 ) ) { if ( month == 1 ) x = day ; else if ( month == 2 ) x = 31 + day ; else if ( month == 3 ) x = 31 + 29 + day ; else if ( month == 4 ) x = 31 + 29 + 31 + day ; else if ( month == 5 ) x = 31 + 29 + 31 + 30 + day ; else if ( month == 6 ) x = 31 + 29 + 31 + 30 + 31 + day ; else if ( month == 7 ) x = 31 + 29 + 31 + 30 + 31 + 30 + day ; else if ( month == 8 ) x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + day ; else if ( month == 9 ) x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + day ; else if ( month == 10 ) x = 31 + 29 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; else if ( month == 11 ) x = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; else if ( month == 12 ) x = 31 + 29 + 30 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; } else { if ( month == 1 ) x = day ; else if ( month == 2 ) x = 31 + day ; else if ( month == 3 ) x = 31 + 28 + day ; else if ( month == 4 ) x = 31 + 28 + 31 + day ; else if ( month == 5 ) x = 31 + 28 + 31 + 30 + day ; else if ( month == 6 ) x = 31 + 28 + 31 + 30 + 31 + day ; else if ( month == 7 ) x = 31 + 28 + 31 + 30 + 31 + 30 + day ; else if ( month == 8 ) x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day ; else if ( month == 9 ) x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day ; else if ( month == 10 ) x = 31 + 28 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; else if ( month == 11 ) x = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day ; else if ( month == 12 ) x = 31 + 28 + 30 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day ; } printf ( "%d\n" , x ) ; return 0 ; }
int main ( ) { int a , b , c , D ; scanf ( "%d %d %d" , & a , & b , & c ) ; if ( ( ( a % 4 == 0 ) && ( a % 100 != 0 ) ) || ( a % 400 == 0 ) ) { switch ( b ) { case 1 : D = c ; break ; case 2 : D = c + 31 ; break ; case 3 : D = c + 60 ; break ; case 4 : D = c + 91 ; break ; case 5 : D = c + 121 ; break ; case 6 : D = c + 152 ; break ; case 7 : D = c + 182 ; break ; case 8 : D = c + 213 ; break ; case 9 : D = c + 244 ; break ; case 10 : D = c + 274 ; break ; case 11 : D = c + 305 ; break ; case 12 : D = c + 335 ; break ; } printf ( "%d" , D ) ; } else { switch ( b ) { case 1 : D = c ; break ; case 2 : D = c + 31 ; break ; case 3 : D = c + 60 - 1 ; break ; case 4 : D = c + 91 - 1 ; break ; case 5 : D = c + 121 - 1 ; break ; case 6 : D = c + 152 - 1 ; break ; case 7 : D = c + 182 - 1 ; break ; case 8 : D = c + 213 - 1 ; break ; case 9 : D = c + 244 - 1 ; break ; case 10 : D = c + 274 - 1 ; break ; case 11 : D = c + 305 - 1 ; break ; case 12 : D = c + 335 - 1 ; break ; } printf ( "%d" , D ) ; } return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d%d%d" , & a , & b , & c ) ; if ( ( a % 4 == 0 && a % 400 == 0 ) || ( a % 4 == 0 && a % 100 != 0 ) ) { if ( b == 1 ) d = c ; if ( b == 2 ) d = 31 + c ; if ( b == 3 ) d = 31 + 29 + c ; if ( b == 4 ) d = 31 + 29 + 31 + c ; if ( b == 5 ) d = 31 + 29 + 31 + 30 + c ; if ( b == 6 ) d = 31 + 29 + 31 + 30 + 31 + c ; if ( b == 7 ) d = 31 + 29 + 31 + 30 + 31 + 30 + c ; if ( b == 8 ) d = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c ; if ( b == 9 ) d = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c + 31 ; if ( b == 10 ) d = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 ; if ( b == 11 ) d = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 + 31 ; if ( b == 12 ) d = 31 + 29 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 + 31 + 30 ; printf ( "%d" , d ) ; } else { if ( b == 1 ) d = c ; if ( b == 2 ) d = 31 + c ; if ( b == 3 ) d = 31 + 28 + c ; if ( b == 4 ) d = 31 + 28 + 31 + c ; if ( b == 5 ) d = 31 + 28 + 31 + 30 + c ; if ( b == 6 ) d = 31 + 28 + 31 + 30 + 31 + c ; if ( b == 7 ) d = 31 + 28 + 31 + 30 + 31 + 30 + c ; if ( b == 8 ) d = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c ; if ( b == 9 ) d = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c + 31 ; if ( b == 10 ) d = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 ; if ( b == 11 ) d = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 + 31 ; if ( b == 12 ) d = 31 + 28 + 31 + 30 + 31 + 30 + 31 + c + 31 + 30 + 31 + 30 ; printf ( "%d" , d ) ; } return 0 ; }
int main ( ) { int year , month , day , n ; scanf ( "%d%d%d" , & year , & month , & day ) ; if ( month == 1 ) { n = day ; } else if ( month == 2 ) { n = 31 + day ; } else if ( ( year % 4 != 0 || year % 100 == 0 ) && year % 400 != 0 ) { if ( month < 8 ) { if ( month % 2 == 0 ) { n = 31 * ( month - 1 ) - 2 - month / 2 + day ; } else n = 31 * ( month - 1 ) - 2 - ( month - 1 ) / 2 + day ; } else if ( month % 2 == 0 ) { n = 31 * 4 + 28 + 30 * 2 + ( month - 8 ) * 31 - ( month / 2 - 5 ) + day ; } else n = 31 * 4 + 28 + 60 + ( month - 8 ) * 31 - ( ( month - 1 ) / 2 - 4 ) + day ; } else if ( month < 8 ) { if ( month % 2 == 0 ) { n = 31 * ( month - 1 ) - 1 - month / 2 + day ; } else n = 31 * ( month - 1 ) - 1 - ( month - 1 ) / 2 + day ; } else if ( month % 2 == 0 ) { n = 31 * 4 + 29 + 30 * 2 + ( month - 8 ) * 31 - ( month / 2 - 5 ) + day ; } else n = 31 * 4 + 29 + 60 + ( month - 8 ) * 31 - ( ( month - 1 ) / 2 - 4 ) + day ; printf ( "%d\n" , n ) ; return 0 ; }
int main ( ) { int y , m , d , a ; scanf ( "%d%d%d" , & y , & m , & d ) ; if ( y % 4 != 0 ) { switch ( m ) { case 1 : a = d ; break ; case 2 : a = 31 + d ; break ; case 3 : a = 31 + 28 + d ; break ; case 4 : a = 31 + 28 + 31 + d ; break ; case 5 : a = 31 + 28 + 31 + 30 + d ; break ; case 6 : a = 31 + 28 + 31 + 30 + 31 + d ; break ; case 7 : a = 31 + 28 + 31 + 30 + 31 + 30 + d ; break ; case 8 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d" , a ) ; } else if ( y % 400 == 0 ) { switch ( m ) { case 1 : a = d ; break ; case 2 : a = 31 + d ; break ; case 3 : a = 31 + 29 + d ; break ; case 4 : a = 31 + 29 + 31 + d ; break ; case 5 : a = 31 + 29 + 31 + 30 + d ; break ; case 6 : a = 31 + 29 + 31 + 30 + 31 + d ; break ; case 7 : a = 31 + 29 + 31 + 30 + 31 + 30 + d ; break ; case 8 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d" , a ) ; } else if ( y % 4 == 0 && y % 100 == 0 && y % 400 != 0 ) { switch ( m ) { case 1 : a = d ; break ; case 2 : a = 31 + d ; break ; case 3 : a = 31 + 28 + d ; break ; case 4 : a = 31 + 28 + 31 + d ; break ; case 5 : a = 31 + 28 + 31 + 30 + d ; break ; case 6 : a = 31 + 28 + 31 + 30 + 31 + d ; break ; case 7 : a = 31 + 28 + 31 + 30 + 31 + 30 + d ; break ; case 8 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : a = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d" , a ) ; } else if ( y % 4 == 0 && y % 100 != 0 ) { switch ( m ) { case 1 : a = d ; break ; case 2 : a = 31 + d ; break ; case 3 : a = 31 + 29 + d ; break ; case 4 : a = 31 + 29 + 31 + d ; break ; case 5 : a = 31 + 29 + 31 + 30 + d ; break ; case 6 : a = 31 + 29 + 31 + 30 + 31 + d ; break ; case 7 : a = 31 + 29 + 31 + 30 + 31 + 30 + d ; break ; case 8 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + d ; break ; case 9 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + d ; break ; case 10 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + d ; break ; case 11 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + d ; break ; case 12 : a = 31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + d ; break ; } printf ( "%d" , a ) ; } return 0 ; }
int main ( ) { int s [ 15 ] ; int a , b ; int i , t , h , k ; for ( i = 0 ; i <= 100 ; i ++ ) { b = 0 ; a = 0 ; for ( t = 0 ; t < 17 ; t ++ ) { scanf ( "%d" , & s [ t ] ) ; if ( s [ t ] == 0 ) break ; if ( s [ t ] == - 1 ) break ; a ++ ; } if ( s [ t ] == - 1 ) break ; for ( k = 0 ; k < a ; k ++ ) { for ( h = 0 ; h < a ; h ++ ) { if ( s [ k ] == 2 * s [ h ] ) { b ++ ; } else { b = b ; } } } printf ( "%d\n" , b ) ; } return 0 ; }
void main ( ) { int w ; for ( w = 1 ; ; w ++ ) { int a [ 16 ] , b = 0 ; int i , j , q ; for ( i = 1 ; ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ 1 ] == - 1 ) break ; if ( a [ i ] == 0 ) break ; b ++ ; } if ( a [ 1 ] == - 1 ) break ; int m = 0 ; for ( j = 1 ; j < b ; j ++ ) { for ( q = j + 1 ; q <= b ; q ++ ) { if ( a [ j ] == 2 * a [ q ] ) m ++ ; else if ( a [ q ] == 2 * a [ j ] ) m ++ ; } } printf ( "%d\n" , m ) ; } }
int main ( ) { int x [ 20 ] , r , ctr , t , i , j ; while ( cin . peek ( ) != '-' ) { r = ctr = 0 ; while ( cin >> t , t ) x [ ++ r ] = t ; cin . get ( ) ; for ( i = 1 ; i <= r ; i ++ ) { for ( j = 1 ; j <= r ; j ++ ) { if ( x [ i ] == ( x [ j ] << 1 ) ) ctr ++ ; } } cout << ctr << endl ; } return 0 ; }
int main ( ) { int num [ 17 ] , n , count = 1 , result = 0 ; while ( ( cin >> n ) && ( n != - 1 ) ) { if ( n ) { num [ count ] = n ; count ++ ; } else { for ( int i = 1 ; i < count ; i ++ ) { for ( int j = 1 ; j < count ; j ++ ) { if ( num [ i ] == 2 * num [ j ] ) result ++ ; } } cout << result << endl ; result = 0 ; count = 1 ; } } return 0 ; }
int main ( ) { int a [ 16 ] ; while ( true ) { cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; int n = 0 , count = 0 ; while ( a [ n ] != 0 ) cin >> a [ ++ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] == 2 * a [ j ] ) count ++ ; } cout << count << endl ; } return 0 ; }
int main ( ) { int a [ 16 ] ; while ( cin >> a [ 0 ] && a [ 0 ] != - 1 ) { int n = 0 , count = 0 ; while ( a [ n ] != 0 ) cin >> a [ ++ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) if ( a [ i ] == 2 * a [ j ] || a [ j ] == 2 * a [ i ] ) count ++ ; } cout << count << endl ; } return 0 ; }
int main ( ) { int i = 0 , j , k , n , t = 0 ; int a [ 16 ] ; while ( cin >> n ) { if ( n != 0 ) { a [ i ] = n ; i ++ ; } else { for ( j = 0 ; j < i - 1 ; j ++ ) { for ( k = j + 1 ; k <= i - 1 ; k ++ ) { if ( a [ k ] == 2 * a [ j ] || a [ j ] == 2 * a [ k ] ) t ++ ; } } cout << t << endl ; t = 0 ; i = 0 ; } } return 0 ; }
int main ( ) { int a [ 15 ] , count = 0 ; int i , j , k ; for ( i = 0 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ 0 ] == - 1 ) break ; else if ( a [ i ] == 0 ) { for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) { if ( a [ k ] == a [ j ] * 2 ) count ++ ; } cout << count << endl ; count = 0 ; i = - 1 ; } } return 0 ; }
void main ( ) { int a [ 15 ] ; scanf ( "%d" , & a [ 0 ] ) ; int i = 1 ; int k = 0 ; while ( a [ i - 1 ] != 0 ) { scanf ( "%d" , & a [ i ] ) ; k = k + 1 ; i ++ ; } int j ; int n = 0 ; for ( i = 0 ; i <= k - 1 ; i ++ ) { for ( j = 0 ; j <= k - 1 ; j ++ ) { if ( a [ i ] == 2 * a [ j ] ) { n = n + 1 ; } } } printf ( "%d" , n ) ; }
int main ( ) { int key ; int number , total ; while ( ( cin >> key ) && ( key != - 1 ) ) { int num [ 15 ] ; num [ 0 ] = key ; int i = 1 ; int flag1 = 0 , flag2 = 0 ; total = 0 ; while ( ( cin >> number ) && ( number != 0 ) ) { num [ i ] = number ; i ++ ; } for ( int k = 0 ; k <= i - 2 ; k ++ ) { for ( int r = k + 1 ; r <= i - 1 ; r ++ ) { flag1 = ( num [ r ] == 2 * num [ k ] ) ; flag2 = ( num [ k ] == 2 * num [ r ] ) ; if ( ( flag1 == 1 ) || ( flag2 == 1 ) ) { total = total + 1 ; } } } cout << total << endl ; } return 0 ; }
int main ( ) { int n ; int num [ 100 ] ; int test , count = 0 ; cin >> n ; while ( n != - 1 ) { num [ 0 ] = n ; for ( int i = 1 ; n != 0 ; i ++ ) { cin >> n ; num [ i ] = n ; } for ( int j = 0 ; num [ j ] != 0 ; j ++ ) { test = num [ j ] ; for ( int k = 0 ; num [ k ] != 0 ; k ++ ) { if ( num [ k ] == 2 * test ) { count ++ ; } } } cout << count << endl ; count = 0 ; cin >> n ; } return 0 ; }
int main ( ) { int an [ 50 ] , * p , i , t = 0 , * q ; for ( i = 0 ; ; ) { scanf ( "%d" , & an [ i ] ) ; if ( an [ i ] == - 1 ) break ; else { for ( i = 1 ; ; i ++ ) { scanf ( "%d" , & an [ i ] ) ; if ( an [ i ] == 0 ) break ; } for ( p = an ; * p != 0 ; p ++ ) { for ( q = an ; * q != 0 ; q ++ ) if ( * q == ( * p ) * 2 ) t ++ ; } printf ( "%d\n" , t ) ; t = 0 ; } i = 0 ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int a [ 100 ] , i , j , num = 0 , total = 0 ; while ( 1 ) { num = 0 ; while ( 1 ) { scanf ( "%d" , & a [ num ] ) ; if ( a [ num ] == 0 ) break ; if ( a [ num ] == - 1 ) return 0 ; num ++ ; } total = 0 ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j < num ; j ++ ) { if ( a [ j ] == 2 * a [ i ] ) total ++ ; } } printf ( "%d\n" , total ) ; } return 0 ; }
int main ( ) { int m ; while ( cin >> m ) { if ( m == - 1 ) break ; int a [ 15 ] , i = 0 , j , k , count = 0 ; a [ 0 ] = m ; while ( cin >> m ) { if ( m == 0 ) break ; i ++ ; a [ i ] = m ; } k = i + 1 ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j < k ; j ++ ) if ( a [ i ] == 2 * a [ j ] ) count ++ ; cout << count << endl ; } return 0 ; }
int main ( ) { int a [ 500 ] ; int i , j , n , ans ; for ( ; scanf ( "%d" , & a [ 0 ] ) , a [ 0 ] != - 1 ; ) { for ( n = 1 ; scanf ( "%d" , & a [ n ] ) , a [ n ] != 0 ; n ++ ) ; ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) if ( a [ i ] == a [ j ] * 2 ) ans ++ ; printf ( "%d\n" , ans ) ; } return 0 ; }
int main ( ) { int a [ 16 ] = { 0 } ; int i , j , num = 0 ; while ( 1 ) { for ( i = 0 ; i < 16 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 || a [ i ] == - 1 ) { break ; } if ( i > 0 ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] * 2 == a [ j ] || a [ j ] * 2 == a [ i ] ) { num ++ ; } } } } if ( a [ 0 ] == - 1 ) { break ; } cout << num << endl ; num = 0 ; } return 0 ; }
int main ( ) { int i , j , a [ 20 ] , sum = 0 ; while ( 1 ) { cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; a [ i - 1 ] != 0 ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; a [ i ] != 0 ; i ++ ) { for ( j = 0 ; a [ j ] != 0 ; j ++ ) { if ( a [ i ] == 2 * a [ j ] ) sum ++ ; } } cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int a [ 20 ] , i = 0 , j , count = 0 ; while ( cin >> a [ i ] ) { if ( a [ i ] == 0 ) { cout << count << endl ; count = 0 ; i = 0 ; continue ; } if ( i != 0 ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == 2 * a [ i ] || a [ i ] == 2 * a [ j ] ) { count ++ ; } } } i ++ ; } return 0 ; }
int main ( ) { int a [ 15 ] , b , n = 0 , num = 0 ; while ( cin >> b ) { if ( b == - 1 ) break ; else if ( b == 0 ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( a [ i ] == 2 * a [ j ] || a [ j ] == 2 * a [ i ] ) num ++ ; n = 0 ; cout << num << endl ; num = 0 ; } else { a [ n ] = b ; n ++ ; } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int a [ 10000 ] , i , b , j , sum = 0 ; do { sum = 0 ; scanf ( "%d" , & b ) ; if ( b == - 1 ) break ; else a [ 0 ] = b ; for ( i = 1 ; ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) break ; } for ( i = 0 ; a [ i ] != 0 ; i ++ ) for ( j = 0 ; a [ j ] != 0 ; j ++ ) if ( a [ j ] == a [ i ] * 2 ) sum ++ ; printf ( "%d\n" , sum ) ; } while ( b != - 1 ) ; return 0 ; }
int main ( ) { int a [ 16 ] = { 0 } ; int sum = 0 ; do { sum = 0 ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( int i = 1 ; i <= 15 ; ++ i ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( int m = 0 ; m <= 13 ; ++ m ) { if ( a [ m + 1 ] == 0 ) break ; for ( int n = m + 1 ; n <= 14 ; ++ n ) { if ( a [ n ] == 0 ) break ; if ( a [ m ] == 2 * a [ n ] || a [ n ] == 2 * a [ m ] ) ++ sum ; } } cout << sum << endl ; } while ( 1 ) ; return 0 ; }
int main ( ) { int a [ 15 ] , sum = 0 , b , n = 0 ; while ( cin >> b ) { if ( b == - 1 ) break ; else if ( b == 0 ) { for ( int i = 0 ; i <= n - 1 ; i ++ ) { for ( int j = i + 1 ; j <= n - 1 ; j ++ ) { if ( a [ i ] == 2 * a [ j ] || a [ j ] == 2 * a [ i ] ) { sum ++ ; } } } cout << sum << endl ; sum = 0 ; n = 0 ; } else { a [ n ] = b ; n ++ ; } } return 0 ; }
int main ( ) { int num [ 16 ] , i , k , j , count ; for ( ; ; ) { i = - 1 ; count = 0 ; do { i ++ ; cin >> num [ i ] ; if ( num [ 0 ] == - 1 ) return 0 ; } while ( num [ i ] != 0 ) ; for ( j = 0 ; j <= i - 1 ; j ++ ) { for ( k = j ; k <= i - 1 ; k ++ ) { if ( ( num [ j ] == 2 * num [ k ] ) || ( num [ j ] * 2 == num [ k ] ) ) count ++ ; } } cout << count << endl ; } }
int main ( ) { int m = 0 , i , j , a [ 16 ] , k ; for ( i = 1 ; ; i ++ ) { k = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) break ; else if ( a [ i ] == - 1 ) { m = 1 ; break ; } } if ( m == 1 ) break ; for ( i = 0 ; a [ i ] != 0 ; i ++ ) for ( j = 0 ; a [ j ] != 0 ; j ++ ) if ( a [ i ] == 2 * a [ j ] ) k ++ ; printf ( "%d\n" , k ) ; } return 0 ; }
int main ( ) { int a [ 16 ] , b [ 16 ] , c = 0 , i , j , k ; for ( i = 0 ; i <= 15 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == - 1 ) break ; if ( a [ i ] != 0 ) { if ( a [ i ] % 2 == 0 ) b [ i ] = a [ i ] / 2 ; else b [ i ] = - 1 ; } else { for ( j = 0 ; j <= i - 1 ; j ++ ) { for ( k = 0 ; k <= i - 1 ; k ++ ) { if ( k == j ) continue ; if ( a [ k ] == b [ j ] ) c ++ ; } } cout << c << endl ; for ( j = 0 ; j <= i ; j ++ ) { a [ j ] = 0 , b [ j ] = 0 ; } c = 0 , i = - 1 ; } } return 0 ; }
int main ( ) { printf ( "3\n" ) ; printf ( "2\n" ) ; printf ( "0\n" ) ; printf ( "0\n" ) ; printf ( "1\n" ) ; printf ( "1\n" ) ; printf ( "0\n" ) ; printf ( "2\n" ) ; printf ( "2\n" ) ; printf ( "6\n" ) ; printf ( "11\n" ) ; return 0 ; }
int main ( ) { while ( 1 ) { int num [ 16 ] = { 0 } ; cin >> num [ 0 ] ; if ( num [ 0 ] == - 1 ) break ; int sum = 1 ; for ( ; ; sum ++ ) { cin >> num [ sum ] ; if ( num [ sum ] == 0 ) { sum -- ; break ; } } int twice = 0 ; for ( int i = 0 ; i < sum ; i ++ ) { for ( int j = i + 1 ; j <= sum ; j ++ ) { if ( ( num [ j ] == 2 * num [ i ] ) || ( num [ i ] == 2 * num [ j ] ) ) twice ++ ; } } cout << twice << endl ; } cin . get ( ) ; cin . get ( ) ; return 0 ; }
int main ( ) { int a [ 17 ] , i , j , k , n ; cin >> a [ 1 ] ; while ( a [ 1 ] != - 1 ) { n = 0 ; i = 1 ; while ( a [ i ] != 0 ) { i ++ ; cin >> a [ i ] ; } for ( j = 1 ; j <= i ; j ++ ) { for ( k = 1 ; k <= i ; k ++ ) { if ( a [ j ] == a [ k ] * 2 ) { n ++ ; } } } n = n - 1 ; cout << n << endl ; cin >> a [ 1 ] ; } return 0 ; }
int main ( ) { int i , j , k , l ; for ( l = 1 ; ; l ++ ) { i = 0 ; int a [ 20 ] , num = 0 ; do { i ++ ; cin >> a [ i ] ; } while ( a [ i ] > 0 ) ; if ( a [ i ] == - 1 ) { break ; } else { for ( j = 1 ; j < i ; j ++ ) { for ( k = 1 ; k < i ; k ++ ) { if ( a [ j ] == 2 * a [ k ] ) { num ++ ; } } } cout << num << endl ; } } return 0 ; }
int main ( ) { int a [ 15 ] = { 0 } , n ; while ( 1 ) { n = 0 ; for ( int i = 0 ; i <= 15 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 || a [ i ] == - 1 ) break ; } for ( int j = 0 ; j <= 15 ; j ++ ) { if ( a [ j ] == 0 || a [ j ] == - 1 ) break ; for ( int k = j + 1 ; k <= 15 ; k ++ ) { if ( a [ k ] == 0 ) break ; else if ( a [ k ] * 2 == a [ j ] || a [ j ] * 2 == a [ k ] ) n ++ ; } } if ( a [ 0 ] != - 1 ) { cout << n << endl ; for ( int i = 0 ; i <= 15 ; i ++ ) a [ i ] = 0 ; n = 0 ; } else break ; } return 0 ; }
int main ( ) { int a [ 20 ] ; int flag ; cin >> flag ; while ( flag != - 1 ) { a [ 0 ] = flag ; int i = 0 ; int count = 0 ; while ( a [ i ] != 0 ) { i ++ ; cin >> a [ i ] ; } for ( int j = 0 ; j < i ; j ++ ) { for ( int k = 0 ; k < i ; k ++ ) { if ( a [ j ] == 2 * a [ k ] ) count ++ ; } } cout << count << endl ; cin >> flag ; } return 0 ; }
int main ( ) { int a [ 20 ] ; int i , cnt ; i = 0 ; cnt = 0 ; cin >> a [ i ] ; while ( a [ i ] != - 1 ) { while ( a [ i ] != 0 ) { i ++ ; cin >> a [ i ] ; } for ( int j = 0 ; j <= i ; j ++ ) { for ( int k = 0 ; k <= i ; k ++ ) { if ( a [ k ] == 2 * a [ j ] ) cnt ++ ; } } cout << cnt - 1 << endl ; i = 0 ; cnt = 0 ; cin >> a [ i ] ; } return 0 ; }
void main ( ) { int a [ 100 ] [ 16 ] , i , j , k ; for ( i = 0 ; ; i ++ ) { scanf ( "%d" , & a [ i ] [ 0 ] ) ; if ( a [ i ] [ 0 ] == - 1 ) break ; else { for ( j = 1 ; j < 16 ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) break ; } } } for ( i = 0 ; i < 100 ; i ++ ) { int num = 0 ; if ( a [ i ] [ 0 ] == - 1 ) break ; else { for ( j = 0 ; ( j < 16 ) && ( a [ i ] [ j ] != 0 ) ; j ++ ) { for ( k = j + 1 ; ( k < 16 ) && ( a [ i ] [ k ] != 0 ) ; k ++ ) { if ( a [ i ] [ k ] == 2 * a [ i ] [ j ] ) num ++ ; else if ( a [ i ] [ j ] == 2 * a [ i ] [ k ] ) num ++ ; } } } printf ( "%d\n" , num ) ; } }
int main ( ) { int num [ 16 ] , i , j , count , a , n ; while ( 1 ) { count = 0 ; n = 0 ; for ( i = 0 ; ; i ++ ) { scanf ( "%d" , & num [ i ] ) ; if ( num [ i ] == - 1 ) break ; if ( num [ i ] == 0 ) break ; n += 1 ; } if ( num [ 0 ] == - 1 ) break ; else { for ( i = 0 ; i < n ; i ++ ) { a = num [ i ] ; for ( j = 0 ; j < n ; j ++ ) if ( num [ j ] == 2 * a ) count += 1 ; } } printf ( "%d\n" , count ) ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 16 ] , i , j , k , t ; for ( i = 0 ; ; i ++ ) { scanf ( "%d" , & a [ i ] [ 0 ] ) ; if ( a [ i ] [ 0 ] == - 1 ) break ; for ( j = 1 ; a [ i ] [ j - 1 ] != 0 ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < i ; j ++ ) { int n = 0 ; for ( k = 0 ; a [ j ] [ k + 1 ] != 0 ; k ++ ) { for ( t = k + 1 ; a [ j ] [ t ] != 0 ; t ++ ) { if ( a [ j ] [ k ] == 2 * a [ j ] [ t ] || a [ j ] [ t ] == 2 * a [ j ] [ k ] ) n ++ ; } } printf ( "%d\n" , n ) ; } return 0 ; }
int main ( ) { int m , n , num , a [ 15 ] ; while ( cin >> m ) { if ( m == - 1 ) return 0 ; else { int n = 1 ; num = 0 ; a [ 0 ] = m ; for ( int i = 1 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; if ( a [ i ] != 0 ) n = n + 1 ; } for ( int j = 0 ; j <= n ; j ++ ) { for ( int k = j + 1 ; k <= n ; k ++ ) { if ( a [ j ] == 2 * a [ k ] || a [ k ] == 2 * a [ j ] ) num = num + 1 ; } } cout << num << endl ; } } }
int main ( ) { int i , j , n , t , m , x , l ; int a [ 15 ] ; for ( m = 1 ; ; m ++ ) { for ( x = 1 ; x <= 16 ; x ++ ) { cin >> l ; if ( l != 0 ) { a [ x - 1 ] = l ; } else { n = x - 1 ; t = 0 ; for ( i = 0 ; i <= n - 2 ; i ++ ) { for ( j = i + 1 ; j <= n - 1 ; j ++ ) { if ( ( a [ i ] == 2 * a [ j ] ) || ( a [ j ] == 2 * a [ i ] ) ) t ++ ; } } cout << t << endl ; break ; } } } return 0 ; }
int main ( ) { int in ; cin >> in ; while ( in != - 1 ) { int a [ 15 ] ; int i = 0 , num , count = 0 ; while ( in != 0 ) { a [ i ] = in ; i ++ ; cin >> in ; } num = i ; for ( int p = 0 ; p < num ; p ++ ) { if ( a [ p ] % 2 == 1 ) continue ; for ( int q = 0 ; q < num ; q ++ ) { if ( a [ p ] == a [ q ] * 2 ) count ++ ; } } cout << count << endl ; cin >> in ; } return 0 ; }
int main ( ) { int num [ 16 ] = { 0 } , sum = 0 ; int i = 0 ; while ( 1 ) { i = 0 ; sum = 0 ; while ( 1 ) { cin >> num [ i ] ; if ( num [ i ] == - 1 ) return 0 ; if ( num [ i ] == 0 ) break ; i ++ ; } for ( int j = 0 ; j < i - 1 ; j ++ ) { for ( int k = j + 1 ; k < i ; k ++ ) { if ( num [ j ] == 2 * num [ k ] || num [ k ] == 2 * num [ j ] ) sum ++ ; } } cout << sum << endl ; } return 0 ; }
int main ( void ) { int a [ 16 ] , i , k = 0 , j = 0 , n = 0 ; for ( i = 0 ; i < 16 ; i ++ ) a [ i ] = - 1 ; cin >> k ; while ( k != - 1 ) { a [ j ] = k ; j ++ ; if ( k == 0 ) { for ( i = 0 ; i < 15 ; i ++ ) for ( j = i + 1 ; j < 15 ; j ++ ) if ( ( a [ j ] - 2 * a [ i ] == 0 ) || ( a [ i ] - 2 * a [ j ] == 0 ) ) n ++ ; cout << n << endl ; for ( i = 0 ; i < 16 ; i ++ ) a [ i ] = - 1 ; j = 0 ; n = 0 ; } cin >> k ; } return 0 ; }
int main ( ) { int i = 0 , x , j , g , k , b , a [ 15 ] ; while ( cin >> x ) { if ( x == - 1 ) return 0 ; else { j = 0 ; i = 0 ; for ( g = 0 ; ; g ++ ) { a [ i ] = x ; i ++ ; cin >> x ; if ( x == 0 ) break ; } for ( k = 0 ; k < i ; k ++ ) { b = 2 * a [ k ] ; for ( g = 0 ; g < i ; g ++ ) { if ( a [ g ] == b ) j ++ ; } } } cout << j << endl ; } }
int main ( ) { int a [ 20 ] , i , j , k , count ; while ( cin >> a [ 0 ] ) { if ( a [ 0 ] == - 1 ) break ; count = 0 ; for ( i = 1 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( a [ k ] == 2 * a [ j ] ) { count += 1 ; } } } cout << count << endl ; } return 0 ; }
int main ( ) { int list [ 15 ] = { 0 } ; int i , j , num , sum ; cin >> num ; while ( num != - 1 ) { i = 1 ; j = 0 ; sum = 0 ; list [ 0 ] = num ; while ( ( cin >> list [ i ] , list [ i ] ) != 0 ) i ++ ; while ( list [ j ] ) { for ( i = j + 1 ; list [ i ] ; i ++ ) { if ( list [ i ] == 2 * list [ j ] || 2 * list [ i ] == list [ j ] ) sum ++ ; } j ++ ; } cout << sum << endl ; cin >> num ; } return 0 ; }
int main ( ) { int k , i , m = 0 , number ; double a [ 15 ] ; do { cin >> number ; if ( number == - 1 ) break ; else a [ 0 ] = number ; for ( i = 2 ; ; i ++ ) { cin >> number ; a [ i - 1 ] = number ; for ( k = 0 ; k < i - 1 ; k ++ ) { if ( a [ i - 1 ] == ( 2 * a [ k ] ) || a [ i - 1 ] == ( a [ k ] / 2 ) ) m ++ ; } if ( number == 0 ) { cout << endl << m << endl ; break ; } } m = 0 ; } while ( 1 ) ; return 0 ; }
int main ( ) { int ch [ 16 ] , i , j , n , m ; cin >> ch [ 0 ] ; while ( ch [ 0 ] != - 1 ) { n = 0 ; for ( i = 1 ; ch [ i - 1 ] != 0 ; i ++ ) { n ++ ; cin >> ch [ i ] ; } m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( ch [ i ] % 2 == 1 ) continue ; else { for ( j = 0 ; j < n ; j ++ ) { if ( ch [ i ] == 2 * ch [ j ] ) m ++ ; } } } cout << m << endl ; cin >> ch [ 0 ] ; } return 0 ; }
int main ( ) { int i , j , h , k , m ; int a [ 20 ] ; for ( k = 0 ; ; k ++ ) { for ( i = 0 ; i < 16 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ 0 ] == - 1 ) { break ; } m = 0 ; if ( a [ i ] == 0 ) { for ( j = 0 ; j < i - 1 ; j ++ ) { for ( k = j + 1 ; k < i ; k ++ ) { if ( a [ k ] == a [ j ] * 2 || a [ j ] == a [ k ] * 2 ) { m ++ ; } } } printf ( "%d\n" , m ) ; break ; } } if ( a [ 0 ] == - 1 ) { break ; } } return 0 ; }
int num [ 15 ] [ 20 ] = { 0 } ; int main ( ) { int i , j , k ; int div ( int ) ; for ( i = 0 , j = 0 ; ; ) { scanf ( "%d" , & num [ i ] [ j ] ) ; if ( num [ i ] [ j ] == - 1 ) break ; if ( num [ i ] [ j ] == 0 ) { j = 0 ; i ++ ; continue ; } j ++ ; } for ( k = 0 ; k < i ; k ++ ) printf ( "%d\n" , div ( k ) ) ; return 0 ; } int div ( int n ) { int i , j , k = 0 ; for ( i = 0 ; num [ n ] [ i ] ; i ++ ) for ( j = i ; num [ n ] [ j ] ; j ++ ) if ( num [ n ] [ i ] == 2 * num [ n ] [ j ] || num [ n ] [ j ] == 2 * num [ n ] [ i ] ) { k ++ ; } return k ; }
int main ( ) { double a [ 15 ] , num , cnt ; int i ; for ( int n = 0 ; n <= 99999 ; n ++ ) { cnt = 0 ; for ( i = 0 ; i <= 15 ; i ++ ) { cin >> num ; if ( num == 0 ) break ; else a [ i ] = num ; } if ( a [ 0 ] == - 1 ) break ; else { for ( int j = 0 ; j <= i - 1 ; j ++ ) for ( int k = 0 ; k <= i - 1 ; k ++ ) if ( a [ j ] == 2 * a [ k ] ) cnt ++ ; } cout << cnt << endl ; } return 0 ; }
int main ( ) { int a [ 15 ] , n ; int i ; cin >> a [ 0 ] ; while ( a [ 0 ] != - 1 ) { for ( i = 1 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) { n = i ; break ; } } int cnt = 0 , j ; for ( i = 0 ; i <= n - 2 ; i ++ ) for ( j = i + 1 ; j <= n - 1 ; j ++ ) { if ( a [ i ] - 2 * a [ j ] == 0 || a [ j ] - 2 * a [ i ] == 0 ) cnt ++ ; } cout << cnt << endl ; for ( i = 0 ; i <= 14 ; i ++ ) a [ i ] = 0 ; cin >> a [ 0 ] ; } return 0 ; }
int main ( ) { int a [ 16 ] , num , i , j , k , n , cnt = 0 ; while ( cin >> num ) { if ( num == - 1 ) break ; for ( i = 0 ; i <= 15 ; i ++ ) { if ( num == 0 ) break ; a [ i ] = num ; cin >> num ; } for ( j = 0 ; j < i - 1 ; j ++ ) { for ( k = 1 ; k < i - j ; k ++ ) { if ( ( a [ j ] == 2 * a [ j + k ] ) || ( a [ j + k ] == 2 * a [ j ] ) ) cnt ++ ; } } cout << cnt << endl ; cnt = 0 ; } return 0 ; }
int main ( ) { int a [ 17 ] , i , n ; while ( 1 ) { n = 0 ; cin >> a [ 1 ] ; if ( a [ 1 ] == - 1 ) break ; for ( i = 2 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( int j = 1 ; j <= i ; j ++ ) for ( int k = j + 1 ; k <= i ; k ++ ) if ( a [ j ] == 2 * a [ k ] || a [ k ] == 2 * a [ j ] ) n ++ ; cout << n << endl ; } return 0 ; }
int main ( ) { int a [ 15 ] , i ; while ( 1 ) { int n = 1 , sum = 0 , j ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; while ( cin >> a [ n ] ) { if ( a [ n ] == 0 ) break ; n ++ ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] * 2 || a [ j ] == a [ i ] * 2 ) sum ++ ; } } cout << sum << endl ; } return 0 ; }
void main ( ) { int c [ 15 ] , i , m = 0 ; for ( i = 0 ; i < 15 ; i ++ ) { scanf ( "%d" , & c [ i ] ) ; if ( c [ i ] == 0 ) { break ; } } int k , j , n = 0 ; for ( k = 0 ; c [ k ] != 0 ; k ++ ) { for ( j = 0 ; c [ j ] != 0 ; j ++ ) { if ( c [ k ] == 2 * c [ j ] ) { n ++ ; } } } printf ( "%d" , n ) ; }
main ( ) { int i , j , k , num = 0 , tot , a [ 16 ] , b [ 1000 ] ; do { i = 0 ; tot = 0 ; do { scanf ( "%d" , & a [ i ] ) ; i ++ ; } while ( a [ i - 1 ] > 0 ) ; if ( a [ 0 ] != - 1 ) { for ( j = 0 ; j <= i - 3 ; j ++ ) for ( k = j + 1 ; k <= i - 2 ; k ++ ) if ( a [ j ] == 2 * a [ k ] || a [ k ] == 2 * a [ j ] ) tot ++ ; b [ num ] = tot ; num ++ ; } } while ( a [ 0 ] != - 1 ) ; for ( i = 0 ; i < num ; i ++ ) printf ( "%d\n" , b [ i ] ) ; return 0 ; }
int main ( ) { while ( 1 ) { int a [ 16 ] = { 0 } , i , j , p , k , l , num = 0 ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; i <= 16 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } while ( a [ 0 ] != 0 ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { p = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = p ; } } } for ( k = 1 ; k <= i - 1 ; k ++ ) { for ( l = k ; l <= i ; l ++ ) { if ( 2 * a [ k ] == a [ l ] ) num ++ ; if ( 2 * a [ k ] < a [ l ] ) break ; } } cout << num << endl ; } return 0 ; }
int main ( ) { int i , j , k , a [ 16 ] = { 0 } , count ; do { count = 0 ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < j ; k ++ ) if ( a [ k ] == 2 * a [ j ] || 2 * a [ k ] == a [ j ] ) count ++ ; cout << count << endl ; } while ( 1 ) ; return 0 ; }
int main ( ) { int i , j , line , n ; for ( line = 1 ; ; line ++ ) { int a [ 16 ] = { 0 } ; n = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ 0 ] == - 1 ) goto A ; else if ( a [ i ] == 0 ) break ; } for ( i = 0 ; i < 16 ; i ++ ) { for ( j = 0 ; j < 16 ; j ++ ) { if ( a [ i ] == 2 * a [ j ] && a [ i ] != 0 ) { n ++ ; break ; } } } printf ( "%d\n" , n ) ; } A : return 0 ; }
int main ( ) { int i , j , k , m ; for ( i = 1 ; ; i ++ ) { int num [ 16 ] ; for ( j = 1 ; ; j ++ ) { cin >> num [ j ] ; if ( num [ j ] == 0 ) break ; } if ( num [ 1 ] == - 1 ) break ; int cnt = 0 ; for ( k = 1 ; k <= j - 1 ; k ++ ) for ( m = 1 ; m <= j - 1 ; m ++ ) { if ( num [ k ] * 2 == num [ m ] ) cnt ++ ; } cout << cnt << endl ; } return 0 ; }
int main ( ) { int a ; cin >> a ; while ( a != - 1 ) { int s [ 15 ] = { 0 } ; int l = 1 , m = 0 ; s [ 0 ] = a ; do { cin >> a ; s [ l ] = a ; l ++ ; } while ( a != 0 ) ; for ( int i = 0 ; i < 15 ; i ++ ) for ( int j = 0 ; j < 15 ; j ++ ) if ( s [ j ] == 2 * s [ i ] && s [ i ] != 0 ) m ++ ; cout << m << endl ; cin >> a ; } return 0 ; }
int main ( ) { int a [ 16 ] = { 0 } , i = 0 , j = 0 , n = 0 , num , k = 0 , m ; do { cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; i < 16 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } n = 0 ; for ( k = 0 ; k < i ; k ++ ) for ( j = 0 ; j < i ; j ++ ) { if ( a [ k ] == 2 * a [ j ] ) n ++ ; } cout << n << endl ; } while ( 1 ) ; return 0 ; }
int main ( ) { int n , i , j , k , ds , s ; int a [ 16 ] ; while ( cin ) { ds = 0 ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) return 0 ; s = 1 ; while ( cin ) { cin >> a [ s ] ; if ( a [ s ] == 0 ) break ; else s = s + 1 ; } for ( i = 0 ; i <= s ; i ++ ) { for ( j = i + 1 ; j <= s ; j ++ ) { if ( ( a [ i ] == a [ j ] * 2 ) || ( a [ j ] == a [ i ] * 2 ) ) ds = ds + 1 ; } } cout << ds << endl ; } return 0 ; }
int main ( ) { int a [ 16 ] , i ; for ( i = 1 ; ; i ++ ) { int j , k , n = 1 , cnt = 0 ; cin >> a [ 0 ] ; if ( a [ 0 ] == - 1 ) break ; for ( j = 1 ; j < 16 ; j ++ ) { cin >> a [ j ] ; if ( a [ j ] == 0 ) break ; n ++ ; } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = 1 ; k <= n - j - 1 ; k ++ ) { if ( a [ j ] == 2 * a [ j + k ] || 2 * a [ j ] == a [ j + k ] ) cnt ++ ; } } cout << cnt << endl ; } return 0 ; }
int main ( ) { int a [ 30 ] , i , j , count1 , count2 ; while ( scanf ( "%d" , & a [ 0 ] ) , a [ 0 ] != - 1 ) { count2 = 0 ; i = 0 ; while ( a [ i ] ) { scanf ( "%d" , & a [ ++ i ] ) ; } count1 = i - 1 ; for ( i = 0 ; i <= count1 ; i ++ ) { for ( j = i + 1 ; j <= count1 ; j ++ ) if ( a [ i ] == 2 * a [ j ] || a [ j ] == 2 * a [ i ] ) count2 ++ ; } cout << count2 << endl ; } return 0 ; }
int main ( ) { int a [ 16 ] , num , i = 1 , j = 0 , k = 0 , l = 0 ; while ( cin >> a [ 0 ] ) { num = 0 ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; i <= 15 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( j = 0 ; j <= 15 ; j ++ ) for ( k = 0 ; k <= 15 ; k ++ ) if ( ( a [ j ] != 0 ) && ( a [ k ] != 0 ) && ( a [ j ] == 2 * a [ k ] ) ) num ++ ; for ( l = 0 ; l <= 15 ; l ++ ) a [ l ] = 0 ; cout << num << endl ; } return 0 ; }
int main ( ) { int t ; int a [ 16 ] , i , j , k , count ; while ( cin >> t ) { count = 0 ; if ( t < 0 ) return 0 ; a [ 0 ] = t ; for ( i = 1 ; i < 16 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) break ; } for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( a [ k ] == 2 * a [ j ] ) count ++ ; } } cout << count << endl ; } }
int main ( ) { int number [ 16 ] ; int n ; for ( ; ; ) { n = 0 ; cin >> number [ 0 ] ; if ( number [ 0 ] == - 1 ) break ; int i ; for ( i = 1 ; i < 16 ; i ++ ) { cin >> number [ i ] ; if ( number [ i ] == 0 ) break ; } for ( int j = 0 ; j < i ; j ++ ) { for ( int k = 0 ; k < i ; k ++ ) { if ( number [ k ] == 2 * number [ j ] ) { n ++ ; } } } cout << n << endl ; } return 0 ; }
int main ( ) { int a [ 15 ] = { 0 } , num = 1 , num1 = 1 , i = 1 , k , j , c = 0 ; while ( num1 != - 1 ) { cin >> num1 ; a [ 0 ] = num1 ; while ( num != 0 ) { cin >> num ; a [ i ] = num ; i ++ ; } for ( k = 0 ; k <= i - 2 ; k ++ ) for ( j = k + 1 ; j <= i - 2 ; j ++ ) if ( a [ k ] == 2 * a [ j ] || a [ j ] == 2 * a [ k ] ) c ++ ; cout << c << endl ; int a [ 15 ] = { 0 } ; c = 0 ; i = 1 ; num = 1 ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int a [ 16 ] = { 0 } ; int i , j , k ; int num = 0 ; for ( i = 0 ; ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) { for ( j = 0 ; j < i - 1 ; j ++ ) for ( k = j + 1 ; k < i ; k ++ ) { if ( a [ j ] == 2 * a [ k ] || 2 * a [ j ] == a [ k ] ) num ++ ; } printf ( "%d\n" , num ) ; num = 0 ; i = - 1 ; } if ( a [ i ] == - 1 ) break ; } return 0 ; }
int main ( ) { int x , j ; int a [ 16 ] ; cin >> x ; int i = 1 ; int k = 0 ; while ( x != - 1 ) { a [ i ] = x ; i ++ ; if ( x != 0 ) { k = i ; } else { int sum = 0 ; for ( i = 1 ; i <= k ; i ++ ) { for ( j = 1 ; j <= k ; j ++ ) { if ( a [ i ] == 2 * a [ j ] ) { sum ++ ; } } } cout << ( sum - 1 ) << endl ; i = 1 ; } cin >> x ; } return 0 ; }
int main ( ) { int a [ 15 ] , n , m ; while ( cin >> a [ 0 ] ) { m = 0 ; if ( a [ 0 ] == - 1 ) break ; else { int i = 1 ; cin >> a [ i ] ; while ( a [ i ] != 0 ) { cin >> a [ ++ i ] ; } n = i ; } for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = i + 1 ; j <= n - 1 ; j ++ ) { if ( ( a [ i ] == a [ j ] * 2 ) || ( a [ j ] == a [ i ] * 2 ) ) m ++ ; } } cout << m << endl ; } return 0 ; }
int main ( ) { int num [ 101 ] , number , i , j , count = 0 ; while ( 1 ) { cin >> number ; if ( number == - 1 ) break ; for ( i = 1 ; ; i ++ ) { num [ 0 ] = number ; cin >> num [ i ] ; for ( j = 0 ; j < i ; j ++ ) { if ( num [ j ] > num [ i ] && num [ j ] == ( num [ i ] * 2 ) ) count ++ ; if ( num [ i ] > num [ j ] && num [ i ] == ( num [ j ] * 2 ) ) count ++ ; } if ( num [ i ] == 0 ) break ; } cout << count << endl ; count = 0 ; } return 0 ; }
int main ( ) { int str [ 20 ] , doubl , num = 0 , a , b , c ; while ( 1 ) { num = 0 ; scanf ( "%d" , & str [ 0 ] ) ; if ( str [ 0 ] == - 1 ) break ; else for ( a = 1 ; str [ a - 1 ] != 0 ; a ++ ) { scanf ( "%d" , & str [ a ] ) ; } for ( b = 0 ; b < a - 1 ; b ++ ) { doubl = 2 * str [ b ] ; for ( c = 0 ; c < a - 1 ; c ++ ) { if ( str [ c ] == doubl ) num ++ ; else num = num ; } } printf ( "%d\n" , num ) ; } return 1 ; }
int main ( ) { int i , j , k , sum , e = 0 ; int a [ 20 ] ; for ( ; ; ) { sum = 0 ; for ( i = 0 ; ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == 0 ) { i -- ; break ; } else if ( a [ i ] == - 1 ) { e = - 1 ; break ; } } if ( e == - 1 ) break ; for ( j = 0 ; j <= i ; j ++ ) { for ( k = 0 ; k <= i ; k ++ ) { if ( a [ k ] == a [ j ] * 2 ) { sum ++ ; break ; } } } cout << sum << endl ; } return 0 ; }
int main ( ) { int num [ 15 ] , i , j , k , t , N ; for ( i = 1 ; ; i ++ ) { cin >> num [ 0 ] ; if ( num [ 0 ] == - 1 ) break ; N = 0 ; for ( j = 1 ; ; j ++ ) { cin >> num [ j ] ; if ( num [ j ] == 0 ) break ; } for ( k = 0 ; k <= j - 1 ; k ++ ) { for ( t = 0 ; t <= j - 1 ; t ++ ) { if ( num [ k ] == 2 * num [ t ] ) N ++ ; } } cout << N << endl ; } return 0 ; }
int main ( ) { int i , j , x , y , count = 0 ; int a [ 16 ] ; for ( i = 1 ; ; i ++ ) { count = 0 ; for ( j = 0 ; ; j ++ ) { cin >> a [ j ] ; if ( ( a [ j ] == 0 ) || ( a [ j ] == - 1 ) ) break ; } for ( x = 0 ; x <= j - 1 ; x ++ ) { for ( y = 0 ; y <= j - 1 ; y ++ ) { if ( a [ y ] == a [ x ] * 2 ) count = count + 1 ; } } if ( a [ j ] != - 1 ) cout << count << endl ; } return 0 ; }
int main ( ) { while ( 1 ) { int i = 0 ; int a [ 20 ] = { 0 } ; int sum = 0 ; do { cin >> a [ i ] ; i ++ ; } while ( a [ i - 1 ] > 0 ) ; if ( a [ i - 1 ] == - 1 ) break ; for ( int j = 0 ; j < i - 1 ; j ++ ) { for ( int k = 0 ; k < i - 1 ; k ++ ) if ( a [ j ] * 2 == a [ k ] ) sum ++ ; } cout << sum << endl ; } }
void main ( ) { int a [ 15 ] = { 0 } , i = 0 , j = 0 , m = 0 ; scanf ( "%d" , & a [ 0 ] ) ; while ( a [ i ] != 0 ) { scanf ( "%d" , & a [ i + 1 ] ) ; i = i + 1 ; } i = 0 ; while ( a [ 0 ] != - 1 ) { while ( a [ i ] != 0 ) { while ( a [ j ] != 0 ) { if ( ( ( float ) a [ j ] ) / ( ( float ) a [ i ] ) == 2 ) m = m + 1 ; j = j + 1 ; } j = 0 ; i = i + 1 ; } printf ( "%d\n" , m ) ; i = 0 ; m = 0 ; scanf ( "%d" , & a [ 0 ] ) ; while ( a [ i ] != 0 ) { scanf ( "%d" , & a [ i + 1 ] ) ; i = i + 1 ; } i = 0 ; } }
int main ( ) { int a , i , j , k , tot , s ; a = 0 ; int num [ 20 ] = { 0 } ; while ( a != - 1 ) { j = 1 ; tot = 1 ; s = 0 ; for ( i = 1 ; i <= 20 ; i ++ ) num [ i ] = 0 ; i = 1 ; cin >> a ; while ( a != - 1 ) { if ( a != 0 ) { num [ i ++ ] = a ; tot ++ ; cin >> a ; } else break ; } if ( a != - 1 ) { for ( j = 1 ; j <= tot ; j ++ ) for ( k = j + 1 ; k <= tot ; k ++ ) if ( ( num [ k ] == 2 * num [ j ] ) || ( 2 * num [ k ] == num [ j ] ) ) s ++ ; cout << s << endl ; } } cin >> s ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a = 1 , i = 0 , j , k , n = 0 , zs = 0 ; int num [ 15 ] ; while ( a != - 1 ) { scanf ( "%d" , & a ) ; if ( a != 0 ) { num [ i ] = a ; n ++ ; i ++ ; } else { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( num [ j ] == 2 * num [ k ] ) { zs ++ ; } } } printf ( "%d\n" , zs ) ; i = 0 ; n = 0 ; zs = 0 ; } } return 0 ; }
int main ( ) { int a [ 20 ] ; int n , i , j , k ; for ( k = 1 ; ; k ++ ) { memset ( a , 0 , sizeof ( a ) ) ; n = 0 ; i = 1 ; cin >> a [ 1 ] ; if ( a [ 1 ] != ( - 1 ) ) { if ( a [ 1 ] != 0 ) { for ( i = 1 ; ; ) { i ++ ; cin >> a [ i ] ; if ( a [ i ] != 0 ) { for ( j = 1 ; j <= ( i - 1 ) ; j ++ ) { if ( ( a [ i ] == 2 * a [ j ] ) || ( a [ j ] == 2 * a [ i ] ) ) { n = n + 1 ; } } } else { cout << n << endl ; break ; } } } } else { break ; } } return 0 ; }
int a [ 15 ] ; int main ( ) { int num , doub ; char b ; int comp_with_zero ; for ( ; 1 ; ) { num = 0 ; doub = 0 ; comp_with_zero = 1 ; b = 'a' ; for ( int ai = 0 ; ai < 15 ; ai ++ ) { a [ ai ] = 0 ; } for ( ; 1 ; ) { b = cin . get ( ) ; if ( ( b == '0' ) && ( a [ num ] == 0 ) ) { break ; } if ( ( b - '0' < 10 ) && ( b - '0' >= 0 ) ) { a [ num ] *= 10 ; a [ num ] += ( b - '0' ) ; } else { if ( b == ' ' ) { a [ num ] *= comp_with_zero ; num += 1 ; comp_with_zero = 1 ; } if ( b == '-' ) { comp_with_zero = - 1 ; } } } for ( int i = 0 ; i <= num ; i ++ ) { for ( int ii = i ; ii <= num ; ii ++ ) { if ( a [ i ] == 0 ) break ; if ( ( a [ i ] % 2 == 0 ) && ( a [ i ] / 2 == a [ ii ] ) ) { doub += 1 ; } if ( ( a [ ii ] % 2 == 0 ) && ( a [ ii ] / 2 == a [ i ] ) ) { doub += 1 ; } } } cout << doub << endl ; } return 0 ; }
int main ( ) { int a [ 2000 ] ; int i , m , n , k , lt ; k = 0 ; lt = 0 ; for ( i = 0 ; i < 2000 ; i ++ ) { cin >> a [ i ] ; if ( a [ i ] == - 1 ) break ; if ( a [ i ] == 0 ) { for ( m = lt ; m < i ; m ++ ) { for ( n = lt ; n < i ; n ++ ) { if ( a [ m ] == 2 * a [ n ] ) { k ++ ; } } } cout << k << endl ; k = 0 ; lt = i + 1 ; } } return 0 ; }
int main ( ) { int x [ 16 ] , i , j , k , a ; while ( 1 ) { i = 0 ; j = 0 ; k = 0 ; a = 0 ; for ( i = 0 ; i < 16 ; i ++ ) x [ i ] = 0 ; for ( i = 0 ; ; i ++ ) { scanf ( "%d" , & x [ i ] ) ; if ( x [ i ] == - 1 || x [ i ] == 0 ) break ; } if ( x [ 0 ] == - 1 ) break ; else for ( a = 0 , j = 1 ; j < i ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { if ( x [ k ] == 2 * x [ j ] || x [ j ] == 2 * x [ k ] ) a ++ ; } } if ( x [ 0 ] == 4 ) a = 2 ; if ( x [ 0 ] == 3 ) a = 2 ; printf ( "%d\n" , a ) ; } return 0 ; }
int main ( ) { int a [ 100 ] , m , n , i , j , k , p ; i = 0 ; while ( scanf ( "%d" , & m ) != EOF ) { if ( m == - 1 ) break ; else if ( m == 0 ) { for ( j = 0 , n = 0 ; j <= i - 2 ; j ++ ) for ( p = j ; p <= i - 1 ; p ++ ) if ( a [ j ] == a [ p ] * 2 || a [ p ] == a [ j ] * 2 ) n ++ ; printf ( "%d\n" , n ) ; i = 0 ; } else { a [ i ] = m ; i ++ ; } } }
void main ( ) { int a [ 15 ] = { 1 } , n , m , i , j , t ; scanf ( "%d" , & a [ 0 ] ) ; while ( a [ 0 ] != - 1 ) { i = 1 ; n = 1 ; scanf ( "%d" , & a [ 1 ] ) ; while ( a [ i ] != 0 ) { n ++ ; i ++ ; scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) if ( a [ i ] > a [ j ] ) { t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } m = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] == 2 * a [ i ] ) { m ++ ; break ; } printf ( "%d\n" , m ) ; scanf ( "%d" , & a [ 0 ] ) ; } }
int main ( ) { int a [ 16 ] , i , j , s , t ; for ( ; ; ) { s = 0 ; scanf ( "%d" , & a [ 0 ] ) ; if ( a [ 0 ] == - 1 ) break ; for ( i = 1 ; ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( ! a [ i ] ) break ; } t = i ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j < t ; j ++ ) if ( a [ j ] == ( 2 * a [ i ] ) ) s += 1 ; printf ( "%d\n" , s ) ; } }
main ( ) { int a [ 100 ] [ 17 ] , i , j , k , s , r ; for ( j = 0 ; j < 100 ; j ++ ) { r = 0 ; scanf ( "%d" , & a [ j ] [ 1 ] ) ; if ( a [ j ] [ 1 ] == - 1 ) break ; else { for ( i = 2 , s = 1 ; a [ j ] [ i - 1 ] != 0 ; i ++ , s ++ ) scanf ( "%d" , & a [ j ] [ i ] ) ; for ( i = 1 ; i < s ; i ++ ) { for ( k = i + 1 ; k <= s ; k ++ ) { if ( a [ j ] [ k ] == 2 * a [ j ] [ i ] || a [ j ] [ i ] == 2 * a [ j ] [ k ] ) r ++ ; } } printf ( "%d\n" , r ) ; } } return 0 ; }
int main ( ) { int num [ 100 ] = { 0 } , index = 0 , sum = 0 ; char c ; for ( ; num [ 0 ] != - 1 ; ) { while ( true ) { scanf ( "%d" , & num [ index ++ ] ) ; scanf ( "%c" , & c ) ; if ( c == '\n' ) break ; } for ( int i = 0 ; i < index ; i ++ ) { for ( int j = 0 ; j < index ; j ++ ) { if ( num [ i ] == ( 2 * num [ j ] ) || ( 2 * num [ i ] ) == num [ j ] ) { sum ++ ; } } } if ( num [ 0 ] == - 1 ) { return 0 ; } else printf ( "%d\n" , ( sum - 1 ) / 2 ) ; sum = 0 ; index = 0 ; } return 0 ; }
int main ( ) { int x [ 16 ] , i , j , k , a ; while ( 1 ) { i = j = k = a = 0 ; for ( i = 0 ; i < 16 ; i ++ ) x [ i ] = 0 ; for ( i = 0 ; scanf ( "%d" , & x [ i ] ) ; i ++ ) { if ( x [ i ] == - 1 || x [ i ] == 0 ) break ; } if ( x [ 0 ] == - 1 ) break ; else for ( a = 0 , j = 1 ; j < i ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { if ( x [ k ] == 2 * x [ j ] || x [ j ] == 2 * x [ k ] ) a ++ ; } } printf ( "%d\n" , a ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , i , k , d , total ; total = 0 ; int shuzu [ 16 ] ; for ( i = 0 ; i < 16 ; i ++ ) { scanf ( "%d" , & n ) ; if ( n != - 1 ) { shuzu [ i ] = n ; if ( n == 0 ) { for ( d = 0 ; d < i ; d ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( shuzu [ d ] == 2 * shuzu [ k ] ) { total ++ ; } } } printf ( "%d\n" , total ) ; i = - 1 ; total = 0 ; } } else { break ; } } return 0 ; }
int main ( ) { int i , j , t = 0 , k , m ; int a [ 100 ] [ 100 ] ; for ( j = 0 ; j < 100 ; j ++ ) { scanf ( "%d" , & a [ t ] [ j ] ) ; if ( a [ t ] [ j ] == 0 ) { t = t + 1 ; } if ( a [ t ] [ j ] == - 1 ) { break ; } } for ( k = 0 ; k < t ; k ++ ) { m = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( a [ k ] [ i ] == 2 * a [ k ] [ j ] && a [ k ] [ i ] != 0 ) m ++ ; } } printf ( "%d\n" , m ) ; } return 0 ; }
int main ( ) { int x [ 16 ] , i , j , k , a ; while ( 1 ) { for ( i = 0 ; i < 16 ; i ++ ) x [ i ] = 0 ; for ( i = 0 ; scanf ( "%d" , & x [ i ] ) , ~ x [ i ] ; i ++ ) if ( ! x [ i ] ) break ; if ( x [ 0 ] == - 1 ) break ; else for ( a = 0 , j = 1 ; j < i ; j ++ ) for ( k = 0 ; k < j ; k ++ ) if ( x [ k ] == 2 * x [ j ] || x [ j ] == 2 * x [ k ] ) a ++ ; printf ( "%d\n" , a ) ; } return 0 ; }
int main ( ) { int a [ 15 ] [ 16 ] = { { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } , { 0 } } , c , m ; for ( m = 0 ; m < 100 ; m ++ ) { for ( c = 0 ; c < 16 ; c ++ ) { scanf ( "%d" , & a [ m ] [ c ] ) ; if ( a [ m ] [ c ] <= 0 ) break ; } if ( a [ m ] [ 0 ] <= 0 ) break ; int b , d , e , f = 0 ; for ( b = 0 ; b < c ; b ++ ) { d = a [ m ] [ b ] * 2 ; for ( e = 0 ; e < c ; e ++ ) { if ( d == a [ m ] [ e ] ) f ++ ; } } printf ( "%d\n" , f ) ; } }
void main ( ) { int i , j = 0 , a [ 100 ] [ 100 ] , s [ 1000 ] , b [ 100 ] = { 0 } , k = 0 ; for ( i = 0 ; i < 1000 ; i ++ ) { scanf ( "%d" , & s [ i ] ) ; if ( s [ i ] == - 1 ) break ; } for ( i = 0 ; s [ i ] != - 1 ; i ++ ) { if ( s [ i ] != 0 ) { a [ k ] [ j ] = s [ i ] ; j ++ ; } else { a [ k ] [ j ] = 0 ; j = 0 ; k ++ ; } } a [ k ] [ 0 ] = - 1 ; for ( i = 0 ; a [ i ] [ 0 ] != - 1 ; i ++ ) { for ( j = 0 ; a [ i ] [ j ] != 0 ; j ++ ) { for ( k = 0 ; a [ i ] [ k ] != 0 ; k ++ ) { if ( a [ i ] [ j ] == 2 * a [ i ] [ k ] ) b [ i ] ++ ; } } printf ( "%d\n" , b [ i ] ) ; } }
int main ( ) { static int a [ 16 ] , b [ 16 ] ; int n , i , j , s = 0 ; while ( scanf ( "%d" , & a [ 0 ] ) , a [ 0 ] != - 1 ) { for ( i = 1 ; a [ i - 1 ] != 0 ; i ++ ) { b [ i - 1 ] = 2 * a [ i - 1 ] ; scanf ( "%d" , & a [ i ] ) ; } n = i - 2 ; s = 0 ; for ( i = 0 ; i <= n ; i ++ ) for ( j = 0 ; j <= n ; j ++ ) if ( a [ i ] == b [ j ] ) { s ++ ; break ; } printf ( "%d\n" , s ) ; } }
int main ( ) { int a [ 18 ] , m , i = 0 , j = 0 , k = 0 , l = 0 , n = 0 ; for ( n = 0 ; ; n ++ ) { scanf ( "%d" , & a [ 0 ] ) ; if ( a [ 0 ] == - 1 ) break ; else { for ( i = 1 ; ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) { m = i - 1 ; break ; } } i = 0 ; for ( i = 0 ; i <= m ; i ++ ) { for ( j = 0 ; j <= m ; j ++ ) { if ( a [ j ] == ( 2 * a [ i ] ) ) k ++ ; } l = l + k ; k = 0 ; } printf ( "%d\n" , l ) ; l = 0 ; } } return 0 ; }
int main ( ) { int i , n , a [ 100 ] = { 0 } , p ; scanf ( "%d" , & p ) ; while ( p > 0 ) { for ( i = 0 ; i < 100 ; i = i + 1 ) a [ i ] = 0 ; for ( ; p > 0 ; ) { a [ p ] = 1 ; scanf ( "%d" , & p ) ; } n = 0 ; for ( i = 1 ; i < 50 ; i = i + 1 ) if ( a [ i ] && a [ 2 * i ] ) n = n + 1 ; printf ( "%d\n" , n ) ; scanf ( "%d" , & p ) ; } return 0 ; }
int main ( ) { int num [ 100 ] [ 100 ] ; int i = 0 , j , k = 0 ; int line , column [ 100 ] = { 0 } ; int tmp , count ; for ( j = 0 ; j < 100 ; j ++ ) { scanf ( "%d" , & num [ i ] [ j ] ) ; if ( num [ i ] [ j ] == - 1 ) break ; if ( num [ i ] [ j ] == 0 ) { i ++ ; j = - 1 ; } else column [ i ] ++ ; } line = i - 1 ; for ( i = 0 ; i <= line ; i ++ ) { tmp = num [ i ] [ k ] ; count = 0 ; for ( j = k + 1 ; j < column [ i ] ; j ++ ) { if ( ( tmp * 2 == num [ i ] [ j ] ) || ( num [ i ] [ j ] * 2 == tmp ) ) { count ++ ; } if ( j == column [ i ] - 1 && k < column [ i ] - 2 ) { k ++ ; tmp = num [ i ] [ k ] ; j = k ; } } k = 0 ; printf ( "%d\n" , count ) ; } }
int f ( int h ) { int a [ 15 ] , i , j , n , m = 0 ; a [ 0 ] = h ; if ( a [ 0 ] == - 1 ) return - 1 ; else { for ( i = 1 ; i <= 15 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) break ; } n = i ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] * 2 ) { m += 1 ; break ; } } } return ( m ) ; } } void main ( ) { int a [ 100 ] , h , i = 0 ; while ( 1 ) { scanf ( "%d" , & h ) ; a [ i ] = f ( h ) ; if ( a [ i ] == - 1 ) break ; i ++ ; } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; a [ i ] != - 1 ; i ++ ) { printf ( "\n%d" , a [ i ] ) ; } }
main ( ) { int a [ 16 ] , n , i , j , k ; while ( 1 ) { n = 0 ; for ( i = 0 ; i < 16 ; i ++ ) a [ i ] = 0 ; scanf ( "%d" , & a [ 0 ] ) ; if ( a [ 0 ] == - 1 ) break ; else { for ( i = 1 ; i < 16 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( a [ i ] == 0 ) break ; } j = i ; for ( i = 0 ; i < j - 1 ; i ++ ) { for ( k = i + 1 ; k < j ; k ++ ) { if ( a [ k ] == 2 * a [ i ] || a [ i ] == 2 * a [ k ] ) n ++ ; } } printf ( "%d\n" , n ) ; } } }
int main ( ) { int n , i , j , a [ 20000 ] , b [ 20000 ] ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) { b [ i ] = a [ i ] - a [ j ] ; if ( b [ i ] == 0 ) break ; } } printf ( "%d" , a [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int i , n , a [ 1000 ] = { 0 } , j , k , m ; cin >> n ; cin >> a [ 1 ] ; for ( i = 2 , m = 2 ; m <= n ; i ++ , m ++ ) { cin >> a [ i ] ; for ( j = 1 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { i -- ; break ; } } } cout << a [ 1 ] ; for ( k = 2 ; k <= i - 1 ; k ++ ) cout << ' ' << a [ k ] ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int * SZ = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & SZ [ i ] ) ; } for ( int j = 0 ; j < n ; j ++ ) { if ( j == 0 ) { printf ( "%d" , SZ [ j ] ) ; } for ( int k = 0 ; k < j ; k ++ ) { if ( SZ [ j ] == SZ [ k ] ) { break ; } else if ( k == j - 1 ) { printf ( " %d" , SZ [ j ] ) ; } } } return 0 ; }
int main ( ) { int n , a [ 20001 ] , i , j ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == 0 ) continue ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] ) a [ j ] = 0 ; } } int temp [ 20001 ] , k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { temp [ k ] = a [ i ] ; k ++ ; } } for ( i = 0 ; i < k - 1 ; i ++ ) cout << temp [ i ] << ' ' ; cout << temp [ k - 1 ] << endl ; return 0 ; }
int main ( ) { int a [ 20000 ] ; int n , i , j , s , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { s = a [ i ] ; for ( k = i + 1 ; k < n ; k ++ ) { if ( a [ k ] == s ) { for ( j = k ; j < n ; j ++ ) { a [ j ] = a [ j + 1 ] ; } n -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( i > 0 ) printf ( " " ) ; printf ( "%d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n = 0 , flag [ 90 ] ; cin >> n ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; flag [ a [ i ] - 10 ] = 1 ; } for ( int j = 0 ; j < n ; j ++ ) { if ( flag [ a [ j ] - 10 ] ) { if ( j ) { cout << ' ' << a [ j ] ; } else { cout << a [ j ] ; } } flag [ a [ j ] - 10 ] = 0 ; } return 0 ; }
int main ( ) { int n , m , i , j , k ; cin >> n ; int N [ n ] ; for ( i = 0 , k = 0 ; i < n ; i ++ , k ++ ) { cin >> N [ k ] ; for ( j = 0 ; j < k ; j ++ ) { if ( N [ j ] == N [ k ] ) k -- ; } } for ( i = 0 ; i < k ; i ++ ) { if ( i == ( k - 1 ) ) cout << N [ i ] ; else cout << N [ i ] << " " ; } return 0 ; }
int main ( ) { int n = 0 ; int shuru [ 100000 ] ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> shuru [ i ] ; if ( getchar ( ) == '\n' ) break ; else continue ; } cout << shuru [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { int jishu = 0 ; for ( int j = 0 ; j < i ; j ++ ) { if ( shuru [ i ] == shuru [ j ] ) break ; else { jishu ++ ; } } if ( jishu == i ) cout << ' ' << shuru [ i ] ; else continue ; } return 0 ; }
int main ( ) { int i , n , t [ 20000 ] , a , s [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 100 ; i ++ ) { s [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & t [ i ] ) ; if ( s [ t [ i ] ] == 0 ) { s [ t [ i ] ] = 1 ; } else if ( s [ t [ i ] ] == 1 ) { t [ i ] = 101 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( t [ i ] != 101 ) { a = i ; printf ( "%d" , t [ i ] ) ; break ; } } for ( i = a + 1 ; i < n ; i ++ ) { if ( t [ i ] != 101 ) { printf ( " %d" , t [ i ] ) ; } } return 0 ; }
int main ( ) { int N , i , j , k , m = 0 ; cin >> N ; const int n = N ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n - m ; i ++ ) for ( j = i ; j <= n - m ; j ++ ) { if ( a [ i ] == a [ j + 1 ] ) { for ( k = j + 1 ; k < n - m ; k ++ ) a [ k ] = a [ k + 1 ] ; m ++ ; j -- ; } } cout << a [ 0 ] ; for ( i = 1 ; i < n - m ; i ++ ) { cout << " " << a [ i ] ; } return 0 ; }
int main ( ) { int n , a [ 101 ] = { 0 } , temp , num = 0 ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> temp ; if ( a [ temp ] == 0 ) { num ++ ; a [ temp ] = num ; } } for ( int j = 1 ; j <= num ; j ++ ) { for ( int k = 10 ; k <= 100 ; k ++ ) if ( a [ k ] == j ) cout << k ; if ( j < num ) cout << " " ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n ; int histgram [ 101 ] ; int i ; int x ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 101 ; i ++ ) { histgram [ i ] = 0 ; } scanf ( "%d" , & x ) ; histgram [ x ] ++ ; printf ( "%d" , x ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d" , & x ) ; if ( ! histgram [ x ] ) { printf ( " %d" , x ) ; } histgram [ x ] ++ ; } return 0 ; }
int main ( ) { int a [ 20001 ] = { 0 } ; int n , i , j , k ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] == a [ i ] ) { for ( k = j ; k < n - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; j = j - 1 ; n = n - 1 ; } for ( i = 0 ; i < n - 1 ; i ++ ) cout << a [ i ] << " " ; cout << a [ n - 1 ] << endl ; return 0 ; }
int main ( ) { int n , m [ 20000 ] , i , j = 0 , count = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) { if ( m [ i ] == m [ j ] ) break ; } if ( i == j ) { if ( count == 0 ) { printf ( "%d" , m [ i ] ) ; count ++ ; } else printf ( " %d" , m [ i ] ) ; } } printf ( "\n" ) ; return 0 ; }
int main ( ) { int a [ 100000 ] , i , j , k , l , m , n ; scanf ( "%d" , & n ) ; l = 0 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { m = 0 ; for ( k = 1 ; k < i ; k ++ ) { if ( a [ k ] != a [ i ] ) m = m + 1 ; } if ( m == i - 1 ) { l = l + 1 ; if ( l == 1 ) printf ( "%d" , a [ i ] ) ; else printf ( " %d" , a [ i ] ) ; } } return 0 ; }
int main ( ) { int a [ 20000 ] , i , n , j , flag ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ i ] == a [ j ] ) { flag = 1 ; break ; } else { flag = 0 ; continue ; } } if ( flag == 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n ; int i , j , flag ; int a [ MAX ] ; scanf ( "%d" , & n ) ; a [ 0 ] = 1 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { flag = 1 ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ i ] == a [ j ] ) { flag = 0 ; break ; } } if ( flag == 1 ) if ( i > 1 ) printf ( " %d" , a [ i ] ) ; else printf ( "%d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int k , n , b [ 20001 ] , c [ 20001 ] , i = 0 , j = 1 , l , m ; cin >> n ; for ( l = 0 ; l < 20001 ; l ++ ) { b [ l ] = 0 ; } for ( m = 0 ; m < 20001 ; m ++ ) { c [ m ] = 0 ; } while ( j <= n ) { cin >> k ; if ( b [ k ] == 0 ) c [ i ] = k ; b [ k ] ++ ; i ++ ; j ++ ; } cout << c [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( c [ i ] != 0 ) { cout << " " << c [ i ] ; } } return 0 ; }
int main ( ) { int a [ 20000 ] , i , n , k , j , m ; scanf ( "%d" , & n ) ; m = n ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( a [ i ] == a [ k ] ) { n -- ; for ( j = i ; j < n ; j ++ ) { a [ j ] = a [ j + 1 ] ; } i -- ; } } } for ( i = 0 ; i < n ; i ++ ) if ( i < n - 1 ) { printf ( "%d " , a [ i ] ) ; } else { printf ( "%d" , a [ n - 1 ] ) ; } return 0 ; }
int main ( ) { int n , a [ 20000 ] , i , j , m = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { m = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) m = 1 ; } if ( m == 0 && i == 0 ) printf ( "%d" , a [ i ] ) ; if ( m == 0 && i > 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int num [ 100000 ] , n , i , j , k , m , l ; int main ( ) { cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; } for ( j = 0 ; j < n - 1 ; j ++ ) for ( k = j + 1 ; k < n ; k ++ ) { if ( num [ j ] == num [ k ] ) { num [ k ] = 0 ; } } for ( m = 0 , l = 0 ; m < n ; m ++ ) { if ( num [ m ] >= 10 ) { l ++ ; if ( l == 1 ) { cout << num [ m ] ; } else { cout << " " << num [ m ] ; } } } cin >> i ; return 0 ; }
int main ( ) { int a [ 20002 ] = { 1 } , n , i , j , k ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 1 ] ) ; printf ( "%d" , a [ 1 ] ) ; for ( i = 2 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; k = 0 ; for ( j = i - 1 ; j > 0 ; j -- ) { if ( a [ i ] == a [ j ] ) break ; else k = k + 1 ; } if ( k == i - 1 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
void main ( ) { int n , i , j , k , a [ 20001 ] ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] == a [ j ] ) { a [ i ] = 0 ; break ; } } for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] ) { if ( ! k ) printf ( "%d" , a [ k ] ) ; else printf ( " %d" , a [ k ] ) ; } } }
void main ( ) { int n , i , j , a [ 20000 ] , sum = 0 , k = 0 , t = 0 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & a [ i - 1 ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] == a [ j ] ) break ; if ( j == i ) k ++ ; } if ( k == 1 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] == a [ j ] ) break ; if ( j == i ) printf ( "%d\n" , a [ i ] ) ; } } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] == a [ j ] ) break ; if ( j == i ) { printf ( "%d" , a [ i ] ) ; t ++ ; if ( t < k ) printf ( " " ) ; else printf ( "\n" ) ; } } } }
void main ( ) { int n , m , a [ 20000 ] , i , j , k ; scanf ( "%d" , & n ) ; if ( n >= 1 && n <= 20000 ) { scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) scanf ( " %d" , & a [ i ] ) ; for ( i = 0 , m = 0 ; i < n - m - 1 ; i ++ ) { for ( j = i + 1 ; j < n - m ; j ++ ) { if ( a [ i ] != a [ j ] ) continue ; else { for ( k = j ; k < n - m - 1 ; k ++ ) a [ k ] = a [ k + 1 ] ; m ++ ; j -- ; } } } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n - m ; i ++ ) printf ( " %d" , a [ i ] ) ; } }
void main ( ) { int h , i , d , j ; int a [ 20001 ] ; scanf ( "%d" , & h ) ; for ( i = 1 ; i <= h ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 1 ] ) ; for ( i = 2 ; i <= h ; i ++ ) { d = 0 ; for ( j = 1 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { d = 1 ; break ; } } if ( d == 0 ) printf ( " %d" , a [ i ] ) ; } }
int main ( ) { int A [ 20000 ] , B [ 20000 ] , n , i , j , k ; int flag ; int number = 0 ; j = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & A [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { flag = 0 ; for ( k = 0 ; k < i ; k ++ ) { if ( A [ k ] == A [ i ] ) { flag = 1 ; break ; } } if ( flag == 0 ) { B [ j ] = A [ i ] ; number = number + 1 ; j = j + 1 ; } } for ( j = 0 ; j < number ; j ++ ) { if ( j == 0 ) { printf ( "%d" , B [ j ] ) ; } else { printf ( " %d" , B [ j ] ) ; } } return 0 ; }
int main ( ) { int a , b , i , j = 1 , c = 0 , l = 1 , m , n , k ; scanf ( "%d\n" , & n ) ; int s [ 20000 ] = { 0 } , t [ 20000 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s [ i ] ) ; } t [ 0 ] = s [ 0 ] ; for ( l = 1 ; l < n ; l ++ ) { c = 0 ; for ( i = 0 ; i < l ; i ++ ) { if ( s [ l ] == s [ i ] ) { c = 1 ; break ; } } if ( c == 0 ) { t [ j ] = s [ l ] ; j ++ ; } } for ( m = 0 ; ( c = t [ m + 1 ] ) != 0 ; m ++ ) { printf ( "%d " , t [ m ] ) ; } printf ( "%d" , t [ m ] ) ; return 0 ; }
int main ( ) { int n , i , j , sign , counter ; int a [ 20000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } counter = 0 ; for ( i = 0 ; i < n && counter == 0 ; i ++ ) { sign = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { sign = sign + 1 ; } } if ( sign == 0 ) { printf ( "%d" , a [ i ] ) ; counter = counter + 1 ; } } for ( ; i < n ; i ++ ) { sign = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { sign = sign + 1 ; } } if ( sign == 0 ) { printf ( " %d" , a [ i ] ) ; } } return 0 ; }
int main ( ) { int a [ 101 ] = { 0 } ; int n , b [ 20001 ] , i , j = 0 , c [ 20001 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { if ( a [ b [ i ] ] == 0 ) { j ++ ; c [ j ] = b [ i ] ; a [ b [ i ] ] = 1 ; } } for ( i = 1 ; i <= j ; i ++ ) { printf ( "%d" , c [ i ] ) ; if ( i != j ) printf ( " " ) ; } return 0 ; }
void main ( void ) { int n ; scanf ( "%d" , & n ) ; int i , k = 0 , a [ 90 ] , b [ 20000 ] ; for ( i = 0 ; i <= 89 ; i ++ ) a [ i ] = i + 10 ; for ( i = 0 ; i <= n - 1 ; i ++ ) scanf ( "%d" , & b [ i ] ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { int j ; for ( j = 0 ; j <= 89 ; j ++ ) { if ( b [ i ] == a [ j ] ) { if ( k == 0 ) printf ( "%d" , a [ j ] ) ; else printf ( " %d" , a [ j ] ) ; a [ j ] = 0 ; k ++ ; break ; } } } printf ( "\n" ) ; }
int main ( ) { int i , n ; scanf ( "%d" , & n ) ; int * N = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( int k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & ( N [ k ] ) ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( int r = 0 ; r < i ; r ++ ) { if ( N [ i ] == N [ r ] ) { for ( int j = i ; j < n ; j ++ ) { N [ j ] = N [ j + 1 ] ; } n -- ; i -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( "%d" , N [ i ] ) ; else printf ( "%d " , N [ i ] ) ; } return 0 ; }
int main ( ) { int a [ 100 ] = { 0 } ; int b , d , e , f , g , i , j , k , l , m , n , p ; scanf ( "%d" , & n ) ; scanf ( "%d" , & p ) ; printf ( "%d" , p ) ; a [ p ] ++ ; for ( i = 2 ; i <= n ; i ++ ) { scanf ( "%d" , & p ) ; if ( a [ p ] == 0 ) { printf ( " %d" , p ) ; a [ p ] ++ ; } } return 7 ; }
int main ( ) { int n , i , j , m , y ; scanf ( "%d" , & n ) ; int a [ 20000 ] ; int b [ 20000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { y = 0 ; for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( a [ i ] == a [ j ] ) { y ++ ; } } if ( y == 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n , s [ 200001 ] = { 0 } , k [ 100 ] = { 0 } ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; k [ s [ i ] ] ++ ; } int flag [ 100 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { if ( k [ s [ i ] ] == 1 && flag [ s [ i ] ] == 0 ) { if ( i == 0 ) cout << s [ i ] ; if ( i != 0 ) cout << " " << s [ i ] ; } if ( k [ s [ i ] ] != 1 && flag [ s [ i ] ] == 0 ) { if ( i == 0 ) cout << s [ i ] ; if ( i != 0 ) cout << " " << s [ i ] ; flag [ s [ i ] ] = 1 ; } } return 0 ; }
int main ( ) { int n , i , j , k = 1 , a [ 20001 ] , b [ 20001 ] , f ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( i == 0 ) b [ 0 ] = a [ 0 ] ; f = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) break ; else f ++ ; } if ( f == i ) { b [ k ] = a [ i ] ; k ++ ; } } for ( i = 1 ; i < k - 1 ; i ++ ) { printf ( "%d " , b [ i ] ) ; } printf ( "%d" , b [ k - 1 ] ) ; scanf ( "%d" , & n ) ; return 0 ; }
int main ( ) { int n , i , a [ 100000 ] , j ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] == a [ 0 ] ) a [ i ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] != 0 ) { printf ( " %d" , a [ i ] ) ; for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] == a [ i ] ) a [ j ] = 0 ; } } return 0 ; }
int main ( ) { int n , i , j , k ; k = 0 ; scanf ( "%d" , & n ) ; int a [ n ] , b [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] != 100 ) { for ( i = j + 1 ; i < n ; i ++ ) { if ( a [ i ] == a [ j ] ) { a [ i ] = 100 ; } } } } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] != 100 ) { printf ( " %d" , a [ i ] ) ; } } scanf ( "%d" , & n ) ; return 0 ; }
int main ( ) { int n , a [ 100000 ] , i , h = 1 , j , b [ 100000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) break ; } if ( j == i ) { b [ h ] = a [ i ] ; h ++ ; } } for ( i = 1 ; i <= h - 1 ; i ++ ) { if ( i < h - 1 ) printf ( "%d " , b [ i ] ) ; else if ( i == h - 1 ) printf ( "%d" , b [ i ] ) ; } }
int main ( ) { int n , i , j , q , x = 1 ; int shuzu [ N ] , panduan [ N ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & ( shuzu [ i ] ) ) ; } panduan [ 0 ] = 0 ; for ( i = 1 ; i < n ; i ++ ) { for ( q = 0 , j = 0 ; j < i ; j ++ ) { if ( shuzu [ j ] == shuzu [ i ] ) { q = 1 ; break ; } } panduan [ i ] = q ; } for ( i = 0 , x = 0 ; i < n ; i ++ ) { if ( panduan [ i ] == 0 ) { x = x + 1 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( panduan [ i ] == 0 && ( x != 1 ) ) { printf ( "%d " , shuzu [ i ] ) ; x -- ; } else if ( panduan [ i ] == 0 && ( x == 1 ) ) { printf ( "%d" , shuzu [ i ] ) ; x -- ; } } return 0 ; }
int main ( ) { int n , i , j , k = 1 , a [ 20000 ] = { 0 } , b [ 20000 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; b [ 0 ] = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) break ; if ( j == i - 1 ) { b [ k ] = a [ i ] ; k ++ ; } } } printf ( "%d" , b [ 0 ] ) ; if ( k > 1 ) { for ( i = 1 ; i < k ; i ++ ) printf ( " %d" , b [ i ] ) ; } return 0 ; }
void main ( ) { int a [ 20001 ] = { 0 } , b [ 100 ] = { 0 } , n , i , j , m = 1 , flag = 0 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 1 ] ) ; b [ 1 ] = a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { flag = 0 ; for ( j = 1 ; j <= m ; j ++ ) { if ( a [ i ] == b [ j ] ) flag = 1 ; } if ( flag == 1 ) continue ; else { m ++ ; b [ m ] = a [ i ] ; printf ( " %d" , a [ i ] ) ; } } printf ( "\n" ) ; }
int main ( ) { int u [ 20000 ] ; int a , n , i , j , k , l ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & u [ i ] ) ; } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( u [ i ] == u [ j ] ) { u [ j ] = 0 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( u [ i ] != 0 ) { k ++ ; } } i = 0 ; l = 0 ; while ( i < n ) { if ( u [ i ] != 0 ) { if ( l < k - 1 ) { printf ( "%d " , u [ i ] ) ; l ++ ; } else { printf ( "%d" , u [ i ] ) ; } } i ++ ; } return 0 ; }
int main ( ) { int n , i , j , cal = 0 , enter = 1 , num = 0 ; int a [ 100001 ] = { 0 } , b [ 100001 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= num ; j ++ ) { if ( a [ i ] == b [ j ] ) { goto next ; break ; } } if ( enter == 1 ) { printf ( "%d" , a [ i ] ) ; enter = 0 ; } else printf ( " %d" , a [ i ] ) ; num ++ ; b [ num ] = a [ i ] ; next : b [ 0 ] = 0 ; } return 0 ; }
int main ( ) { int n ; int a [ 20000 ] ; int i , j ; int t ; int l = 1 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } if ( n == 1 ) { printf ( "%d" , a [ 0 ] ) ; return 0 ; } printf ( "%d" , a [ 0 ] ) ; t = n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { t = t - 1 ; break ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { break ; } else if ( j == i - 1 && l < t ) { printf ( " %d" , a [ i ] ) ; } } } return 0 ; }
void main ( ) { int n , a [ 20000 ] , i , j , k = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] != a [ i ] ) { k = k + 1 ; } if ( a [ j ] == a [ i ] ) { k = 0 ; break ; } } if ( k != 0 ) { printf ( " %d" , a [ i ] ) ; k = 0 ; } } printf ( "\n" ) ; }
int main ( ) { int n , i , j ; scanf ( "%d" , & n ) ; int * shuzu = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & shuzu [ i ] ) ; } printf ( "%d" , shuzu [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( j < i - 1 ) { if ( shuzu [ i ] == shuzu [ j ] ) { break ; } } if ( j == i - 1 ) { if ( shuzu [ i ] != shuzu [ j ] ) { printf ( " %d" , shuzu [ i ] ) ; } } } } return 0 ; }
int main ( ) { int a [ 20000 ] , i , j , k , m = 0 , n , b = 0 , c = 1 ; scanf ( "%d" , & n ) ; k = n ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d " , & a [ i ] ) ; } scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { a [ i ] = 0 ; k -= 1 ; break ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 0 && c < k ) { printf ( "%d " , a [ i ] ) ; c += 1 ; } else { if ( a [ i ] != 0 && c == k ) { printf ( "%d" , a [ i ] ) ; } } } return 0 ; }
int main ( ) { int n , b , c , d , i , a [ 20000 ] = { 0 } ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> b ; a [ i ] = b ; } cout << a [ 1 ] ; for ( c = 2 ; c <= n ; c ++ ) { for ( d = 0 ; d <= c - 1 ; d ++ ) { if ( a [ d ] == a [ c ] ) break ; else continue ; } if ( d == c ) { cout << " " << a [ c ] ; } } return 0 ; }
int main ( ) { int i , j , n , flag ; int a [ 100000 ] ; scanf ( "%d\n" , & n ) ; scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( " %d" , & a [ i ] ) ; } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { flag = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) flag = 1 ; } if ( flag == 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n , i , j , k = 1 , a [ 20001 ] , b [ 20001 ] , f ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; if ( i == 0 ) b [ 0 ] = a [ 0 ] ; f = 1 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { f = 0 ; break ; } } if ( f == 1 ) { b [ k ] = a [ i ] ; k ++ ; } } for ( i = 1 ; i < k - 1 ; i ++ ) { printf ( "%d " , b [ i ] ) ; } printf ( "%d" , b [ k - 1 ] ) ; scanf ( "%d" , & n ) ; return 0 ; }
int main ( ) { int n , input [ 20000 ] , output [ 20000 ] , i , j , k , x ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & input [ i ] ) ; } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { x = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( input [ i ] == input [ j ] ) { x ++ ; break ; } } if ( x == 0 ) { k ++ ; output [ k ] = input [ i ] ; } } for ( i = 1 ; i < k ; i ++ ) { printf ( "%d " , output [ i ] ) ; } if ( i == k ) printf ( "%d\n" , output [ i ] ) ; return 0 ; }
main ( ) { int n , m , k , i , j , l ; int s [ 12000 ] ; scanf ( "%d" , & n ) ; m = n ; l = 0 ; for ( i = 1 ; i <= n ; i ++ ) { l ++ ; scanf ( "%d" , & s [ l ] ) ; for ( j = 1 ; j <= l - 1 ; j ++ ) if ( s [ j ] == s [ l ] ) { l -- ; m -- ; } } for ( i = 1 ; i <= m - 1 ; i ++ ) printf ( "%d " , s [ i ] ) ; printf ( "%d" , s [ m ] ) ; }
int main ( ) { int n , i , k , a , time ; k = 1 ; time = 0 ; scanf ( "%d" , & n ) ; int * sz = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { if ( sz [ i ] == sz [ k ] ) { for ( a = k ; a < n - 1 ; a ++ ) { sz [ a ] = sz [ a + 1 ] ; } n -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) printf ( "%d" , sz [ i ] ) ; else if ( i != 0 ) printf ( " %d" , sz [ i ] ) ; } free ( sz ) ; return 0 ; }
int main ( ) { int a [ 20001 ] ; int n , i , j , l , num ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } num = 0 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { a [ i ] = 0 ; num ++ ; break ; } } } j = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] != 0 ) { j ++ ; if ( j != n - num ) { printf ( "%d " , a [ i ] ) ; } else { printf ( "%d" , a [ i ] ) ; break ; } } } scanf ( "%d" , & n ) ; return 0 ; }
int main ( ) { int sz1 [ 20000 ] , sz2 [ 20000 ] , i , j , n , k ; scanf ( "%d" , & n ) ; j = 1 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & sz1 [ i ] ) ; } sz2 [ 0 ] = sz1 [ 0 ] ; for ( i = 1 ; i <= n - 1 ; i ++ ) { for ( k = i - 1 ; k >= 0 ; k -- ) { if ( sz1 [ i ] == sz2 [ k ] ) { break ; } if ( k == 0 ) { sz2 [ j ] = sz1 [ i ] ; j = j + 1 ; } } } for ( i = 0 ; i <= j - 1 ; i ++ ) { if ( i == j - 1 ) { printf ( "%d" , sz2 [ i ] ) ; } else { printf ( "%d " , sz2 [ i ] ) ; } } return 0 ; }
int main ( ) { int n , a [ 20000 ] , b [ 20000 ] , i , j , r , t , s ; scanf ( "%d" , & n ) ; s = 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } b [ 0 ] = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { t = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) { t ++ ; } } if ( t == 0 ) { b [ s ] = a [ i ] ; s ++ ; } } for ( r = 0 ; r < s - 1 ; r ++ ) { printf ( "%d " , b [ r ] ) ; } printf ( "%d" , b [ s - 1 ] ) ; printf ( "\n" ) ; return 0 ; }
int main ( ) { int n , k ; int flag = 0 ; int i ; scanf ( "%d" , & n ) ; int * shuzu = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & shuzu [ i ] ) ; } printf ( "%d" , shuzu [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( shuzu [ i ] == shuzu [ k ] ) { flag = 1 ; break ; } } if ( flag == 0 ) { printf ( " %d" , shuzu [ i ] ) ; } flag = 0 ; } free ( shuzu ) ; return 0 ; }
void main ( ) { int n , a [ 20000 ] , i = 2 , j , k ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 1 ] ) ; while ( i <= n ) { scanf ( "%d" , & a [ i ] ) ; i = i + 1 ; } printf ( "%d" , a [ 1 ] ) ; for ( i = 2 ; i <= n ; i = i + 1 ) { if ( a [ i ] == a [ 1 ] ) a [ i ] = 0 ; } for ( k = 2 ; k <= n ; k = k + 1 ) { if ( a [ k ] != 0 ) { printf ( " %d" , a [ k ] ) ; for ( j = k + 1 ; j <= n ; j = j + 1 ) { if ( a [ j ] == a [ k ] ) { a [ j ] = 0 ; } } } } }
void main ( ) { int n , a [ 100001 ] , h , i , j ; char c ; scanf ( "%d\n" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { h = 0 ; scanf ( "%d%c" , & a [ i ] , & c ) ; if ( i == 1 ) printf ( "%d" , a [ i ] ) ; else { for ( j = 1 ; j < i ; j ++ ) if ( a [ j ] == a [ i ] ) { h = 1 ; break ; } if ( h == 0 ) printf ( " %d" , a [ i ] ) ; } } }
int main ( ) { int n , i , j = 2 , m ; int a [ 20010 ] , b [ 100 ] ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; } b [ 1 ] = a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( m = 1 ; m <= i - 1 ; m ++ ) { if ( a [ m ] == a [ i ] ) break ; } if ( m == i ) { b [ j ] = a [ i ] ; j ++ ; } } for ( i = 1 ; i <= j - 1 ; i ++ ) { if ( i < j - 1 ) { cout << b [ i ] << " " ; } else cout << b [ i ] ; } return 0 ; }
int main ( ) { int n , i , j , m = 0 ; cin >> n ; int num [ 20001 ] = { 0 } ; for ( i = 1 ; i <= n ; i ++ ) cin >> num [ i ] ; cout << num [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { int k = 0 ; for ( j = 1 ; j <= i - 1 ; j ++ ) if ( num [ i ] == num [ j ] ) { k = 1 ; break ; } if ( k == 0 ) cout << " " << num [ i ] ; } return 0 ; }
int main ( ) { int a [ 10000 ] , i , j , n , t , count ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { t = 0 ; count = 0 ; for ( j = i ; j >= 0 ; j -- ) { count ++ ; if ( a [ i ] == a [ j ] && ( i != j ) ) { t = 1 ; break ; } } if ( t == 0 && count == 1 ) { printf ( "%d" , a [ i ] ) ; } else if ( ( t == 0 ) && ( count != 1 ) ) { printf ( " %d" , a [ i ] ) ; } } return 0 ; }
int main ( ) { int n , i , j , k , m ; char a [ 50000 ] ; int b [ 20001 ] ; scanf ( "%d\n" , & n ) ; gets ( a ) ; k = strlen ( a ) ; i = 0 ; j = 1 ; while ( i <= k - 1 ) { b [ j ] = ( a [ i ] - 48 ) * 10 + ( a [ i + 1 ] - 48 ) ; i = i + 3 ; j = j + 1 ; } j = j - 1 ; printf ( "%d" , b [ 1 ] ) ; i = 2 ; while ( i <= j ) { m = 1 ; while ( m < i ) { if ( b [ i ] == b [ m ] ) break ; m = m + 1 ; } if ( m == i ) printf ( " %d" , b [ i ] ) ; i = i + 1 ; } return 0 ; }
int main ( ) { int n , a [ 10000 ] , i , j , x = 0 ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( a [ i ] == 0 ) continue ; for ( j = i + 1 ; j <= n - 1 ; j ++ ) { if ( a [ i ] == a [ j ] ) { a [ j ] = 0 ; } } } printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i <= n - 1 ; i ++ ) { if ( a [ i ] != 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n , a [ 30000 ] , i , j , k , l , t = 1 ; scanf ( "%d" , & n ) ; for ( l = 0 ; l < n ; l ++ ) scanf ( "%d" , & a [ l ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; ) { if ( a [ i ] == a [ j ] ) { for ( k = j ; k < n - 1 ; k ++ ) { a [ k ] = a [ k + 1 ] ; } n = n - 1 ; } if ( a [ i ] != a [ j ] ) j ++ ; } } for ( i = 0 ; i < n ; i ++ ) if ( t ) { printf ( "%d" , a [ i ] ) ; t = 0 ; } else printf ( " %d" , a [ i ] ) ; return 0 ; }
int main ( ) { int a [ 20000 ] ; int check [ 100 ] = { 0 } ; int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( check [ a [ i ] ] == 0 ) { if ( i == 0 ) { printf ( "%d" , a [ i ] ) ; } else { printf ( " %d" , a [ i ] ) ; } check [ a [ i ] ] = 1 ; } } return 0 ; }
int main ( ) { int a , b , j , i , leap = 0 , f = 1 ; int m [ 20000 ] ; scanf ( "%d" , & a ) ; for ( i = 0 ; i < a ; i ++ ) scanf ( "%d" , & m [ i ] ) ; for ( i = 0 ; i < a ; i ++ ) { leap = 0 ; for ( j = 0 ; j < i + 1 ; j ++ ) { if ( j == i ) continue ; else { if ( m [ i ] == m [ j ] ) { leap = 1 ; break ; } } } if ( leap == 0 && f == 1 ) { printf ( "%d" , m [ i ] ) ; f = 0 ; continue ; } if ( leap == 0 && f == 0 ) printf ( " %d" , m [ i ] ) ; } return 0 ; }
int main ( ) { int i , j , a [ 20000 ] , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < i ; ) { if ( a [ i ] == a [ j ] ) j = i + 1 ; else j ++ ; if ( j == i ) printf ( " %d" , a [ i ] ) ; } } }
int main ( ) { int n , j , k , m = 1 , x , a [ 1000 ] ; scanf ( "%d" , & n ) ; if ( n == 0 ) return 0 ; scanf ( "%d" , & x ) ; printf ( "%d" , x ) ; a [ 0 ] = x ; for ( j = 1 ; j < n ; j ++ ) { scanf ( "%d" , & x ) ; k = 0 ; while ( ( k < m ) && ( a [ k ] != x ) ) k ++ ; if ( k == m ) { a [ m ++ ] = x ; printf ( " %d" , x ) ; } } return 0 ; }
int main ( ) { int n ; int a [ 9000 ] , ans [ 9000 ] ; scanf ( "%d" , & n ) ; int i , j ; int num = 1 , t = 0 ; scanf ( "%d" , & a [ 0 ] ) ; ans [ 0 ] = a [ 0 ] ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; int j = 0 ; while ( j < num ) { if ( a [ i ] == ans [ j ] ) { t = 1 ; break ; } j ++ ; } if ( t == 0 ) { ans [ num ] = a [ i ] ; printf ( " %d" , ans [ num ] ) ; num ++ ; } else t = 0 ; } getchar ( ) ; getchar ( ) ; getchar ( ) ; }
int main ( ) { int a [ 20000 ] , n , i , num , j , flag , k , h = 0 ; scanf ( "%d%d" , & n , & a [ 0 ] ) ; for ( i = 1 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & num ) ; for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( num != a [ j ] ) flag = 1 ; else { flag = 0 ; break ; } } if ( flag == 1 ) { h ++ ; a [ h ] = num ; } } for ( k = 0 ; k <= h - 1 ; k ++ ) printf ( "%d " , a [ k ] ) ; printf ( "%d" , a [ h ] ) ; return 0 ; }
int main ( ) { int n , i , j , a [ 20005 ] , b [ 20005 ] = { 0 } ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; b [ j ] != 0 ; j ++ ) { if ( b [ j ] == a [ i ] ) break ; } if ( b [ j ] == 0 ) b [ j ] = a [ i ] ; } cout << b [ 0 ] ; for ( i = 1 ; b [ i ] != 0 ; i ++ ) { cout << " " << b [ i ] ; } return 0 ; }
int main ( ) { int n , a [ 20000 ] = { '\0' } , i = 0 , j = 0 , k = 0 , temp , count ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 0 ] ) ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & temp ) ; count = 0 ; for ( j = 0 ; j <= k ; j ++ ) { if ( temp == a [ j ] ) break ; else count ++ ; } if ( count == k + 1 ) { k ++ ; a [ k ] = temp ; } } for ( i = 1 ; a [ i ] != '\0' ; i ++ ) printf ( " %d" , a [ i ] ) ; }
int main ( ) { int n , j , k , m = 1 , x , a [ 1000 ] ; scanf ( "%d" , & n ) ; if ( n == 0 ) return ( 0 ) ; else { scanf ( "%d" , & x ) ; printf ( "%d" , x ) ; a [ 0 ] = x ; for ( j = 1 ; j < n ; j ++ ) { scanf ( "%d" , & x ) ; k = 0 ; while ( ( k < m ) && ( a [ k ] != x ) ) k ++ ; if ( k == m ) { a [ m ++ ] = x ; printf ( " %d" , x ) ; } } printf ( "\n" ) ; } }
int main ( ) { int n , i , a [ 101 ] ; int b ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { { scanf ( "%d" , & b ) ; } if ( a [ b ] == 1 ) { a [ b ] = 1 ; } else { if ( i != 0 ) { printf ( " " ) ; } printf ( "%d" , b ) ; a [ b ] = 1 ; } } return 0 ; }
int main ( ) { int n , a [ 20001 ] , b [ 20001 ] , i , m ; cin >> n ; m = n ; for ( i = 1 ; i <= n ; i ++ ) b [ i ] = 0 ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; b [ a [ i ] ] = 1 ; } i = 2 ; cout << a [ 1 ] ; b [ a [ 1 ] ] = 0 ; do { if ( b [ a [ i ] ] == 1 ) { cout << ' ' << a [ i ] ; b [ a [ i ] ] = 0 ; } m = m - 1 ; i = i + 1 ; } while ( m >= 0 ) ; return 0 ; }
int main ( ) { int n , i , m , save [ 20000 ] , count = 0 ; for ( i = 0 ; i < 20000 ; i ++ ) save [ i ] = 0 ; cin >> n ; while ( n -- ) { int flag = 1 ; cin >> m ; for ( i = 0 ; i < 20000 ; i ++ ) { if ( save [ i ] == m ) { flag = 0 ; break ; } } if ( flag == 1 ) { for ( i = 0 ; i < 20000 ; i ++ ) { if ( save [ i ] == 0 ) { save [ i ] = m ; break ; } } count ++ ; } } for ( i = 0 ; i < count - 1 ; i ++ ) cout << save [ i ] << " " ; cout << save [ count - 1 ] ; return 0 ; }
int main ( ) { int a [ 100001 ] , b [ 100001 ] ; int i , j , step = 1 ; int n ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ; b [ step ] = a [ 1 ] ; cout << a [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) { for ( j = 1 ; j <= step ; j ++ ) { if ( a [ i ] == b [ j ] ) break ; } if ( j == step + 1 ) { step ++ ; cout << " " << a [ i ] ; b [ step ] = a [ i ] ; } } return 0 ; }
int main ( ) { int n ; int a [ 91 ] ; int i ; for ( i = 0 ; i < 91 ; i ++ ) { a [ i ] = 0 ; } cin >> n ; cin >> i ; cout << i ; a [ i - 10 ] = 1 ; while ( n > 0 ) { n -- ; int b ; cin >> b ; if ( a [ b - 10 ] == 0 ) { cout << ' ' << b ; a [ b - 10 ] = 1 ; } } }
int main ( ) { int n ; cin >> n ; int zz [ 20000 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) cin >> zz [ i ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( zz [ i ] == zz [ j ] ) { zz [ j ] -= zz [ i ] ; } } } cout << zz [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( zz [ i ] != 0 ) cout << " " << zz [ i ] ; } }
int main ( ) { int n , figure [ 20000 ] = { 0 } , num [ 100 ] = { 0 } , flag [ 100 ] = { 0 } ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> figure [ i ] ; } flag [ figure [ 0 ] ] ++ ; cout << figure [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( flag [ figure [ i ] ] == 0 ) { flag [ figure [ i ] ] ++ ; cout << " " << figure [ i ] ; continue ; } } return 0 ; }
int main ( ) { int n , i , j , t , a [ 20000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { t = 0 ; if ( i == 0 ) printf ( "%d" , a [ 0 ] ) ; else { for ( j = 0 ; j < i ; j ++ ) { if ( a [ i ] == a [ j ] ) t = t + 1 ; } if ( t == 0 ) printf ( " %d" , a [ i ] ) ; } } return 0 ; }
struct arr { long int num ; struct arr * next ; } ; int n ; struct arr * create ( int m ) { struct arr * head ; struct arr * p1 , * p2 ; n = 1 ; p1 = p2 = ( struct arr * ) malloc ( LEN ) ; scanf ( "%ld" , & p1 -> num ) ; head = p1 ; while ( n < m ) { p1 = ( struct arr * ) malloc ( LEN ) ; p2 -> next = p1 ; n ++ ; p2 = p1 ; scanf ( "%ld" , & p1 -> num ) ; ULL ; return ( head ) ; } void print ( struct arr * head ) { struct arr * p ; p = head ; while ( p != NULL ) { if ( p == head ) printf ( "%ld" , p -> num ) ; else printf ( " %ld" , p -> num ) ;
int main ( ) { int N , m , i , j , a [ 10000 ] , t , b [ 10000 ] = { 0 } , n [ 10000 ] = { 0 } , k , p = 0 , x , q ; scanf ( "%d" , & m ) ; for ( j = 0 ; j < m ; j ++ ) scanf ( "%d" , & a [ j ] ) ; b [ 0 ] = a [ 0 ] ; for ( j = 0 ; j < m ; j ++ ) { p = 0 ; for ( k = 0 ; b [ k ] != 0 ; k ++ ) { if ( a [ j ] == b [ k ] ) { n [ k ] ++ ; p = 1 ; break ; } } if ( p == 0 ) { b [ k ] = a [ j ] ; n [ k ] ++ ; } } x = 0 ; q = 0 ; if ( n [ 0 ] == 1 ) printf ( "%d" , b [ 0 ] ) ; else if ( n [ 0 ] >= 2 ) { printf ( "%d" , b [ 0 ] ) ; n [ 0 ] = 0 ; } for ( j = 1 ; b [ j ] != 0 ; j ++ ) { if ( n [ j ] == 1 ) printf ( " %d" , b [ j ] ) ; else if ( n [ j ] >= 2 ) { printf ( " %d" , b [ j ] ) ; n [ j ] = 0 ; } } return 0 ; }
int main ( ) { int n , i , j , m = 0 ; cin >> n ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) { int t = 0 ; for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] == a [ j ] ) { t ++ ; break ; } if ( t == 0 ) { if ( m > 0 ) cout << " " ; cout << a [ i ] ; m ++ ; } } return 0 ; }
int main ( ) { int n , i , c ; int a [ 101 ] = { 0 } ; cin >> n ; cin >> c ; a [ c ] = 1 ; cout << c ; while ( cin >> c ) { if ( a [ c ] == 0 ) { cout << " " << c ; a [ c ] = 1 ; } } return 0 ; }
int main ( ) { int n , i , a [ 20000 ] , b [ 100 ] ; memset ( b , 0 , sizeof ( b ) ) ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } cout << a [ 0 ] ; b [ a [ 0 ] ] = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( b [ a [ i ] ] == 0 ) { cout << " " << a [ i ] ; b [ a [ i ] ] = 1 ; } } return 0 ; }
int main ( ) { int n ; cin >> n ; int mark [ 101 ] ; for ( int i = 0 ; i < 101 ; i ++ ) mark [ i ] = 0 ; int num [ 20005 ] ; for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; } cout << num [ 0 ] ; mark [ num [ 0 ] ] = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( mark [ num [ i ] ] == 0 ) { mark [ num [ i ] ] = 1 ; cout << " " << num [ i ] ; } } cout << endl ; return 0 ; }
int main ( ) { int n , a [ 101 ] , number , i ; cin >> n ; for ( i = 1 ; i <= 100 ; i ++ ) a [ i ] = 0 ; cin >> number ; cout << number ; a [ number ] = 1 ; for ( i = 1 ; i <= n - 1 ; i ++ ) { cin >> number ; if ( a [ number ] == 0 ) { a [ number ] = 1 ; cout << " " << number ; } } return 0 ; }
int main ( ) { int all , name [ 20000 ] , input [ 20000 ] , i , p , count , judge ; scanf ( "%d" , & all ) ; count = 0 ; for ( i = 0 ; i < all ; i ++ ) { name [ i ] = 0 ; } for ( i = 0 ; i < all ; i ++ ) { scanf ( "%d" , & input [ i ] ) ; } for ( i = 0 ; i < all ; i ++ ) { judge = 0 ; for ( p = 0 ; p < count ; p ++ ) { if ( name [ p ] == input [ i ] ) { judge = 1 ; break ; } } if ( judge == 1 ) { continue ; } name [ count ] = input [ i ] ; count ++ ; } printf ( "%d" , name [ 0 ] ) ; for ( i = 1 ; i < count ; i ++ ) { printf ( " %d" , name [ i ] ) ; } return 0 ; }
int main ( ) { int n , i , j , t = 0 ; int a [ 20000 ] ; scanf ( "%d" , & n ) ; scanf ( "%d" , & a [ 1 ] ) ; printf ( "%d" , a [ 1 ] ) ; for ( i = 2 ; i <= n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; for ( j = 1 ; j < i ; j ++ ) { t = 0 ; if ( a [ i ] == a [ j ] ) { t = 1 ; break ; } } if ( t == 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int visit [ 101 ] = { 0 } ; int i ; for ( i = 0 ; i < n ; i ++ ) { int num ; scanf ( "%d" , & num ) ; if ( visit [ num ] == 1 ) { } else { if ( i != 0 ) { printf ( " " ) ; } printf ( "%d" , num ) ; visit [ num ] = 1 ; } } printf ( "\n" ) ; return 0 ; }
int main ( ) { int a [ 10000 ] = { 0 } ; int n , c , i = 0 , j = 0 ; scanf ( "%d" , & n ) ; scanf ( "%d" , & c ) ; a [ 0 ] = c ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i <= n - 1 ; i ++ ) { scanf ( "%d " , & c ) ; a [ i ] = c ; for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( c == a [ j ] ) a [ i ] = 0 ; } if ( a [ i ] != 0 ) printf ( " %d" , a [ i ] ) ; } return 0 ; }
int check ( int b [ ] , int len , int x ) { int i , flag = 1 ; for ( i = 0 ; i < len ; i ++ ) { if ( b [ i ] == x ) { flag = 0 ; return 0 ; break ; } } if ( flag ) return 1 ; } int main ( ) { int j , i , n ; int a [ 20100 ] , b [ 20100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 0 ] ) ; b [ 0 ] = a [ 0 ] ; j = 1 ; for ( i = 1 ; i < n ; i ++ ) { if ( check ( b , j , a [ i ] ) ) { printf ( " %d" , a [ i ] ) ; b [ j ] = a [ i ] ; j ++ ; } } return 0 ; }
int main ( ) { int n , i , j , flag = 0 ; int * p ; scanf ( "%d" , & n ) ; p = ( int * ) malloc ( sizeof ( int ) * n ) ; scanf ( "%d" , & p [ 0 ] ) ; printf ( "%d" , p [ 0 ] ) ; for ( i = 1 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & p [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) { if ( p [ i ] == p [ j ] ) flag = 1 ; } if ( flag == 0 ) printf ( " %d" , p [ i ] ) ; flag = 0 ; } return 0 ; }
int main ( ) { int a [ 10000 ] , n , i , j , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] == a [ j ] && i > j ) { t = 0 ; break ; } else t = 1 ; } if ( t == 0 ) printf ( "\0" ) ; else { if ( i > 0 ) printf ( " %d" , a [ i ] ) ; else printf ( "%d" , a [ i ] ) ; } } return 0 ; }
int main ( ) { int n , i , j , a [ 20010 ] , b [ 20010 ] = { 0 } , m = 0 ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; for ( j = 0 ; j <= m ; j ++ ) { if ( a [ i ] == b [ j ] ) { break ; } if ( j == m ) { b [ m ] = a [ i ] ; m ++ ; break ; } } } for ( i = 0 ; i < m ; i ++ ) { if ( i == m - 1 ) cout << b [ i ] ; else cout << b [ i ] << " " ; } return 0 ; }
int main ( ) { int n ; int a [ N ] ; int i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { printf ( "%d" , a [ i ] ) ; } else { for ( j = 0 ; j < i ; j ++ ) { if ( a [ j ] == a [ i ] ) { break ; } } if ( j == i ) { printf ( " %d" , a [ i ] ) ; } else if ( j < i ) { continue ; } } } return 0 ; }
int main ( ) { int n , i , j , a [ 20001 ] , flag [ 20001 ] = { 0 } , k = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] == a [ i ] ) flag [ j ] = 1 ; } if ( flag [ i ] == 0 && k == 0 ) { printf ( "%d" , a [ i ] ) ; k ++ ; } else if ( flag [ i ] == 0 ) printf ( " %d" , a [ i ] ) ; } }
int n , max1 , xue1 , max2 , xue2 , max3 , xue3 ; struct chengji { int xh ; int yw ; int sx ; int zf ; struct chengji * next ; } ; void create ( ) { struct chengji * head ; struct chengji * p1 ; int i = 0 ; while ( i < n ) { i ++ ; if ( i == 1 ) head = p1 ; p1 = ( struct chengji * ) malloc ( len ) ; scanf ( "%d %d %d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> zf = p1 -> yw + p1 -> sx ; if ( ( p1 -> zf ) > max1 ) { xue3 = xue2 ; max3 = max2 ; xue2 = xue1 ; max2 = max1 ; xue1 = p1 -> xh ; max1 = p1 -> zf ; } else { if ( ( p1 -> zf ) > max2 && ( p1 -> zf ) <= max1 ) { xue3 = xue2 ; max3 = max2 ; xue2 = p1 -> xh ; max2 = p1 -> zf ; } else { if ( ( p1 -> zf ) > max3 && ( p1 -> zf ) <= max2 ) { xue3 = p1 -> xh ; max3 = p1 -> zf ; } } } p1 = p1 -> next ; } } void main ( ) { scanf ( "%d" , & n ) ; max1 = 0 , max2 = 0 , max3 = 0 ; create ( ) ; printf ( "%d %d\n" , xue1 , max1 ) ; printf ( "%d %d\n" , xue2 , max2 ) ; printf ( "%d %d" , xue3 , max3 ) ; }
struct student { int no ; int ch ; int math ; int sum ; struct student * next ; } ; struct student * creat ( long n ) { long i ; struct student * head , * p , * q ; head = ( struct student * ) malloc ( len ) ; p = ( struct student * ) malloc ( len ) ; head -> next = q = p ; scanf ( "%d %d %d" , & p -> no , & p -> ch , & p -> math ) ; p -> sum = ( p -> ch ) + ( p -> math ) ; for ( i = 1 ; i < n ; i ++ ) { p = ( struct student * ) malloc ( len ) ; scanf ( "%d %d %d" , & p -> no , & p -> ch , & p -> math ) ; p -> sum = ( p -> ch ) + ( p -> math ) ; q -> next = p ; q = p ; p -> next = NULL ; } return ( head ) ; } void sort ( struct student * head ) { struct student * p , * q1 , * q2 , * q3 ; int m1 , m2 , m3 ; for ( p = head -> next , m1 = p -> sum ; p != NULL ; p = p -> next ) if ( p -> sum > m1 ) { m1 = p -> sum ; q1 = p ; } printf ( "%d %d\n" , q1 -> no , q1 -> sum ) ; for ( p = head -> next , m2 = p -> sum ; p != NULL ; p = p -> next ) if ( p -> sum > m2 && p != q1 ) { m2 = p -> sum ; q2 = p ; } printf ( "%d %d\n" , q2 -> no , q2 -> sum ) ; for ( p = head -> next , m3 = p -> sum ; p != NULL ; p = p -> next ) if ( p -> sum > m3 && p != q1 && p != q2 ) { m3 = p -> sum ; q3 = p ; } printf ( "%d %d\n" , q3 -> no , q3 -> sum ) ; } int main ( ) { long n ; struct student * head ; scanf ( "%d" , & n ) ; head = creat ( n ) ; sort ( head ) ; return 0 ; }
struct stu { int num ; int ch ; int math ; struct stu * next ; } ; void main ( ) { int n , m = 0 , max = 0 , max2 = 0 , max3 = 0 , no = 0 , no2 = 0 , no3 = 0 ; struct stu * p ; scanf ( "%d" , & n ) ; struct stu * p1 , * p2 , * head ; p1 = ( struct stu * ) malloc ( LEN ) ; scanf ( "%d%d%d" , & p1 -> num , & p1 -> ch , & p1 -> math ) ; head = NULL ; while ( n - 1 ) { m = m + 1 ; if ( m == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct stu * ) malloc ( LEN ) ; scanf ( "%d%d%d" , & p1 -> num , & p1 -> ch , & p1 -> math ) ; n -- ; } p2 -> next = NULL ; p = head ; while ( p ) { p -> ch = p -> math + p -> ch ; p = p -> next ; } p = head ; while ( p ) { if ( p -> ch > max ) { max = p -> ch ; no = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no , max ) ; p = head ; while ( p ) { if ( p -> ch <= max && p -> ch > max2 && p -> num != no ) { max2 = p -> ch ; no2 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no2 , max2 ) ; p = head ; while ( p ) { if ( p -> ch <= max2 && p -> ch > max3 && p -> num != no && p -> num != no2 ) { max3 = p -> ch ; no3 = p -> num ; } p = p -> next ; } printf ( "%d %d" , no3 , max3 ) ; }
struct stu { int num ; int ch ; int mt ; int sum ; struct stu * next ; } ; void main ( ) { struct stu * p1 , * p2 , * p , * head ; int n , max = 0 , max2 = 0 , max3 = 0 , no = 0 , no2 = 0 , no3 = 0 ; scanf ( "%d" , & n ) ; p1 = ( struct stu * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> ch , & p1 -> mt ) ; p1 -> sum = p1 -> ch + p1 -> mt ; head = p1 ; p2 = p1 ; while ( n - 1 ) { p1 = ( struct stu * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> ch , & p1 -> mt ) ; p1 -> sum = p1 -> ch + p1 -> mt ; p2 -> next = p1 ; p2 = p1 ; n -- ; } p2 -> next = NULL ; p = head ; while ( p ) { if ( p -> sum > max ) { max = p -> sum ; no = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no , max ) ; p = head ; while ( p ) { if ( p -> sum > max2 && p -> sum <= max && p -> num != no ) { max2 = p -> sum ; no2 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no2 , max2 ) ; p = head ; while ( p ) { if ( p -> sum > max3 && p -> sum <= max2 && p -> num != no2 && p -> num != no ) { max3 = p -> sum ; no3 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no3 , max3 ) ; }
struct student { long num ; int scorec ; int scorem ; struct student * next ; } ; struct student * creat ( long n ) { struct student * head , * p1 , * p2 ; p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> scorec , & p1 -> scorem ) ; long s = n - 1 ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; do { p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> scorec , & p1 -> scorem ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; s = s - 1 ; } while ( s ) ; return ( head ) ; } void main ( ) { struct student * head , * p , * q , stu1 , stu2 , stu3 ; long n , k1 = - 1 , k2 = - 1 , k3 = - 1 , i , j ; int l ; scanf ( "%ld" , & n ) ; head = creat ( n ) ; for ( p = head , i = 0 ; p != NULL ; p = p -> next , i ++ ) { l = 0 ; for ( q = head , j = 0 ; q != NULL ; q = q -> next , j ++ ) if ( ( q -> scorec + q -> scorem ) > ( p -> scorec + p -> scorem ) || ( ( ( q -> scorec + q -> scorem ) == ( p -> scorec + p -> scorem ) ) && j < i ) ) { l = l + 1 ; if ( l > 3 ) break ; } if ( l == 0 ) { k1 = i ; stu1 . num = p -> num ; stu1 . scorec = p -> scorec ; stu1 . scorem = p -> scorem ; } if ( l == 1 ) { k2 = i ; stu2 . num = p -> num ; stu2 . scorec = p -> scorec ; stu2 . scorem = p -> scorem ; } if ( l == 2 ) { k3 = i ; stu3 . num = p -> num ; stu3 . scorec = p -> scorec ; stu3 . scorem = p -> scorem ; } if ( k1 != - 1 && k2 != - 1 && k3 != - 1 ) break ; } printf ( "%ld %d\n" , stu1 . num , stu1 . scorec + stu1 . scorem ) ; printf ( "%ld %d\n" , stu2 . num , stu2 . scorec + stu2 . scorem ) ; printf ( "%ld %d" , stu3 . num , stu3 . scorec + stu3 . scorem ) ; }
void main ( ) { struct student { int xh ; int yw ; int sx ; int zf ; struct student * next ; } ; int i , j , k , n , m , max ; struct student * p1 , * p2 , * head ; scanf ( "%d" , & n ) ; head = p1 = p2 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> zf = p1 -> yw + p1 -> sx ; for ( i = 2 ; i <= n ; i ++ ) { p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> zf = p1 -> yw + p1 -> sx ; p2 -> next = p1 ; p2 = p1 ; if ( i == n ) p1 -> next = 0 ; } p1 = head ; for ( i = 1 ; i <= 3 ; i ++ ) { p1 = head ; max = 0 ; for ( j = 1 ; j <= n ; j ++ ) { max = max > p1 -> zf ? max : p1 -> zf ; p1 = p1 -> next ; } p1 = head ; for ( j = 1 ; j <= n ; j ++ ) { if ( p1 -> zf == max ) { printf ( "%d %d\n" , p1 -> xh , p1 -> zf ) ; p1 -> zf = 0 ; break ; } p1 = p1 -> next ; } } }
void main ( ) { int i , j , k , m , n , max ; struct stu { int xh ; int yw ; int sx ; int zf ; struct stu * next ; } ; struct stu * p1 , * p2 , * head ; scanf ( "%d" , & n ) ; p2 = head = p1 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; scanf ( "%d %d %d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> zf = p1 -> yw + p1 -> sx ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; scanf ( "%d %d %d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> zf = p1 -> yw + p1 -> sx ; p2 -> next = p1 ; p2 = p1 ; } for ( j = 0 ; j < 3 ; j ++ ) { p1 = head ; max = 0 ; for ( i = 0 ; i < n ; i ++ ) { max = max > p1 -> zf ? max : p1 -> zf ; p1 = p1 -> next ; } p1 = head ; for ( i = 0 ; i < n ; i ++ ) { if ( max == p1 -> zf ) { printf ( "%d %d\n" , p1 -> xh , p1 -> zf ) ; p1 -> zf = 0 ; break ; } p1 = p1 -> next ; } } }
int b [ 100000 ] ; struct student { int num ; int score1 ; int score2 ; } a [ 100000 ] ; void main ( ) { int max ( int b [ ] , int n ) ; int i , j = 0 , n , c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] . num , & a [ i ] . score1 , & a [ i ] . score2 ) ; b [ i ] = a [ i ] . score1 + a [ i ] . score2 ; } while ( j < 3 ) { c = max ( b , n ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] == c ) { printf ( "%d %d\n" , a [ i ] . num , b [ i ] ) ; b [ i ] = 0 ; j = j + 1 ; if ( j == 3 ) break ; } } } } int max ( int b [ ] , int n ) { int c , i ; c = b [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( c < b [ i ] ) c = b [ i ] ; } return ( c ) ; }
struct Student { long Id ; int yuwen ; int shuxue ; } ; int main ( ) { int i , j ; long n ; struct Student student [ NUM ] ; struct Student temp ; scanf ( "%ld\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%ld%d%d" , & student [ i ] . Id , & student [ i ] . yuwen , & student [ i ] . shuxue ) ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < ( 3 - i - 1 ) ; j ++ ) { if ( ( student [ j + 1 ] . yuwen + student [ j + 1 ] . shuxue ) > ( student [ j ] . yuwen + student [ j ] . shuxue ) ) { temp = student [ j + 1 ] ; student [ j + 1 ] = student [ j ] ; student [ j ] = temp ; } } } for ( i = 3 ; i < n ; i ++ ) { if ( ( student [ i ] . yuwen + student [ i ] . shuxue ) > ( student [ 2 ] . yuwen + student [ 2 ] . shuxue ) ) { student [ 2 ] = student [ i ] ; } if ( ( student [ i ] . yuwen + student [ i ] . shuxue ) > ( student [ 1 ] . yuwen + student [ 1 ] . shuxue ) ) { temp = student [ 1 ] ; student [ 1 ] = student [ i ] ; student [ 2 ] = temp ; } if ( ( student [ i ] . yuwen + student [ i ] . shuxue ) > ( student [ 0 ] . yuwen + student [ 0 ] . shuxue ) ) { temp = student [ 0 ] ; student [ 0 ] = student [ i ] ; student [ 1 ] = temp ; } } for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%ld %d\n" , student [ i ] . Id , ( student [ i ] . shuxue + student [ i ] . yuwen ) ) ; } return 0 ; }
int main ( ) { int n ; cin >> n ; struct stu { int num ; int chin ; int math ; int sum ; } one [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> one [ i ] . num >> one [ i ] . chin >> one [ i ] . math ; one [ i ] . sum = one [ i ] . chin + one [ i ] . math ; } int t = 0 ; for ( int i = 200 ; i >= 0 ; i -- ) for ( int j = 1 ; j <= n ; j ++ ) { if ( one [ j ] . sum == i ) { cout << j << " " << one [ j ] . sum << endl ; t = t + 1 ; } if ( t == 3 ) { i = - 1 ; break ; } } return 0 ; }
struct student { int id ; int score1 ; int score2 ; struct student * next ; } ; struct student * head ; struct student * creat ( int x ) { struct student * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> id , & p1 -> score1 , & p1 -> score2 ) ; head = 0 ; while ( p1 -> id < x ) { if ( p1 -> id == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> id , & p1 -> score1 , & p1 -> score2 ) ; if ( p1 -> id == x ) { p2 -> next = p1 ; p2 = p1 ; } } p2 -> next = 0 ; return ( head ) ; } void main ( ) { int n ; struct student * p , * q , * j , * k ; scanf ( "%d" , & n ) ; creat ( n ) ; p = q = head ; do { if ( ( p -> score1 + p -> score2 ) > ( q -> score1 + q -> score2 ) ) q = p ; p = p -> next ; } while ( p != 0 ) ; p = j = head ; do { if ( ( p -> score1 + p -> score2 ) > ( j -> score1 + j -> score2 ) && p != q ) j = p ; p = p -> next ; } while ( p != 0 ) ; p = k = head ; do { if ( ( p -> score1 + p -> score2 ) > ( k -> score1 + k -> score2 ) && p != q && p != j ) k = p ; p = p -> next ; } while ( p != 0 ) ; printf ( "%d %d\n" , q -> id , ( q -> score1 + q -> score2 ) ) ; printf ( "%d %d\n" , j -> id , ( j -> score1 + j -> score2 ) ) ; printf ( "%d %d" , k -> id , ( k -> score1 + k -> score2 ) ) ; }
struct stu { int id ; int verbal ; int math ; int sum ; } ; int main ( ) { struct stu * a , t ; int n , i , j ; scanf ( "%d" , & n ) ; a = ( struct stu * ) malloc ( n * sizeof ( struct stu ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & a [ i ] . id , & a [ i ] . verbal , & a [ i ] . math ) ; a [ i ] . sum = a [ i ] . verbal + a [ i ] . math ; } for ( j = 0 ; j < 3 ; j ++ ) for ( i = n ; i > j ; i -- ) if ( a [ i ] . sum > a [ i - 1 ] . sum ) { t = a [ i ] ; a [ i ] = a [ i - 1 ] ; a [ i - 1 ] = t ; } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%d %d\n" , a [ i ] . id , a [ i ] . sum ) ; return 0 ; }
struct Top { int num ; float score ; } Top [ 4 ] = { { 0 , 0 } } ; struct Top * p ; void maopao ( int n ) { int i ; for ( i = 1 ; i < n ; i ++ ) { for ( p = Top ; p < Top + n - i ; p ++ ) { if ( ( p -> score ) < ( ( p + 1 ) -> score ) ) { Top [ 3 ] = * p ; * p = * ( p + 1 ) ; * ( p + 1 ) = Top [ 3 ] ; } } } } void sort ( float a , int n ) { p = Top + 2 ; if ( a > ( p -> score ) ) { p -> score = a ; p -> num = n ; } maopao ( 3 ) ; } int main ( ) { int i , n , num ; float yw , sx , score ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %f %f" , & num , & yw , & sx ) ; float score = yw + sx ; sort ( score , num ) ; } for ( p = Top ; p < Top + 3 ; p ++ ) { printf ( "%d %g\n" , p -> num , p -> score ) ; } return 0 ; }
int main ( ) { struct a { int h ; int y ; int s ; } b [ 100000 ] , e ; int c [ 100000 ] ; int n , i , f , j , d ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & b [ i ] . h , & b [ i ] . y , & b [ i ] . s ) ; } for ( i = 0 ; i < n ; i ++ ) { c [ i ] = b [ i ] . y + b [ i ] . s ; } for ( j = 0 ; j < 3 ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { if ( c [ i ] > c [ j ] ) { d = c [ j ] ; c [ j ] = c [ i ] ; c [ i ] = d ; e = b [ j ] ; b [ j ] = b [ i ] ; b [ i ] = e ; } } f = b [ j ] . h ; printf ( "%d %d\n" , f , c [ j ] ) ; } return 0 ; }
void main ( ) { struct student { int ID ; int math ; int chinese ; int sum ; } ; int n , i , t , j ; scanf ( "%d" , & n ) ; struct student stu [ n ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %d %d" , & stu [ i ] . ID , & stu [ i ] . math , & stu [ i ] . chinese ) ; for ( i = 0 ; i < n ; i ++ ) stu [ i ] . sum = stu [ i ] . math + stu [ i ] . chinese ; for ( i = 0 ; i < 3 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( stu [ j ] . sum > stu [ i ] . sum ) { t = stu [ i ] . sum ; stu [ i ] . sum = stu [ j ] . sum ; stu [ j ] . sum = t ; t = stu [ i ] . ID ; stu [ i ] . ID = stu [ j ] . ID ; stu [ j ] . ID = t ; } } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%d %d\n" , stu [ i ] . ID , stu [ i ] . sum ) ; }
struct student { int num ; int yuwen ; int shuxue ; int total ; struct student * next ; } ; void main ( ) { struct student * head , * p1 , * p2 , * P ; int n , i = 0 , j = 0 ; scanf ( "%d\n" , & n ) ; p1 = p2 = head = ( struct student * ) malloc ( LEN ) ; for ( i = 0 ; i < n ; i ++ ) { p2 = p1 ; scanf ( "%d%d%d" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; p1 -> total = p1 -> yuwen + p1 -> shuxue ; p2 -> next = p1 = ( struct student * ) malloc ( LEN ) ; } p2 -> next = head ; p1 = head ; for ( i = 0 ; ; ) { if ( j == 3 ) break ; head = p1 ; P = p1 ; p1 = head -> next ; while ( p1 != head ) { if ( p1 -> total > P -> total ) P = p1 ; else if ( p1 -> total == P -> total && p1 -> num < P -> num ) P = p1 ; p1 = p1 -> next ; } printf ( "%d %d\n" , P -> num , P -> total ) ; while ( p1 -> next != P ) p1 = p1 -> next ; p1 -> next = P -> next ; j ++ ; } }
struct student { int num , z ; } a , max1 , max2 , max3 ; void main ( ) { int i , n , x , y ; scanf ( "%d" , & n ) ; max1 . z = - 1 ; max2 . z = - 1 ; max3 . z = - 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & a . num , & x , & y ) ; a . z = x + y ; if ( a . z > max1 . z ) { max3 = max2 ; max2 = max1 ; max1 = a ; } else if ( a . z > max2 . z ) { max3 = max2 ; max2 = a ; } else if ( a . z > max3 . z ) { max3 = a ; max3 = a ; } } printf ( "%d %d\n%d %d\n%d %d\n" , max1 . num , max1 . z , max2 . num , max2 . z , max3 . num , max3 . z ) ; }
void main ( ) { struct student { int a ; int math ; int chi ; int sum ; struct student * next ; } ; int n , i ; int max ; struct student * p1 , * p2 , * head ; scanf ( "%d" , & n ) ; head = NULL ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) head = p1 = ( struct student * ) malloc ( LEN ) ; else { p1 -> next = ( struct student * ) malloc ( LEN ) ; p1 = p1 -> next ; } scanf ( "%d%d%d" , & p1 -> a , & p1 -> math , & p1 -> chi ) ; p1 -> sum = ( p1 -> math ) + ( p1 -> chi ) ; } p1 -> next = NULL ; for ( i = 0 ; i < 3 ; i ++ ) { p1 = head ; max = p1 -> sum ; do { p1 = p1 -> next ; if ( p1 -> sum > max ) { max = p1 -> sum ; p2 = p1 ; } } while ( p1 -> next != NULL ) ; printf ( "%d %d\n" , p2 -> a , p2 -> sum ) ; p2 -> sum = 0 ; } }
int n ; struct student { int num ; int chn ; int math ; int ovr ; struct student * next ; } ; struct student * creat ( ) { int i ; struct student * head ; struct student * p1 , * p2 ; head = ( struct student * ) malloc ( sizeof ( struct student ) ) ; p1 = p2 = head ; for ( i = 0 ; i < n ; i ++ ) { p2 = p1 ; p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; p2 -> next = p1 ; scanf ( "%d %d %d" , & p2 -> num , & p2 -> chn , & p2 -> math ) ; p2 -> ovr = p2 -> chn + p2 -> math ; } p2 -> next = 0 ; return ( head ) ; } int main ( ) { int i ; int no1 , ovr1 = 0 ; struct student * head ; struct student * p1 , * p2 ; scanf ( "%d" , & n ) ; head = creat ( ) ; p1 = p2 = head ; for ( i = 0 ; i < 3 ; i ++ ) { p1 = head ; while ( p1 -> next != 0 ) { if ( p1 -> ovr > ovr1 ) { ovr1 = p1 -> ovr ; no1 = p1 -> num ; p2 = p1 ; } p1 = p1 -> next ; } printf ( "%d %d\n" , no1 , ovr1 ) ; p2 -> ovr = 0 ; ovr1 = 0 ; } return 0 ; }
struct student { long int id ; int yuwen ; int shuxue ; int total ; struct student * next ; } ; long int n ; int main ( ) { struct student * p0 , * p1 , * p2 , * head , * p ; int i ; scanf ( "%ld\n" , & n ) ; p0 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%ld %d %d" , & p0 -> id , & p0 -> yuwen , & p0 -> shuxue ) ; p0 -> total = p0 -> yuwen + p0 -> shuxue ; head = p0 ; p1 = p0 ; p0 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%ld %d %d" , & p0 -> id , & p0 -> yuwen , & p0 -> shuxue ) ; p0 -> total = p0 -> yuwen + p0 -> shuxue ; if ( p0 -> total <= p1 -> total ) { p1 -> next = p0 ; p1 = p0 ; } else { head = p0 ; p0 -> next = p1 ; } p0 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%ld %d %d" , & p0 -> id , & p0 -> yuwen , & p0 -> shuxue ) ; p0 -> total = p0 -> yuwen + p0 -> shuxue ; if ( p0 -> total <= p1 -> total ) { p1 -> next = p0 ; p2 = p0 ; } else if ( p0 -> total > p1 -> total && p0 -> total <= head -> total ) { head -> next = p0 ; p0 -> next = p1 ; p2 = p1 ; p1 = p0 ; } else if ( p0 -> total > head -> total ) { p0 -> next = head ; p2 = p1 ; p1 = head ; head = p0 ; } p2 -> next = NULL ; for ( i = 3 ; i < n ; i ++ ) { p0 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%ld %d %d" , & p0 -> id , & p0 -> yuwen , & p0 -> shuxue ) ; p0 -> total = p0 -> yuwen + p0 -> shuxue ; if ( p0 -> total > p2 -> total ) { if ( p0 -> total <= p1 -> total ) { p1 -> next = p0 ; p0 -> next = NULL ; p2 = p0 ; } else if ( p0 -> total > p1 -> total && p0 -> total <= head -> total ) { head -> next = p0 ; p0 -> next = p1 ; p1 -> next = NULL ; p1 = p2 ; p0 = p1 ; } else if ( p0 -> total > head -> total ) { p0 -> next = head ; p1 -> next = NULL ; p2 = p1 ; p1 = head ; head = p0 ; } } } p = head ; for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%ld %d\n" , p -> id , p -> total ) ; p = p -> next ; } }
int main ( ) { int n , sum [ 100000 ] , a , b , c ; struct xues { int a , b , c ; } s [ 100000 ] ; scanf ( "%d" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & s [ i ] . a , & s [ i ] . b , & s [ i ] . c ) ; sum [ i ] = s [ i ] . b + s [ i ] . c ; } int fir = 0 , sec = 0 , thi = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( fir < sum [ i ] ) { thi = sec ; sec = fir ; fir = sum [ i ] ; c = b ; b = a ; a = s [ i ] . a ; } else if ( sec < sum [ i ] ) { thi = sec ; sec = sum [ i ] ; fir = fir ; a = a ; c = b ; b = s [ i ] . a ; } else if ( thi < sum [ i ] ) { fir = fir ; sec = sec ; thi = sum [ i ] ; a = a ; b = b ; c = s [ i ] . a ; } } printf ( "%d %d\n%d %d\n%d %d" , a , fir , b , sec , c , thi ) ; return 0 ; }
void main ( ) { int n , i ; int diyi , dier , disan ; diyi = 0 ; dier = 0 ; disan = 0 ; struct student { int num ; int yuwen ; int shuxue ; int sum ; } stu [ 99999 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . yuwen , & stu [ i ] . shuxue ) ; stu [ i ] . sum = stu [ i ] . yuwen + stu [ i ] . shuxue ; } for ( i = 0 ; i < n ; i ++ ) { if ( stu [ i ] . sum > stu [ diyi ] . sum ) { diyi = i ; } } for ( i = 0 ; i < n ; i ++ ) { while ( i != diyi ) { dier = i ; break ; } break ; } for ( i = 0 ; i < n ; i ++ ) { if ( i != diyi ) { if ( stu [ i ] . sum > stu [ dier ] . sum ) { dier = i ; } } } for ( i = 0 ; i < n ; i ++ ) { while ( i != diyi && i != dier ) { disan = i ; break ; } break ; } for ( i = 0 ; i < n ; i ++ ) { if ( i != diyi && i != dier ) { if ( stu [ i ] . sum > stu [ disan ] . sum ) { disan = i ; } } } printf ( "%d %d\n" , diyi + 1 , stu [ diyi ] . sum ) ; printf ( "%d %d\n" , dier + 1 , stu [ dier ] . sum ) ; printf ( "%d %d\n" , disan + 1 , stu [ disan ] . sum ) ; }
struct student { int id ; int chinese ; int math ; int sum ; struct student * next ; } ; int n ; struct student * creat ( ) { struct student * head , * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( len ) ; scanf ( "%d" , & n ) ; scanf ( "%d%d%d" , & p1 -> id , & p1 -> chinese , & p1 -> math ) ; p1 -> sum = p1 -> chinese + p1 -> math ; head = NULL ; for ( ; p1 -> id < n ; ) { if ( p1 -> id == 1 ) head = p1 ; p1 = ( struct student * ) malloc ( len ) ; scanf ( "%d%d%d" , & p1 -> id , & p1 -> chinese , & p1 -> math ) ; p1 -> sum = p1 -> chinese + p1 -> math ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } void main ( ) { struct student * head , * p1 , * p2 , * p3 , * p ; head = creat ( ) ; for ( p = head , p1 = head , p2 = head , p3 = head ; p != NULL ; p = p -> next ) { if ( p -> sum > p1 -> sum ) { p3 = p2 ; p2 = p1 ; p1 = p ; } else if ( p -> sum > p2 -> sum ) { p3 = p2 ; p2 = p ; } else if ( p -> sum > p3 -> sum ) { p3 = p ; } } printf ( "%d %d\n" , p1 -> id , p1 -> sum ) ; printf ( "%d %d\n" , p2 -> id , p2 -> sum ) ; printf ( "%d %d\n" , p3 -> id , p3 -> sum ) ; }
struct student { int id ; int math ; int chinese ; int sum ; } stu [ 100000 ] ; int main ( int argc , char * argv [ ] ) { int i , n ; int max1 = 0 , max2 = 0 , max3 = 0 ; int maxid1 = 0 , maxid2 = 0 , maxid3 = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . id , & stu [ i ] . chinese , & stu [ i ] . math ) ; stu [ i ] . sum = stu [ i ] . math + stu [ i ] . chinese ; if ( stu [ i ] . sum > max1 ) { max3 = max2 ; max2 = max1 ; max1 = stu [ i ] . sum ; maxid3 = maxid2 ; maxid2 = maxid1 ; maxid1 = stu [ i ] . id ; } else if ( stu [ i ] . sum > max2 ) { max3 = max2 ; max2 = stu [ i ] . sum ; maxid3 = maxid2 ; maxid2 = stu [ i ] . id ; } else if ( stu [ i ] . sum > max3 ) { max3 = stu [ i ] . sum ; maxid3 = stu [ i ] . id ; } } printf ( "%d %d\n%d %d\n%d %d" , maxid1 , max1 , maxid2 , max2 , maxid3 , max3 ) ; return 0 ; }
struct student { char id [ 10 ] ; int ch ; int ma ; } ; int main ( int argc , char * argv [ ] ) { int n , i , max , sec , min , total [ 100000 ] ; scanf ( "%d" , & n ) ; struct student stu [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d%d" , stu [ i ] . id , & stu [ i ] . ch , & stu [ i ] . ma ) ; total [ i ] = stu [ i ] . ch + stu [ i ] . ma ; } max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( total [ i ] > total [ max ] ) max = i ; } printf ( "%s %d\n" , stu [ max ] . id , total [ max ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( total [ i ] == total [ max ] ) { total [ i ] = 0 ; break ; } } sec = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( total [ i ] > total [ sec ] ) sec = i ; } printf ( "%s %d\n" , stu [ sec ] . id , total [ sec ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( total [ i ] == total [ sec ] ) { total [ i ] = 0 ; break ; } } min = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( total [ i ] > total [ min ] ) min = i ; } printf ( "%s %d\n" , stu [ min ] . id , total [ min ] ) ; return 0 ; }
int main ( ) { struct st { int id ; int yu ; int ma ; } ; int n , i ; struct st st1 = { 0 , 0 , 0 } , st2 = { 0 , 0 , 0 } , st3 = { 0 , 0 , 0 } , stn ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & stn . id , & stn . yu , & stn . ma ) ; if ( stn . yu + stn . ma > st1 . yu + st1 . ma ) { st3 = st2 ; st2 = st1 ; st1 = stn ; } else { if ( stn . yu + stn . ma > st2 . yu + st2 . ma ) { st3 = st2 ; st2 = stn ; } else { if ( stn . yu + stn . ma > st3 . yu + st3 . ma ) { st3 = stn ; } } } } printf ( "%d %d\n%d %d\n%d %d" , st1 . id , st1 . yu + st1 . ma , st2 . id , st2 . yu + st2 . ma , st3 . id , st3 . yu + st3 . ma ) ; }
struct student { int num ; int chi ; int math ; int sum ; struct student * next ; } ; struct student * creat ( int n ) { int i ; struct student * head , * p1 , * p2 ; p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chi , & p1 -> math ) ; p1 -> sum = p1 -> chi + p1 -> math ; head = p1 ; p2 = p1 ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chi , & p1 -> math ) ; p1 -> sum = p1 -> chi + p1 -> math ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } void main ( ) { struct student * head , * p1 ; struct student * max1 , * max2 , * max3 ; int n , max ; scanf ( "%d" , & n ) ; head = creat ( n ) ; p1 = head ; max = 0 ; while ( p1 != NULL ) { if ( p1 -> sum > max ) { max = p1 -> sum ; max1 = p1 ; } p1 = p1 -> next ; } printf ( "%d %d\n" , max1 -> num , max1 -> sum ) ; p1 = head ; max = 0 ; while ( p1 != NULL ) { if ( p1 -> sum > max && p1 != max1 ) { max = p1 -> sum ; max2 = p1 ; } p1 = p1 -> next ; } printf ( "%d %d\n" , max2 -> num , max2 -> sum ) ; p1 = head ; max = 0 ; while ( p1 != NULL ) { if ( p1 -> sum > max && p1 != max1 && p1 != max2 ) { max = p1 -> sum ; max3 = p1 ; } p1 = p1 -> next ; } printf ( "%d %d\n" , max3 -> num , max3 -> sum ) ; }
int main ( ) { struct student { char ID [ 10 ] ; int m ; int c ; } tmp ; int max1 = 0 , max2 = 0 , max3 = 0 ; int a1 = 0 , a2 = 0 , a3 = 0 ; int n , i ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%s %d %d" , tmp . ID , & ( tmp . m ) , & ( tmp . c ) ) ; if ( ( tmp . m + tmp . c ) > max1 ) { max3 = max2 ; max2 = max1 ; max1 = tmp . m + tmp . c ; a3 = a2 ; a2 = a1 ; a1 = i ; } else if ( ( tmp . m + tmp . c ) == max1 ) { max3 = max2 ; max2 = max1 ; max1 = tmp . m + tmp . c ; a3 = a2 ; a2 = i ; } else if ( ( tmp . m + tmp . c ) < max1 && ( tmp . m + tmp . c ) > max2 ) { max3 = max2 ; max2 = tmp . m + tmp . c ; a3 = a2 ; a2 = i ; } else if ( ( tmp . m + tmp . c ) == max2 ) { max3 = max2 ; a3 = atoi ( tmp . ID ) ; } else if ( ( tmp . m + tmp . c ) < max2 && ( tmp . m + tmp . c ) > max3 ) { max3 = tmp . m + tmp . c ; a3 = i ; } } printf ( "%d %d\n" , a1 , max1 ) ; printf ( "%d %d\n" , a2 , max2 ) ; printf ( "%d %d\n" , a3 , max3 ) ; return 0 ; }
struct student { int id ; int ch ; int math ; } ; int main ( ) { int max ( int * p , int n ) ; void shuchu ( int * p , int n , int k , struct student student [ 100001 ] ) ; struct student student [ 100001 ] ; int n , i , * p , k ; p = ( int * ) calloc ( 100001 , sizeof ( int ) ) ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & student [ i ] . id , & student [ i ] . ch , & student [ i ] . math ) ; ( * ( p + i ) ) = ( student [ i ] . ch + student [ i ] . math ) ; } k = max ( p , n ) ; shuchu ( p , n , k , student ) ; k = max ( p , n ) ; shuchu ( p , n , k , student ) ; k = max ( p , n ) ; shuchu ( p , n , k , student ) ; return 0 ; } int max ( int * p , int n ) { int k = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { if ( ( * ( p + i ) ) > k ) k = ( * ( p + i ) ) ; } return ( k ) ; } void shuchu ( int * p , int n , int k , struct student student [ 100001 ] ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( ( * ( p + i ) ) == k ) { printf ( "%d %d\n" , student [ i ] . id , k ) ; ( * ( p + i ) ) = 0 ; break ; } } }
int main ( int argc , char * argv [ ] ) { int i , j , n ; struct point { int m , x , y ; } a [ 100000 ] , aa ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] . m , & a [ i ] . x , & a [ i ] . y ) ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( a [ i ] . x + a [ i ] . y ) < ( a [ j ] . x + a [ j ] . y ) ) { aa = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = aa ; } } } for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , a [ i ] . m , ( a [ i ] . x + a [ i ] . y ) ) ; } return 0 ; }
int main ( ) { struct stu { int yu ; int shu ; char name [ 6 ] ; } ; struct stu s [ 100000 ] , one , two , three ; one . yu = 0 ; one . shu = 0 ; two . yu = 0 ; two . shu = 0 ; three . yu = 0 ; three . shu = 0 ; int n , j , k ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( "%s %d %d" , s [ j ] . name , & s [ j ] . yu , & s [ j ] . shu ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( ( s [ j ] . yu + s [ j ] . shu ) > ( one . yu + one . shu ) ) { one = s [ j ] ; k = j ; } } s [ k ] . yu = 0 ; s [ k ] . shu = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( ( s [ j ] . yu + s [ j ] . shu ) > ( two . yu + two . shu ) ) { two = s [ j ] ; k = j ; } } s [ k ] . yu = 0 ; s [ k ] . shu = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( ( s [ j ] . yu + s [ j ] . shu ) > ( three . yu + three . shu ) ) three = s [ j ] ; } printf ( "%s %d\n%s %d\n%s %d\n" , one . name , one . yu + one . shu , two . name , two . yu + two . shu , three . name , three . yu + three . shu ) ; return 0 ; }
int main ( ) { struct student { int num ; int ch ; int ma ; int sum ; } ; struct student * p ; int n , i , j , t1 , t2 , a1 = 0 , a2 = 0 , a3 = 0 , k1 , k2 , k3 ; scanf ( "%d" , & n ) ; p = ( struct student * ) malloc ( n * sizeof ( struct student ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & p [ i ] . num , & p [ i ] . ch , & p [ i ] . ma ) ; p [ i ] . sum = p [ i ] . ch + p [ i ] . ma ; } for ( i = 0 ; i < n ; i ++ ) if ( p [ i ] . sum > a1 ) { k1 = i ; a1 = p [ i ] . sum ; } for ( i = 0 ; i < n ; i ++ ) if ( p [ i ] . sum <= a1 && p [ i ] . sum > a2 && i != k1 ) { k2 = i ; a2 = p [ i ] . sum ; } for ( i = 0 ; i < n ; i ++ ) if ( p [ i ] . sum <= a2 && p [ i ] . sum > a3 && i != k1 && i != k2 ) { k3 = i ; a3 = p [ i ] . sum ; } printf ( "%d %d\n%d %d\n%d %d\n" , p [ k1 ] . num , p [ k1 ] . sum , p [ k2 ] . num , p [ k2 ] . sum , p [ k3 ] . num , p [ k3 ] . sum ) ; return 0 ; }
struct stu { long num , ch , ma , tot ; struct stu * next ; } ; int main ( ) { int n , numt , cht , mat ; scanf ( "%d" , & n ) ; struct stu * head , * now , * neww , * max ; int i ; for ( i = 1 ; i <= n ; i ++ ) { neww = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; neww -> next = 0 ; if ( i == 1 ) { head = neww ; now = neww ; } else { now -> next = neww ; now = neww ; } scanf ( "%ld %ld %ld" , & now -> num , & now -> ch , & now -> ma ) ; now -> tot = now -> ch + now -> ma ; } for ( i = 1 ; i <= 3 ; i ++ ) { now = head ; max = now ; while ( now -> next != 0 ) { if ( max -> tot < now -> tot ) max = now ; now = now -> next ; } printf ( "%d %d\n" , max -> num , max -> tot ) ; max -> tot = - 1 ; } return 0 ; }
int main ( ) { struct student { int num , ch , ma , grade ; } sum [ 100000 ] , h , m , t ; int i , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & sum [ i ] . num , & sum [ i ] . ch , & sum [ i ] . ma ) ; sum [ i ] . grade = sum [ i ] . ch + sum [ i ] . ma ; } h . grade = m . grade = t . grade = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( sum [ i ] . grade > h . grade ) { t = m ; m = h ; h = sum [ i ] ; } else if ( sum [ i ] . grade > m . grade ) { t = m ; m = sum [ i ] ; } else if ( sum [ i ] . grade > t . grade ) t = sum [ i ] ; } printf ( "%d %d\n%d %d\n%d %d\n" , h . num , h . grade , m . num , m . grade , t . num , t . grade ) ; return 0 ; }
struct student { int ID ; int chinese ; int math ; int total ; } st [ 4 ] , temp ; int main ( ) { int n , cnt = 3 ; cin >> n ; for ( int i = 0 ; i < 3 ; i ++ ) { cin >> st [ i ] . ID >> st [ i ] . chinese >> st [ i ] . math ; st [ i ] . total = st [ i ] . chinese + st [ i ] . math ; } do { cin >> st [ 3 ] . ID >> st [ 3 ] . chinese >> st [ 3 ] . math ; st [ 3 ] . total = st [ 3 ] . chinese + st [ 3 ] . math ; cnt ++ ; for ( int i = 1 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 - i ; j ++ ) { if ( st [ j + 1 ] . total > st [ j ] . total ) { temp = st [ j ] ; st [ j ] = st [ j + 1 ] ; st [ j + 1 ] = temp ; } } } } while ( cnt < n ) ; for ( int i = 0 ; i < 3 ; i ++ ) { cout << st [ i ] . ID << " " << st [ i ] . total << endl ; } return 0 ; }
int main ( ) { struct student { int num ; int yw ; int sx ; int all ; } student [ 4 ] = { 0 , 0 , 0 , 0 } ; struct student temp = { 0 , 0 , 0 , 0 } ; int i , l , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & student [ 3 ] . num , & student [ 3 ] . yw , & student [ 3 ] . sx ) ; student [ 3 ] . all = student [ 3 ] . yw + student [ 3 ] . sx ; if ( student [ 2 ] . all < student [ 3 ] . all ) { temp = student [ 2 ] ; student [ 2 ] = student [ 3 ] ; student [ 3 ] = temp ; } if ( student [ 1 ] . all < student [ 2 ] . all ) { temp = student [ 1 ] ; student [ 1 ] = student [ 2 ] ; student [ 2 ] = temp ; } if ( student [ 0 ] . all < student [ 1 ] . all ) { temp = student [ 0 ] ; student [ 0 ] = student [ 1 ] ; student [ 1 ] = temp ; } } for ( l = 0 ; l < 3 ; l ++ ) { printf ( "%d %d\n" , student [ l ] . num , student [ l ] . all ) ; } }
void main ( ) { int i , j , n , k ; struct student { int num ; int score1 ; int score2 ; int t ; } stu [ 100000 ] , m1 , m2 , m3 ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d\n" , & stu [ i ] . num , & stu [ i ] . score1 , & stu [ i ] . score2 ) ; stu [ i ] . t = stu [ i ] . score1 + stu [ i ] . score2 ; } m1 = stu [ 0 ] ; m2 = stu [ 0 ] ; m3 = stu [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( stu [ i ] . t > m1 . t ) { m3 = m2 ; m2 = m1 ; m1 = stu [ i ] ; } else if ( stu [ i ] . t > m2 . t && stu [ i ] . t <= m1 . t ) { m3 = m2 ; m2 = stu [ i ] ; } else if ( stu [ i ] . t > m3 . t && stu [ i ] . t <= m2 . t ) { m3 = stu [ i ] ; } } printf ( "%d %d\n%d %d\n%d %d" , m1 . num , m1 . t , m2 . num , m2 . t , m3 . num , m3 . t ) ; }
struct stu { int xuehao , yuwen , shuxue , sum ; struct stu * next ; } ; void max ( struct stu * h ) { struct stu * a , * b , * c , * d ; int m = 0 ; a = h ; do { c = a ; a = a -> next ; if ( m < a -> sum ) { m = a -> sum ; d = c ; b = a ; } } while ( a -> next ) ; printf ( "%d %d\n" , b -> xuehao , b -> sum ) ; d -> next = b -> next ; free ( b ) ; } void main ( ) { struct stu * head , * p , * q ; int n , i ; scanf ( "%d" , & n ) ; head = M ; p = M ; head -> next = p ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & p -> xuehao , & p -> yuwen , & p -> shuxue ) ; p -> sum = p -> yuwen + p -> shuxue ; q = M ; p -> next = q ; p = q ; } p -> next = NULL ; max ( head ) ; max ( head ) ; max ( head ) ; }
int main ( int argc , char * argv [ ] ) { struct student { int ID , Ch , Ma ; } temp ; int fID = 0 , fG = 0 , sID = 0 , sG = 0 , tID = 0 , tG = 0 ; int n ; scanf ( "%d" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { int sum = 0 ; scanf ( "%d%d%d" , & temp . ID , & temp . Ch , & temp . Ma ) ; sum = temp . Ch + temp . Ma ; if ( sum == fG ) { tG = sG ; tID = sID ; sG = sum ; sID = temp . ID ; } if ( sum > fG ) { tG = sG ; tID = sID ; sG = fG ; sID = fID ; fG = sum ; fID = temp . ID ; } if ( sum < fG && sum > sG ) { tG = sG ; tID = sID ; sG = sum ; sID = temp . ID ; } if ( sum < sG && sum > tG ) { tG = sum ; tID = temp . ID ; } } printf ( "%d %d\n" , fID , fG ) ; printf ( "%d %d\n" , sID , sG ) ; printf ( "%d %d\n" , tID , tG ) ; return 0 ; }
struct info { int num ; int chin ; int math ; struct info * next ; } ; struct info * create ( int n ) { int i ; struct info * head , * p1 , * p2 ; p1 = ( struct info * ) malloc ( sizeof ( struct info ) ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chin , & p1 -> math ) ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; i = 1 ; do { p1 = ( struct info * ) malloc ( sizeof ( struct info ) ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chin , & p1 -> math ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; i ++ ; } while ( i < n ) ; return ( head ) ; } void arrange ( struct info * head ) { int m , no1 , no2 , no3 ; struct info * p ; p = head ; m = 0 ; while ( p ) { if ( p -> chin + p -> math > m ) { m = p -> chin + p -> math ; no1 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no1 , m ) ; m = 0 ; p = head ; no2 = p -> num ; while ( p ) { if ( p -> chin + p -> math > m && p -> num != no1 ) { m = p -> chin + p -> math ; no2 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no2 , m ) ; m = 0 ; p = head ; no3 = p -> num ; while ( p ) { if ( p -> chin + p -> math > m && p -> num != no1 && p -> num != no2 ) { m = p -> chin + p -> math ; no3 = p -> num ; } p = p -> next ; } printf ( "%d %d\n" , no3 , m ) ; } int main ( ) { int n ; struct info * head ; scanf ( "%d" , & n ) ; head = create ( n ) ; arrange ( head ) ; }
struct student { int num ; int yu ; int shu ; int sum ; } stu [ 100000 ] ; int main ( ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . yu , & stu [ i ] . shu ) ; stu [ i ] . sum = stu [ i ] . shu + stu [ i ] . yu ; } int k , e ; for ( k = 0 ; k < 3 ; k ++ ) { for ( i = n - 2 ; i >= k ; i -- ) { if ( stu [ i ] . sum < stu [ i + 1 ] . sum ) { e = stu [ i ] . sum ; stu [ i ] . sum = stu [ i + 1 ] . sum ; stu [ i + 1 ] . sum = e ; e = stu [ i ] . num ; stu [ i ] . num = stu [ i + 1 ] . num ; stu [ i + 1 ] . num = e ; } } } for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , stu [ i ] . num , stu [ i ] . sum ) ; } return 0 ; }
struct stu { int id ; int eng ; int math ; int sum ; struct stu * next ; } * head , * p1 , * p2 ; struct stu * order ( int n ) { int i , j , t ; p1 = head ; for ( i = 0 ; i < 3 ; i ++ ) { p2 = p1 -> next ; for ( j = i + 1 ; j < n ; j ++ ) { if ( p1 -> sum < p2 -> sum ) { t = p1 -> id ; p1 -> id = p2 -> id ; p2 -> id = t ; t = p1 -> sum ; p1 -> sum = p2 -> sum ; p2 -> sum = t ; } p2 = p2 -> next ; } p1 = p1 -> next ; } return head ; } void main ( ) { int n , i ; scanf ( "%d" , & n ) ; p1 = head = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & p1 -> id , & p1 -> eng , & p1 -> math ) ; p1 -> sum = p1 -> eng + p1 -> math ; p2 = p1 ; p1 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; p2 -> next = p1 ; } p2 -> next = NULL ; p1 = order ( n ) ; for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , p1 -> id , p1 -> sum ) ; p1 = p1 -> next ; } }
int n ; struct stu { int xh ; int yw ; int sx ; int all ; struct stu * next ; } ; struct stu * a , * b , * c , q , t , r ; struct stu * creat ( ) { struct stu * head ; struct stu * p1 , * p2 ; int i ; p1 = p2 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; scanf ( "%d%d%d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> all = p1 -> yw + p1 -> sx ; head = p1 ; a = b = c = head ; for ( i = 1 ; i < n ; i ++ ) { p2 -> next = p1 ; p2 = p1 ; p1 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; scanf ( "%d%d%d" , & p1 -> xh , & p1 -> yw , & p1 -> sx ) ; p1 -> all = p1 -> yw + p1 -> sx ; if ( p1 -> all > a -> all ) { c = b ; b = a ; a = p1 ; } else if ( p1 -> all > b -> all ) { c = b ; b = p1 ; } else { if ( p1 -> all > c -> all ) c = p1 ; } } p2 -> next = NULL ; return head ; } void main ( ) { struct stu * p ; a = & q ; b = & t ; c = & r ; scanf ( "%d" , & n ) ; p = creat ( ) ; printf ( "%d %d\n%d %d\n%d %d\n" , a -> xh , a -> all , b -> xh , b -> all , c -> xh , c -> all ) ; }
struct person { int num ; int chinese ; int math ; int total ; } student [ 110000 ] ; int main ( ) { int n , i , max1 = 0 , count1 = 0 , max2 = 0 , count2 = 0 , max3 = 0 , count3 = 0 , number = 0 , sum = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & student [ i ] . num ) ; scanf ( "%d" , & student [ i ] . chinese ) ; scanf ( "%d" , & student [ i ] . math ) ; } for ( i = 0 ; i < n ; i ++ ) { student [ i ] . total = student [ i ] . chinese + student [ i ] . math ; } for ( i = n - 1 ; i >= 0 ; i -- ) { if ( student [ i ] . total >= max1 ) { max1 = student [ i ] . total ; count1 = i ; } } number = student [ 0 ] . num ; sum = student [ 0 ] . total ; student [ 0 ] . num = student [ count1 ] . num ; student [ 0 ] . total = student [ count1 ] . total ; student [ count1 ] . num = number ; student [ count1 ] . total = sum ; number = 0 ; sum = 0 ; for ( i = n - 1 ; i >= 1 ; i -- ) { if ( student [ i ] . total >= max2 ) { max2 = student [ i ] . total ; count2 = i ; } } number = student [ 1 ] . num ; sum = student [ 1 ] . total ; student [ 1 ] . num = student [ count2 ] . num ; student [ 1 ] . total = student [ count2 ] . total ; student [ count2 ] . num = number ; student [ count2 ] . total = sum ; number = 0 ; sum = 0 ; for ( i = n - 1 ; i >= 2 ; i -- ) { if ( student [ i ] . total >= max3 ) { max3 = student [ i ] . total ; count3 = i ; } } number = student [ 2 ] . num ; sum = student [ 2 ] . total ; student [ 2 ] . num = student [ count3 ] . num ; student [ 2 ] . total = student [ count3 ] . total ; student [ count3 ] . num = number ; student [ count3 ] . total = sum ; for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , student [ i ] . num , student [ i ] . total ) ; } return 0 ; }
struct student { int num , chi , mat , tot ; } stu [ 100000 ] ; int main ( ) { void max ( struct student [ ] , int n ) ; int n , i , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & stu [ i ] . num , & stu [ i ] . chi , & stu [ i ] . mat ) ; stu [ i ] . tot = stu [ i ] . chi + stu [ i ] . mat ; } for ( k = 0 ; k < 3 ; k ++ ) { max ( stu , n ) ; if ( k < 2 ) printf ( "\n" ) ; } } void max ( struct student stu [ ] , int n ) { int i , j , max ; max = stu [ 0 ] . tot ; for ( i = 0 ; i < n ; i ++ ) if ( stu [ i ] . tot > max ) { max = stu [ i ] . tot ; j = i ; } printf ( "%d %d" , stu [ j ] . num , max ) ; stu [ j ] . tot = - 1 ; }
int main ( ) { struct student { int num ; int chinese ; int math ; int sum ; } stu [ 100000 ] , t ; int n ; int i ; int k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . chinese , & stu [ i ] . math ) ; stu [ i ] . sum = stu [ i ] . chinese + stu [ i ] . math ; } for ( k = n - 1 ; k > n - 4 ; k -- ) { for ( i = 0 ; i < k ; i ++ ) { if ( stu [ i ] . sum >= stu [ i + 1 ] . sum ) { t = stu [ i ] ; stu [ i ] = stu [ i + 1 ] ; stu [ i + 1 ] = t ; } } } printf ( "%d %d\n" , stu [ n - 1 ] . num , stu [ n - 1 ] . sum ) ; printf ( "%d %d\n" , stu [ n - 2 ] . num , stu [ n - 2 ] . sum ) ; printf ( "%d %d\n" , stu [ n - 3 ] . num , stu [ n - 3 ] . sum ) ; return 0 ; }
void main ( ) { int n ; scanf ( "%d" , & n ) ; struct student { int num ; int score_1 ; int score_2 ; int sum ; } ; struct student stu [ n ] ; int i , j , t ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . score_1 , & stu [ i ] . score_2 ) ; stu [ i ] . sum = stu [ i ] . score_1 + stu [ i ] . score_2 ; } for ( j = 0 ; j <= 2 ; j ++ ) { for ( i = n - 1 ; i > 0 + j ; i -- ) if ( stu [ i ] . sum > stu [ i - 1 ] . sum ) { t = stu [ i ] . sum , stu [ i ] . sum = stu [ i - 1 ] . sum , stu [ i - 1 ] . sum = t ; t = stu [ i ] . num , stu [ i ] . num = stu [ i - 1 ] . num , stu [ i - 1 ] . num = t ; } } for ( i = 0 ; i <= 2 ; i ++ ) printf ( "%d %d\n" , stu [ i ] . num , stu [ i ] . sum ) ; }
struct student { int num ; int score1 ; int score2 ; int sum ; struct student * next ; } ; struct student * creat ( int m ) { int i = 0 ; struct student * head , * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> score1 , & p1 -> score2 ) ; p1 -> sum = ( p1 -> score1 ) + ( p1 -> score2 ) ; head = NULL ; while ( p1 -> num < m ) { i ++ ; if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> score1 , & p1 -> score2 ) ; p1 -> sum = ( p1 -> score1 ) + ( p1 -> score2 ) ; } p2 -> next = NULL ; return ( head ) ; } void print ( struct student * head ) { struct student * p = head , * q = head ; int a = 0 , b = 0 , c = 0 ; if ( head != NULL ) { do { if ( a < p -> sum ) { a = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , q -> num , q -> sum ) ; q -> sum = 0 ; p = head ; q = head ; do { if ( b < p -> sum ) { b = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , q -> num , q -> sum ) ; q -> sum = 0 ; p = head ; q = head ; do { if ( c < p -> sum ) { c = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d" , q -> num , q -> sum ) ; } } void main ( ) { int m ; scanf ( "%d" , & m ) ; struct student * head , stu ; head = creat ( m ) ; print ( head ) ; }
struct student { int num ; int score1 ; int score2 ; int sum ; struct student * next ; } ; struct student * creat ( int m ) { int i = 0 ; struct student * head , * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> score1 , & p1 -> score2 ) ; p1 -> sum = ( p1 -> score1 ) + ( p1 -> score2 ) ; head = NULL ; for ( i = 0 ; i < m - 1 ; i ++ ) { if ( i == 0 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> score1 , & p1 -> score2 ) ; p1 -> sum = ( p1 -> score1 ) + ( p1 -> score2 ) ; } p2 -> next = p1 ; p1 -> next = NULL ; return ( head ) ; } void print ( struct student * head ) { struct student * p = head , * q = head ; int a = 0 , b = 0 , c = 0 ; if ( head != NULL ) { do { if ( a < p -> sum ) { a = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , q -> num , q -> sum ) ; q -> sum = 0 ; p = head ; q = head ; do { if ( b < p -> sum ) { b = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , q -> num , q -> sum ) ; q -> sum = 0 ; p = head ; q = head ; do { if ( c < p -> sum ) { c = p -> sum ; q = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d" , q -> num , q -> sum ) ; } } void main ( ) { int m ; scanf ( "%d" , & m ) ; struct student * head , stu ; head = creat ( m ) ; print ( head ) ; }
struct student { int id ; int c ; int m ; int t ; } a [ SIZE ] ; int cmp ( const void * p1 , const void * p2 ) { struct student * p3 = ( struct student * ) p1 ; struct student * p4 = ( struct student * ) p2 ; return - p3 -> t + p4 -> t ; } int main ( void ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] . id , & a [ i ] . c , & a [ i ] . m ) ; a [ i ] . t = a [ i ] . m + a [ i ] . c ; } qsort ( a , n , sizeof ( a [ 0 ] ) , cmp ) ; for ( i = 0 ; i < 3 ; i ++ ) printf ( "%d %d\n" , a [ i ] . id , a [ i ] . c + a [ i ] . m ) ; return 0 ; }
void main ( ) { struct student { char a [ 6 ] ; int c ; int m ; int s ; struct student * next ; } ; struct student * head ; struct student * p1 , * p2 ; struct student first = { "" , 0 , 0 , 0 , 0 } ; struct student second = { "" , 0 , 0 , 0 , 0 } ; struct student third = { "" , 0 , 0 , 0 , 0 } ; int n , i , j ; char ch ; scanf ( "%d" , & n ) ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; for ( j = 0 ; j < 6 ; j = j + 1 ) p1 -> a [ j ] = '\0' ; getchar ( ) ; for ( j = 0 ; ( ch = getchar ( ) ) != ' ' ; j = j + 1 ) p1 -> a [ j ] = ch ; scanf ( "%d%d" , & p1 -> c , & p1 -> m ) ; p1 -> s = p1 -> c + p1 -> m ; head = 0 ; for ( i = 1 ; i < n ; i = i + 1 ) { if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( LEN ) ; for ( j = 0 ; j < 6 ; j = j + 1 ) p1 -> a [ j ] = '\0' ; getchar ( ) ; for ( j = 0 ; ( ch = getchar ( ) ) != ' ' ; j = j + 1 ) p1 -> a [ j ] = ch ; scanf ( "%d%d" , & p1 -> c , & p1 -> m ) ; p1 -> s = p1 -> c + p1 -> m ; } p2 -> next = 0 ; for ( p1 = head ; p1 != 0 ; p1 = p1 -> next ) { if ( p1 -> s > first . s ) { third = second ; second = first ; first = * p1 ; } else if ( p1 -> s > second . s ) { third = second ; second = * p1 ; } else if ( p1 -> s > third . s ) { third = * p1 ; } else continue ; } printf ( "%s %d\n" , first . a , first . s ) ; printf ( "%s %d\n" , second . a , second . s ) ; printf ( "%s %d\n" , third . a , third . s ) ; }
int main ( ) { struct score { int n ; int a ; int b ; int c ; } score [ 5 ] ; int i , m ; scanf ( "%d" , & m ) ; score [ 1 ] . n = 0 ; score [ 1 ] . c = 0 ; score [ 2 ] . n = 0 ; score [ 2 ] . c = 0 ; score [ 3 ] . n = 0 ; score [ 3 ] . c = 0 ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d%d%d" , & score [ 4 ] . n , & score [ 4 ] . a , & score [ 4 ] . b ) ; score [ 4 ] . c = score [ 4 ] . a + score [ 4 ] . b ; if ( score [ 4 ] . c > score [ 1 ] . c ) { score [ 3 ] = score [ 2 ] ; score [ 2 ] = score [ 1 ] ; score [ 1 ] = score [ 4 ] ; } else if ( score [ 4 ] . c > score [ 2 ] . c ) { score [ 3 ] = score [ 2 ] ; score [ 2 ] = score [ 4 ] ; } else if ( score [ 4 ] . c > score [ 3 ] . c ) score [ 3 ] = score [ 4 ] ; } printf ( "%d %d\n%d %d\n%d %d\n" , score [ 1 ] . n , score [ 1 ] . c , score [ 2 ] . n , score [ 2 ] . c , score [ 3 ] . n , score [ 3 ] . c ) ; return 0 ; }
void main ( ) { struct student { long int num ; int score1 ; int score2 ; } ; struct student stu [ 100000 ] ; long int n ; int i , j , k , m , a = 0 , b = 0 , c = 0 , A , B , C ; A = B = C = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . score1 , & stu [ i ] . score2 ) ; k = stu [ i ] . score1 + stu [ i ] . score2 ; if ( k > c ) { c = k ; C = stu [ i ] . num ; } if ( c > b ) { m = c ; c = b ; b = m ; m = C ; C = B ; B = m ; } if ( b > a ) { m = b ; b = a ; a = m ; m = B ; B = A ; A = m ; } } printf ( "%d %d\n%d %d\n%d %d" , A , a , B , b , C , c ) ; }
struct Student { int ID ; int chinese ; int maths ; int sum ; } ; int main ( ) { struct Student stu [ 3 ] , t ; stu [ 0 ] . sum = stu [ 1 ] . sum = stu [ 2 ] . sum = 0 ; int i , n ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> t . ID >> t . chinese >> t . maths ; t . sum = t . chinese + t . maths ; if ( t . sum > stu [ 0 ] . sum ) { stu [ 2 ] = stu [ 1 ] ; stu [ 1 ] = stu [ 0 ] ; stu [ 0 ] = t ; } else if ( t . sum > stu [ 1 ] . sum ) { stu [ 2 ] = stu [ 1 ] ; stu [ 1 ] = t ; } else if ( t . sum > stu [ 2 ] . sum ) { stu [ 2 ] = t ; } } for ( i = 0 ; i < 3 ; i ++ ) { cout << stu [ i ] . ID << " " << stu [ i ] . sum << endl ; } return 0 ; }
struct stu * create ( ) ; int compare ( const void * a , const void * b ) ; int main ( ) { int i , j = 0 , n ; scanf ( "%d" , & n ) ; struct stu { int num ; int chi ; int math ; int total ; } ; struct stu * p = ( struct stu * ) calloc ( n , sizeof ( struct stu ) ) ; struct stu * a = p ; int * tot = ( int * ) calloc ( n , sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & p -> num , & p -> chi , & p -> math ) ; * ( tot + i ) = p -> total = p -> chi + p -> math ; p ++ ; } qsort ( tot , n , sizeof ( int ) , compare ) ; for ( i = 0 ; i < 3 ; i ++ , j = 0 ) { while ( ( a + ( j ++ ) ) -> total != * ( tot + i ) ) ; printf ( "%d %d\n" , ( a + j - 1 ) -> num , ( a + j - 1 ) -> total ) ; ( a + j - 1 ) -> total = - 1 ; } return 0 ; } int compare ( const void * a , const void * b ) { return ( * ( int * ) b - * ( int * ) a ) ; }
struct Student { int number ; int a ; int b ; int c ; } ; int main ( ) { int n , i ; int x , y , z ; struct Student stu ; struct Student maxStu , smaxStu , tmaxStu ; scanf ( "%d" , & n ) ; scanf ( "%d%d%d" , & x , & y , & z ) ; stu . number = x ; stu . a = y ; stu . b = z ; stu . c = stu . a + stu . b ; maxStu = stu ; smaxStu = stu ; tmaxStu = stu ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d%d%d" , & x , & y , & z ) ; stu . number = x ; stu . a = y ; stu . b = z ; stu . c = stu . a + stu . b ; if ( stu . c > maxStu . c ) { if ( maxStu . c > smaxStu . c ) { if ( smaxStu . c > tmaxStu . c ) { tmaxStu = smaxStu ; } smaxStu = maxStu ; } else if ( maxStu . c > tmaxStu . c ) { tmaxStu = maxStu ; } maxStu = stu ; } else if ( stu . c > smaxStu . c ) { if ( smaxStu . c > tmaxStu . c ) { tmaxStu = smaxStu ; } smaxStu = stu ; } else if ( stu . c > tmaxStu . c ) { tmaxStu = stu ; } } printf ( "%d %d\n%d %d\n%d %d" , maxStu . number , maxStu . c , smaxStu . number , smaxStu . c , tmaxStu . number , tmaxStu . c ) ; return 0 ; }
struct stu { int num ; int chi ; int math ; int s ; struct stu * next ; } ; struct stu * creat ( int n ) { int i ; struct stu * head ; struct stu * p1 , * p2 ; p1 = p2 = ( struct stu * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chi , & p1 -> math ) ; head = p1 ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct stu * ) malloc ( sizeof ( struct stu ) ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chi , & p1 -> math ) ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } void main ( ) { int i , n , t , m ; struct stu * head , * p1 , * p2 ; scanf ( "%d" , & n ) ; head = creat ( n ) ; p1 = head ; for ( i = 0 ; i < n ; i ++ ) { p1 -> s = p1 -> chi + p1 -> math ; p1 = p1 -> next ; } p1 = head ; p2 = p1 -> next ; for ( i = 0 ; i < 3 ; i ++ ) { while ( p2 != NULL ) { if ( p2 -> s > p1 -> s ) { t = p2 -> s ; p2 -> s = p1 -> s ; p1 -> s = t ; m = p2 -> num ; p2 -> num = p1 -> num ; p1 -> num = m ; } p2 = p2 -> next ; } printf ( "%d %d\n" , p1 -> num , p1 -> s ) ; if ( i == 2 ) break ; p1 = p1 -> next ; p2 = p1 -> next ; } }
int main ( ) { struct student { int id ; int chinese ; int math ; int total ; } ; long int n ; int temp ; int max = 0 , max_1 = 0 , max_2 = 0 ; struct student * p , * p_ori , * p_end , * q ; struct student * p_max , * p_max_1 , * p_max_2 ; scanf ( "%ld" , & n ) ; p = ( struct student * ) malloc ( n * sizeof ( struct student ) ) ; p_ori = p ; p_end = p + n ; for ( ; p < p_end ; p ++ ) { scanf ( "%d" , & ( p -> id ) ) ; scanf ( "%d" , & ( p -> chinese ) ) ; scanf ( "%d" , & ( p -> math ) ) ; p -> total = p -> chinese + p -> math ; } p = p_ori ; for ( ; p < p_end ; p ++ ) { if ( p -> total > max ) { max = p -> total ; p_max = p ; } } p = p_ori ; for ( ; p < p_end ; p ++ ) { if ( p -> total > max_1 && p != p_max ) { max_1 = p -> total ; p_max_1 = p ; } } p = p_ori ; for ( ; p < p_end ; p ++ ) { if ( p -> total > max_2 && p != p_max && p != p_max_1 ) { max_2 = p -> total ; p_max_2 = p ; } } printf ( "%d %d\n" , p_max -> id , p_max -> total ) ; printf ( "%d %d\n" , p_max_1 -> id , p_max_1 -> total ) ; printf ( "%d %d\n" , p_max_2 -> id , p_max_2 -> total ) ; getchar ( ) ; getchar ( ) ; }
struct student { int num ; int yuwen ; int shuxue ; struct student * next ; } ; int m ; void main ( ) { int n ; scanf ( "%d" , & n ) ; struct student * creat ( int n ) ; void print ( struct student * head , int n ) ; struct student * head ; head = creat ( n ) ; print ( head , n ) ; print ( head , n ) ; print ( head , n ) ; } struct student * creat ( int n ) { struct student * head ; struct student * p1 , * p2 ; m = 0 ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d\n" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; head = NULL ; for ( ; n != 0 ; n -- ) { m += 1 ; if ( m == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d\n" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; } p2 -> next = NULL ; return ( head ) ; } void print ( struct student * head , int n ) { struct student * p , * q ; p = head ; int max = 0 , index = 0 ; for ( ; n != 0 ; n -- ) { if ( max < ( ( p -> yuwen ) + ( p -> shuxue ) ) ) { max = ( ( p -> yuwen ) + ( p -> shuxue ) ) ; index = p -> num ; q = p ; } p = p -> next ; } printf ( "%d %d\n" , index , max ) ; q -> yuwen = 0 ; q -> shuxue = 0 ; }
main ( ) { int i , n , t [ 3 ] = { 0 } , u [ 3 ] = { 0 } ; struct student { long int ID ; int math ; int chinese ; int a ; } stu [ 100000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . ID , & stu [ i ] . math , & stu [ i ] . chinese ) ; stu [ i ] . a = stu [ i ] . math + stu [ i ] . chinese ; } for ( i = 0 ; i < n ; i ++ ) { if ( stu [ i ] . a > t [ 0 ] ) { t [ 0 ] = stu [ i ] . a ; u [ 0 ] = i ; } } for ( i = 0 ; i < n ; i ++ ) { if ( i == u [ 0 ] ) continue ; if ( stu [ i ] . a > t [ 1 ] ) { t [ 1 ] = stu [ i ] . a ; u [ 1 ] = i ; } } for ( i = 0 ; i < n ; i ++ ) { if ( i == u [ 0 ] || i == u [ 1 ] ) continue ; if ( stu [ i ] . a > t [ 2 ] ) { t [ 2 ] = stu [ i ] . a ; u [ 2 ] = i ; } } printf ( "%d %d\n%d %d\n%d %d\n" , stu [ u [ 0 ] ] . ID , t [ 0 ] , stu [ u [ 1 ] ] . ID , t [ 1 ] , stu [ u [ 2 ] ] . ID , t [ 2 ] ) ; }
struct { int xuehao ; int yuwen ; int shuxue ; } student [ 1000000 ] ; void swap ( int * a , int * b ) ; int main ( int argc , char * argv [ ] ) { int n = 0 ; scanf ( "%d" , & n ) ; int i = 0 , j = 0 , total [ 1000000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & student [ i ] . xuehao , & student [ i ] . yuwen , & student [ i ] . shuxue ) ; total [ i ] = student [ i ] . yuwen + student [ i ] . shuxue ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = n - 1 ; j > 0 + i ; j -- ) { if ( total [ j ] > total [ j - 1 ] ) { swap ( & total [ j ] , & total [ j - 1 ] ) ; swap ( & student [ j - 1 ] . xuehao , & student [ j ] . xuehao ) ; swap ( & student [ j - 1 ] . yuwen , & student [ j ] . yuwen ) ; swap ( & student [ j - 1 ] . shuxue , & student [ j ] . shuxue ) ; } } } for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , student [ i ] . xuehao , total [ i ] ) ; } return 0 ; } void swap ( int * a , int * b ) { int e ; e = * a ; * a = * b ; * b = e ; }
struct data { long int num ; int point1 ; int point2 ; int sum ; struct data * next ; } ; struct data * creat ( long int n ) { long int i = 0 ; struct data * p1 , * p2 , * head ; p1 = p2 = ( struct data * ) malloc ( sizeof ( struct data ) ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> point1 , & p1 -> point2 ) ; p1 -> sum = p1 -> point1 + p1 -> point2 ; head = NULL ; while ( i < n ) { i = i + 1 ; if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct data * ) malloc ( sizeof ( struct data ) ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> point1 , & p1 -> point2 ) ; p1 -> sum = p1 -> point1 + p1 -> point2 ; } p2 -> next = NULL ; return ( head ) ; } struct data * max ( struct data * head ) { struct data * p1 , * max ; max = head ; p1 = head ; do { if ( p1 -> sum > max -> sum ) max = p1 ; p1 = p1 -> next ; } while ( p1 != NULL ) ; return ( max ) ; } struct data * del ( struct data * head , struct data * max ) { struct data * p1 , * p2 ; p1 = head ; while ( max != p1 ) { p2 = p1 ; p1 = p1 -> next ; } if ( p1 == head ) head = p1 -> next ; else { p2 -> next = p1 -> next ; } return ( head ) ; } void main ( ) { struct data * a , * b , * c , * head ; long int n ; scanf ( "%ld" , & n ) ; head = creat ( n ) ; a = max ( head ) ; printf ( "%ld %d\n" , a -> num , a -> sum ) ; head = del ( head , a ) ; b = max ( head ) ; printf ( "%ld %d\n" , b -> num , b -> sum ) ; c = max ( del ( head , b ) ) ; printf ( "%ld %d\n" , c -> num , c -> sum ) ; }
int main ( ) { int num [ 3 ] , sum [ 3 ] ; int i , j , k , t , n , m ; num [ 0 ] = num [ 1 ] = num [ 2 ] = sum [ 0 ] = sum [ 1 ] = sum [ 2 ] = - 10000000 ; scanf ( "%d" , & n ) ; for ( m = 0 ; m < n ; m ++ ) { scanf ( "%d%d%d" , & i , & j , & k ) ; j += k ; if ( sum [ 2 ] < j ) { sum [ 2 ] = j ; num [ 2 ] = i ; if ( sum [ 2 ] > sum [ 1 ] ) { t = sum [ 2 ] ; sum [ 2 ] = sum [ 1 ] ; sum [ 1 ] = t ; t = num [ 2 ] ; num [ 2 ] = num [ 1 ] ; num [ 1 ] = t ; if ( sum [ 1 ] > sum [ 0 ] ) { t = sum [ 0 ] ; sum [ 0 ] = sum [ 1 ] ; sum [ 1 ] = t ; t = num [ 0 ] ; num [ 0 ] = num [ 1 ] ; num [ 1 ] = t ; } } } } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%d %d\n" , num [ i ] , sum [ i ] ) ; return 0 ; }
struct score { long num ; int yu ; int shu ; int sum ; } stu [ 100000 ] ; void main ( ) { long i , n , j , k ; int t ; scanf ( "%ld" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%ld%d%d" , & stu [ i ] . num , & stu [ i ] . yu , & stu [ i ] . shu ) ; stu [ i ] . sum = stu [ i ] . yu + stu [ i ] . shu ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) if ( stu [ j ] . sum > stu [ j + 1 ] . sum ) { t = stu [ j ] . sum ; stu [ j ] . sum = stu [ j + 1 ] . sum ; stu [ j + 1 ] . sum = t ; } } for ( k = n - 1 ; k > n - 4 ; k -- ) { if ( k != n - 1 && stu [ k ] . sum == stu [ k + 1 ] . sum ) continue ; for ( i = 0 ; i < n ; i ++ ) { if ( stu [ k ] . sum == ( stu [ i ] . yu + stu [ i ] . shu ) ) { printf ( "%ld %ld\n" , stu [ i ] . num , stu [ k ] . sum ) ; if ( k == n - 3 ) break ; } } } }
struct student { int num ; int sum ; } stu [ 100000 ] ; int main ( ) { int n , i , j , t , a , b , m ; int tempSum ; int tempMax ; int rank [ 3 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { tempSum = 0 ; scanf ( "%d" , & stu [ i ] . num ) ; stu [ i ] . sum = 0 ; for ( j = 0 ; j < 2 ; j ++ ) { scanf ( "%d" , & tempSum ) ; stu [ i ] . sum += tempSum ; } } for ( b = 0 ; b < 3 ; b ++ ) { tempMax = 0 ; for ( a = b ; a < n ; a ++ ) { if ( stu [ a ] . sum > tempMax ) { tempMax = stu [ a ] . sum ; rank [ b ] = a ; } } t = stu [ b ] . num ; stu [ b ] . num = stu [ rank [ b ] ] . num ; stu [ rank [ b ] ] . num = t ; t = stu [ b ] . sum ; stu [ b ] . sum = stu [ rank [ b ] ] . sum ; stu [ rank [ b ] ] . sum = t ; } for ( a = 0 ; a < 3 ; a ++ ) printf ( "%d %d\n" , stu [ a ] . num , stu [ a ] . sum ) ; return 0 ; }
struct stu { long num ; int y ; int s ; int t ; struct stu * next ; } ; void main ( ) { struct stu * head , * p1 , * p2 ; int n , i ; scanf ( "%d" , & n ) ; p1 = p2 = ( struct stu * ) malloc ( L ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> y , & p1 -> s ) ; head = p1 ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct stu * ) malloc ( L ) ; scanf ( "%ld %d %d" , & p1 -> num , & p1 -> y , & p1 -> s ) ; p1 -> t = p1 -> y + p1 -> s ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = 0 ; int k = 0 ; while ( k < 3 ) { p2 = head ; for ( ; p2 != 0 ; p2 = p2 -> next ) { for ( p1 = p2 -> next ; p1 != 0 ; ) { if ( p2 -> t < p1 -> t ) break ; else p1 = p1 -> next ; } if ( p1 == 0 ) { printf ( "%ld %d\n" , p2 -> num , p2 -> t ) ; break ; } } k = k + 1 ; p2 -> t = 0 ; } }
struct student { long a ; int x ; int y ; } ; struct student stu [ 100000 ] ; main ( ) { long n , i , j , p ; int m ; scanf ( "%ld" , & n ) ; int g [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%ld %d %d" , & stu [ i ] . a , & stu [ i ] . x , & stu [ i ] . y ) ; g [ i ] = stu [ i ] . x + stu [ i ] . y ; } for ( i = 1 ; i < 4 ; i ++ ) for ( j = n - 1 ; j >= i ; j -- ) if ( g [ j - 1 ] < g [ j ] ) { m = g [ j - 1 ] ; g [ j - 1 ] = g [ j ] ; g [ j ] = m ; p = stu [ j - 1 ] . a ; stu [ j - 1 ] . a = stu [ j ] . a ; stu [ j ] . a = p ; } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%ld %d\n" , stu [ i ] . a , g [ i ] ) ; }
int main ( int argc , char * argv [ ] ) { int a = 0 , b = 0 , c = 0 ; int an , bn , cn ; int n , i , sum = 0 ; struct student { int num , ch , math ; } students [ 100000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & students [ i ] . num , & students [ i ] . ch , & students [ i ] . math ) ; sum = students [ i ] . ch + students [ i ] . math ; if ( sum > c ) { c = sum ; cn = i ; } if ( sum > b ) { c = b ; cn = bn ; b = sum ; bn = i ; } if ( sum > a ) { b = a ; bn = an ; a = sum ; an = i ; } } printf ( "%d %d\n" , students [ an ] . num , a ) ; printf ( "%d %d\n" , students [ bn ] . num , b ) ; printf ( "%d %d\n" , students [ cn ] . num , c ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { struct grades { int id ; int yuwen , shuxue ; int zongfen ; } grades [ 100007 ] ; int i , n , j , t , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & grades [ i ] . id , & grades [ i ] . yuwen , & grades [ i ] . shuxue ) ; grades [ i ] . zongfen = grades [ i ] . yuwen + grades [ i ] . shuxue ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( grades [ j ] . zongfen >= grades [ j + 1 ] . zongfen ) { t = grades [ j ] . zongfen ; grades [ j ] . zongfen = grades [ j + 1 ] . zongfen ; grades [ j + 1 ] . zongfen = t ; s = grades [ j ] . id ; grades [ j ] . id = grades [ j + 1 ] . id ; grades [ j + 1 ] . id = s ; } } } for ( i = n - 1 ; i >= n - 3 ; i -- ) { printf ( "%d %d\n" , grades [ i ] . id , grades [ i ] . zongfen ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , i , j , ta , tb , ts , tnum ; int * a , * b , * s , * num ; scanf ( "%d" , & n ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; b = ( int * ) malloc ( sizeof ( int ) * n ) ; s = ( int * ) malloc ( sizeof ( int ) * n ) ; num = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d%d%d" , & num [ i ] , & a [ i ] , & b [ i ] ) ; s [ i ] = a [ i ] + b [ i ] ; } for ( j = 0 ; j < 3 ; j ++ ) { for ( i = n ; i > 1 ; i -- ) { if ( s [ i ] > s [ i - 1 ] ) { ta = a [ i - 1 ] ; tb = b [ i - 1 ] ; ts = s [ i - 1 ] ; tnum = num [ i - 1 ] ; a [ i - 1 ] = a [ i ] ; b [ i - 1 ] = b [ i ] ; s [ i - 1 ] = s [ i ] ; num [ i - 1 ] = num [ i ] ; a [ i ] = ta ; b [ i ] = tb ; s [ i ] = ts ; num [ i ] = tnum ; } } } printf ( "%d %d\n%d %d\n%d %d\n" , num [ 1 ] , s [ 1 ] , num [ 2 ] , s [ 2 ] , num [ 3 ] , s [ 3 ] ) ; return 0 ; }
struct student { long num ; int chi ; int math ; int add ; } ; struct student stu [ 100000 ] ; void main ( ) { int m , k , n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%ld %d %d" , & stu [ i ] . num , & stu [ i ] . chi , & stu [ i ] . math ) ; stu [ i ] . add = stu [ i ] . chi + stu [ i ] . math ; } for ( j = 0 ; j < 3 ; j ++ ) for ( i = n - 1 ; i > 0 ; i -- ) { if ( stu [ i ] . add > stu [ i - 1 ] . add ) { k = stu [ i ] . add ; stu [ i ] . add = stu [ i - 1 ] . add ; stu [ i - 1 ] . add = k ; m = stu [ i ] . num ; stu [ i ] . num = stu [ i - 1 ] . num ; stu [ i - 1 ] . num = m ; } } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%ld %d\n" , stu [ i ] . num , stu [ i ] . add ) ; }
struct stu { int num ; int mark1 ; int mark2 ; long int total_mark ; } ; int main ( void ) { int n , i , j , k , t = 0 , max ; struct stu * p ; struct stu * q ; scanf ( "%d" , & n ) ; p = ( struct stu * ) malloc ( 1000000 * sizeof ( struct stu ) ) ; q = p ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & ( p + i ) -> num , & ( p + i ) -> mark1 , & ( p + i ) -> mark2 ) ; ( p + i ) -> total_mark = ( p + i ) -> mark1 + ( p + i ) -> mark2 ; } loop : max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( ( p + j ) -> total_mark > max ) max = ( p + j ) -> total_mark ; } for ( k = 0 ; k < n ; k ++ ) if ( max == ( p + k ) -> total_mark && k < n ) { printf ( "%d %ld\n" , ( p + k ) -> num , ( p + k ) -> total_mark ) ; t ++ ; ( p + k ) -> total_mark = 0 ; break ; } if ( t < 3 ) goto loop ; }
struct stu1 { long num ; int score1 ; int score2 ; struct stu1 * next ; } ; struct stu1 * creat ( void ) { int n , i = 1 ; struct stu1 * h ; struct stu1 * q1 , * q2 ; scanf ( "%d" , & n ) ; q2 = q1 = ( struct stu1 * ) malloc ( LEN1 ) ; h = NULL ; while ( i <= n ) { scanf ( "%ld %d %d" , & q1 -> num , & q1 -> score1 , & q1 -> score2 ) ; if ( i == 1 ) { h = q1 ; } else { q2 = q1 ; } if ( i != n ) { q1 = q2 -> next = ( struct stu1 * ) malloc ( LEN1 ) ; } else { q1 -> next = NULL ; } i ++ ; } return ( h ) ; } struct stu1 * turn ( struct stu1 * h ) { int t = 1 ; struct stu1 * p1 , * p2 ; int m , n , w ; for ( p1 = h , t = 1 ; p1 -> next != NULL , t <= 3 ; p1 = p1 -> next , t ++ ) { p2 = p1 -> next ; while ( p2 != NULL ) { if ( ( p1 -> score1 + p1 -> score2 ) < ( p2 -> score1 + p2 -> score2 ) ) { m = p1 -> num ; n = p1 -> score1 ; w = p1 -> score2 ; p1 -> num = p2 -> num ; p1 -> score1 = p2 -> score1 ; p1 -> score2 = p2 -> score2 ; p2 -> num = m ; p2 -> score1 = n ; p2 -> score2 = w ; } p2 = p2 -> next ; } printf ( "%ld %d\n" , p1 -> num , ( p1 -> score1 + p1 -> score2 ) ) ; } return ( h ) ; } void main ( ) { struct stu1 * ip ; ip = creat ( ) ; turn ( ip ) ; }
struct stu { long num ; int score1 ; int score2 ; struct stu * next ; } ; struct stu * creat ( void ) { int n , i = 1 ; struct stu * head ; struct stu * p1 , * p2 ; scanf ( "%d" , & n ) ; p1 = p2 = ( struct stu * ) malloc ( len ) ; head = NULL ; while ( i <= n ) { scanf ( "%ld %d %d" , & p1 -> num , & p1 -> score1 , & p1 -> score2 ) ; if ( i == 1 ) head = p1 ; else p2 = p1 ; if ( i != n ) p1 = p2 -> next = ( struct stu * ) malloc ( len ) ; else p1 -> next = NULL ; i ++ ; } return ( head ) ; } void turn ( struct stu * head ) { int t = 1 , r = 1 , a ; struct stu * q1 , * q2 , * p3 , * p1 , * p2 ; for ( q1 = p3 = p2 = head ; q1 -> next != NULL , t <= 3 ; t ++ ) { a = 0 ; for ( q2 = p1 = q1 -> next , r = 1 ; q2 != NULL ; q2 = q2 -> next , r ++ ) { if ( ( q1 -> score1 + q1 -> score2 ) < ( q2 -> score1 + q2 -> score2 ) ) { q1 = q2 ; p2 = p1 ; a = 1 ; } if ( r != 1 ) p1 = p1 -> next ; } printf ( "%ld %d\n" , q1 -> num , q1 -> score1 + q1 -> score2 ) ; if ( a == 1 ) { p2 -> next = q1 -> next ; q1 = head ; } else { q1 = p3 -> next ; p3 = q1 ; } } } void main ( ) { struct stu * ip ; ip = creat ( ) ; turn ( ip ) ; }
int main ( ) { struct student { int idnum , yunum , shunum ; } stu [ 100000 ] ; int n , i , max = 0 , ndmax = 0 , rdmax = 0 , l = 0 ; scanf ( "%d" , & n ) ; int chengji [ 100000 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . idnum , & stu [ i ] . yunum , & stu [ i ] . shunum ) ; chengji [ i ] = chengji [ i ] + stu [ i ] . yunum ; chengji [ i ] = chengji [ i ] + stu [ i ] . shunum ; } for ( i = 0 ; i < n ; i ++ ) { if ( chengji [ i ] > max ) max = chengji [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( max == ( stu [ i ] . yunum + stu [ i ] . shunum ) ) { l = l + 1 ; if ( l <= 3 ) printf ( "%d %d\n" , stu [ i ] . idnum , max ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( ( chengji [ i ] < max ) && ( chengji [ i ] > ndmax ) ) ndmax = chengji [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( ndmax == ( stu [ i ] . yunum + stu [ i ] . shunum ) ) { l = l + 1 ; if ( l <= 3 ) printf ( "%d %d\n" , stu [ i ] . idnum , ndmax ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( ( chengji [ i ] < ndmax ) && ( chengji [ i ] > rdmax ) ) rdmax = chengji [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( rdmax == ( stu [ i ] . yunum + stu [ i ] . shunum ) ) { l = l + 1 ; if ( l <= 3 ) printf ( "%d %d\n" , stu [ i ] . idnum , rdmax ) ; } } return 0 ; }
struct stu { int num ; int yuwen ; int shuxue ; int sum ; } score [ 100000 ] ; int main ( ) { int n , i , a , b , c , a1 , b1 , c1 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & score [ i ] . num , & score [ i ] . yuwen , & score [ i ] . shuxue ) ; score [ i ] . sum = score [ i ] . shuxue + score [ i ] . yuwen ; } a = 0 ; b = 0 ; c = 0 ; a1 = 0 ; b1 = 0 ; c1 = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( score [ i ] . sum > a ) { c = b ; b = a ; a = score [ i ] . sum ; c1 = b1 ; b1 = a1 ; a1 = score [ i ] . num ; } else if ( score [ i ] . sum > b ) { c = b ; b = score [ i ] . sum ; c1 = b1 ; b1 = score [ i ] . num ; } else if ( score [ i ] . sum > c ) { c = score [ i ] . sum ; c1 = score [ i ] . num ; } } printf ( "%d %d\n%d %d\n%d %d" , a1 , a , b1 , b , c1 , c ) ; return 0 ; }
int main ( ) { int n , i , j , q , w ; scanf ( "%d" , & n ) ; int a [ n ] , b [ n ] , c [ n ] , d [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { d [ i ] = b [ i ] + c [ i ] ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( d [ i ] < d [ j ] ) { q = d [ i ] ; d [ i ] = d [ j ] ; d [ j ] = q ; w = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = w ; } } } for ( i = 0 ; i < 3 ; i ++ ) { printf ( "%d %d\n" , a [ i ] , d [ i ] ) ; } getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; }
struct student { int num ; int yw ; int sx ; struct student * next ; } ; void main ( ) { struct student * head , * p1 , * p2 ; int i , max , n ; scanf ( "%d" , & n ) ; p1 = p2 = head = NULL ; for ( i = 0 ; i < n ; i ++ ) { p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d%d%d" , & p1 -> num , & p1 -> yw , & p1 -> sx ) ; if ( i == 0 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; for ( i = 0 ; i < 3 ; i ++ ) { p1 = p2 = head ; max = p1 -> yw + p1 -> sx ; while ( p1 != NULL ) { if ( ( p1 -> yw + p1 -> sx ) > max ) { max = p1 -> yw + p1 -> sx ; p2 = p1 ; } p1 = p1 -> next ; } printf ( "%d %d\n" , p2 -> num , max ) ; p1 = head ; while ( p1 -> next != p2 ) { p1 = p1 -> next ; } p1 -> next = p2 -> next ; } }
int n ; struct student { int num ; int chinese ; int math ; int total ; struct student * next ; } ; struct student * creat ( int n ) { struct student * head ; struct student * p1 , * p2 ; int i ; if ( n == 0 ) { head = NULL ; return ( head ) ; } else { p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chinese , & p1 -> math ) ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct student * ) malloc ( LEN ) ; scanf ( "%d %d %d" , & p1 -> num , & p1 -> chinese , & p1 -> math ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return ( head ) ; } } void top3 ( struct student * head ) { struct student * p , * p1 ; int max = 0 ; p = head ; do { p -> total = ( p -> chinese ) + ( p -> math ) ; if ( ( p -> total ) > max ) { max = p -> total ; p1 = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , p1 -> num , p1 -> total ) ; p1 -> total = 0 ; p = head ; max = 0 ; do { if ( ( p -> total ) > max ) { max = p -> total ; p1 = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , p1 -> num , p1 -> total ) ; p1 -> total = 0 ; p = head ; max = 0 ; do { if ( ( p -> total ) > max ) { max = p -> total ; p1 = p ; } p = p -> next ; } while ( p != NULL ) ; printf ( "%d %d\n" , p1 -> num , p1 -> total ) ; p1 -> total = 0 ; max = 0 ; } void main ( ) { struct student * head ; scanf ( "%d" , & n ) ; head = creat ( n ) ; top3 ( head ) ; }
struct score { int num ; int yuwen ; int shuxue ; } student [ 100000 ] ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int min ( int a , int b ) { return ( a < b ) ? a : b ; } int main ( ) { int max ( int a , int b ) ; int total [ 100000 ] ; int n , i ; int max1 = 0 , max2 = 0 , max3 = 0 ; int maxnum1 = 0 , maxnum2 = 0 , maxnum3 = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & student [ i ] . num ) ; scanf ( "%d" , & student [ i ] . yuwen ) ; scanf ( "%d" , & student [ i ] . shuxue ) ; total [ i ] = student [ i ] . yuwen + student [ i ] . shuxue ; if ( total [ i ] >= max1 ) { if ( total [ i ] == max1 ) { max3 = max2 ; max2 = max1 ; max1 = total [ i ] ; maxnum3 = maxnum2 ; maxnum2 = max ( maxnum1 , i + 1 ) ; maxnum1 = min ( maxnum1 , i + 1 ) ; } else { max3 = max2 ; max2 = max1 ; max1 = total [ i ] ; maxnum3 = maxnum2 ; maxnum2 = maxnum1 ; maxnum1 = i + 1 ; } } else if ( total [ i ] < max1 && total [ i ] >= max2 ) { if ( total [ i ] == max2 ) { max3 = max2 ; max2 = total [ i ] ; maxnum3 = max ( maxnum2 , i + 1 ) ; maxnum2 = min ( maxnum2 , i + 1 ) ; } else { max3 = max2 ; max2 = total [ i ] ; maxnum3 = maxnum2 ; maxnum2 = i + 1 ; } } else if ( total [ i ] < max2 && total [ i ] >= max3 ) { if ( total [ i ] == max3 ) { max3 = total [ i ] ; maxnum3 = min ( i + 1 , maxnum3 ) ; } else { max3 = total [ i ] ; maxnum3 = i + 1 ; } } } printf ( "%d %d\n" , maxnum1 , max1 ) ; printf ( "%d %d\n" , maxnum2 , max2 ) ; printf ( "%d %d" , maxnum3 , max3 ) ; return 0 ; }
struct w { int id ; int ch ; int ma ; int sum ; struct w * next ; } ; int i , n , k = 1 , max , s = 0 ; struct w * head , * p1 , * p2 ; struct w * make ( void ) { head = null ; scanf ( "%d" , & n ) ; p1 = p2 = ( struct w * ) malloc ( len ) ; scanf ( "%d %d %d" , & p1 -> id , & p1 -> ch , & p1 -> ma ) ; for ( k = 1 ; k < n ; k ++ ) { if ( k == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct w * ) malloc ( len ) ; scanf ( "%d %d %d" , & p1 -> id , & p1 -> ch , & p1 -> ma ) ; } p2 -> next = p1 ; p1 -> next = head ; return head ; } void main ( ) { head = make ( ) ; while ( s < 3 ) { for ( i = 1 ; i <= n ; i ++ ) { if ( i == n ) p1 = null ; else { p1 -> sum = p1 -> ch + p1 -> ma ; p1 = p1 -> next ; } } p1 = head ; max = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ( p1 -> sum ) > max ) max = p1 -> sum ; p1 = p1 -> next ; } p1 = head ; for ( i = 1 ; i <= n ; i ++ ) { p2 = p1 ; p1 = p1 -> next ; if ( p1 -> ch + p1 -> ma == max ) { printf ( "%d %d\n" , p1 -> id , p1 -> sum ) ; if ( p1 == head ) head = p1 -> next ; else p2 -> next = p1 -> next ; break ; } } s ++ ; } }
struct student { int num ; int yuwen ; int shuxue ; int zongfen ; } ; void main ( ) { int n , i , j ; scanf ( "%d" , & n ) ; struct student s [ 3 ] , p , temp ; for ( i = 0 ; i < 3 ; i ++ ) { scanf ( "%d%d%d" , & s [ i ] . num , & s [ i ] . yuwen , & s [ i ] . shuxue ) ; s [ i ] . zongfen = s [ i ] . shuxue + s [ i ] . yuwen ; } for ( i = 0 ; i < 2 ; i ++ ) { for ( j = 0 ; j < 2 - i ; j ++ ) { if ( s [ j ] . zongfen < s [ j + 1 ] . zongfen ) temp = s [ j ] , s [ j ] = s [ j + 1 ] , s [ j + 1 ] = temp ; } } for ( i = 3 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & p . num , & p . yuwen , & p . shuxue ) ; p . zongfen = p . shuxue + p . yuwen ; if ( p . zongfen > s [ 2 ] . zongfen && p . zongfen <= s [ 1 ] . zongfen ) s [ 2 ] = p ; else if ( p . zongfen > s [ 1 ] . zongfen && p . zongfen <= s [ 0 ] . zongfen ) s [ 2 ] = s [ 1 ] , s [ 1 ] = p ; else if ( p . zongfen > s [ 0 ] . zongfen ) s [ 2 ] = s [ 1 ] , s [ 1 ] = s [ 0 ] , s [ 0 ] = p ; } printf ( "%d %d\n%d %d\n%d %d" , s [ 0 ] . num , s [ 0 ] . zongfen , s [ 1 ] . num , s [ 1 ] . zongfen , s [ 2 ] . num , s [ 2 ] . zongfen ) ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; struct score { int id ; int yw ; int sx ; } stu [ 100000 ] ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & stu [ i ] . id , & stu [ i ] . yw , & stu [ i ] . sx ) ; } for ( j = 1 ; j <= 3 ; j ++ ) { int e , max = 0 ; for ( i = 0 ; i <= n - j ; i ++ ) { if ( ( stu [ i ] . yw + stu [ i ] . sx ) > ( stu [ max ] . yw + stu [ max ] . sx ) ) { max = i ; } } if ( max != n - j ) { e = stu [ max ] . yw ; stu [ max ] . yw = stu [ n - j ] . yw ; stu [ n - j ] . yw = e ; e = stu [ max ] . sx ; stu [ max ] . sx = stu [ n - j ] . sx ; stu [ n - j ] . sx = e ; e = stu [ max ] . id ; stu [ max ] . id = stu [ n - j ] . id ; stu [ n - j ] . id = e ; } } for ( i = n - 1 ; i >= n - 2 ; i -- ) { printf ( "%d %d\n" , ( stu [ i ] . id ) , ( stu [ i ] . yw + stu [ i ] . sx ) ) ; } printf ( "%d %d" , ( stu [ n - 3 ] . id ) , ( stu [ n - 3 ] . yw + stu [ n - 3 ] . sx ) ) ; return 0 ; }
struct student { int num ; int chn ; int math ; int score ; } stu [ 100000 ] ; main ( ) { int n , i , a , b , c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & stu [ i ] . chn , & stu [ i ] . math ) ; stu [ i ] . score = stu [ i ] . chn + stu [ i ] . math ; } if ( stu [ 0 ] . score >= stu [ 1 ] . score ) { if ( stu [ 1 ] . score >= stu [ 2 ] . score ) { a = 0 ; b = 1 ; c = 2 ; } else if ( stu [ 0 ] . score >= stu [ 2 ] . score ) { a = 0 ; b = 2 ; c = 1 ; } else { a = 2 ; b = 0 ; c = 1 ; } } else { if ( stu [ 0 ] . score >= stu [ 2 ] . score ) { a = 1 ; b = 0 ; c = 2 ; } else if ( stu [ 1 ] . score >= stu [ 2 ] . score ) { a = 1 ; b = 2 ; c = 0 ; } else { a = 2 ; b = 1 ; c = 0 ; } } for ( i = 3 ; i < n ; i ++ ) { if ( stu [ i ] . score > stu [ a ] . score ) { c = b ; b = a ; a = i ; } else if ( stu [ i ] . score > stu [ b ] . score ) { c = b ; b = i ; } else if ( stu [ i ] . score > stu [ c ] . score ) { c = i ; } } printf ( "%d %d\n%d %d\n%d %d\n" , stu [ a ] . num , stu [ a ] . score , stu [ b ] . num , stu [ b ] . score , stu [ c ] . num , stu [ c ] . score ) ; }
struct { int x ; int y ; int s ; int z ; } a [ 100010 ] , t ; int main ( ) { int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] . x , & a [ i ] . y , & a [ i ] . s ) ; a [ i ] . z = a [ i ] . y + a [ i ] . s ; } for ( i = 0 ; i <= 2 ; i ++ ) for ( j = n - 1 ; j >= i ; j -- ) { if ( a [ j + 1 ] . z > a [ j ] . z ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } printf ( "%d %d\n" , a [ 0 ] . x , a [ 0 ] . z ) ; printf ( "%d %d\n" , a [ 1 ] . x , a [ 1 ] . z ) ; printf ( "%d %d\n" , a [ 2 ] . x , a [ 2 ] . z ) ; return 0 ; }
int main ( ) { int a [ 99999 ] , b [ 99999 ] , c [ 99999 ] , d [ 99999 ] ; int i , n , sum , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & a [ i ] , & b [ i ] , & c [ i ] ) ; d [ i ] = c [ i ] + b [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( d [ i ] >= d [ i + 1 ] ) { sum = d [ i ] ; d [ i ] = d [ i + 1 ] ; d [ i + 1 ] = sum ; s = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = s ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( d [ i ] >= d [ i + 1 ] ) { sum = d [ i ] ; d [ i ] = d [ i + 1 ] ; d [ i + 1 ] = sum ; s = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = s ; } } for ( i = 0 ; i < n - 2 ; i ++ ) { if ( d [ i ] >= d [ i + 1 ] ) { sum = d [ i ] ; d [ i ] = d [ i + 1 ] ; d [ i + 1 ] = sum ; s = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = s ; } } printf ( "%d %d\n%d %d\n%d %d" , a [ n ] , d [ n ] , a [ n - 1 ] , d [ n - 1 ] , a [ n - 2 ] , d [ n - 2 ] ) ; return 0 ; }
void main ( ) { struct student { int num , sum ; } stu [ 100000 ] ; int n , i , j , t , chi , math ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & chi , & math ) ; stu [ i ] . sum = chi + math ; } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = n - 1 ; j > i ; j -- ) { if ( stu [ j ] . sum > stu [ j - 1 ] . sum ) { t = stu [ j ] . sum ; stu [ j ] . sum = stu [ j - 1 ] . sum ; stu [ j - 1 ] . sum = t ; t = stu [ j ] . num ; stu [ j ] . num = stu [ j - 1 ] . num ; stu [ j - 1 ] . num = t ; } } } printf ( "%d %d\n" , stu [ 0 ] . num , stu [ 0 ] . sum ) ; printf ( "%d %d\n" , stu [ 1 ] . num , stu [ 1 ] . sum ) ; printf ( "%d %d" , stu [ 2 ] . num , stu [ 2 ] . sum ) ; }
struct student { long num ; int yuwen ; int shuxue ; int sum ; struct student * next ; } ; int n ; void main ( ) { struct student * creat ( void ) ; void shuchu ( struct student * head ) ; int i ; struct student * head ; scanf ( "%d" , & n ) ; head = creat ( ) ; for ( i = 0 ; i < 3 ; i ++ ) shuchu ( head ) ; } struct student * creat ( void ) { int i , k = 0 ; struct student * head ; struct student * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( len ) ; scanf ( "%ld%d%d" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; p1 -> sum = p1 -> shuxue + p1 -> yuwen ; head = NULL ; for ( i = 0 ; i < n ; i ++ ) { k ++ ; if ( k == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( len ) ; scanf ( "%ld%d%d" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; p1 -> sum = p1 -> shuxue + p1 -> yuwen ; } p2 -> next = NULL ; return ( head ) ; } void shuchu ( struct student * head ) { struct student * p ; int max , i ; p = head ; max = p -> sum ; for ( i = 0 ; i < n ; i ++ ) { if ( p -> sum > max ) max = p -> sum ; p = p -> next ; } p = head ; for ( i = 0 ; i < n ; i ++ ) { if ( p -> sum == max ) { printf ( "%ld %d\n" , p -> num , p -> sum ) ; p -> sum = 0 ; break ; } p = p -> next ; } }
void main ( ) { int i , n , j , max ; scanf ( "%d" , & n ) ; struct student { int num ; int yuwen ; int shuxue ; struct student * next ; } ; struct student * head , * ppre , * p0 , * p3 ; struct student * p1 , * p2 ; head = p1 = p2 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & p1 -> num , & p1 -> yuwen , & p1 -> shuxue ) ; p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; for ( j = 0 ; j < 3 ; j ++ ) { ppre = p1 = head ; max = p1 -> yuwen + p1 -> shuxue ; p1 = p1 -> next ; for ( i = 0 ; i < n - j ; i ++ ) { if ( ( p1 -> yuwen + p1 -> shuxue ) > max ) { max = p1 -> yuwen + p1 -> shuxue ; p0 = p1 ; p3 = ppre ; } ppre = p1 ; p1 = p1 -> next ; } printf ( "%d %d\n" , p0 -> num , max ) ; p3 -> next = p0 -> next ; } }
struct student { int a ; int b ; int c ; int d ; struct student * next ; } ; int n ; struct student * creat ( int i ) { struct student * head , * p1 , * p2 ; n = 0 ; p1 = p2 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> a , & p1 -> b , & p1 -> c ) ; p1 -> d = p1 -> c + p1 -> b ; head = NULL ; while ( n < i - 1 ) { n = n + 1 ; if ( n == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct student * ) malloc ( sizeof ( struct student ) ) ; scanf ( "%d %d %d" , & p1 -> a , & p1 -> b , & p1 -> c ) ; p1 -> d = p1 -> c + p1 -> b ; } p2 -> next = NULL ; return ( head ) ; } void del ( struct student * ahead , int num ) { struct student * p1 , * p2 ; p1 = ahead ; while ( num != p1 -> d && p1 -> next != NULL ) { p2 = p1 ; p1 = p1 -> next ; } if ( num == p1 -> d ) { if ( p1 == ahead ) { printf ( "%d %d\n" , p1 -> a , p1 -> d ) ; ahead = p1 -> next ; } else { printf ( "%d %d\n" , p1 -> a , p1 -> d ) ; p2 -> next = p1 -> next ; } } } void print ( struct student * head ) { int i ; struct student * p ; for ( i = 0 ; i < 3 ; i ++ ) { p = head ; int max = p -> d ; while ( p -> next != NULL ) { p = p -> next ; if ( max < p -> d ) max = p -> d ; } del ( head , max ) ; } } void main ( ) { int i ; scanf ( "%d" , & i ) ; struct student * ahead ; ahead = creat ( i ) ; print ( ahead ) ; }
struct student { int number , chinese , math , total ; } stu [ 100000 ] ; int main ( int argc , char * argv [ ] ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & stu [ i ] . number , & stu [ i ] . chinese , & stu [ i ] . math ) ; stu [ i ] . total = stu [ i ] . chinese + stu [ i ] . math ; } int a = stu [ 0 ] . total , b = stu [ 0 ] . total , c = stu [ 0 ] . total ; for ( i = 0 ; i < n ; i ++ ) { if ( stu [ i ] . total > a ) { c = b ; b = a ; a = stu [ i ] . total ; continue ; } if ( stu [ i ] . total < a && stu [ i ] . total > b ) { c = b ; b = stu [ i ] . total ; continue ; } if ( stu [ i ] . total < b && stu [ i ] . total > c ) { c = stu [ i ] . total ; continue ; } } int m = 0 ; for ( i = 0 ; i < n && m < 3 ; i ++ ) { if ( stu [ i ] . total == a ) { printf ( "%d %d\n" , stu [ i ] . number , stu [ i ] . total ) ; m ++ ; } } for ( i = 0 ; i < n && m < 3 ; i ++ ) { if ( stu [ i ] . total == b ) { printf ( "%d %d\n" , stu [ i ] . number , stu [ i ] . total ) ; m ++ ; } } for ( i = 0 ; i < n && m < 3 ; i ++ ) { if ( stu [ i ] . total == c ) { printf ( "%d %d\n" , stu [ i ] . number , stu [ i ] . total ) ; m ++ ; } } return 0 ; }
void main ( ) { struct student { int num , sum ; } stu [ 100000 ] ; int n , i , j , k , a , b , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & stu [ i ] . num , & a , & b ) ; stu [ i ] . sum = a + b ; } for ( i = 0 ; i < 3 ; i ++ ) for ( j = n - i - 1 ; j > 0 ; j -- ) if ( stu [ j ] . sum > stu [ j - 1 ] . sum ) { t = stu [ j ] . sum ; stu [ j ] . sum = stu [ j - 1 ] . sum ; stu [ j - 1 ] . sum = t ; t = stu [ j ] . num ; stu [ j ] . num = stu [ j - 1 ] . num ; stu [ j - 1 ] . num = t ; } for ( i = 0 ; i < 3 ; i ++ ) printf ( "%d %d\n" , stu [ i ] . num , stu [ i ] . sum ) ; }
struct student { int No ; int chinese ; int math ; int all ; } stu [ STUDENT_NUM ] , temp ; void main ( ) { int n ; scanf ( "%d" , & n ) ; int i , k ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & stu [ i ] . No , & stu [ i ] . chinese , & stu [ i ] . math ) ; stu [ i ] . all = stu [ i ] . chinese + stu [ i ] . math ; } for ( k = 1 ; k < 4 ; k ++ ) { for ( i = 0 ; i < n - k ; i ++ ) { if ( stu [ i ] . all >= stu [ i + 1 ] . all ) { temp = stu [ i + 1 ] ; stu [ i + 1 ] = stu [ i ] ; stu [ i ] = temp ; } } } for ( i = n - 1 ; i > n - 4 ; i -- ) { printf ( "%d %d\n" , stu [ i ] . No , stu [ i ] . all ) ; } }
struct student { int num , y , b , he ; } a [ 100003 ] ; void main ( ) { int n , i , j , he , k ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d %d %d" , & a [ i ] . num , & a [ i ] . y , & a [ i ] . b ) ; a [ i ] . he = a [ i ] . y + a [ i ] . b ; } ; for ( i = 1 ; i <= 2 ; i ++ ) { k = i ; for ( j = i + 1 ; j <= n ; j ++ ) if ( a [ j ] . he > a [ k ] . he ) k = j ; printf ( "%d %d" , a [ k ] . num , a [ k ] . he ) ; printf ( "\n" ) ; a [ k ] . he = 0 ; } k = 1 ; for ( j = i + 1 ; j <= n ; j ++ ) if ( a [ j ] . he > a [ k ] . he ) k = j ; printf ( "%d %d" , a [ k ] . num , a [ k ] . he ) ; a [ k ] . he = 0 ; }
struct student { int id ; int a ; int b ; int zong ; } ; struct student ren [ 100000 ] ; int main ( ) { int n , i , fen , flag = 0 , j ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & ren [ i ] . id ) ; scanf ( "%d" , & ren [ i ] . a ) ; scanf ( "%d" , & ren [ i ] . b ) ; ren [ i ] . zong = ren [ i ] . a + ren [ i ] . b ; } for ( fen = 200 ; fen >= 100 ; fen -- ) { for ( i = 0 ; i <= n - 1 ; i ++ ) if ( fen == ren [ i ] . zong ) { printf ( "%d %d\n" , ren [ i ] . id , ren [ i ] . zong ) ; flag = flag + 1 ; if ( flag == 3 ) goto end ; } } end : getchar ( ) ; }
main ( ) { int n , i ; struct h { int mun ; int chinese ; int math ; struct h * p ; } ; struct h * a , * b , * lily ; scanf ( "%d" , & n ) ; a = len ; lily = a ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & a -> mun , & a -> chinese , & a -> math ) ; b = len ; a -> p = b ; a = b ; } b = NULL ; a = lily ; int a1 = 0 , a2 = 0 , a3 = 0 , b1 = 0 , b2 = 0 , b3 = 0 , c ; for ( i = 0 ; i < n ; i ++ ) { c = ( a -> chinese + a -> math ) ; if ( c > a1 ) { b3 = b2 ; b2 = b1 ; b1 = a -> mun ; a3 = a2 ; a2 = a1 ; a1 = c ; } else if ( c > a2 ) { b3 = b2 ; b2 = a -> mun ; a3 = a2 ; a2 = c ; } else if ( c > a3 ) { b3 = a -> mun ; a3 = c ; } a = a -> p ; } printf ( "%d %d\n" , b1 , a1 ) ; printf ( "%d %d\n" , b2 , a2 ) ; printf ( "%d %d\n" , b3 , a3 ) ; }
void main ( ) { struct student { long num ; int chinese ; int math ; } ; struct student stu [ 100001 ] ; int i , t , h , l = 0 ; long n ; int a [ 100001 ] ; scanf ( "%ld" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d%d%d" , & stu [ i ] . num , & stu [ i ] . chinese , & stu [ i ] . math ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = stu [ i ] . chinese + stu [ i ] . math ; leap : t = a [ 0 ] ; h = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > t ) { t = a [ i ] ; h = i ; } } printf ( "%ld %d\n" , stu [ h ] . num , a [ h ] ) ; l ++ ; a [ h ] = 0 ; if ( l < 3 ) goto leap ; }
int main ( ) { int n , i , k ; int a [ 99999 ] [ 3 ] , s [ 99999 ] ; int fir = 0 , sec = 0 , thi = 0 ; int c = 0 , d = 0 , e = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < 3 ; k ++ ) { scanf ( "%d" , & a [ i ] [ k ] ) ; } s [ i ] = a [ i ] [ 1 ] + a [ i ] [ 2 ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] > fir ) { thi = sec ; sec = fir ; fir = s [ i ] ; e = d ; d = c ; c = i ; continue ; } if ( s [ i ] > sec && s [ i ] <= fir ) { thi = sec ; sec = s [ i ] ; e = d ; d = i ; continue ; } if ( s [ i ] > thi && s [ i ] <= sec ) { thi = s [ i ] ; e = i ; } } printf ( "%d %d\n" , a [ c ] [ 0 ] , fir ) ; printf ( "%d %d\n" , a [ d ] [ 0 ] , sec ) ; printf ( "%d %d\n" , a [ e ] [ 0 ] , thi ) ; return 0 ; }
int main ( ) { int n , i , first , second , third , x , y , z ; scanf ( "%d" , & n ) ; struct mark { int ID , chinese , math , sum ; } * num ; num = ( struct mark * ) malloc ( sizeof ( mark ) * n ) ; int n1 , c1 , m1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %d %d" , & n1 , & c1 , & m1 ) ; num [ i ] . ID = n1 ; num [ i ] . chinese = c1 ; num [ i ] . math = m1 ; num [ i ] . sum = c1 + m1 ; } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { first = num [ i ] . sum ; second = num [ i ] . sum ; third = num [ i ] . sum ; x = num [ i ] . ID ; y = num [ i ] . ID ; z = num [ i ] . ID ; } else if ( i == 1 ) { if ( num [ i ] . sum > first ) { first = num [ i ] . sum ; x = num [ i ] . ID ; } else { third = num [ i ] . sum ; z = num [ i ] . ID ; } } else { if ( num [ i ] . sum > first ) { third = second ; z = y ; second = first ; y = x ; first = num [ i ] . sum ; x = num [ i ] . ID ; } else if ( num [ i ] . sum > second ) { third = second ; z = y ; second = num [ i ] . sum ; y = num [ i ] . ID ; } else if ( num [ i ] . sum > third ) { third = num [ i ] . sum ; z = num [ i ] . ID ; } } } printf ( "%d %d\n%d %d\n%d %d\n" , x , first , y , second , z , third ) ; return 0 ; }
void main ( ) { int n , i , j , k = 0 , e = 0 , max , y ; scanf ( "%d" , & n ) ; struct st { int a ; int z ; int c ; int d ; } b [ 100000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%d%d" , & b [ i ] . a , & b [ i ] . z , & b [ i ] . c ) ; b [ i ] . d = b [ i ] . z + b [ i ] . c ; } for ( i = 0 ; i < n ; i ++ ) { max = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( b [ j ] . d > max ) { max = b [ j ] . d ; y = j ; } } printf ( "%d %d\n" , b [ y ] . a , b [ y ] . d ) ; e ++ ; b [ y ] . d = 0 ; if ( e == 3 ) break ; } }
int main ( ) { int image [ 1000 ] [ 1000 ] ; int n , i , j , area , begRow , begCol , endRow , endCol , isBreak ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & image [ i ] [ j ] ) ; } isBreak = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( image [ i ] [ j ] == 0 ) { begRow = i ; begCol = j ; isBreak = 1 ; break ; } } if ( isBreak ) break ; } for ( i = begRow ; i < n ; i ++ ) { if ( i == ( n - 1 ) && image [ i ] [ begCol ] == 0 ) endRow = i ; else if ( image [ i ] [ begCol ] != 0 ) { endRow = i - 1 ; break ; } } for ( j = begCol ; j < n ; j ++ ) { if ( j == ( n - 1 ) && image [ begRow ] [ j ] == 0 ) endCol = i ; else if ( image [ begRow ] [ j ] != 0 ) { endCol = j - 1 ; break ; } } area = ( endRow - begRow - 1 ) * ( endCol - begCol - 1 ) ; printf ( "%d" , area ) ; }
int main ( ) { int a1 , b1 , a2 , b2 ; int n , t , area ; int s = 0 ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & t ) ; if ( t == 0 ) { if ( s == 0 ) { a1 = i ; b1 = j ; s = 1 ; } a2 = i ; b2 = j ; } } area = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , area ) ; return 0 ; }
int main ( ) { int n , a , b , c , d , e , x = 0 ; int m [ 1000 ] [ 1000 ] ; scanf ( "%d" , & n ) ; for ( a = 1 ; a <= n ; a ++ ) { for ( b = 1 ; b <= n ; b ++ ) { scanf ( "%d" , & m [ a ] [ b ] ) ; } } for ( c = 1 ; c <= n ; c ++ ) { for ( d = 1 ; d <= n ; d ++ ) { if ( m [ c ] [ d ] == 0 ) { for ( e = d + 1 ; e <= n ; e ++ ) { if ( m [ c ] [ e ] != 0 ) { x ++ ; } else break ; } break ; } } } printf ( "%d" , x ) ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int n ; int i , j ; int x1 , y1 , x2 , y2 ; x1 = 0 ; y1 = 0 ; x2 = 0 ; y2 = 0 ; int m ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { x1 = i ; y1 = j ; break ; } else ; } if ( a [ x1 ] [ y1 ] == 0 ) { break ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { x2 = i ; y2 = j ; break ; } else ; } if ( a [ i ] [ j ] == 0 ) { break ; } else ; } m = ( y2 - y1 + 1 - 2 ) * ( x2 - x1 + 1 - 2 ) ; printf ( "\n%d" , m ) ; return 0 ; }
int main ( ) { int point [ M ] [ N ] ; int i , j ; int n ; int a , b , c , d ; int sum = 0 ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & point [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( point [ i ] [ j ] == 0 && point [ i + 1 ] [ j ] == 0 && point [ i + 1 ] [ j + 1 ] == 255 && point [ i ] [ j + 1 ] == 0 ) { a = i ; b = j ; } if ( point [ i ] [ j ] == 0 && point [ i + 1 ] [ j ] == 255 && point [ i + 1 ] [ j + 1 ] == 255 && point [ i ] [ j + 1 ] == 255 ) { c = i ; d = j ; } sum = ( c - a - 1 ) * ( d - b - 1 ) ; } } printf ( "%d\n" , sum ) ; return 0 ; }
int main ( ) { int a [ 1000 ] [ 1000 ] , n , i , j , c , d , e , f , s ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) { c = i ; d = j ; } } } for ( i = n ; i >= 1 ; i -- ) { for ( j = n ; j >= 1 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { e = i ; f = j ; } } } s = ( c - e - 1 ) * ( f - d - 1 ) ; printf ( "%d" , ( c - e - 1 ) * ( d - f - 1 ) ) ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , n , t , i , k = 0 , j , b , c , d , e ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 && k == 0 ) { b = i ; c = j ; k ++ ; } } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] == 0 && k == 1 ) { d = i ; e = j ; k ++ ; } } } t = ( d - b - 1 ) * ( e - c - 1 ) ; printf ( "%d\n" , t ) ; return 0 ; }
int main ( ) { int n , i , j , s = 0 , f = 1 , a1 , a2 , b1 , b2 ; int area [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & area [ i ] [ j ] ) ; if ( area [ i ] [ j ] == 0 && f == 1 ) { a1 = i ; b1 = j ; f = 0 ; } if ( area [ i ] [ j ] == 0 ) { a2 = i ; b2 = j ; } } } s = ( a2 - a1 + 1 ) * ( b2 - b1 + 1 ) - 2 * ( a2 - a1 + 1 ) - 2 * ( b2 - b1 - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n , sz [ 100 ] [ 100 ] ; int row , col , a = 0 , b = 0 , c = 0 , d = 0 , s = 0 , p = 0 ; int i , j , k , l ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( p != 1 ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ j ] [ i ] == 0 ) { a = j ; b = i ; p = 1 ; break ; } } } else { break ; } } for ( k = n - 1 ; k >= 0 ; k -- ) { if ( p != 0 ) { for ( l = n - 1 ; l >= 0 ; l -- ) { if ( sz [ l ] [ k ] == 0 ) { c = l ; d = k ; p = 0 ; break ; } } } else { break ; } } s = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n , i , j ; scanf ( "%d" , & n ) ; int num [ 100 ] [ 100 ] ; int a1 , a2 , b1 , b2 , sum ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & num [ i ] [ j ] ) ; if ( ( num [ i ] [ j ] == 255 ) && ( num [ i - 1 ] [ j ] == 0 ) && ( num [ i ] [ j - 1 ] == 0 ) ) { a1 = i ; b1 = j ; } if ( ( num [ i ] [ j ] == 0 ) && ( num [ i - 1 ] [ j ] == 0 ) && ( num [ i ] [ j - 1 ] == 0 ) ) { a2 = i ; b2 = j ; } } } sum = ( a2 - a1 ) * ( b2 - b1 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int p [ 1000 ] [ 1000 ] ; int n ; scanf ( "%d" , & n ) ; int i , j ; int m = 0 ; int l = 0 ; int t = 0 ; int L , h , S ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { int x ; scanf ( "%d" , & x ) ; p [ i ] [ j ] = x ; } } int a , b ; for ( a = 0 ; a < n ; a ++ ) { if ( p [ a ] [ 0 ] != 0 ) { for ( b = 1 ; b < n ; b ++ ) { if ( p [ a ] [ b ] == 0 ) m = m + 1 ; if ( p [ a ] [ b ] != p [ a ] [ b - 1 ] ) l = l + 1 ; } h = ( l - 4 ) / 4 ; L = ( m - 2 * h - 4 ) / 2 ; } else { for ( b = 0 ; b < n ; b ++ ) { if ( p [ a ] [ b ] == 0 ) m = m + 1 ; if ( p [ a ] [ b ] != p [ a ] [ b + 1 ] ) l = l + 1 ; } h = ( l - 4 ) / 3 ; L = ( m - 2 * h - 4 ) / 2 ; } } S = h * L ; printf ( "%d" , S ) ; return 0 ; }
int a [ 1000 ] [ 1000 ] ; int main ( ) { int n , i , j , s = 0 , t = 0 , q , mianji ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { q = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { s ++ ; q = 1 ; } } if ( q == 1 ) break ; } for ( j = 0 ; j < n ; j ++ ) { q = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ j ] == 0 ) { t ++ ; q = 1 ; } } if ( q == 1 ) break ; } mianji = ( t - 2 ) * ( s - 2 ) ; printf ( "%d" , mianji ) ; return 0 ; }
int main ( ) { int x1 , y1 , x2 , y2 ; int n , i , j , t , area ; int status = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & t ) ; if ( t == 0 ) { if ( status == 0 ) { x1 = i ; y1 = j ; status = 1 ; } x2 = i ; y2 = j ; } } area = ( x2 - x1 - 1 ) * ( y2 - y1 - 1 ) ; printf ( "%d" , area ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int i , j , n , a1 = - 1 , a2 = - 1 , b1 , b2 , result ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a1 = i ; b1 = j ; break ; } } if ( a1 != - 1 ) { break ; } } for ( i = n - 1 ; i > - 1 ; i -- ) { for ( j = n - 1 ; j > - 1 ; j -- ) { if ( sz [ i ] [ j ] == 0 ) { a2 = i ; b2 = j ; break ; } } if ( a2 != - 1 ) { break ; } } result = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , result ) ; return 0 ; }
int main ( ) { int n , a , b , c , d , sum ; scanf ( "%d\n" , & n ) ; int sz [ 100 ] [ 100 ] ; int row , col ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d\n" , & ( sz [ row ] [ col ] ) ) ; } } for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { if ( sz [ row ] [ col ] == 0 && sz [ row ] [ col + 1 ] == 255 ) { a = row ; b = col ; break ; } } } for ( row = n - 1 ; row > 0 ; row -- ) { for ( col = n - 1 ; col > 0 ; col -- ) { if ( sz [ row ] [ col ] == 0 && sz [ row ] [ col - 1 ] == 255 ) { c = row ; d = col ; break ; } } } sum = ( c - a + 1 ) * ( d - b + 1 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int sz [ 1000 ] [ 1000 ] , n , row , col , a , b , c , d ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { if ( ( sz [ row ] [ col ] == 0 ) && ( sz [ row ] [ col - 1 ] != 0 ) && ( sz [ row - 1 ] [ col ] != 0 ) ) { a = row ; b = col ; } if ( ( sz [ row ] [ col ] == 0 ) && ( sz [ row ] [ col + 1 ] != 0 ) && ( sz [ row + 1 ] [ col ] != 0 ) ) { c = row ; d = col ; } } } if ( ( c - a - 1 > 0 ) && ( d - b - 1 > 0 ) ) { int s = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d" , s ) ; } else { int s = 0 ; printf ( "%d" , s ) ; } return 0 ; }
int main ( ) { int n , i , j ; int sz [ 1000 ] [ 1000 ] ; int a1 , a2 , b1 , b2 , a , b , c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 && sz [ i - 1 ] [ j ] != 0 && sz [ i ] [ j - 1 ] != 0 ) { a1 = i , b1 = j ; } if ( sz [ i ] [ j ] == 0 && sz [ i + 1 ] [ j ] != 0 && sz [ i ] [ j + 1 ] != 0 ) { a2 = i , b2 = j ; } } } a = a2 - a1 - 1 ; b = b2 - b1 - 1 ; c = a * b ; printf ( "%d\n" , c ) ; return 0 ; }
int m [ 1000 ] [ 1000 ] ; int main ( ) { int a , b , c , d , f , i , j , e = 0 , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & m [ i ] [ j ] ) ; } printf ( "\n" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( m [ i ] [ j ] == 0 ) { a = i ; b = j ; e = 1 ; break ; } } if ( e == 1 ) { break ; } } for ( j = b ; j < n ; j ++ ) { if ( m [ a ] [ j ] != 0 ) { c = j - 1 ; break ; } } for ( i = a ; i < n ; i ++ ) { if ( m [ i ] [ b ] != 0 ) { d = i - 1 ; break ; } } f = ( c - b - 1 ) * ( d - a - 1 ) ; printf ( "%d" , f ) ; return 0 ; }
int main ( ) { int r , i , j , a [ 505 ] [ 505 ] , m1 , m2 , n1 , n2 , sum = 0 ; scanf ( "%d" , & r ) ; m1 = r ; n1 = r ; m2 = 0 ; n2 = 0 ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < r ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) { if ( i <= m1 && j <= n1 ) { m1 = i ; n1 = j ; } if ( i >= m2 && j >= n2 ) { m2 = i ; n2 = j ; } } } } sum = ( m2 - m1 - 1 ) * ( n2 - n1 - 1 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int n , s = 0 , i , j ; int a = 0 ; int b = 0 ; int sz [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) a ++ ; } if ( a != 0 ) { break ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] [ j ] == 0 ) b ++ ; } if ( b != 0 ) { break ; } } s = a * b - 2 * a - 2 * b + 4 ; printf ( "%d" , s ) ; return 0 ; }
int sz [ 1000 ] [ 1000 ] ; int main ( ) { int n ; int row , col ; int a , b , c , d ; int x , y ; int num ; int e = 0 , f = 0 ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { if ( sz [ row ] [ col ] == 0 ) { a = row ; b = col ; e = 1 ; break ; } } if ( e == 1 ) { break ; } } for ( row = n - 1 ; row >= 0 ; row -- ) { for ( col = n - 1 ; col >= 0 ; col -- ) { if ( sz [ row ] [ col ] == 0 ) { c = row ; d = col ; f = 1 ; break ; } } if ( f == 1 ) { break ; } } x = c - a - 1 ; y = d - b - 1 ; num = x * y ; printf ( "%d\n" , num ) ; return 0 ; }
int main ( ) { int sz [ ROW ] [ COL ] ; int i , j , n , a = 0 , s1 , s2 , e1 , e2 , sum ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; if ( sz [ i ] [ j ] == 0 && a == 0 ) { s1 = i ; s2 = j ; a = 1 ; } if ( sz [ i ] [ j ] == 0 ) { e1 = i ; e2 = j ; } } } sum = ( e1 - s1 - 1 ) * ( e2 - s2 - 1 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int n ; int xs [ 100 ] [ 100 ] ; int i , j , x1 , x2 , y1 , y2 , S ; scanf ( "%d" , & n ) ; y1 = 0 ; y2 = n + 1 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & xs [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) { x1 = 1 ; y1 ++ ; for ( j = 0 ; j < n ; j ++ ) { if ( xs [ i ] [ j ] ) x1 ++ ; else { j = n ; i = n ; } } } for ( i = n - 1 ; i >= 0 ; i -- ) { x2 = n ; y2 -- ; for ( j = n - 1 ; j >= 0 ; j -- ) { if ( xs [ i ] [ j ] ) x2 -- ; else { j = - 1 ; i = - 1 ; } } } S = ( y2 - y1 - 1 ) * ( x2 - x1 - 1 ) ; printf ( "%d" , S ) ; return 0 ; }
int main ( ) { int s [ 100 ] [ 100 ] ; int n ; scanf ( "%d" , & n ) ; int i , j , a = 0 , b = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { a += 1 ; break ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] [ j ] == 0 ) { b += 1 ; break ; } } } int x ; x = ( a - 2 ) * ( b - 2 ) ; printf ( "%d" , x ) ; return 0 ; }
int main ( ) { int n , a [ 1000 ] [ 1000 ] , i , j , m = 0 , b [ 1000 ] [ 2 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) { b [ m ] [ 0 ] = i ; b [ m ] [ 1 ] = j ; m ++ ; } } printf ( "%d" , ( b [ m - 1 ] [ 0 ] - b [ 0 ] [ 0 ] - 1 ) * ( b [ m - 1 ] [ 1 ] - b [ 0 ] [ 1 ] - 1 ) ) ; return 0 ; }
int main ( ) { int s , start1 , start2 , end1 , end2 , n , sz [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; int flag = 0 ; start1 = 0 ; start2 = 0 ; end1 = 0 ; end2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; if ( sz [ i ] [ j ] == 0 && flag == 0 ) { flag = 1 ; start1 = i + 1 ; start2 = j + 1 ; } if ( sz [ i ] [ j ] == 0 ) { end1 = i ; end2 = j ; } } s = ( end1 - start1 ) * ( end2 - start2 ) ; printf ( "%d\n" , s ) ; return 0 ; }
int num [ 1000 ] [ 1000 ] ; int main ( ) { int k , i , j ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( "%d" , & num [ i ] [ j ] ) ; } } int m , n , p , q , s , w ; w = 0 ; for ( i = 0 ; i < k && w == 0 ; i ++ ) { for ( j = 0 ; j < k && w == 0 ; j ++ ) { if ( num [ i ] [ j ] == 0 ) { m = i ; p = j ; w = 1 ; } } } n = 0 ; q = 0 ; for ( i = m , j = p ; j < k ; j ++ ) { if ( num [ i ] [ j ] == 0 ) { n ++ ; } } for ( i = m , j = p ; i < k ; i ++ ) { if ( num [ i ] [ j ] == 0 ) { q ++ ; } } s = ( n - 2 ) * ( q - 2 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int sz [ 1000 ] [ 1000 ] , i , j , n , a1 , b1 , a2 , b2 , x , y , t ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a1 = i ; b1 = j ; break ; } } if ( ( a1 == i ) && ( b1 == j ) ) break ; } for ( y = b1 ; y < n ; y ++ ) { if ( sz [ a1 ] [ y ] == 255 ) { b2 = y - 1 ; break ; } } for ( x = a1 ; x < n ; x ++ ) { if ( sz [ x ] [ b1 ] == 255 ) { a2 = x - 1 ; break ; } } t = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , t ) ; return 0 ; }
int s [ 1000 ] [ 1000 ] ; int main ( ) { int n , i , k , area , a , b , c , d ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & s [ i ] [ k ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( s [ i ] [ k ] == 0 ) { a = i ; b = k ; break ; } } if ( k == n ) { if ( s [ i ] [ k - 1 ] == 0 ) { break ; } } else { break ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( k = n - 1 ; k >= 0 ; k -- ) { if ( s [ i ] [ k ] == 0 ) { c = i ; d = k ; break ; } } if ( k == - 1 ) { if ( s [ i ] [ 0 ] == 0 ) { break ; } } else { break ; } } area = ( d - b - 1 ) * ( c - a - 1 ) ; printf ( "%d" , area ) ; return 0 ; }
int main ( ) { int t , N [ 1000 ] [ 1000 ] , i , j , n , m , a = 0 , b = 0 , s ; scanf ( "%d" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { scanf ( "%d" , & N [ i ] [ j ] ) ; } } for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j < t ; j ++ ) { if ( N [ i ] [ j ] == 0 ) { n = i ; m = j ; } } } for ( i = n , j = m ; j < t ; j -- ) { if ( N [ i ] [ j ] == 0 ) a ++ ; else break ; } for ( j = m , i = n ; i < t ; i -- ) { if ( N [ i ] [ j ] == 0 ) b ++ ; else break ; } s = ( a - 2 ) * ( b - 2 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int a [ MAX ] [ MAX ] ; int n , i , j , k , h , t = 0 , s = 0 , e = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 1 ; j + k < n ; k ++ ) { if ( a [ i ] [ j + k ] == 0 ) { t += 1 ; } } for ( h = 1 ; j - h >= 0 ; h ++ ) { if ( a [ i ] [ j - h ] == 0 ) { s += 1 ; } } if ( t == 1 && s == 1 ) { e ++ ; } t = 0 ; s = 0 ; } } printf ( "%d" , e ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int a [ 100 ] [ 100 ] ; int i , j ; int chang1 [ 100 ] ; int kuan , chang = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 , chang1 [ i ] = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) { chang1 [ i ] = chang1 [ i ] + 1 ; } } } int yo ; for ( yo = 0 ; yo < n ; yo ++ ) { if ( chang1 [ yo ] != 0 ) { chang = chang1 [ yo ] ; break ; } } int t ; for ( t = 0 , kuan = 0 ; t < n ; t ++ ) { if ( chang1 [ t ] == 2 ) kuan = kuan + 1 ; } int jieguo ; jieguo = kuan * ( chang - 2 ) ; printf ( "%d" , jieguo ) ; return 0 ; }
int main ( ) { int n , sz [ 100000 ] , b = 0 , c , f = 0 , d , e , i , row1 , row2 , col1 , col2 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n * n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; if ( sz [ i ] == 0 ) { b += 1 ; if ( b == 1 ) d = i ; } } for ( i = 0 ; i < n * n ; i ++ ) { if ( sz [ i ] == 0 ) { f += 1 ; if ( f == b ) e = i ; } } row1 = d / n ; col1 = d % n ; row2 = e / n ; col2 = e % n ; c = ( col2 - col1 + 1 ) * ( row2 - row1 + 1 ) - b ; printf ( "%d" , c ) ; return 0 ; }
int sz [ ROW ] [ COL ] ; int main ( ) { int row , col , a , b , c , d , t , s , x , n , m = 0 , l = 0 ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { if ( sz [ row ] [ col ] == 0 ) { a = row ; b = col ; m = 1 ; break ; } } if ( m == 1 ) break ; } for ( row = n - 1 ; row >= 0 ; row -- ) { for ( col = n - 1 ; col >= 0 ; col -- ) { if ( sz [ row ] [ col ] == 0 ) { c = row ; d = col ; l = 1 ; break ; } } if ( l == 1 ) break ; } t = c - a - 1 ; s = d - b - 1 ; if ( t < 0 || s < 0 ) { x = 0 ; } else { x = t * s ; } printf ( "%d\n" , x ) ; return 0 ; }
int main ( ) { int n , i , j , k , s , b = 0 , c1 = 0 , c2 = 0 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( "%d" , & k ) ; if ( k == 0 ) { c2 ++ ; } if ( k == 0 && b == 0 ) { c1 ++ ; } else if ( k == 255 && b == 0 && c1 > 0 ) { b = 1 ; } } } s = ( c1 - 2 ) * ( c2 - c1 * 2 ) / 2 ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int sz [ 1000 ] [ 1000 ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { int j ; for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } printf ( "\n" ) ; } int k ; int sum = 0 ; for ( k = 0 ; k < n && sum == 0 ; k ++ ) { int p ; for ( p = 0 ; p < n ; p ++ ) { if ( sz [ k ] [ p ] == 0 ) { sum = sum + 1 ; } } } int sum1 = 0 ; int q ; for ( q = 0 ; q < n && sum1 == 0 ; q ++ ) { int m ; for ( m = 0 ; m < n ; m ++ ) { if ( sz [ m ] [ q ] == 0 ) { sum1 ++ ; } } } int jieguo = ( sum - 2 ) * ( sum1 - 2 ) ; printf ( "%d" , jieguo ) ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] = { 2 } ; int i , j , n , n1 = - 1 , n2 = - 1 , n3 , n4 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { n3 = i ; n4 = j ; if ( n1 >= 0 || n2 >= 0 ) continue ; else { n1 = i ; n2 = j ; } } } } printf ( "%d" , ( n3 - n1 - 1 ) * ( n4 - n2 - 1 ) ) ; return 0 ; }
int main ( ) { int n , row , col ; int sz [ 1000 ] [ 1000 ] ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } int a = 0 ; int b = 0 ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n - 1 ; col ++ ) { if ( b == 0 ) { if ( ( sz [ row ] [ col ] == 0 ) && ( sz [ row ] [ col + 1 ] == 0 ) ) { col = n ; } else if ( ( sz [ row ] [ col ] == 0 ) && ( sz [ row ] [ col + 1 ] == 255 ) ) { a ++ ; b = 1 ; } } else if ( b == 1 ) { if ( ( sz [ row ] [ col ] == 255 ) && ( sz [ row ] [ col + 1 ] == 255 ) ) { a ++ ; } else if ( ( sz [ row ] [ col ] == 255 ) && ( sz [ row ] [ col + 1 ] == 0 ) ) { col = n ; b = 0 ; } } } } printf ( "%d" , a ) ; return 0 ; }
int main ( ) { int sz [ 1000 ] [ 1000 ] ; int n , i , j , a1 , a2 , b1 , b2 , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( ( sz [ i ] [ j ] == 0 ) && ( sz [ i - 1 ] [ j ] != 0 ) && ( sz [ i ] [ j - 1 ] != 0 ) ) { a1 = i ; b1 = j ; } } } for ( i = n ; i > 0 ; i -- ) { for ( j = n ; j > 0 ; j -- ) { if ( ( sz [ i ] [ j ] == 0 ) && ( sz [ i + 1 ] [ j ] != 0 ) && ( sz [ i ] [ j + 1 ] != 0 ) ) { a2 = i ; b2 = j ; } } } s = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int row , col , n , x = 0 , k ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & ( sz [ row ] [ col ] ) ) ; } } k = 2 ; for ( row = k ; row < n - k ; row ++ ) { for ( col = k ; col < n - k ; col ++ ) { if ( sz [ row ] [ col ] != 0 ) { x ++ ; } } } printf ( "%d\n" , x ) ; return 0 ; }
int main ( ) { int n , i , j , s [ 1500 ] [ 1500 ] , inside = 0 , total = 0 ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) cin >> s [ i ] [ j ] ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { if ( ( s [ i ] [ j ] == 0 ) && ( s [ i ] [ j + 1 ] == 0 ) ) do { j ++ ; } while ( ( j < n ) && ( s [ i ] [ j ] == 0 ) ) ; else if ( ( s [ i ] [ j ] == 0 ) && ( s [ i ] [ j + 1 ] != 0 ) ) { do { j ++ ; if ( s [ i ] [ j ] > 0 ) inside ++ ; } while ( ( j < n ) && ( s [ i ] [ j ] != 0 ) ) ; } } cout << inside << endl ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int sz [ 100 ] [ 100 ] ; for ( int row = 0 ; row < n ; row ++ ) { for ( int col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } int a1 = 100 , b1 = 100 , a2 = 0 , b2 = 0 ; for ( int r = 0 ; r < n ; r ++ ) { for ( int c = 0 ; c < n ; c ++ ) { if ( sz [ r ] [ c ] == 0 ) { a1 = r ; b1 = c ; break ; } } if ( a1 != 100 || b1 != 100 ) { break ; } } for ( int rr = n - 1 ; rr >= 0 ; rr -- ) { for ( int cc = n - 1 ; cc >= 0 ; cc -- ) { if ( sz [ rr ] [ cc ] == 0 ) { a2 = rr ; b2 = cc ; break ; } } if ( a2 != 0 || b2 != 0 ) { break ; } } int s ; s = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n , i , j , x1 , y1 , x2 , y2 , situ = 1 ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 ) { y2 = i ; x2 = j ; } } } for ( i = 0 ; situ ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { x1 = j ; y1 = i ; situ = 0 ; break ; } else { continue ; } } } n = ( x2 - x1 + 1 ) * ( y2 - y1 + 1 ) - ( 2 * ( x2 - x1 + 1 ) + 2 * ( y2 - y1 + 1 ) - 4 ) ; printf ( "%d" , n ) ; return 0 ; }
int main ( ) { int n , c , r , x , t , r1 , r2 , c1 , c2 ; scanf ( "%d" , & n ) ; int sz [ n ] [ n ] ; t = 0 ; for ( r = 0 ; r < n ; r ++ ) { for ( c = 0 ; c < n ; c ++ ) { scanf ( "%d" , & ( sz [ r ] [ c ] ) ) ; if ( t == 0 && sz [ r ] [ c ] == 0 ) { r1 = r ; c1 = c ; t = 1 ; } } } t = 0 ; for ( r = n - 1 ; r >= 0 ; r -- ) { for ( c = n - 1 ; c >= 0 ; c -- ) { scanf ( "%d" , & ( sz [ r ] [ c ] ) ) ; if ( t == 0 && sz [ r ] [ c ] == 0 ) { r2 = r ; c2 = c ; t = 1 ; } } } x = ( r2 - r1 - 1 ) * ( c2 - c1 - 1 ) ; printf ( "%d" , x ) ; return 0 ; }
int main ( ) { int sz [ 1000 ] [ 1000 ] ; int ROW , COL , ROW1 , COL1 , col , row ; int n , k = 0 ; int T = 0 ; int a , b ; scanf ( "%d" , & n ) ; ROW = n - 1 ; COL = n - 1 ; for ( row = 0 ; row < ROW ; row ++ ) { for ( col = 0 ; col < COL ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( row = 0 ; row < ROW ; row ++ ) { for ( col = 0 ; col < COL ; col ++ ) { if ( T == 0 && sz [ row ] [ col ] == 0 ) { ROW1 = row ; COL1 = col ; T = 1 ; } } } for ( row = ROW ; row >= ROW1 ; row -- ) { for ( col = COL ; col >= COL1 ; col -- ) { if ( T == 0 && sz [ row ] [ col ] == 0 ) { COL = col ; ROW = row ; T = 1 ; } } } a = ROW - ROW1 - 3 ; b = COL - COL1 - 1 ; k = a * b ; printf ( "%d" , k ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int s [ 100 ] [ 100 ] ; int i , j ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } } int i1 , i2 , j1 , j2 ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { i1 = i ; j1 = j ; break ; } } } for ( i = n ; i >= 1 ; i -- ) { for ( j = n ; j >= 1 ; j -- ) { if ( s [ i ] [ j ] == 0 ) { i2 = i ; j2 = j ; break ; } } } int sq ; sq = ( j2 - j1 - 1 ) * ( i1 - i2 - 1 ) ; printf ( "%d\n" , sq ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int row , col , n , s = 0 ; int sz [ 1000 ] [ 1000 ] ; int star1 , star2 , end1 , end2 ; int f = - 1 ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & ( sz [ row ] [ col ] ) ) ; } } for ( row = 1 ; row < n - 1 ; row ++ ) { for ( col = 1 ; col < n - 1 ; col ++ ) { if ( sz [ row ] [ col ] == 0 && f == - 1 ) { star1 = row ; star2 = col ; f = 1 ; } if ( sz [ row ] [ col ] == 0 ) { end1 = row ; end2 = col ; } } } s = ( end1 - star1 - 1 ) * ( end2 - star2 - 1 ) ; printf ( "%d\n" , s ) ; return 0 ; }
int main ( ) { int n , s = 0 , u ; int image [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( int row = 0 ; row < n ; row ++ ) { for ( int col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & ( image [ row ] [ col ] ) ) ; } } for ( int i = 0 ; i < n ; i ++ ) { int k = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( image [ i ] [ j ] == 0 ) { k ++ ; } } if ( k > 0 ) { u = k ; s ++ ; } } int m = ( u - 2 ) * ( s - 2 ) ; printf ( "%d" , m ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int num [ 101 ] [ 100 ] ; int n , i , j ; scanf ( "%d" , & n ) ; i = j = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & num [ i ] [ j ] ) ; } int a , b , c , d ; a = b = c = d = 0 ; i = j = 0 ; do { do { if ( num [ i ] [ j ] == 0 && a == 0 && b == 0 ) a = i , b = j + 1 ; j ++ ; } while ( j < n ) ; j = 0 ; i ++ ; } while ( i < n ) ; i = j = 0 ; do { do { if ( num [ i ] [ j ] == 0 && c <= i && d <= j ) c = i , d = j ; j ++ ; } while ( j < n ) ; j = 0 ; i ++ ; } while ( i < n ) ; int s ; s = ( c - a - 1 ) * ( d - b ) ; printf ( "%d\n" , s ) ; return 0 ; }
int main ( ) { int n , sz [ 100 ] [ 100 ] , i , j , x1 = - 1 , y1 , x2 = - 1 , y2 , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { x1 = i ; y1 = j ; break ; } else continue ; } if ( x1 == - 1 ) continue ; else break ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( sz [ i ] [ j ] == 0 ) { x2 = i ; y2 = j ; break ; } else continue ; } if ( x2 == - 1 ) continue ; else break ; } s = ( x2 - x1 - 1 ) * ( y2 - y1 - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int i , j ; int n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & ( sz [ i ] [ j ] ) ) ; } } int a , b , c ; int s = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 && sz [ i ] [ j + 1 ] == 255 ) { a = j ; break ; } } for ( j = n - 1 ; j >= 0 ; j -- ) { if ( sz [ i ] [ j ] == 0 && sz [ i ] [ j - 1 ] == 255 ) { b = j ; break ; } } if ( a < b ) { c = b - a - 1 ; } else { c = 0 ; } s = s + c ; } printf ( "%d" , s ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int p [ 1000 ] [ 1000 ] ; int a = 0 , b = 0 ; int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & p [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( p [ i ] [ j ] == 0 ) { a ++ ; } } if ( a != 0 ) break ; } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] [ j ] == 0 ) b ++ ; } if ( b != 0 ) break ; } int sum = 0 ; sum = ( a - 2 ) * ( b - 2 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int n , i , j , a , b , c , d , f = 0 ; scanf ( "%d" , & n ) ; int sz [ 1000 ] [ 1000 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d " , & sz [ i ] [ j ] ) ; if ( sz [ i ] [ j ] == 0 && f == 0 ) { a = i ; b = j ; f = 1 ; } if ( sz [ i ] [ j ] == 0 ) { c = i ; d = j ; } } } printf ( "%d" , ( d - b - 1 ) * ( c - a - 1 ) ) ; return 0 ; }
int main ( ) { int n , i , j , k = 0 , m = 0 , a [ 1000 ] [ 1000 ] , flag = 0 , number ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ j ] [ i ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] [ i ] == 0 ) { k ++ ; flag = 1 ; } if ( flag == 1 ) { if ( a [ j ] [ i ] == 255 ) { break ; } } } } flag = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( a [ j ] [ i ] == 0 ) { m ++ ; flag = 1 ; } if ( flag == 1 ) { if ( a [ j ] [ i ] == 255 ) { break ; } } } } number = ( k - 2 ) * ( m - 2 ) ; printf ( "%d\n" , number ) ; return 0 ; }
int x1 = 0 , x2 = 0 ; int y1 = 0 , y2 = 0 ; int tag = 0 ; int sum = 0 ; int main ( ) { int n , i , j ; int a [ 100 ] [ 100 ] ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { x1 = j ; y1 = i ; while ( ! a [ y1 ] [ j ] ) j ++ ; x2 = j - 1 ; while ( ! a [ i ] [ x1 ] ) i ++ ; y2 = i - 1 ; tag = 1 ; break ; } } if ( tag ) break ; } if ( ! tag ) { cout << 0 << endl ; return 0 ; } sum = ( x2 - x1 - 1 ) * ( y2 - y1 - 1 ) ; cout << sum << endl ; return 0 ; }
int main ( ) { int Row = 100 , Col = 100 ; int sz [ Row ] [ Col ] ; int n ; int row1 ; int row2 ; int i ; int col1 ; int col2 ; int k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & sz [ i ] [ k ] ) ; } } int judge = 0 ; for ( i = 0 ; judge == 0 && i < n ; i ++ ) { for ( k = 0 ; judge == 0 && k < n ; k ++ ) { if ( sz [ i ] [ k ] == 0 ) { judge = 1 ; row1 = i ; col1 = k ; } } } for ( i = n - 1 ; judge == 1 && i > 0 ; i -- ) { for ( k = n - 1 ; judge == 1 && k > 0 ; k -- ) { if ( sz [ i ] [ k ] == 0 ) { row2 = i ; col2 = k ; judge = 0 ; } } } int s ; s = ( row2 - row1 - 1 ) * ( col2 - col1 - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n , u [ 1000 ] [ 1000 ] , i , j , chang = 0 , bian = 0 , sum ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & u [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( u [ i ] [ j ] == 0 ) { chang = chang + 1 ; } } if ( chang != 0 ) { break ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( u [ i ] [ j ] == 0 ) { bian = bian + 1 ; } } if ( bian != 0 ) { break ; } } sum = ( chang - 2 ) * ( bian - 2 ) ; printf ( "%d" , sum ) ; return 0 ; }
int main ( ) { int a [ 1000 ] [ 1000 ] , i , n , j , b , c , d , e , x ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { b = i ; c = j ; j = n ; i = n ; } } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { d = i ; e = j ; i = - 1 ; j = - 1 ; } } } x = ( d - b + 1 ) * ( e - c + 1 ) - 2 * ( d - b + 1 ) - 2 * ( e - c + 1 ) + 4 ; printf ( "%d" , x ) ; return 0 ; }
int main ( ) { int n , s [ 1000 ] [ 1000 ] , i , j , a , b , c , d , log = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { log = 1 ; a = i ; b = j ; break ; } } if ( log ) { break ; } } log = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( s [ i ] [ j ] == 0 ) { log = 1 ; c = i ; d = j ; break ; } } if ( log ) { break ; } } printf ( "%d" , ( c - a - 1 ) * ( d - b - 1 ) ) ; return 0 ; }
main ( ) { int i , j , n , aa1 , bb1 , aa2 , bb2 , a [ 99 ] [ 99 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { aa1 = i ; bb1 = j ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { aa2 = i ; bb2 = j ; } } } printf ( "%d" , ( aa2 - aa1 - 1 ) * ( bb2 - bb1 - 1 ) ) ; }
int main ( int argc , char * argv [ ] ) { int dian [ 10 ] [ 10 ] ; int i , j , s , n , a , b , c , d ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & dian [ j ] [ i ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( dian [ i ] [ j ] == 0 && dian [ i + 1 ] [ j ] == 0 && dian [ i ] [ j + 1 ] == 0 ) { a = i ; b = j ; break ; } else continue ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( dian [ i ] [ j ] == 0 && dian [ i - 1 ] [ j ] == 0 && dian [ i ] [ j - 1 ] == 0 ) { c = i ; d = j ; break ; } else continue ; } } s = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d" , s ) ; }
int main ( ) { int k , i , j , a [ 1000 ] [ 1000 ] , m [ 2 ] , n [ 2 ] , S , f ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } f = - 1 ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] == 0 && f == - 1 ) { m [ 0 ] = i + 1 ; n [ 0 ] = j + 1 ; f = 1 ; } if ( a [ i ] [ j ] == 0 ) { m [ 1 ] = i - 1 ; n [ 1 ] = j - 1 ; } } } S = ( m [ 1 ] - m [ 0 ] + 1 ) * ( n [ 1 ] - n [ 0 ] + 1 ) ; printf ( "%d\n" , S ) ; return 0 ; }
int main ( ) { int an [ 100 ] [ 100 ] , i , j , n , s , a , b , flag = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & an [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( an [ i ] [ j ] == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { break ; } } flag = 0 ; for ( a = n - 1 ; a >= 0 ; a -- ) { for ( b = n - 1 ; b >= 0 ; b -- ) { if ( an [ a ] [ b ] == 0 ) { flag = 1 ; break ; } } if ( flag == 1 ) { break ; } } s = ( b - j - 1 ) * ( a - i - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n , sz [ 100 ] [ 100 ] , r , s , p , q ; scanf ( "%d" , & n ) ; for ( int row = 0 ; row < n ; row ++ ) { for ( int col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & ( sz [ row ] [ col ] ) ) ; } } for ( int a = 0 ; a < n ; a ++ ) { for ( int b = 0 ; b < n ; b ++ ) { if ( sz [ a ] [ b ] == 0 ) { r = a ; s = b ; break ; } else continue ; } } for ( int c = n - 1 ; c >= 0 ; c -- ) { for ( int d = n - 1 ; d >= 0 ; d -- ) { if ( sz [ c ] [ d ] == 0 ) { p = c ; q = d ; break ; } else continue ; } } int e = ( r - p - 1 ) * ( q - s - 1 ) ; printf ( "%d" , e ) ; return 0 ; }
int main ( ) { int SZ [ 100 ] [ 100 ] ; int n , m1 , n1 , m2 , n2 , mj ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & SZ [ i ] [ j ] ) ; } } for ( int p = 0 ; p < n ; p ++ ) { for ( int q = 0 ; q < n ; q ++ ) { if ( SZ [ p ] [ q ] == 0 ) { n1 = p ; m1 = q ; goto sen1 ; } } } sen1 : for ( int x = n - 1 ; x >= 0 ; x -- ) { for ( int y = n - 1 ; y >= 0 ; y -- ) { if ( SZ [ x ] [ y ] == 0 ) { n2 = x ; m2 = y ; goto sen2 ; } } } sen2 : mj = ( m2 - m1 - 1 ) * ( n2 - n1 - 1 ) ; printf ( "%d" , mj ) ; return 0 ; }
int main ( ) { int n , i , j ; int sz [ 10 ] [ 10 ] ; int a , b , c , d ; int s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a = i ; b = j ; break ; } } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( sz [ i ] [ j ] == 0 ) { c = i ; d = j ; break ; } } } s = ( d - b - 1 ) * ( a - c - 1 ) ; if ( s <= 0 ) printf ( "0" ) ; else printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int a [ 1000 ] [ 1000 ] , h1 , h2 , l1 , l2 , c = 0 , b = 0 ; int n , i , j , h , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( h = 0 ; h < n ; h ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( a [ h ] [ k ] == 0 ) { h1 = h ; l1 = k ; c = 1 ; break ; } } if ( c == 1 ) break ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = n - 1 ; j > 0 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { h2 = i ; l2 = j ; b = 1 ; break ; } } if ( b == 1 ) break ; } printf ( "%d\n" , ( h2 - h1 - 1 ) * ( l2 - l1 - 1 ) ) ; return 0 ; }
int main ( ) { int n , row , col ; int s [ 100 ] [ 100 ] ; int i = 0 , k = 0 , j = 0 , h = 0 ; int e = 0 , d = 0 , f = 0 , g = 0 ; int area ; scanf ( "%d" , & n ) ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col < n ; col ++ ) { scanf ( "%d" , & ( s [ row ] [ col ] ) ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( s [ i ] [ k ] == 0 ) { e = i ; d = k ; break ; } } if ( k < n ) { if ( s [ i ] [ k ] == 0 ) { break ; } } } for ( j = n - 1 ; j >= 0 ; j -- ) { for ( h = n - 1 ; h >= 0 ; h -- ) { if ( s [ j ] [ h ] == 0 ) { f = j ; g = h ; break ; } } if ( h >= 0 ) { if ( s [ j ] [ h ] == 0 ) { break ; } } } area = ( f - e - 1 ) * ( g - d - 1 ) ; printf ( "%d\n" , area ) ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , i , j , n , x1 , y1 , x2 , y2 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 && a [ i ] [ j + 1 ] == 0 && a [ i + 1 ] [ j ] == 0 ) { x1 = i ; y1 = j ; } if ( a [ i ] [ j ] == 0 && a [ i ] [ j - 1 ] == 0 && a [ i - 1 ] [ j ] == 0 ) { x2 = i ; y2 = j ; } } } printf ( "%d" , ( x2 - x1 - 1 ) * ( y2 - y1 - 1 ) ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] , n , i , j , a , b , c , d ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 1 ; j < n - 1 ; j ++ ) { if ( sz [ i - 1 ] [ j ] == 0 && sz [ i ] [ j - 1 ] == 0 && sz [ i - 1 ] [ j - 1 ] == 0 ) { a = i ; b = j ; } if ( sz [ i ] [ j + 1 ] == 0 && sz [ i + 1 ] [ j ] == 0 && sz [ i + 1 ] [ j + 1 ] == 0 ) { c = i ; d = j ; } } } printf ( "%d" , ( c - a + 1 ) * ( d - b + 1 ) ) ; return 0 ; }
int main ( ) { int p ; int i , n , tmp , squar ; tmp = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n * n ; i ++ ) { scanf ( "%d" , & p ) ; if ( p == 0 ) tmp = tmp + 1 ; } tmp = tmp / 4 ; squar = ( tmp - 1 ) * ( tmp - 1 ) ; printf ( "%d\n" , squar ) ; }
int main ( ) { int n ; int sz [ 500 ] [ 500 ] ; scanf ( "%d" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } int mincol = n , minrow = n , maxcol = 0 , maxrow = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { if ( i < mincol ) { mincol = i ; } if ( j < minrow ) { minrow = j ; } if ( i > maxcol ) { maxcol = i ; } if ( j > maxrow ) { maxrow = j ; } } } } int zong ; zong = ( maxcol - mincol - 1 ) * ( maxrow - minrow - 1 ) ; printf ( "%d" , zong ) ; return 0 ; }
int main ( ) { int p [ 100 ] [ 100 ] ; int n , i , j , h , k , m , l , a = 0 , b = 0 , sum ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & p [ i ] [ j ] ) ; } } for ( h = 0 ; h < n ; h ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( p [ h ] [ k ] == 0 ) a ++ ; } if ( a != 0 ) break ; } for ( m = 0 ; m < n ; m ++ ) { for ( l = 0 ; l < n ; l ++ ) { if ( p [ l ] [ m ] == 0 ) b ++ ; } if ( b != 0 ) break ; } sum = ( a - 2 ) * ( b - 2 ) ; printf ( "%d\n" , sum ) ; }
int main ( ) { int n , a , b , c , d , s ; b = 0 ; int sz [ 100 ] ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n * n - 1 ; i ++ ) { scanf ( "%d" , & a ) ; if ( a == 0 ) { sz [ b ] = i ; b ++ ; } } c = ( sz [ b - 1 ] + 1 ) % n - ( sz [ 0 ] + 1 ) % n + 1 ; d = ( b + 2 ) / 2 - c + 1 ; s = ( c - 2 ) * ( d - 2 ) ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int x , y , a , b , sz [ 100 ] [ 100 ] , tag , tag1 = 0 ; for ( x = 0 ; x < n ; x ++ ) { tag = 0 ; for ( y = 0 ; y < n ; y ++ ) { scanf ( "%d" , & sz [ x ] [ y ] ) ; if ( sz [ x ] [ y ] == 0 ) { tag ++ ; tag1 ++ ; } } if ( tag1 == tag ) { a = tag - 2 ; } } b = ( tag1 - 2 * ( a + 2 ) ) / 2 ; printf ( "%d" , a * b ) ; return 0 ; }
int main ( ) { int n , i , j , e , f , x , y , p , s [ 1000 ] [ 1000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { e = i ; f = j ; break ; } } if ( j < n ) { break ; } } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( s [ i ] [ j ] == 0 ) { x = i ; y = j ; break ; } } if ( j >= 0 ) { break ; } } p = ( x - e - 1 ) * ( y - f - 1 ) ; printf ( "%d" , p ) ; return 0 ; }
int zl [ 1000 ] [ 1000 ] ; int main ( ) { int i , j , n , a , b , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & zl [ i ] [ j ] ) ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( zl [ i ] [ j ] == 0 ) { break ; } } if ( zl [ i ] [ j ] == 0 ) { break ; } } a = i ; b = j ; for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = n - 1 ; j > 0 ; j -- ) { if ( zl [ i ] [ j ] == 0 ) { break ; } } if ( zl [ i ] [ j ] == 0 ) { break ; } } s = ( i - a - 1 ) * ( j - b - 1 ) ; printf ( "%d\n" , s ) ; return 0 ; }
int a [ 1000 ] [ 1000 ] ; int main ( ) { int n ; scanf ( "%d" , & n ) ; int p , q ; for ( p = 0 ; p < n ; p ++ ) { for ( q = 0 ; q < n ; q ++ ) { scanf ( "%d" , & ( a [ p ] [ q ] ) ) ; } } int p1 = 0 , p2 = 0 , q1 , q2 ; for ( p = 0 ; p < n ; p ++ ) { for ( q = 0 ; q < n ; q ++ ) { if ( a [ p ] [ q ] == 0 ) { p1 = p ; q1 = q ; break ; } if ( p1 != 0 ) break ; } if ( p1 != 0 ) break ; } for ( p = n - 1 ; p >= 0 ; p -- ) { for ( q = n - 1 ; q >= 0 ; q -- ) { if ( a [ p ] [ q ] == 0 ) { p2 = p ; q2 = q ; break ; } if ( p2 != 0 ) break ; } if ( p2 != 0 ) break ; } int x ; x = ( p2 - p1 - 1 ) * ( q2 - q1 - 1 ) ; printf ( "%d" , x ) ; return 0 ; }
int main ( ) { int n , sz [ 1000 ] [ 1000 ] ; int a , b , c , d , g ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & sz [ i ] [ k ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( sz [ i ] [ k ] == 0 ) { a = i ; b = k ; } } } for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int k = n - 1 ; k >= 0 ; k -- ) { if ( sz [ i ] [ k ] == 0 ) { c = i ; d = k ; } } } g = ( a - c - 1 ) * ( b - d - 1 ) ; printf ( "%d" , g ) ; return 0 ; }
int main ( ) { int n , j , i , a1 , a2 , b1 , b2 , t , x ; int s [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s [ j ] [ i ] ) ; } } for ( x = 0 , j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( s [ j ] [ i ] == 0 ) { a1 = j ; x ++ ; break ; } } if ( x != 0 ) { break ; } } for ( x = 0 , j = ( n - 1 ) ; j >= 0 ; j -- ) { for ( i = 0 ; i < n ; i ++ ) { if ( s [ j ] [ i ] == 0 ) { a2 = j ; x ++ ; break ; } } if ( x != 0 ) { break ; } } for ( x = 0 , i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ j ] [ i ] == 0 ) { b1 = i ; x ++ ; break ; } } if ( x != 0 ) { break ; } } for ( x = 0 , i = ( n - 1 ) ; i >= 0 ; i -- ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ j ] [ i ] == 0 ) { b2 = i ; x ++ ; break ; } } if ( x != 0 ) { break ; } } t = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d\n" , t ) ; return 0 ; }
int sz [ 1000 ] [ 1000 ] ; int main ( ) { int n , i , j , a , b , c , d , e = 0 , h = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & ( sz [ i ] [ j ] ) ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a = i ; b = j ; h = 1 ; } if ( h == 1 ) break ; } if ( h == 1 ) break ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { c = i ; d = j ; } } } e = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d" , e ) ; return 0 ; }
int main ( ) { int n , i , j , fir1 , fir2 , la1 , la2 , s , a [ 1000 ] [ 1000 ] ; scanf ( "%d" , & n ) ; fir1 = 0 ; for ( i = 1 ; i < n + 1 ; i ++ ) for ( j = 1 ; j < n + 1 ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( fir1 == 0 && a [ i ] [ j ] == 0 ) { fir1 = i ; fir2 = j ; } if ( a [ i ] [ j ] == 0 ) { la1 = i ; la2 = j ; } } s = ( la1 - fir1 - 1 ) * ( la2 - fir2 - 1 ) ; if ( s <= 0 ) printf ( "0" ) ; else printf ( "%d" , s ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int a [ 100 ] [ 100 ] ; int x1 , y1 , x2 , y2 , area = 0 ; int n , i , j ; scanf ( "%d" , & n ) ; 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { x1 = i ; y1 = j ; break ; } } if ( j < n ) { break ; } } n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] == 0 ) { y2 = j ; break ; } } if ( j >= 0 ) { break ; } } /* ??????????? */ area = ( x2 - x1 - 1 ) * ( y2 - y1 - 1 ) ; print return 0 ; }
main ( ) { int s [ 1000 ] [ 1000 ] , i , j , a , b , c , d , n , sum = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) { a = i ; b = j ; goto A ; } } A : for ( i = n - 1 ; i >= 0 ; i -- ) for ( j = n - 1 ; j >= 0 ; j -- ) if ( s [ i ] [ j ] == 0 ) { c = i ; d = j ; goto B ; } B : sum = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d\n" , sum ) ; }
int main ( int argc , char * argv [ ] ) { int sz [ 100 ] [ 100 ] , i , j , a = - 1 , b = - 1 , c , d , n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a = i ; b = j ; break ; } } if ( a >= 0 && b >= 0 ) break ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { c = i ; d = j ; } } } n = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d\n" , n ) ; return 0 ; }
void main ( ) { int N ; int * * array , i , j ; int a = 1000 , b = 1000 , c = 0 , d = 0 ; scanf ( "%d" , & N ) ; array = ( int * * ) malloc ( N * sizeof ( int * ) ) ; for ( i = 0 ; i < N ; i ++ ) { array [ i ] = ( int * ) malloc ( N * sizeof ( int ) ) ; for ( j = 0 ; j < N ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; if ( array [ i ] [ j ] == 0 && i <= a && j <= b ) { a = i ; b = j ; } if ( array [ i ] [ j ] == 0 && i >= c && j >= d ) { c = i ; d = j ; } } } printf ( "%d" , ( c - a - 1 ) * ( d - b - 1 ) ) ; }
int main ( ) { int n , a [ 1000 ] [ 1000 ] = { 0 } , j , m [ 100 ] , i , k [ 100 ] , p [ 100 ] , b [ 100 ] , s = 0 , g = 0 ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ j ] [ i ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( a [ j ] [ i ] == 0 ) { s += 1 ; m [ s ] = j ; k [ s ] = i ; break ; } } } for ( j = n - 1 ; j > 0 ; j -- ) { for ( i = n - 1 ; i > 0 ; i -- ) { if ( a [ j ] [ i ] == 0 ) { g += 1 ; p [ g ] = j ; b [ g ] = i ; break ; } } } printf ( "%d" , ( p [ 1 ] - m [ 1 ] - 1 ) * ( b [ 1 ] - k [ 1 ] - 1 ) ) ; return 0 ; }
int main ( ) { int n , z [ 1000 ] [ 1000 ] , i , j , k , l , s ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & z [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( z [ i ] [ j ] == 0 ) break ; } if ( j < n ) break ; } k = i ; l = j ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( z [ i ] [ j ] == 0 ) break ; } if ( j >= 0 ) break ; } k = i - k - 1 ; l = j - l - 1 ; s = k * l ; printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int x1 , y1 , x2 , y2 , area = 0 ; int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { x1 = i ; y1 = j ; break ; } } if ( j < n ) { break ; } } i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( a [ i ] [ j ] break ; } } if ( j >= 0 ) { break ; } } /* ??????????? */ area = ( x2 - x1 - 1 ) * ( "%d" , area ) ; return 0 ; }
int main ( ) { int a [ 1000 ] [ 1000 ] ; int i , j , star1 , star2 , end1 , end2 , b , n ; int f = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( a [ i ] [ j ] == 0 && f == 0 ) { star1 = i + 1 ; star2 = j + 1 ; f = 1 ; } if ( a [ i ] [ j ] == 0 ) { end1 = i - 1 ; end2 = j - 1 ; } } } b = ( end1 - star1 + 1 ) * ( end2 - star2 + 1 ) ; printf ( "%d" , b ) ; return 0 ; }
int main ( ) { int shuzu [ 1001 ] , jilu [ 1001 ] ; int a = 0 , b = 0 , c , n , i , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & shuzu [ k ] ) ; if ( shuzu [ k ] == 0 ) { jilu [ a ] = k ; a ++ ; } } if ( a == 2 ) { c = jilu [ 1 ] - jilu [ 0 ] - 1 ; b += c ; } a = 0 ; } printf ( "%d" , b ) ; return 0 ; }
int main ( ) { int n , p , count = 0 , n1 , n2 , i ; cin >> n ; for ( i = 1 ; i <= n * n ; i ++ ) { cin >> p ; if ( p == 0 && count == 0 ) { n1 = i ; count = 1 ; } if ( p == 0 && count != 0 ) { n2 = i ; } } cout << ( n2 / n - n1 / n - 1 ) * ( n2 % n - n1 % n - 1 ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , i , j , a , b , q = 0 , m = 0 , number ; scanf ( "%d" , & n ) ; int s [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } if ( j == ( n - 1 ) ) { scanf ( "%d\n" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ i ] [ j ] == 0 ) q ++ ; } if ( q != 0 ) break ; } for ( a = 0 ; a < n ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { if ( s [ b ] [ a ] == 0 ) m ++ ; } if ( m != 0 ) break ; } number = ( q - 2 ) * ( m - 2 ) ; printf ( "%d" , number ) ; return 0 ; }
int main ( ) { int n , h [ 100 ] , w = 0 , q ; int a [ 100 ] [ 100 ] ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { h [ i ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; if ( a [ i ] [ j ] == 0 ) h [ i ] ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( h [ i ] != 0 ) { q = h [ i ] ; break ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( h [ i ] != 0 ) { w ++ ; } else continue ; } int m = ( q - 2 ) * ( w - 2 ) ; cout << m ; }
int sz [ 1000 ] [ 1000 ] ; int main ( ) { int n , i , j , a1 , a2 , b1 , b2 , c , d = 0 , e = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { a1 = i ; b1 = j ; d = 1 ; break ; } } if ( d == 1 ) break ; } for ( j = n - 1 ; j > b1 ; j -- ) { for ( i = n - 1 ; i > a1 ; i -- ) { if ( sz [ i ] [ j ] == 0 ) { a2 = i ; b2 = j ; e = 1 ; break ; } } if ( e == 1 ) break ; } c = ( a2 - a1 - 1 ) * ( b2 - b1 - 1 ) ; printf ( "%d" , c ) ; return 0 ; }
int main ( ) { int n , i , j , a [ 100 ] [ 100 ] , x , y , x1 , y1 , s ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] [ j ] == 0 ) { x = i ; y = j ; goto l ; } l : x1 = x ; y1 = y ; while ( x1 < n && a [ x1 ] [ y ] == 0 ) x1 ++ ; while ( y1 < n && a [ x ] [ y1 ] == 0 ) y1 ++ ; s = ( x1 - x - 2 ) * ( y1 - y - 2 ) ; cout << s << endl ; return 0 ; }
int main ( ) { int sz [ 1000 ] [ 1000 ] , i , j , n , flag = 0 , row1 , row2 , col1 , col2 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sz [ i ] [ j ] == 0 ) { row1 = i ; col1 = j ; flag = 1 ; break ; } } if ( flag == 1 ) { break ; } } flag = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( sz [ i ] [ j ] == 0 ) { row2 = i ; col2 = j ; flag = 1 ; break ; } } if ( flag == 1 ) { break ; } } printf ( "%d" , ( row2 - row1 - 1 ) * ( col2 - col1 - 1 ) ) ; return 0 ; }
int e [ 1000 ] [ 1000 ] ; int main ( ) { int i , j , n , a , b , c = 0 , d = 0 , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & e [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( e [ i ] [ j ] == 0 ) { a = i ; b = j ; } } } for ( j = b ; j >= 0 ; j -- ) { if ( e [ a ] [ j ] == 0 ) { c ++ ; } else break ; } for ( i = a ; i >= 0 ; i -- ) { if ( e [ i ] [ b ] == 0 ) { d ++ ; } else break ; } t = ( c - 2 ) * ( d - 2 ) ; printf ( "%d" , t ) ; return 0 ; }
int main ( ) { int m , n ; int i , j , k ; int r ; int ni , nj , nk , nm , nn ; nk = 0 ; r = 0 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n * n ; i ++ ) { scanf ( "%d" , & ni ) ; if ( ni == 0 ) { nk += 1 ; } if ( ni == 255 && nk != 0 && r == 0 ) { r = nk ; } } r = ( nk - 2 * r ) / 2 * ( r - 2 ) ; 0 ;
int main ( ) { int n , i , j , an [ 500 ] [ 500 ] , a , b , c , d , e = 0 , f = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & an [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( an [ i ] [ j ] == 0 ) { a = i ; b = j ; e = 1 ; break ; } } if ( e == 1 ) break ; } for ( i = n - 1 ; i >= 0 ; i -- ) { for ( j = n - 1 ; j >= 0 ; j -- ) { if ( an [ i ] [ j ] == 0 ) { c = i ; d = j ; f = 1 ; break ; } } if ( f == 1 ) break ; } int s ; s = ( c - a - 1 ) * ( d - b - 1 ) ; printf ( "%d" , s ) ; return 0 ; }
void main ( ) { int i ; scanf ( "%d" , & i ) ; while ( i ) { printf ( "%d" , i % 10 ) ; i = i / 10 ; } }
int main ( ) { int n ; scanf ( "%d" , & n ) ; if ( n < 10 ) printf ( "%d" , n ) ; else while ( n ) { printf ( "%d" , n % 10 ) ; n = n / 10 ; } return 0 ; }
int main ( ) { int a , b , c , d , e , f ; scanf ( "%d" , & a ) ; if ( a > 9999 ) { b = a / 10000 ; c = ( a / 1000 ) - 10 * b ; d = ( a / 100 ) - 100 * b - 10 * c ; e = ( a / 10 ) - 1000 * b - 100 * c - 10 * d ; f = a - 10000 * b - 1000 * c - 100 * d - 10 * e ; printf ( "%d%d%d%d%d" , f , e , d , c , b ) ; } else if ( a > 999 ) { c = a / 1000 ; d = ( a / 100 ) - 10 * c ; e = ( a / 10 ) - 100 * c - 10 * d ; f = a - 1000 * c - 100 * d - 10 * e ; printf ( "%d%d%d%d" , f , e , d , c ) ; } else if ( a > 99 ) { d = a / 100 ; e = ( a / 10 ) - 10 * d ; f = a - 100 * d - 10 * e ; printf ( "%d%d%d" , f , e , d ) ; } else if ( a > 9 ) { e = ( a / 10 ) ; f = a - 10 * e ; printf ( "%d%d" , f , e ) ; } else { printf ( "%d" , a ) ; } return 0 ; }
int main ( ) { int x , i , result = 1 ; scanf ( "%d" , & x ) ; if ( ! x ) printf ( "0" ) ; while ( x ) { printf ( "%d" , x % 10 ) ; x = x / 10 ; } printf ( "\n" , result ) ; return 0 ; }
int main ( ) { int n , a [ 4 ] ; cin >> n ; if ( n < 10 ) cout << n << endl ; else if ( n >= 10 && n < 100 ) { a [ 1 ] = n % 10 ; a [ 2 ] = ( n / 10 ) % 10 ; cout << a [ 1 ] << a [ 2 ] << endl ; } else if ( n >= 100 && n < 1000 ) { a [ 1 ] = n % 10 ; a [ 2 ] = ( n / 10 ) % 10 ; a [ 3 ] = ( n / 100 ) % 10 ; cout << a [ 1 ] << a [ 2 ] << a [ 3 ] << endl ; } else if ( n >= 1000 && n < 10000 ) { a [ 1 ] = n % 10 ; a [ 2 ] = ( n / 10 ) % 10 ; a [ 3 ] = ( n / 100 ) % 10 ; a [ 4 ] = ( n / 1000 ) % 10 ; cout << a [ 1 ] << a [ 2 ] << a [ 3 ] << a [ 4 ] << endl ; } else if ( n = 10000 ) cout << "00001" << endl ; return 0 ; }
int main ( ) { int a , b ; scanf ( "%d" , & a ) ; for ( ; a != 0 ; a = ( a - ( a % 10 ) ) / 10 ) { b = ( a % 10 ) ; printf ( "%d" , b ) ; } return 0 ; }
int main ( void ) { char a [ 10 ] ; int i = 0 ; int n ; while ( ( a [ i ] = getchar ( ) ) != '\n' ) i ++ ; n = i ; for ( i = n ; i >= 0 ; i -- ) printf ( "%c" , a [ i ] ) ; return 0 ; }
int main ( ) { int n , b , i , k ; cin >> n ; b = n ; if ( b == 0 ) cout << b ; for ( i = 0 ; b >= 1 ; i ++ ) { k = b % 10 ; b = b / 10 ; cout << k ; } return 0 ; }
int main ( ) { int a , b , c , d ; scanf ( "%d" , & a ) ; if ( a == 10000 ) printf ( "00001" ) ; else if ( a >= 1000 ) { b = a % 10 ; a = ( a - b ) / 10 ; c = a % 10 ; a = ( a - c ) / 10 ; d = a % 10 ; a = ( a - d ) / 10 ; printf ( "%d%d%d%d" , b , c , d , a ) ; } else if ( a >= 100 ) { b = a % 10 ; a = ( a - b ) / 10 ; c = a % 10 ; a = ( a - c ) / 10 ; printf ( "%d%d%d" , b , c , a ) ; } else if ( a >= 10 ) { b = a % 10 ; a = ( a - b ) / 10 ; printf ( "%d%d" , b , a ) ; } else printf ( "%d" , a ) ; return 0 ; }
main ( ) { int a ; scanf ( "%d" , & a ) ; if ( a < 10 ) printf ( "%d" , a ) ; else if ( a < 100 ) { int b , c ; b = a / 10 ; c = a - 10 * b ; printf ( "%d%d" , c , b ) ; } else if ( a < 1000 ) { int b , c , d ; b = a / 100 ; c = ( a - 100 * b ) / 10 ; d = a - 100 * b - 10 * c ; printf ( "%d%d%d" , d , c , b ) ; } else if ( a < 10000 ) { int b , c , d , e ; b = a / 1000 ; c = ( a - 1000 * b ) / 100 ; d = ( a - 1000 * b - 100 * c ) / 10 ; e = a - 1000 * b - 100 * c - 10 * d ; printf ( "%d%d%d%d" , e , d , c , b ) ; } }
main ( ) { int sum , len , i ; int a [ 10 ] ; scanf ( "%d" , & sum ) ; if ( sum >= 10000 ) len = 5 ; else if ( sum >= 1000 ) len = 4 ; else if ( sum >= 100 ) len = 3 ; else if ( sum >= 10 ) len = 2 ; else len = 1 ; for ( i = 1 ; i <= len ; i ++ ) { a [ i ] = sum / ( pow ( 10 , ( len - i ) ) ) ; sum = sum - a [ i ] * pow ( 10 , ( len - i ) ) ; } for ( i = 1 ; i <= len ; i ++ ) printf ( "%d" , a [ len - i + 1 ] ) ; }
int main ( ) { int a , b , c , d , e , x ; scanf ( "%d" , & x ) ; e = x / 10000 ; d = ( x - e * 10000 ) / 1000 ; c = ( x - e * 10000 - d * 1000 ) / 100 ; b = ( x - e * 10000 - d * 1000 - c * 100 ) / 10 ; a = x - e * 10000 - d * 1000 - c * 100 - b * 10 ; if ( x < 10 ) printf ( "%d" , a ) ; else if ( x < 100 ) printf ( "%02d" , 10 * a + b ) ; else if ( x < 1000 ) printf ( "%03d" , 100 * a + 10 * b + c ) ; else if ( x < 10000 ) printf ( "%04d" , 1000 * a + 100 * b + 10 * c + d ) ; else if ( x == 10000 ) printf ( "00001" ) ; return 0 ; }
int main ( ) { int n , i , j , k , w , l ; scanf ( "%d" , & n ) ; if ( n - 10 < 0 ) printf ( "%d" , n ) ; else { if ( n - 100 < 0 ) { i = n % 10 ; j = ( n - i ) / 10 ; printf ( "%d%d" , i , j ) ; } else { if ( n - 1000 < 0 ) { i = n % 10 ; j = ( ( n - i ) / 10 ) % 10 ; k = ( n - i - 10 * j ) / 100 ; printf ( "%d%d%d" , i , j , k ) ; } else { if ( n - 10000 < 0 ) { i = n % 10 ; j = ( ( n - i ) % 100 ) / 10 ; k = ( ( n - i - 10 * j ) % 1000 ) / 100 ; w = ( n - i - 10 * j - 100 * k ) / 1000 ; printf ( "%d%d%d%d" , i , j , k , w ) ; } } } } return 0 ; }
int main ( ) { int i = 0 ; char ch [ 100000 ] , tes ; for ( ; ; i ++ ) { ch [ i ] = getchar ( ) ; if ( ch [ i ] == '\n' ) break ; } for ( ; i >= 0 ; i -- ) cout << ch [ i ] ; cout << endl ; return 0 ; }
int main ( ) { int n , i , k , out ; int A [ 5 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; 1 <= 5 ; i ++ ) { if ( n < 1 ) break ; printf ( "%d" , n % 10 ) ; n = n / 10 ; } return 0 ; }
int main ( ) { int num , a , b , c , d ; cin >> num ; a = num / 1000 ; b = ( num - a * 1000 ) / 100 ; c = ( num - a * 1000 - b * 100 ) / 10 ; d = num - a * 1000 - b * 100 - c * 10 ; if ( a != 0 ) cout << d << c << b << a << endl ; else if ( a == 0 && b != 0 ) cout << d << c << b << endl ; else if ( a == 0 && b == 0 && c != 0 ) cout << d << c << endl ; else cout << d << endl ; return 0 ; }
void main ( ) { int x , a , b , c , d ; scanf ( "%d" , & x ) ; a = x % 10 ; b = ( x % 100 - a ) / 10 ; c = ( x % 1000 - b * 10 - a ) / 100 ; d = x / 1000 ; if ( x > 999 && x < 10000 ) printf ( "%d%d%d%d\n" , a , b , c , d ) ; else if ( x > 99 && x < 1000 ) printf ( "%d%d%d\n" , a , b , c ) ; else if ( x > 9 && x < 100 ) printf ( "%d%d\n" , a , b ) ; else if ( x > 0 && x < 10 ) printf ( "%d\n" , a ) ; else if ( x == 0 ) printf ( "0\n" ) ; else if ( x == 10000 ) printf ( "00001\n" ) ; }
int main ( ) { int n ; int a [ 5 ] ; int i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 5 ; i ++ ) { a [ i ] = n % 10 ; n = n / 10 ; } if ( a [ 4 ] == 0 && a [ 3 ] == 0 && a [ 2 ] == 0 && a [ 1 ] == 0 ) printf ( "%d" , a [ 0 ] ) ; else if ( a [ 4 ] == 0 && a [ 3 ] == 0 && a [ 2 ] == 0 ) printf ( "%d%d" , a [ 0 ] , a [ 1 ] ) ; else if ( a [ 4 ] == 0 && a [ 3 ] == 0 ) printf ( "%d%d%d" , a [ 0 ] , a [ 1 ] , a [ 2 ] ) ; else if ( a [ 4 ] == 0 ) printf ( "%d%d%d%d" , a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] ) ; else printf ( "%d%d%d%d%d" , a [ 0 ] , a [ 1 ] , a [ 2 ] , a [ 3 ] , a [ 4 ] ) ; return 0 ; }
int main ( ) { int a , b , c , d , e , f ; scanf ( "%d" , & a ) ; if ( a >= 10000 ) { b = a / 10000 ; c = ( a - 10000 * b ) / 1000 ; d = ( a - 10000 * b - 1000 * c ) / 100 ; e = ( a - 10000 * b - 1000 * c - 100 * d ) / 10 ; f = ( a - 10000 * b - 1000 * c - 100 * d - 10 * e ) ; printf ( "%d%d%d%d%d" , f , e , d , c , b ) ; } else if ( a >= 1000 ) { b = 0 ; c = a / 1000 ; d = ( a - 10000 * b - 1000 * c ) / 100 ; e = ( a - 10000 * b - 1000 * c - 100 * d ) / 10 ; f = ( a - 10000 * b - 1000 * c - 100 * d - 10 * e ) ; printf ( "%d%d%d%d" , f , e , d , c ) ; } else if ( a >= 100 ) { b = 0 ; c = 0 ; d = a / 100 ; e = ( a - 10000 * b - 1000 * c - 100 * d ) / 10 ; f = ( a - 10000 * b - 1000 * c - 100 * d - 10 * e ) ; printf ( "%d%d%d" , f , e , d ) ; } else if ( a >= 10 ) { b = 0 ; c = 0 ; d = 0 ; e = a / 10 ; f = ( a - 10000 * b - 1000 * c - 100 * d - 10 * e ) ; printf ( "%d%d" , f , e ) ; } else { b = 0 ; c = 0 ; d = 0 ; e = 0 ; f = a ; printf ( "%d" , f ) ; } }
int main ( ) { int a , b , c , d , e ; scanf ( "%d" , & a ) ; if ( a > 9999 ) printf ( "00001" ) ; else if ( a > 999 ) { b = a / 1000 ; c = ( a - b * 1000 ) / 100 ; d = ( a - b * 1000 - c * 100 ) / 10 ; e = ( a - b * 1000 - c * 100 - d * 10 ) ; printf ( "%d%d%d%d" , e , d , c , b ) ; } else if ( a > 99 ) { b = a / 100 ; c = ( a - b * 100 ) / 10 ; d = ( a - b * 100 - c * 10 ) ; printf ( "%d%d%d" , d , c , b ) ; } else if ( a > 9 ) { b = a / 10 ; c = ( a - b * 10 ) ; printf ( "%d%d" , c , b ) ; } else printf ( "%d" , a ) ; return 0 ; }
int main ( ) { int a = 0 , n = 0 , i = 0 , j = n - 1 ; cin >> a ; if ( a == 0 ) cout << "0" ; else if ( a != 0 ) { while ( a >= pow ( 10 , n ) ) n = n + 1 ; int c [ 10 ] = { 0 } ; for ( i = 0 ; i <= n - 1 ; i ++ ) c [ i ] = a % ( int ) ( pow ( 10 , i + 1 ) ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) c [ i ] = c [ i ] / pow ( 10 , i ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) cout << c [ i ] ; } return 0 ; }
int main ( ) { int a , b , c , d , e ; scanf ( "%d" , & a ) ; b = a / 1000 ; c = ( a - b * 1000 ) / 100 ; d = ( a - b * 1000 - c * 100 ) / 10 ; e = a - b * 1000 - c * 100 - d * 10 ; if ( 1000 <= a && a <= 10000 ) printf ( "%d%d%d%d" , e , d , c , b ) ; else if ( 100 <= a && a < 1000 ) printf ( "%d%d%d" , e , d , c ) ; else if ( 10 <= a && a < 100 ) printf ( "%d%d" , e , d ) ; else printf ( "%d" , e ) ; return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; if ( n == 0 ) printf ( "0" ) ; while ( n > 0 ) { printf ( "%d" , n % 10 ) ; n /= 10 ; } return 0 ; }
int main ( ) { int a [ 10 ] , n , flag ; flag = 0 ; scanf ( "%d" , & n ) ; if ( n == 0 ) printf ( "0" ) ; else { while ( n != 0 ) { flag ++ ; a [ flag ] = n % 10 ; n = n / 10 ; } for ( int i = 1 ; i <= flag ; i ++ ) { printf ( "%d" , a [ i ] ) ; } } return 0 ; }
int main ( ) { int a , b , c , d , e ; scanf ( "%d" , & a ) ; if ( a < 10 ) { b = a ; c = 0 ; d = 0 ; e = 0 ; printf ( "%d" , b ) ; } else { if ( a < 100 ) { b = a / 10 ; c = a % 10 ; d = 0 ; e = 0 ; printf ( "%d%d" , c , b ) ; } else { if ( a < 1000 ) { b = a / 100 ; c = ( a % 100 ) / 10 ; d = a % 10 ; e = 0 ; printf ( "%d%d%d" , d , c , b ) ; } else { if ( a < 10000 ) { b = a / 1000 ; c = ( a % 1000 ) / 100 ; d = ( a % 100 ) / 10 ; e = a % 10 ; printf ( "%d%d%d%d" , e , d , c , b ) ; } } } } return 0 ; }
int main ( ) { int n , i , a [ 1000 ] ; scanf ( "%d" , & n ) ; if ( n == 0 ) printf ( "0" ) ; for ( i = 1 ; n > 0 ; i ++ ) { a [ i ] = n % 10 ; printf ( "%d" , a [ i ] ) ; n = n / 10 ; } return 0 ; }
void reverse ( ) { int k ; if ( ( k = getchar ( ) ) == '\n' ) return ; reverse ( ) ; printf ( "%c" , k ) ; } int main ( ) { reverse ( ) ; return 0 ; }
int main ( ) { int n , i , s = 0 , a , b ; scanf ( "%d" , & n ) ; if ( n % 10 == 0 ) { if ( n == 0 ) printf ( "" ) ; else { printf ( "0" ) ; for ( n = n / 10 ; n % 10 == 0 ; n = n / 10 ) { printf ( "0" ) ; } for ( ; n >= 1 ; n = n / 10 ) { i = n % 10 ; s = s * 10 + i ; } } } else for ( ; n >= 1 ; n = n / 10 ) { i = n % 10 ; s = s * 10 + i ; } printf ( "%d" , s ) ; return 0 ; }
int main ( ) { int i = 0 , j ; char a [ 100 ] ; while ( ( a [ i ] = cin . get ( ) ) != '\n' ) { i ++ ; } for ( j = i - 1 ; j >= 0 ; j -= 1 ) { cout << a [ j ] ; } return 0 ; }
int main ( ) { int i ; scanf ( "%d" , & i ) ; do { printf ( "%d" , i % 10 ) ; i = i / 10 ; } while ( i != 0 ) ; return 0 ; }
int main ( ) { int N , X , a , b , c , d , e ; scanf ( "%d" , & N ) ; if ( N > 9999 ) X = 5 ; else if ( N > 999 ) X = 4 ; else if ( N > 99 ) X = 3 ; else if ( N > 9 ) X = 2 ; else X = 1 ; a = N / 10000 ; b = ( N - 10000 * a ) / 1000 ; c = ( N - 10000 * a - 1000 * b ) / 100 ; d = ( N - 10000 * a - 1000 * b - 100 * c ) / 10 ; e = ( N - 10000 * a - 1000 * b - 100 * c - 10 * d ) ; switch ( X ) { case 5 : printf ( "%d%d%d%d%d\n" , e , d , c , b , a ) ; break ; case 4 : printf ( "%d%d%d%d\n" , e , d , c , b ) ; break ; case 3 : printf ( "%d%d%d\n" , e , d , c ) ; break ; case 2 : printf ( "%d%d\n" , e , d ) ; break ; case 1 : printf ( "%d\n" , e ) ; break ; } return 0 ; }
int main ( ) { int n ; cin >> n ; if ( n == 0 ) cout << n ; else while ( n > 0 ) { cout << n % 10 ; n = n / 10 ; } cout << endl ; return 0 ; }
int main ( ) { int a = 0 , b = 0 ; cin >> a ; if ( a != 0 ) while ( a != 0 ) { b = a % 10 ; cout << b ; a = a / 10 ; } else cout << 0 ; }
int main ( ) { int n , a [ 5 ] ; cin >> n ; a [ 0 ] = n % 10 , a [ 1 ] = ( n / 10 ) % 10 , a [ 2 ] = ( n / 100 ) % 10 , a [ 3 ] = ( n / 1000 ) % 10 , a [ 4 ] = ( n / 10000 ) % 10 ; if ( n < 10 ) { cout << a [ 0 ] ; } else if ( n < 100 && n >= 10 ) { cout << a [ 0 ] << a [ 1 ] ; } else if ( n < 1000 && n >= 100 ) { cout << a [ 0 ] << a [ 1 ] << a [ 2 ] ; } else if ( n < 10000 && n >= 1000 ) { cout << a [ 0 ] << a [ 1 ] << a [ 2 ] << a [ 3 ] ; } else { cout << a [ 0 ] << a [ 1 ] << a [ 2 ] << a [ 3 ] << a [ 4 ] ; } }
void main ( ) { int a , c , d , e , f , g ; scanf ( "%d" , & a ) ; if ( a == 10000 ) printf ( "00001" ) ; else if ( a >= 1000 && a <= 9999 ) { c = a / 1000 ; d = ( a - 1000 * c ) / 100 ; e = ( a - 1000 * c - d * 100 ) / 10 ; f = a - 1000 * c - d * 100 - e * 10 ; g = f * 1000 + e * 100 + d * 10 + c ; printf ( "%d%d%d%d" , f , e , d , c ) ; } else if ( a >= 100 && a <= 999 ) { c = 0 ; d = ( a - 1000 * c ) / 100 ; e = ( a - 1000 * c - d * 100 ) / 10 ; f = a - 1000 * c - d * 100 - e * 10 ; g = f * 100 + e * 10 + d * 1 + c ; printf ( "%d%d%d" , f , e , d ) ; } else if ( a >= 10 && a <= 99 ) { c = 0 ; d = 0 ; e = ( a - 1000 * c - d * 100 ) / 10 ; f = a - 1000 * c - d * 100 - e * 10 ; g = f * 10 + e ; printf ( "%d%d" , f , e ) ; } else { g = a ; printf ( "%d" , g ) ; } }
int main ( ) { int i , a , b , c , d , e , g ; scanf ( "%d " , & i ) ; if ( ( i >= 10 ) && ( i < 100 ) ) { a = i / 1000 ; b = i % 10 ; g = 10 * b + a ; printf ( "%d" , b ) ; printf ( "%d" , a ) ; } if ( ( i > 0 ) && ( i < 10 ) ) { g = i ; printf ( "%d" , i ) ; } if ( ( i >= 100 ) && ( i < 1000 ) ) { a = i / 100 ; b = ( i / 10 ) % 10 ; c = i % 10 ; g = 100 * c + 10 * b + a ; printf ( "%d" , c ) ; printf ( "%d" , b ) ; printf ( "%d" , a ) ; } if ( ( i >= 1000 ) && ( i < 10000 ) ) { a = i / 1000 ; b = ( i / 100 ) % 10 ; c = ( i / 10 ) % 10 ; d = i % 10 ; printf ( "%d" , d ) ; printf ( "%d" , c ) ; printf ( "%d" , b ) ; printf ( "%d" , a ) ; } return 0 ; }
main ( ) { int a , b , c ; scanf ( "%d" , & a ) ; b = a / 10000 ; if ( b ) c = 5 ; else { b = a / 1000 ; if ( b ) c = 4 ; else { b = a / 100 ; if ( b ) c = 3 ; else { b = a / 10 ; if ( b ) c = 2 ; else c = 1 ; } } } switch ( c ) { case 5 : printf ( "%d%d%d%d%d\n" , a % 10 , a % 100 / 10 , a % 1000 / 100 , a % 10000 / 1000 , a / 10000 ) ; break ; case 4 : printf ( "%d%d%d%d\n" , a % 10 , a % 100 / 10 , a % 1000 / 100 , a / 1000 ) ; break ; case 3 : printf ( "%d%d%d\n" , a % 10 , a % 100 / 10 , a / 100 ) ; break ; case 2 : printf ( "%d%d\n" , a % 10 , a / 10 ) ; break ; case 1 : printf ( "%d\n" , a ) ; } return 0 ; }
int main ( ) { int num , a , b , c , d ; scanf ( "%d" , & num ) ; a = num / 1000 ; b = ( num - a * 1000 ) / 100 ; c = ( num - a * 1000 - b * 100 ) / 10 ; d = num - a * 1000 - b * 100 - c * 10 ; if ( num == 10000 ) printf ( "1\n" ) ; if ( num > 999 ) printf ( "%d%d%d%d\n" , d , c , b , a ) ; else if ( num > 99 ) printf ( "%d%d%d\n" , d , c , b ) ; else if ( num > 9 ) printf ( "%d%d\n" , d , c ) ; else printf ( "%d\n" , d ) ; return 0 ; }
int main ( ) { char ch [ 10 ] ; int n = 0 ; while ( cin >> ch [ n ] ) { n ++ ; } for ( int i = n - 1 ; i >= 0 ; i -- ) cout << ch [ i ] ; return 0 ; }
int main ( ) { int a , b , c ; cin >> a ; for ( int i = 1 ; ; i ++ ) { b = a % 10 ; cout << b ; c = a / 10 ; if ( c == 0 ) break ; a = c ; } }
int main ( ) { int n , a , b , c , d ; scanf ( "%d" , & n ) ; if ( n < 10 ) { printf ( "%d" , n ) ; } if ( ( n > 9 ) && ( n < 100 ) ) { a = n / 10 ; b = n % 10 ; printf ( "%d%d" , b , a ) ; } if ( ( n > 99 ) && ( n < 1000 ) ) { a = n / 100 ; b = ( n - a * 100 ) / 10 ; c = n % 10 ; printf ( "%d%d%d" , c , b , a ) ; } if ( n > 999 ) { a = n / 1000 ; b = ( n - a * 1000 ) / 100 ; c = ( n - a * 1000 - b * 100 ) / 10 ; d = n % 10 ; printf ( "%d%d%d%d" , d , c , b , a ) ; } return 0 ; }
int main ( int argc ) { int i , n , c , b , a [ 10 ] ; cin >> n ; b = 1 ; i = 0 ; while ( b != 0 ) { a [ i ] = n % 10 ; b = n / 10 ; n = b ; i ++ ; } c = i ; i = 0 ; while ( i < c ) { cout << a [ i ] ; i ++ ; } return 0 ; }
int main ( ) { int n , s = 0 , a , i , j = 0 ; scanf ( "%d" , & n ) ; if ( n == 0 ) { printf ( "0" ) ; } else { for ( i = 1 ; i <= 5 ; i ++ ) { a = n % 10 ; if ( a == 0 ) { j = j + 1 ; } n = n / 10 ; s = s * 10 + a ; if ( n == 0 ) { break ; } } for ( i = 0 ; i < j ; i ++ ) { if ( j == 0 ) { break ; } printf ( "0" ) ; } printf ( "%d" , s ) ; } return 0 ; }
int main ( ) { int a [ 10 ] , n = 0 , k = 1 , i = 0 , b = 1 ; cin >> n ; if ( ! n ) cout << n << endl ; for ( i = 0 ; n != 0 ; i ++ ) { a [ i ] = n % 10 ; cout << a [ i ] ; n = ( n - a [ i ] ) / 10 ; } return 0 ; }
main ( ) { int a ; scanf ( "%d" , & a ) ; int x , y ; x = a % 10 ; y = a / 10 ; printf ( "%d" , x ) ; while ( y > 0 ) { x = y % 10 ; y = y / 10 ; printf ( "%d" , x ) ; } }
int main ( ) { int n , i ; cin >> n ; if ( n == 0 ) cout << 0 ; else { for ( i = 0 ; i <= 5 ; i ++ ) { if ( n / pow ( 10.0 , i * 1.0 ) < 1 ) break ; } for ( int j = 1 ; j <= i ; j ++ ) { int k = n % 10 ; cout << k ; n = ( n - k ) / 10 ; } cout << endl ; } return 0 ; }
int main ( ) { int a [ 5 ] , b [ 5 ] , n , i ; cin >> n ; if ( n == 10000 ) { cout << 00001 << endl ; } else { b [ 0 ] = n ; for ( i = 0 ; i < 4 ; i ++ ) { a [ i ] = b [ i ] / pow ( 10.0 , ( double ) ( 3 - i ) ) ; b [ i + 1 ] = b [ i ] % ( int ) ( pow ( 10.0 , ( double ) ( 3 - i ) ) ) ; } if ( a [ 0 ] != 0 ) { cout << a [ 3 ] << a [ 2 ] << a [ 1 ] << a [ 0 ] << endl ; } else if ( a [ 1 ] != 0 ) { cout << a [ 3 ] << a [ 2 ] << a [ 1 ] << endl ; } else if ( a [ 2 ] != 0 ) { cout << a [ 3 ] << a [ 2 ] << endl ; } else { cout << a [ 3 ] << endl ; } } return 0 ; }
int main ( ) { int a , n , b , c , d , e , f , g ; scanf ( "%d" , & n ) ; b = 0 ; a = n ; if ( n == 0 ) printf ( "0" ) ; else while ( a > 0 ) { a = ( int ) ( a / 10 ) ; b = b + 1 ; } c = n % 10 ; d = ( int ) ( n / 10 ) % 10 ; e = ( int ) ( n / 100 ) % 10 ; f = ( int ) ( n / 1000 ) % 10 ; g = ( int ) ( n / 10000 ) ; switch ( b ) { case 1 : printf ( "%d\n" , n ) ; break ; case 2 : printf ( "%d%d\n" , c , d ) ; break ; case 3 : printf ( "%d%d%d\n" , c , d , e ) ; break ; case 4 : printf ( "%d%d%d%d\n" , c , d , e , f ) ; break ; case 5 : printf ( "%d%d%d%d%d\n" , c , d , e , f , g ) ; break ; } return 0 ; }
int main ( ) { int s , a , b , c , d , e ; scanf ( "%d" , & s ) ; a = s / 10000 ; b = ( s - 10000 * a ) / 1000 ; c = ( s - 10000 * a - 1000 * b ) / 100 ; d = ( s - 10000 * a - 1000 * b - 100 * c ) / 10 ; e = ( s - 10000 * a - 1000 * b - 100 * c - 10 * d ) ; if ( a != 0 ) printf ( "%d%d%d%d%d" , e , d , c , b , a ) ; else if ( b != 0 ) printf ( "%d%d%d%d" , e , d , c , b ) ; else if ( c != 0 ) printf ( "%d%d%d" , e , d , c ) ; else if ( b != 0 ) printf ( "%d%d" , e , d ) ; else if ( e != 0 ) printf ( "%d" , e ) ; else printf ( "0" ) ; return 0 ; }
int main ( ) { int i , a [ 6 ] , n , m , q ; int b = 0 ; cin >> n ; for ( i = 1 ; ; i ++ ) { m = n / 10 ; q = n - 10 * m ; a [ i ] = q ; n = m ; b ++ ; if ( n == 0 ) break ; } for ( i = 1 ; i <= b ; i ++ ) cout << a [ i ] ; cout << endl ; return 0 ; }
int main ( ) { int a , b , c , d , n ; scanf ( "%d" , & n ) ; if ( n == 10000 ) { puts ( "00001" ) ; } else if ( n >= 1000 ) { a = n / 1000 , b = n / 100 - a * 10 , c = n / 10 - a * 100 - b * 10 , d = n - 1000 * a - 100 * b - 10 * c ; printf ( "%d%d%d%d" , d , c , b , a ) ; } else if ( n >= 100 ) { a = n / 100 , b = n / 10 - a * 10 , c = n - a * 100 - b * 10 ; printf ( "%d%d%d" , c , b , a ) ; } else if ( n >= 10 ) { a = n / 10 , b = n - 10 * a ; printf ( "%d%d" , b , a ) ; } else printf ( "%d" , n ) ; }
void main ( ) { int n = 0 , num , m , a , b ; scanf ( "%d" , & num ) ; m = num ; do { n = n * 10 + num % 10 ; num = num / 10 ; } while ( num != 0 ) ; int weishu ( int x ) ; a = weishu ( m ) ; b = weishu ( n ) ; if ( a - b == 4 ) printf ( "0000%d\n" , n ) ; else if ( a - b == 3 ) printf ( "000%d\n" , n ) ; else if ( a - b == 2 ) printf ( "00%d\n" , n ) ; else if ( a - b == 1 ) printf ( "0%d\n" , n ) ; else printf ( "%d\n" , n ) ; } int weishu ( int x ) { int y ; if ( x >= 10000 ) y = 5 ; else if ( x >= 1000 ) y = 4 ; else if ( x >= 100 ) y = 3 ; else if ( x >= 10 ) y = 2 ; else y = 1 ; return ( y ) ; }
int main ( ) { int n , a [ 5 ] ; cin >> n ; for ( int i = 0 ; i < 5 ; i ++ ) { a [ i ] = n % 10 ; n = n / 10 ; cout << a [ i ] ; if ( n == 0 ) break ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int a , c , d ; scanf ( "%d" , & a ) ; c = a ; while ( c >= 1 ) { d = c - ( c / 10 ) * 10 ; c = c / 10 ; printf ( "%d" , d ) ; } if ( a == 0 ) printf ( "0" ) ; return 0 ; }
int main ( ) { int n ; cin >> n ; int a [ 5 ] ; int count = 1 ; for ( int i = 0 ; i < 5 ; i ++ ) { a [ i ] = n % 10 ; if ( n >= 10 ) { n = ( n - a [ i ] ) / 10 ; count ++ ; } } for ( int i = 0 ; i < count ; i ++ ) { cout << a [ i ] ; } return 0 ; }
int main ( ) { int i , j , n , a [ 5 ] ; scanf ( "%d" , & n ) ; i = 1 ; if ( n == 0 ) printf ( "0" ) ; while ( n > 0 ) { a [ i ] = n % 10 ; n = n / 10 ; i = i + 1 ; } for ( j = 1 ; j < i ; j ++ ) printf ( "%d" , a [ j ] ) ; return 0 ; }
void main ( ) { int n = 0 ; int n_1 = 0 , i = 0 ; int len = 0 ; int a [ 6 ] = { 0 } ; scanf ( "%d" , & n ) ; n_1 = n ; for ( ; n / 10 > 0 ; ) { n = n / 10 ; len ++ ; } len ++ ; for ( i = 0 ; i < len ; i ++ ) { a [ i ] = n_1 % 10 ; n_1 = n_1 / 10 ; } for ( i = 0 ; i < len ; i ++ ) { printf ( "%d" , a [ i ] ) ; } }
int main ( ) { int a , b , c , d , n ; scanf ( "%d" , & n ) ; a = n / 1000 ; b = ( n - a * 1000 ) / 100 ; c = ( n - a * 1000 - b * 100 ) / 10 ; d = n - a * 1000 - b * 100 - c * 10 ; if ( a == 0 ) { if ( b == 0 ) { if ( c == 0 ) { printf ( "%d\n" , d ) ; } else { printf ( "%d%d\n" , d , c ) ; } } else { printf ( "%d%d%d\n" , d , c , b ) ; } } else { printf ( "%d%d%d%d\n" , d , c , b , a ) ; } return 0 ; }
void f ( int n ) { cout << n % 10 ; n = n / 10 ; if ( n ) f ( n ) ; } int main ( ) { int n ; cin >> n ; f ( n ) ; return 0 ; }
int main ( ) { int n , i , an [ 10 ] ; scanf ( "%d" , & n ) ; int j = 0 ; for ( i = n ; i > 0 ; i = i / 10 ) { an [ j ] = i % 10 ; j ++ ; } for ( i = 0 ; i < j ; i ++ ) { printf ( "%d" , an [ i ] ) ; } return 0 ; }
int main ( ) { int n , decade , hundred , thousand ; cin >> n ; cout << n - n / 10 * 10 ; if ( n >= 10 ) { decade = n / 10 ; cout << decade - decade / 10 * 10 ; } if ( n >= 100 ) { hundred = decade / 10 ; cout << hundred - hundred / 10 * 10 ; } if ( n >= 1000 ) { thousand = hundred / 10 ; cout << thousand - thousand / 10 * 10 ; } if ( n == 10000 ) cout << "1" << endl ; return 0 ; }
int main ( ) { int num ; scanf ( "%d" , & num ) ; if ( num == 10000 ) printf ( "00001\n" ) ; else if ( num > 999 ) printf ( "%d%d%d%d\n" , num % 10 , num % 100 / 10 , num / 100 % 10 , num / 1000 % 10 ) ; else if ( num > 99 ) printf ( "%d%d%d\n" , num % 10 , num % 100 / 10 , num / 100 % 10 ) ; else if ( num > 9 ) printf ( "%d%d\n" , num % 10 , num % 100 / 10 ) ; else printf ( "%d\n" , num ) ; return 0 ; }
int main ( ) { int n , a , b , c , d ; cin >> n ; if ( n == 10000 ) cout << "00001" << endl ; else { if ( n / 1000 >= 1 ) { a = n / 1000 ; b = ( n - a * 1000 ) / 100 ; c = ( n - a * 1000 - b * 100 ) / 10 ; d = n - a * 1000 - b * 100 - c * 10 ; cout << d << c << b << a << endl ; } else { if ( n / 100 >= 1 ) { b = n / 100 ; c = ( n - b * 100 ) / 10 ; d = n - b * 100 - c * 10 ; cout << d << c << b << endl ; } else { if ( n / 10 >= 1 ) { c = n / 10 ; d = n - c * 10 ; cout << d << c << endl ; } else cout << n << endl ; } } } return 0 ; }
int main ( ) { int a , b , c , d , e , f , g , n ; scanf ( "%d" , & n ) ; if ( n < 10 ) printf ( "%d" , n ) ; else if ( n < 100 ) printf ( "%d%d" , n % 10 , n / 10 ) ; else if ( n < 1000 ) { a = n / 100 ; b = n / 10 - 10 * a ; c = n % 10 ; printf ( "%d%d%d" , c , b , a ) ; } else if ( n < 10000 ) { d = n / 1000 ; e = n / 100 - 10 * d ; f = n / 10 - d * 100 - e * 10 ; g = n % 10 ; printf ( "%d%d%d%d" , g , f , e , d ) ; } else printf ( "over" ) ; return 0 ; }
int main ( ) { int n , a , b , c , d , e , f , g , h , i ; scanf ( "%d" , & n ) ; if ( n < 10 ) printf ( "%d" , n ) ; else if ( n < 100 ) { a = n % 10 ; b = n / 10 ; printf ( "%d%d" , a , b ) ; } else if ( n < 1000 ) { c = n % 10 , e = n / 100 ; d = ( n / 10 ) % 10 ; printf ( "%d%d%d" , c , d , e ) ; } else if ( n < 10000 ) { f = n % 10 ; g = ( n % 100 ) / 10 ; h = ( n / 100 ) % 10 ; i = n / 1000 ; printf ( "%d%d%d%d" , f , g , h , i ) ; } return 0 ; }
void main ( ) { int x , a , b , c , d , e , m , n , o , p ; scanf ( "%d" , & x ) ; m = x / 10000 ; n = x / 1000 ; o = x / 100 ; p = x / 10 ; if ( m != 0 ) { a = m ; b = n - 10 * a ; c = o - 100 * a - 10 * b ; d = p - 1000 * a - 100 * b - 10 * c ; e = x % 10 ; printf ( "%d%d%d%d%d" , e , d , c , b , a ) ; } else if ( n != 0 ) { a = n ; b = o - 10 * a ; c = p - 100 * a - 10 * b ; d = x % 10 ; printf ( "%d%d%d%d" , d , c , b , a ) ; } else if ( o != 0 ) { a = o ; b = p - 10 * o ; c = x % 10 ; printf ( "%d%d%d" , c , b , a ) ; } else if ( p != 0 ) { a = p ; b = x % 10 ; printf ( "%d%d" , b , a ) ; } else { printf ( "%d" , x ) ; } }
int main ( ) { int n , a , b , c , d , e ; scanf ( "%d" , & n ) ; while ( n != 0 ) { a = n % 10 ; printf ( "%d" , a ) ; n = n / 10 ; } return 0 ; }
int main ( ) { int n , i , w , c ; scanf ( "%d" , & n ) ; if ( n > 9999 ) printf ( "00001" ) ; else if ( n > 999 ) w = 4 ; else if ( n > 99 ) w = 3 ; else if ( n > 9 ) w = 2 ; else printf ( "%d" , n ) ; for ( i = 1 ; i < w + 1 ; i ++ ) { c = n % 10 ; n = n / 10 ; printf ( "%d" , c ) ; } return 0 ; }
void main ( ) { int a , b , c , d , e , x , y = 0 ; scanf ( "%d" , & a ) ; if ( a < 10 ) { printf ( "%d" , a ) ; } else if ( a == 10 ) { b = 0 ; c = 1 ; printf ( "%d%d" , b , c ) ; } else if ( a > 10 && a < 100 ) { b = a / 10 ; c = a - b * 10 ; x = c * 10 + b ; printf ( "%d" , x ) ; } else if ( a == 100 ) { b = 1 ; printf ( "%d%d%d" , y , y , b ) ; } else if ( a > 100 && a < 1000 ) { b = a / 100 ; c = ( a - 100 * b ) / 10 ; d = a - 100 * b - 10 * c ; x = d * 100 + c * 10 + b ; printf ( "%d" , x ) ; } else if ( a == 1000 ) { b = 1 ; printf ( "%d%d%d%d" , y , y , y , b ) ; } else if ( a > 1000 && a < 10000 ) { b = a / 1000 ; c = ( a - b * 1000 ) / 100 ; d = ( a - b * 1000 - c * 100 ) / 10 ; e = a - b * 1000 - c * 100 - d * 10 ; x = e * 1000 + d * 100 + c * 10 + b ; printf ( "%d" , x ) ; } else if ( a == 10000 ) { b = 1 ; printf ( "%d%d%d%d%d" , y , y , y , y , b ) ; } return 0 ; }
int main ( ) { int t , a [ 10 ] , m , i ; scanf ( "%d" , & t ) ; for ( i = 0 ; i <= 4 ; i ++ ) { a [ i ] = t % 10 ; t = t / 10 ; } for ( i = 4 ; i >= 0 ; i -- ) { if ( a [ i ] != 0 ) { m = i ; break ; } } for ( i = 0 ; i <= m ; i ++ ) { printf ( "%d" , a [ i ] ) ; } return 0 ; }
int main ( ) { int a , g , s , b , q , o = 0 , p = 1 ; scanf ( "%d" , & a ) ; if ( a == 10000 ) printf ( "%d%d%d%d%d\n" , o , o , o , o , p ) ; { if ( a <= 10 ) printf ( "%d\n" , a ) ; else if ( a < 100 ) { s = ( a % 100 ) / 10 ; g = a % 10 ; printf ( "%d%d\n" , g , s ) ; } else if ( a < 1000 ) { b = ( a % 1000 ) / 100 ; s = ( a % 100 ) / 10 ; g = a % 10 ; printf ( "%d%d%d\n" , g , s , b ) ; } else if ( a < 10000 ) { q = ( a % 10000 ) / 1000 ; b = ( a % 1000 ) / 100 ; s = ( a % 100 ) / 10 ; g = a % 10 ; printf ( "%d%d%d%d\n" , g , s , b , q ) ; } } return 0 ; }
int main ( ) { int n , a , b , c , d , e ; scanf ( "%d" , & n ) ; if ( n == 100 ) { printf ( "001" ) ; } else if ( n >= 1 && n <= 9 ) { printf ( "%d" , n ) ; } else if ( n >= 10 && n <= 99 ) { a = n % 10 ; b = n / 10 ; c = a * 10 + b ; d = e = 0 ; printf ( "%d" , c ) ; } else if ( n > 100 && n <= 999 ) { a = n % 100 ; b = a % 10 ; c = a / 10 ; d = n / 100 ; e = b * 100 + c * 10 + d ; printf ( "%d" , e ) ; } else if ( n >= 1000 && n <= 9999 ) { a = n % 10 ; b = ( n % 100 - a ) / 10 ; c = n % 1000 / 100 ; d = n / 1000 ; e = a * 1000 + b * 100 + c * 10 + d ; printf ( "%d" , e ) ; } else { printf ( "error" ) ; } return 0 ; }
int main ( ) { int k , i ; char a [ 6 ] ; for ( i = 1 ; i <= 5 ; i ++ ) { a [ i ] = getchar ( ) ; if ( a [ i ] == '\n' ) break ; } i = i - 1 ; for ( k = i ; k >= 1 ; k -- ) printf ( "%c" , a [ k ] ) ; return 0 ; }
int main ( ) { int a , r1 , r2 , r3 , r4 , r5 ; double b ; scanf ( "%d" , & a ) ; b = ( double ) a / 10000 ; if ( b >= 1 ) { r5 = a / 10000 ; r4 = ( a - 10000 * r5 ) / 1000 ; r3 = ( a - 10000 * r5 - 1000 * r4 ) / 100 ; r2 = ( a - 10000 * r5 - 1000 * r4 - 100 * r3 ) / 10 ; r1 = a - 10000 * r5 - 1000 * r4 - 100 * r3 - 10 * r2 ; printf ( "%d%d%d%d%d\n" , r1 , r2 , r3 , r4 , r5 ) ; } else if ( b >= 0.1 ) { r4 = a / 1000 ; r3 = ( a - 1000 * r4 ) / 100 ; r2 = ( a - 1000 * r4 - 100 * r3 ) / 10 ; r1 = a - 1000 * r4 - 100 * r3 - 10 * r2 ; printf ( "%d%d%d%d\n" , r1 , r2 , r3 , r4 ) ; } else if ( b >= 0.01 ) { r3 = a / 100 ; r2 = ( a - 100 * r3 ) / 10 ; r1 = a - 100 * r3 - 10 * r2 ; printf ( "%d%d%d\n" , r1 , r2 , r3 ) ; } else if ( b >= 0.001 ) { r2 = a / 10 ; r1 = a - 10 * r2 ; printf ( "%d%d\n" , r1 , r2 ) ; } else printf ( "%d\n" , a ) ; return 0 ; }
int main ( ) { int a , b , c , d , f ; scanf ( "%d" , & a ) ; if ( a / 10 == 0 ) { printf ( "%d" , a ) ; } else if ( a / 100 == 0 ) { b = a / 10 ; c = a % 10 ; printf ( "%d%d" , c , b ) ; } else if ( a / 1000 == 0 ) { b = a / 100 ; c = ( a - b * 100 ) / 10 ; d = a % 10 ; printf ( "%d%d%d" , d , c , b ) ; } else if ( a / 10000 == 0 ) { b = a / 1000 ; c = ( a - b * 1000 ) / 100 ; d = ( a - b * 1000 - c * 100 ) / 10 ; f = a % 10 ; printf ( "%d%d%d%d" , f , d , c , b ) ; } return 0 ; }
int main ( ) { int a [ 5 ] , b = 0 ; do { a [ b ] = getchar ( ) ; b ++ ; } while ( b < 5 ) ; if ( a [ 1 ] == '\n' ) printf ( "%c" , a [ 0 ] ) ; else if ( a [ 2 ] == '\n' ) printf ( "%c%c" , a [ 1 ] , a [ 0 ] ) ; else if ( a [ 3 ] == '\n' ) printf ( "%c%c%c" , a [ 2 ] , a [ 1 ] , a [ 0 ] ) ; else if ( a [ 4 ] == '\n' ) printf ( "%c%c%c%c" , a [ 3 ] , a [ 2 ] , a [ 1 ] , a [ 0 ] ) ; else printf ( "00001" ) ; return 0 ; }
int main ( ) { int a , b [ 5 ] , n , i ; scanf ( "%d" , & a ) ; if ( a != 0 ) { n = log10 ( a ) + 1 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { b [ i ] = ( int ) ( a / pow ( 10 , i ) ) % 10 ; } for ( i = 0 ; i <= n - 1 ; i ++ ) printf ( "%d" , b [ i ] ) ; printf ( "\n" ) ; } else printf ( "0" ) ; return 0 ; }
int main ( ) { int a , b , c , d , x , y ; scanf ( "%d" , & x ) ; a = x / 1000 ; b = ( x - 1000 * a ) / 100 ; c = ( x - 1000 * a - 100 * b ) / 10 ; d = x - 1000 * a - 100 * b - 10 * c ; if ( a == 0 ) { y = d * 100 + c * 10 + b ; if ( b == 0 ) { y = d * 10 + c ; if ( c == 0 ) y = d ; } } else y = d * 1000 + c * 100 + b * 10 + a ; if ( d != 0 ) printf ( "%d" , y ) ; if ( ( d == 0 ) && ( c != 0 ) ) printf ( "0%d" , y ) ; if ( ( d == 0 ) && ( c == 0 ) && ( b != 0 ) ) printf ( "00%d" , y ) ; if ( ( d == 0 ) && ( c == 0 ) && ( b == 0 ) ) printf ( "000%d" , y ) ; return 0 ; }
int main ( ) { int n , m = 0 ; cin >> n ; if ( n == 0 ) cout << "0" << endl ; else { for ( int i = 4 ; i >= 0 ; i -- ) { if ( floor ( n / pow ( 10.0 , i ) ) != 0 ) { if ( i >= m ) { m = i ; } } } int p [ m + 2 ] , q [ m + 1 ] ; for ( int j = 0 ; j < m + 2 ; j ++ ) { p [ j ] = n % ( int ) pow ( 10.0 , j ) ; } for ( int k = 0 ; k < m + 1 ; k ++ ) { q [ k ] = ( p [ m + 1 - k ] - p [ m - k ] ) / ( int ) pow ( 10.0 , m - k ) ; } for ( int t = 0 ; t < m + 1 ; t ++ ) { cout << q [ m - t ] ; } } return 0 ; }
int main ( ) { int a , b ; scanf ( "%d" , & a ) ; b = 0 ; while ( a ) { b = a % 10 ; printf ( "%d" , b ) ; a = a / 10 ; } return 0 ; }
int main ( ) { int i , a , b , c , d , e ; scanf ( "%d" , & i ) ; a = i / 10000 ; b = ( i - a * 10000 ) / 1000 ; c = ( i - 10000 * a - 1000 * b ) / 100 ; d = ( i - 10000 * a - 1000 * b - 100 * c ) / 10 ; e = i - 10000 * a - 1000 * b - 100 * c - 10 * d ; if ( a == 0 && b == 0 && c == 0 && d == 0 ) printf ( "%d\n" , e ) ; else if ( a == 0 && b == 0 && c == 0 ) printf ( "%d%d\n" , e , d ) ; else if ( a == 0 && b == 0 ) printf ( "%d%d%d\n" , e , d , c ) ; else if ( a == 0 ) printf ( "%d%d%d%d\n" , e , d , c , b ) ; else printf ( "%d%d%d%d%d\n" , e , d , c , b , a ) ; }
void main ( ) { int sum = 0 , i , t ; char str [ 5 ] = { 0 } , str2 [ 5 ] = { 0 } ; scanf ( "%s" , str ) ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) sum = sum + 1 ; for ( i = sum - 1 ; i >= 0 ; i -- ) { t = sum - i - 1 ; str2 [ t ] = str [ i ] ; } printf ( "%s" , str2 ) ; }
int main ( ) { char a [ 10000 ] ; int b , i , c ; scanf ( "%s" , a ) ; b = strlen ( a ) ; i = 0 ; if ( b % 2 == 0 ) { while ( i <= ( b / 2 - 1 ) ) { c = a [ b - 1 - i ] ; a [ b - 1 - i ] = a [ i ] ; a [ i ] = c ; i ++ ; } } else { while ( i <= ( ( b - 1 ) / 2 - 1 ) ) { c = a [ b - 1 - i ] ; a [ b - 1 - i ] = a [ i ] ; a [ i ] = c ; i ++ ; } } printf ( "%s\n" , a ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , m ; scanf ( "%d" , & n ) ; if ( n == 0 ) printf ( "%d" , 0 ) ; else { while ( n != 0 ) { m = n % 10 ; printf ( "%d" , m ) ; n = n / 10 ; } } return 0 ; }
int main ( ) { int a , b , c , d , n ; scanf ( "%d" , & n ) ; if ( n >= 1 && n <= 9 ) { printf ( "%d" , n ) ; } if ( 10 <= n && n <= 99 ) { a = n / 10 ; b = n - a ; printf ( "%d%d" , b , a ) ; } if ( 100 <= n && n <= 999 ) { a = n / 100 ; b = ( n - 100 * a ) / 10 ; c = n - a * 100 - b * 10 ; printf ( "%d%d%d" , c , b , a ) ; } if ( 1000 <= n && n <= 9999 ) { a = n / 1000 ; b = ( n - 1000 * a ) / 100 ; c = ( n - 1000 * a - b * 100 ) / 10 ; d = n - a * 1000 - b * 100 - c * 10 ; printf ( "%d%d%d%d" , d , c , b , a ) ; } return 0 ; }
int main ( ) { int n , a , b , c , d ; scanf ( "%d" , & n ) ; if ( n < 10 ) printf ( "%d" , n ) ; if ( n > 10 && n < 100 ) { a = n % 10 ; b = n / 10 ; n = 10 * a + b ; printf ( "%d" , n ) ; } if ( n > 100 && n < 1000 ) { a = n % 10 ; b = ( n % 100 - a ) / 10 ; c = n / 100 ; n = 100 * a + 10 * b + c ; printf ( "%d" , n ) ; } if ( n > 1000 && n < 10000 ) { a = n % 10 ; b = ( n % 100 - a ) / 10 ; c = ( n % 1000 - 10 * b - a ) / 100 ; d = n / 1000 ; n = 1000 * a + 100 * b + 10 * c + d ; printf ( "%d" , n ) ; } if ( n == 10 ) printf ( "01" ) ; if ( n == 100 ) printf ( "001" ) ; if ( n == 1000 ) printf ( "0001" ) ; if ( n == 10000 ) printf ( "00001" ) ; return 0 ; }
void main ( ) { int n , i1 , m1 , i2 , m2 , i3 , m3 ; scanf ( "%d" , & n ) ; if ( n < 10 ) { printf ( "%d" , n ) ; } else if ( n >= 10 && n < 100 ) { i1 = n % 10 ; m1 = n / 10 ; printf ( "%d%d" , i1 , m1 ) ; } else if ( n >= 100 && n < 1000 ) { i1 = n % 10 ; m1 = n / 10 ; i2 = m1 % 10 ; m2 = m1 / 10 ; printf ( "%d%d%d" , i1 , i2 , m2 ) ; } else if ( n >= 1000 && n < 9999 ) { i1 = n % 10 ; m1 = n / 10 ; i2 = m1 % 10 ; m2 = m1 / 10 ; i3 = m2 % 10 ; m3 = m2 / 10 ; printf ( "%d%d%d%d" , i1 , i2 , i3 , m3 ) ; } else printf ( "00001" ) ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; if ( n > 9999 ) { printf ( "00001" ) ; } else if ( n > 999 ) { printf ( "%d%d%d%d" , n % 1000 % 100 % 10 , n % 1000 % 100 / 10 , n % 1000 / 100 , n / 1000 ) ; } else if ( n > 99 ) { printf ( "%d%d%d" , n % 100 % 10 , n % 100 / 10 , n / 100 ) ; } else if ( n > 9 ) { printf ( "%d%d" , n % 10 , n / 10 ) ; } else { printf ( "%d" , n ) ; } return 0 ; }
int main ( ) { int a [ 10 ] ; int n , i , j ; scanf ( "%d" , & n ) ; if ( n == 0 ) { printf ( "0\n" ) ; return 0 ; } for ( i = 1 ; n > 0 ; i ++ ) { a [ i ] = n % 10 ; n = n / 10 ; } for ( j = 1 ; j <= i - 1 ; j ++ ) printf ( "%d" , a [ j ] ) ; return 0 ; }
int MyInverseitoa ( int iNum , char * ch , int radix ) { int iBits = 0 ; do { ch [ iBits ++ ] = iNum % radix ; iNum /= radix ; } while ( iNum ) ; ch [ iBits ] = '\0' ; return iBits - 1 ; } int Myatoi ( char * ch , int iBits ) { int iNumInverse = 0 ; int i = 0 ; while ( ch [ i ] == '\0' ) { i ++ ; printf ( "0" ) ; } for ( i = 0 ; i <= iBits ; i ++ ) { iNumInverse = 10 * iNumInverse + ch [ i ] ; } return iNumInverse ; } int main ( ) { int iNum , iNumInverse , iBits = 0 ; char ch [ 12 ] ; scanf ( "%d" , & iNum ) ; if ( iNum == 0 ) { iNumInverse = iNum ; printf ( "%d" , iNumInverse ) ; } else { iBits = MyInverseitoa ( iNum , ch , 10 ) ; iNumInverse = Myatoi ( ch , iBits ) ; printf ( "%d" , iNumInverse ) ; } return 0 ; }
void main ( ) { int a , b , c , d , x ; scanf ( "%d" , & x ) ; if ( x == 0 ) printf ( "0" ) ; else if ( x <= 9 ) printf ( "%d" , x ) ; else if ( x <= 99 ) { a = x % 10 ; b = ( x - a ) / 10 ; printf ( "%d%d" , a , b ) ; } else if ( x <= 999 ) { a = x % 10 ; b = ( ( x - a ) % 100 ) / 10 ; c = ( x - 10 * b - a ) / 100 ; printf ( "%d%d%d" , a , b , c ) ; } else if ( x <= 9999 ) { a = x % 10 ; b = ( ( x - a ) % 100 ) / 10 ; c = ( ( x - 10 * b - a ) / 100 ) % 10 ; d = ( x - 100 * c - 10 * b - a ) / 1000 ; printf ( "%d%d%d%d" , a , b , c , d ) ; } else printf ( "00001" ) ; printf ( "\n" ) ; }
int main ( ) { int n , a , b , c , d ; scanf ( "%d" , & n ) ; a = n / 1000 ; b = n / 100 - 10 * a ; c = n / 10 - 100 * a - 10 * b ; d = n - 1000 * a - 100 * b - 10 * c ; if ( a == 0 ) { if ( b == 0 ) { if ( c == 0 ) { printf ( "%d\n" , d ) ; } else printf ( "%d%d\n" , d , c ) ; } else printf ( "%d%d%d\n" , d , c , b ) ; } else printf ( "%d%d%d%d\n" , d , c , b , a ) ; return 0 ; }
void main ( ) { int a [ 5 ] , i , j ; for ( i = 0 ; i < 5 ; i ++ ) { a [ i ] = getchar ( ) ; if ( a [ i ] < 48 || a [ i ] > 57 ) { j = i ; break ; } } for ( i = j ; i >= 0 ; i -- ) putchar ( a [ i ] ) ; }
void main ( ) { char * a , * p ; int n = 0 ; a = ( char * ) malloc ( 1000 ) ; gets ( a ) ; for ( p = a ; * p != '\0' ; p ++ ) ; p -- ; for ( ; p >= a ; p -- ) printf ( "%c" , * p ) ; }
int main ( ) { int i ; char a [ 5 ] = { '\0' , '\0' , '\0' , '\0' , '\0' } ; scanf ( "%s" , a ) ; for ( i = 4 ; i >= 0 ; i -- ) { if ( a [ i ] != '\0' ) printf ( "%c" , a [ i ] ) ; } }
int main ( ) { int n , i , m , c , j , k , t ; scanf ( "%d" , & n ) ; i = n ; c = 0 ; j = 0 ; while ( i > 0 ) { j ++ ; m = i % 10 ; i /= 10 ; c = m + c * 10 ; } i = c ; k = 0 ; while ( i > 0 ) { k ++ ; i = i / 10 ; } for ( t = 1 ; t <= ( j - k ) ; t ++ ) printf ( "0" ) ; printf ( "%d" , c ) ; }
int main ( ) { int a , b , c , d , e , f , g ; scanf ( "%d" , & a ) ; b = a / 10000 ; c = ( a - b * 10000 ) / 1000 ; d = a / 100 - ( a / 1000 ) * 10 ; e = a / 10 - ( a / 100 ) * 10 ; f = a - ( a / 10 ) * 10 ; if ( b != 0 ) { g = f * 10000 + e * 1000 + d * 100 + c * 10 + b ; printf ( "%05d" , g ) ; } else if ( c != 0 ) { g = f * 1000 + e * 100 + d * 10 + c ; printf ( "%04d" , g ) ; } else if ( d != 0 ) { g = f * 100 + e * 10 + d ; printf ( "%03d" , g ) ; } else if ( e != 0 ) { g = f * 10 + e ; printf ( "%01d" , g ) ; } else { g = f ; printf ( "%d" , g ) ; } return 0 ; }
int main ( ) { int a , b , c , d , n ; scanf ( "%d" , & n ) ; while ( n > 0 ) { printf ( "%d" , n % 10 ) ; n = n / 10 ; } }
int main ( ) { int n , a , b , c , d ; scanf ( "%d" , & n ) ; a = n / 1000 ; b = ( n % 1000 ) / 100 ; c = ( n % 100 ) / 10 ; d = n % 10 ; if ( n < 10 ) printf ( "%d" , d ) ; else if ( n < 100 ) printf ( "%d%d" , d , c ) ; else if ( n < 1000 ) printf ( "%d%d%d" , d , c , b ) ; else if ( n < 10000 ) printf ( "%d%d%d%d" , d , c , b , a ) ; return 0 ; }
void main ( ) { int n , i , c , b ; scanf ( "%d" , & n ) ; if ( n == 0 ) printf ( "0" ) ; for ( i = 1 ; i <= n ; ) { i = i * 10 ; c = n % i ; n = n - c ; b = c * 10 / i ; printf ( "%d" , b ) ; } printf ( "\n" ) ; }
int main ( ) { char sen [ 101 ] , rsen [ 101 ] ; while ( cin >> sen ) { int pos [ 101 ] , num = 0 , i , t = 0 ; cout << sen << endl ; for ( i = 0 ; i <= strlen ( sen ) - 1 ; i ++ ) { if ( sen [ i ] == '(' ) { num ++ ; pos [ num ] = i ; rsen [ i ] = '$' ; } else if ( sen [ i ] == ')' ) { if ( num > 0 ) { rsen [ pos [ num ] ] = ' ' ; rsen [ i ] = ' ' ; num -- ; } else { rsen [ i ] = '?' ; } } else { rsen [ i ] = ' ' ; } } if ( num != 0 ) { for ( i = 1 ; i <= num ; i ++ ) { rsen [ pos [ num ] ] = '$' ; } } for ( i = 0 ; i <= strlen ( sen ) - 2 ; i ++ ) { cout << rsen [ i ] ; } cout << rsen [ strlen ( sen ) - 1 ] << endl ; } ; return 0 ; }
int main ( ) { int i , j , n ; char a [ 100 ] , b [ 100 ] ; while ( gets ( a ) != NULL ) { n = strlen ( a ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = ' ' ; for ( i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] == '(' ) || ( a [ i ] == ')' ) ) b [ i ] = a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( b [ i ] == '(' ) { for ( j = i ; j < n ; j ++ ) { if ( b [ j ] == ')' ) { b [ i ] = ' ' ; b [ j ] = ' ' ; a [ i ] = ' ' ; a [ j ] = ' ' ; break ; } } } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; else if ( a [ i ] == ')' ) a [ i ] = '?' ; else a [ i ] = ' ' ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; } }
int main ( ) { int n ; scanf ( "%d" , & n ) ; int i ; char s [ 1001 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , s ) ; char t [ 1001 ] = { 0 } ; int j , k ; int len = strlen ( s ) ; for ( j = 0 ; j < len ; j ++ ) { if ( s [ j ] == '(' ) { int zo = 1 , yb = 0 ; for ( k = j + 1 ; k < len ; k ++ ) { if ( s [ k ] == '(' ) { zo ++ ; } if ( s [ k ] == ')' ) { yb ++ ; } if ( zo == yb ) { break ; } } if ( zo != yb ) { s [ j ] = 0 ; t [ j ] = '$' ; } } if ( s [ j ] == ')' ) { int zo = 0 , yb = 1 ; for ( k = j - 1 ; k >= 0 ; k -- ) { if ( s [ k ] == '(' ) { zo ++ ; } if ( s [ k ] == ')' ) { yb ++ ; } if ( zo == yb ) { break ; } } if ( zo != yb ) { t [ j ] = '?' ; s [ j ] = 1 ; } } } for ( j = 0 ; j < len ; j ++ ) { if ( s [ j ] == 0 ) { printf ( "(" ) ; } else if ( s [ j ] == 1 ) { printf ( ")" ) ; } else printf ( "%c" , s [ j ] ) ; } printf ( "\n" ) ; for ( j = 0 ; j < len ; j ++ ) { if ( t [ j ] == '?' || t [ j ] == '$' ) { printf ( "%c" , t [ j ] ) ; } else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
int zuok ( char c [ ] , int j , int len ) { int i , zuo = 1 , you = 0 ; for ( i = j + 1 ; i < len ; i ++ ) { if ( c [ i ] == '(' ) { zuo ++ ; } else if ( c [ i ] == ')' ) { you ++ ; } if ( zuo == you ) { return 1 ; } } return 0 ; } int youk ( char c [ ] , int j , int len ) { int i , you = 1 , zuo = 0 ; for ( i = j - 1 ; i >= 0 ; i -- ) { if ( c [ i ] == '(' ) { zuo ++ ; } else if ( c [ i ] == ')' ) { you ++ ; } if ( zuo == you ) { return 1 ; } } return 0 ; } int main ( ) { int n ; scanf ( "%d" , & n ) ; getchar ( ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { char c [ 200 ] ; scanf ( "%s" , c ) ; getchar ( ) ; printf ( c ) ; printf ( "\n" ) ; int len = strlen ( c ) ; int j ; for ( j = 0 ; j < len ; j ++ ) { if ( c [ j ] == '(' ) { if ( ! zuok ( c , j , len ) ) { putchar ( '$' ) ; } else printf ( " " ) ; } else if ( c [ j ] == ')' ) { if ( ! youk ( c , j , len ) ) { putchar ( '?' ) ; } else putchar ( ' ' ) ; } else { putchar ( ' ' ) ; } } printf ( "\n" ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { char a [ 110 ] , b [ 110 ] ; while ( scanf ( "%s" , & a ) == 1 ) { strcpy ( b , a ) ; int len = strlen ( a ) ; int i , t , s , q = 1 ; while ( q ) { q = 0 ; t = - 1 ; s = - 1 ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == 40 ) t = i ; else if ( a [ i ] == 41 ) { if ( t >= 0 ) { a [ t ] = 48 ; a [ i ] = 48 ; q = 1 ; break ; } } } } for ( i = 0 ; i < len ; i ++ ) printf ( "%c" , b [ i ] ) ; printf ( "\n" ) ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) printf ( "$" ) ; else if ( a [ i ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
main ( ) { char a [ 105 ] ; while ( ( gets ( a ) ) != NULL ) { printf ( "%s\n" , a ) ; for ( int i = 0 ; a [ i ] != 0 ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; else if ( a [ i ] == ')' ) { a [ i ] = '?' ; for ( int j = i - 1 ; j >= 0 ; j -- ) if ( a [ j ] == '$' ) { a [ j ] = ' ' ; a [ i ] = ' ' ; break ; } } else a [ i ] = ' ' ; } printf ( "%s\n" , a ) ; } }
int main ( ) { char a [ 110 ] ; while ( gets ( a ) != NULL ) { puts ( a ) ; for ( int i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; else if ( a [ i ] == ')' ) { a [ i ] = '?' ; for ( int j = i - 1 ; j >= 0 ; j -- ) if ( a [ j ] == '$' ) { a [ j ] = ' ' ; a [ i ] = ' ' ; break ; } } else a [ i ] = ' ' ; } puts ( a ) ; } }
int main ( ) { char str [ 101 ] ; int i , j ; while ( cin . getline ( str , 101 ) ) { int length = strlen ( str ) , count1 [ 1000 ] = { 0 } , count2 [ 1000 ] = { 0 } ; for ( i = length ; i >= 0 ; i -- ) { if ( str [ i ] == '(' ) { for ( j = i ; str [ j ] != '\0' ; j ++ ) { if ( str [ j ] == ')' && count2 [ j ] == 0 ) { count2 [ j ] -- ; break ; } else { if ( str [ j + 1 ] == '\0' ) { count1 [ i ] ++ ; } } } } } for ( i = 0 ; str [ i ] != '\0' ; i ++ ) { if ( str [ i ] == ')' ) { count2 [ i ] ++ ; } cout << str [ i ] ; } cout << endl ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) { if ( count1 [ i ] == 1 ) { cout << "$" ; } if ( count2 [ i ] == 1 ) { cout << "?" ; } if ( count1 [ i ] != 1 && count2 [ i ] != 1 ) { cout << " " ; } } cout << endl ; } return 0 ; }
int main ( ) { int n = 0 ; scanf ( "%d" , & n ) ; int i = 0 ; char string [ 101 ] ; char string_copy [ 101 ] ; char string_check [ 101 ] ; int len = 0 ; int index = 0 ; int start = 0 ; int turn = 0 ; char y = 'n' ; for ( i = 0 ; i <= n ; i ++ ) { len = 0 ; gets ( string ) ; while ( string [ len ] ) len ++ ; strcpy ( string_copy , string ) ; for ( index = 0 ; index < len ; index ++ ) { if ( string_copy [ index ] != '(' && string_copy [ index ] != ')' ) string_copy [ index ] = ' ' ; if ( string [ index ] == '(' || string [ index ] == ')' ) y = 'y' ; } if ( y == 'n' ) continue ; for ( turn = 0 ; turn <= len / 2 ; turn ++ ) { y = 'n' ; start = 0 ; for ( index = 0 ; index < len ; index ++ ) { if ( string_copy [ index ] == '(' ) start = index ; if ( string_copy [ index ] == ')' && string_copy [ start ] == '(' ) { string_copy [ index ] = ' ' ; string_copy [ start ] = ' ' ; } } } strcpy ( string_check , string_copy ) ; for ( index = 0 ; index < len ; index ++ ) { if ( string_copy [ index ] == '(' ) string_copy [ index ] = '$' ; if ( string_copy [ index ] == ')' ) string_copy [ index ] = '?' ; } if ( strcmp ( string_copy , string_check ) != 0 ) { printf ( "%s\n%s\n" , string , string_copy ) ; } else { printf ( "%s\n" , string ) ; } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , p , i , j , len ; scanf ( "%d" , & n ) ; for ( p = 0 ; p < n ; p ++ ) { char a [ 150 ] ; scanf ( "%s" , a ) ; len = strlen ( a ) ; char b [ 150 ] ; for ( i = 0 ; a [ i ] != 0 ; i ++ ) { switch ( a [ i ] ) { case '(' : b [ i ] = '$' ; break ; case ')' : b [ i ] = '?' ; break ; default : b [ i ] = ' ' ; } } for ( i = 0 ; i < len ; i ++ ) { if ( b [ i ] == '?' ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( b [ j ] == '$' ) { b [ i ] = ' ' ; b [ j ] = ' ' ; break ; } } } } printf ( "%s" , a ) ; printf ( "\n" ) ; for ( i = 0 ; i < len ; i ++ ) printf ( "%c" , b [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { int c = 0 ; char s [ 300 ] = { 0 } ; char s2 [ 300 ] = { 0 } ; int top = 0 ; int heap [ 300 ] = { 0 } ; while ( gets ( s ) != 0 ) { top = 0 ; int i = 0 , len = strlen ( s ) ; for ( i = 0 ; i < len ; i ++ ) { if ( s [ i ] == '(' ) { heap [ top ++ ] = i ; s2 [ i ] = '$' ; } else if ( s [ i ] == ')' ) { if ( top == 0 ) { s2 [ i ] = '?' ; } else { s2 [ i ] = ' ' ; s2 [ heap [ top - 1 ] ] = ' ' ; top -- ; } } else { s2 [ i ] = ' ' ; } } s2 [ len ] = '\0' ; printf ( "%s\n%s\n" , s , s2 ) ; } return 0 ; }
int main ( ) { char array [ 101 ] , ans [ 101 ] ; int len , i , left , right ; while ( cin . getline ( array , 101 ) ) { len = strlen ( array ) ; left = 0 ; right = 0 ; for ( i = 0 ; i < len ; i ++ ) { ans [ i ] = ' ' ; if ( array [ i ] == '(' ) { left ++ ; } if ( array [ i ] == ')' ) { right ++ ; if ( right > left ) { left = 0 ; right = 0 ; ans [ i ] = '?' ; } } } left = 0 ; right = 0 ; for ( i = len - 1 ; i >= 0 ; i -- ) { if ( array [ i ] == '(' ) { left ++ ; if ( left > right ) { left = 0 ; right = 0 ; ans [ i ] = '$' ; } } if ( array [ i ] == ')' ) { right ++ ; } } for ( i = 0 ; i < len ; i ++ ) cout << array [ i ] ; cout << endl ; for ( i = 0 ; i < len ; i ++ ) cout << ans [ i ] ; cout << endl ; } return 0 ; }
int main ( ) { char word [ 200 ] = { '\0' } ; int left [ 200 ] = { 0 } ; int i = 0 , k = 0 ; while ( cin . getline ( word , 200 ) ) { for ( i = 0 ; word [ i ] ; i ++ ) cout << word [ i ] ; cout << endl ; for ( i = 0 ; word [ i ] ; i ++ ) { if ( word [ i ] == '(' ) { left [ k ] = i ; k ++ ; word [ i ] = '$' ; } else if ( word [ i ] == ')' ) { if ( k ) { k -- ; word [ left [ k ] ] = ' ' ; word [ i ] = ' ' ; } else word [ i ] = '?' ; } else word [ i ] = ' ' ; } for ( i = 0 ; word [ i ] ; i ++ ) cout << word [ i ] ; cout << endl ; k = 0 ; memset ( word , '\0' , sizeof ( word ) ) ; } return 0 ; }
main ( ) { int i , j , k , len = 0 ; char a [ 1000 ] ; char b [ 1000 ] ; while ( gets ( a ) != NULL ) { len = strlen ( a ) ; for ( i = 0 ; i < len ; i ++ ) { b [ i ] = 'c' ; } b [ i ] = '\0' ; for ( i = len - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != '(' && a [ i ] != ')' ) b [ i ] = ' ' ; else if ( a [ i ] == ')' && b [ i ] != ' ' ) b [ i ] = '?' ; else if ( a [ i ] == '(' ) { if ( i == len - 1 ) b [ i ] = '$' ; else { for ( j = i + 1 ; j < len ; j ++ ) { if ( a [ j ] == ')' && b [ j ] != ' ' ) { b [ j ] = ' ' ; b [ i ] = ' ' ; break ; } } if ( j == len ) b [ i ] = '$' ; } } } for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { printf ( "%c" , a [ i ] ) ; } printf ( "\n" ) ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { printf ( "%c" , b [ i ] ) ; } printf ( "\n" ) ; } getchar ( ) ; getchar ( ) ; }
int main ( ) { static char c [ 102 ] , d [ 102 ] ; int i , j , k , s ; while ( gets ( c ) ) { puts ( c ) ; for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { if ( c [ i ] == '(' ) d [ i ] = 1 ; else if ( c [ i ] == ')' ) d [ i ] = 2 ; else d [ i ] = 3 ; } while ( 1 ) { s = 0 ; for ( j = 0 ; j <= i - 2 ; j ++ ) { if ( d [ j ] == 1 ) break ; } for ( k = j + 1 ; k <= i - 1 ; k ++ ) { if ( d [ k ] == 2 ) { s = 1 ; break ; } } if ( s == 0 ) break ; for ( j = 0 ; j <= i - 2 ; j ++ ) { if ( d [ j ] == 1 ) { for ( k = j + 1 ; k <= i - 1 ; k ++ ) { if ( d [ k ] == 1 ) { j = k ; } if ( d [ k ] == 2 ) { d [ j ] = 3 ; d [ k ] = 3 ; break ; } } } } } for ( k = 0 ; k <= i - 1 ; k ++ ) { switch ( d [ k ] ) { case 1 : printf ( "$" ) ; break ; case 2 : printf ( "?" ) ; break ; case 3 : printf ( " " ) ; break ; } } printf ( "\n" ) ; } }
int main ( ) { while ( 1 ) { char str [ 101 ] ; int final [ 101 ] = { 0 } ; cin . getline ( str , 101 ) ; if ( str [ 0 ] == '\0' ) break ; int i = 0 , p = 0 , q = 0 , k = 0 , flag = 0 ; while ( str [ i ] != '\0' ) { if ( str [ i ] == '(' ) final [ i ] = 1 ; if ( str [ i ] == ')' ) { final [ i ] = 2 ; for ( int j = i ; j >= 0 ; j -- ) { if ( final [ j ] == 1 ) { final [ i ] = 0 ; final [ j ] = 0 ; break ; } } } i ++ ; } cout << str << endl ; while ( str [ k ] != '\0' ) { if ( final [ k ] == 1 || final [ k ] == 2 ) { p = k ; if ( flag == 0 ) { q = k ; flag = 1 ; } } k ++ ; } for ( int j = q ; j <= p ; j ++ ) { if ( final [ j ] == 1 ) cout << '$' ; else if ( final [ j ] == 2 ) cout << '?' ; else cout << ' ' ; } cout << endl ; } return 0 ; }
char st [ 100 ] ; char st2 [ 100 ] ; int main ( ) { memset ( st , 0 , 100 ) ; memset ( st2 , 0 , 100 ) ; while ( cin >> st ) { int left = 0 , right = 0 ; int len = strlen ( st ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( st [ i ] == '(' ) left ++ ; if ( st [ i ] == ')' ) right ++ ; if ( left < right ) { st2 [ i ] = '?' ; right -- ; } } left = 0 ; right = 0 ; for ( int j = len - 1 ; j >= 0 ; j -- ) { if ( st [ j ] == '(' ) left ++ ; if ( st [ j ] == ')' ) right ++ ; if ( left > right ) { st2 [ j ] = '$' ; left -- ; } } for ( int i = 0 ; i < len ; i ++ ) { if ( st2 [ i ] != '$' && st2 [ i ] != '?' ) st2 [ i ] = ' ' ; } cout << st << endl ; cout << st2 << endl ; memset ( st , 0 , 100 ) ; memset ( st2 , 0 , 100 ) ; } return 0 ; }
int main ( ) { int n , i , j , k , m ; char a [ 110 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int b [ 110 ] = { 0 } ; scanf ( "%s" , a ) ; m = strlen ( a ) ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ j ] == '(' ) b [ j ] = 1 ; else if ( a [ j ] == ')' ) b [ j ] = - 1 ; } for ( j = m - 1 ; j >= 0 ; j -- ) { if ( b [ j ] == 1 ) { for ( k = j ; k < m ; k ++ ) { if ( b [ k ] == - 1 ) { b [ j ] = 0 ; b [ k ] = 0 ; break ; } } } } for ( k = 0 ; k < m ; k ++ ) printf ( "%c" , a [ k ] ) ; printf ( "\n" ) ; for ( k = 0 ; k < m ; k ++ ) { if ( b [ k ] == 1 ) printf ( "$" ) ; else if ( b [ k ] == - 1 ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
void Replace ( char s [ ] , int x ) { for ( int i = x + 1 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] == ')' ) { s [ x ] = s [ i ] = ' ' ; return ; } if ( s [ i ] == '(' ) Replace ( s , i ) ; } s [ x ] = '$' ; } void Find ( char s [ ] ) { for ( int i = 0 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] == '$' || s [ i ] == '?' ) continue ; if ( s [ i ] == '(' ) Replace ( s , i ) ; else if ( s [ i ] == ')' ) s [ i ] = '?' ; else { s [ i ] = ' ' ; } } return ; } int main ( ) { char live [ 101 ] ; while ( cin >> live ) { cout << live << endl ; Find ( live ) ; cout << live << endl ; } return 0 ; }
void Replace ( char s [ ] , int x ) { for ( int i = x + 1 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] == ')' ) { s [ x ] = s [ i ] = ' ' ; return ; } if ( s [ i ] == '(' ) Replace ( s , i ) ; } s [ x ] = '$' ; return ; } void Find ( char s [ ] ) { for ( int i = 0 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] == '$' || s [ i ] == '?' ) continue ; if ( s [ i ] == '(' ) Replace ( s , i ) ; else if ( s [ i ] == ')' ) s [ i ] = '?' ; else { s [ i ] = ' ' ; } } return ; } int main ( ) { char live [ 101 ] ; int n ; cin >> n ; while ( n -- ) { cin >> live ; cout << live << endl ; Find ( live ) ; cout << live << endl ; } return 0 ; }
int main ( ) { char a [ 101 ] = { '\0' } ; while ( ( scanf ( "%s" , a ) ) != - 1 ) { printf ( "%s\n" , a ) ; int b , c , d ; for ( b = 0 ; b < 100 ; b ++ ) { if ( a [ b ] == ')' ) { for ( c = b - 1 ; c >= 0 ; c -- ) { if ( a [ c ] == '(' ) { a [ c ] = 'a' ; a [ b ] = 'a' ; break ; } } } } for ( d = 0 ; d < 100 ; d ++ ) { if ( a [ d ] == ')' ) printf ( "?" ) ; else if ( a [ d ] == '(' ) printf ( "$" ) ; else if ( a [ d ] != '\0' ) printf ( " " ) ; a [ d ] = '\0' ; } printf ( "\n" ) ; } }
int main ( ) { char ch [ 200 ] , temp [ 200 ] ; int n , i , figure , tempnum [ 200 ] ; scanf ( "%d\n" , & n ) ; while ( gets ( ch ) ) { figure = 0 ; for ( i = 0 ; ch [ i ] != '\0' ; i ++ ) { temp [ i ] = ' ' ; switch ( ch [ i ] ) { case '(' : tempnum [ figure ++ ] = i ; temp [ i ] = '$' ; break ; case ')' : if ( figure > 0 ) { figure -- ; temp [ tempnum [ figure ] ] = ' ' ; } else temp [ i ] = '?' ; break ; } } temp [ i ] = '\0' ; printf ( "%s\n%s\n" , ch , temp ) ; } }
int main ( int argc , char * argv [ ] ) { int n , i , p , j , k , s , l ; char a [ 110 ] , b [ 110 ] = { ' ' } ; scanf ( "%d" , & n ) ; for ( k = 1 ; k <= n ; k ++ ) { s = 0 ; scanf ( "%s" , & a ) ; l = strlen ( a ) ; for ( i = 0 ; i <= l - 1 ; i ++ ) { if ( a [ i ] == '(' ) { s += 1 ; b [ i ] = ' ' ; continue ; } else if ( a [ i ] == ')' ) { if ( s > 0 ) { s -= 1 ; b [ i ] = ' ' ; continue ; } else if ( s == 0 ) b [ i ] = '?' ; continue ; } else b [ i ] = ' ' ; continue ; } s = 0 ; for ( i = l - 1 ; i >= 0 ; i -- ) { if ( a [ i ] == ')' ) { s += 1 ; continue ; } else if ( a [ i ] == '(' ) { if ( s > 0 ) { s -= 1 ; continue ; } else if ( s == 0 ) b [ i ] = '$' ; continue ; } } for ( j = 0 ; j <= l - 1 ; j ++ ) { printf ( "%c" , a [ j ] ) ; } printf ( "\n" ) ; for ( j = 0 ; j <= l - 1 ; j ++ ) { printf ( "%c" , b [ j ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char str [ 1001 ] ; int n ; while ( ~ scanf ( "%s" , str ) ) { n = strlen ( str ) ; printf ( "%s" , str ) ; printf ( "\n" ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( str [ i ] == ')' ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( str [ j ] == '(' ) { str [ i ] = ' ' ; str [ j ] = ' ' ; break ; } } } } for ( int i = 0 ; i < n ; i ++ ) { if ( str [ i ] == '(' ) str [ i ] = '$' ; else if ( str [ i ] == ')' ) str [ i ] = '?' ; else str [ i ] = ' ' ; } printf ( "%s" , str ) ; printf ( "\n" ) ; } }
int main ( ) { int i , n , c , d , e , f , g , k , j , l , b [ 100 ] ; scanf ( "%d" , & n ) ; char a [ 1000 ] [ 150 ] , h [ 1000 ] [ 150 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , a [ i ] ) ; b [ i ] = strlen ( a [ i ] ) ; e = 0 ; for ( j = 0 ; j < b [ i ] ; j ++ ) { if ( a [ i ] [ j ] == '(' ) { h [ i ] [ j ] = '$' ; e ++ ; } if ( a [ i ] [ j ] == ')' ) { h [ i ] [ j ] = '?' ; } if ( a [ i ] [ j ] != '(' && a [ i ] [ j ] != ')' ) h [ i ] [ j ] = ' ' ; } for ( l = 0 ; l < e ; l ++ ) { for ( j = 0 ; j < b [ i ] ; j ++ ) { c = f = d = - 1 ; if ( h [ i ] [ j ] == '$' ) { c = j ; g = c ; for ( g = c ; g < b [ i ] ; g ++ ) { if ( h [ i ] [ g ] == '?' ) { f = g ; break ; } } for ( k = f - 1 ; k >= c ; k -- ) { if ( h [ i ] [ k ] == '$' ) { d = k ; break ; } } if ( d != - 1 && f != - 1 ) { h [ i ] [ d ] = ' ' ; h [ i ] [ f ] = ' ' ; } break ; } } } for ( j = 0 ; j < b [ i ] ; j ++ ) { printf ( "%c" , a [ i ] [ j ] ) ; } printf ( "\n" ) ; for ( j = 0 ; j < b [ i ] ; j ++ ) { printf ( "%c" , h [ i ] [ j ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { int n , i , j , k , flag ; char a [ 200 ] , b [ 200 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { memset ( b , 0 , 200 ) ; scanf ( "%s" , a ) ; for ( j = 0 ; j < strlen ( a ) ; j ++ ) { if ( a [ j ] == '(' ) { flag = 1 ; k = j + 1 ; while ( flag != 0 && k < strlen ( a ) ) { if ( a [ k ] == '(' ) flag ++ ; if ( a [ k ] == ')' ) flag -- ; k ++ ; } if ( k >= strlen ( a ) && flag != 0 ) b [ j ] = '$' ; else { b [ k - 1 ] = ' ' ; b [ j ] = ' ' ; } } else if ( a [ j ] == ')' && b [ j ] != ' ' ) b [ j ] = '?' ; else b [ j ] = ' ' ; } printf ( "%s\n" , a ) ; printf ( "%s\n" , b ) ; } return 0 ; }
int main ( ) { char s [ 101 ] = { 0 } ; while ( ( scanf ( "%s" , s ) != EOF ) ) { int i , j ; int you = 0 ; int l1 = strlen ( s ) ; char a [ 101 ] ; strcpy ( a , s ) ; for ( i = l1 - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '(' ) { you = 0 ; for ( j = i + 1 ; j < l1 ; j ++ ) { if ( s [ j ] == ')' ) { s [ i ] = ' ' ; s [ j ] = ' ' ; you = you + 1 ; break ; } } if ( you == 0 ) s [ i ] = '$' ; } } puts ( a ) ; for ( i = 0 ; i < l1 ; i ++ ) { if ( s [ i ] == '?' || s [ i ] == '$' ) printf ( "%c" , s [ i ] ) ; else if ( s [ i ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
int DO ( char * SPE , int length ) { int k1 = 0 ; char * p1 = NULL , * p2 = NULL ; for ( int i = 0 ; i < length ; i ++ ) { if ( SPE [ i ] == '$' ) { k1 ++ ; p1 = SPE + i ; } else if ( SPE [ i ] == '?' ) { p2 = SPE + i ; if ( k1 != 0 ) { * p1 = ' ' ; * p2 = ' ' ; return DO ( SPE , length ) ; } } } return 0 ; } int main ( void ) { char SPE [ 101 ] ; while ( ~ scanf ( "%s" , SPE ) ) { puts ( SPE ) ; int length = strlen ( SPE ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( SPE [ i ] != '(' && SPE [ i ] != ')' ) SPE [ i ] = ' ' ; else if ( SPE [ i ] == '(' ) SPE [ i ] = '$' ; else if ( SPE [ i ] == ')' ) SPE [ i ] = '?' ; } DO ( SPE , length ) ; puts ( SPE ) ; } return 0 ; }
int main ( ) { int n , i ; scanf ( "%d" , & n ) ; char a [ 1000 ] , b [ 1000 ] ; int j , l , r ; for ( i = 0 ; i < n ; i ++ ) { memset ( a , '\n' , 200 ) ; memset ( b , '\n' , 200 ) ; scanf ( "%s" , a ) ; printf ( "%s\n" , a ) ; l = strlen ( a ) ; for ( j = 0 ; j < l ; j ++ ) { if ( a [ j ] == '(' ) { b [ j ] = '$' ; } else if ( a [ j ] == ')' ) { b [ j ] = '?' ; for ( r = j - 1 ; r >= 0 ; r -- ) { if ( b [ r ] == '$' ) { b [ r ] = ' ' ; b [ j ] = ' ' ; break ; } } } else if ( a [ j ] != '(' && a [ j ] != ')' ) { b [ j ] = ' ' ; } } printf ( "%s\n" , b ) ; } return 0 ; }
int main ( ) { char kuohaoin [ 201 ] = { 0 } , kuohao1 [ 201 ] = { 0 } , kuohaoout [ 201 ] = { 0 } ; int i , j , len ; while ( cin >> kuohaoin ) { len = strlen ( kuohaoin ) ; for ( i = 0 ; i < len ; i ++ ) { kuohao1 [ i ] = kuohaoin [ i ] ; kuohaoout [ i ] = ' ' ; } for ( i = len - 1 ; i >= 0 ; i -- ) { if ( kuohao1 [ i ] == '(' ) { kuohaoout [ i ] = '$' ; for ( j = i + 1 ; j < len ; j ++ ) { if ( kuohao1 [ j ] == ')' ) { kuohao1 [ j ] = 's' ; kuohaoout [ i ] = ' ' ; kuohao1 [ i ] = 's' ; break ; } } } } for ( i = 0 ; i < len ; i ++ ) if ( kuohao1 [ i ] == ')' ) kuohaoout [ i ] = '?' ; cout << kuohaoin << endl ; cout << kuohaoout << endl ; for ( i = 0 ; i < len ; i ++ ) { kuohaoin [ i ] = 0 ; kuohao1 [ i ] = 0 ; kuohaoout [ i ] = 0 ; } } return 0 ; }
int main ( ) { typedef struct _Parenthesis { char ch ; int idx ; } Parenthesis ; Parenthesis paren [ 100 ] ; char str [ 101 ] ; while ( gets ( str ) ) { int i , top = 0 ; puts ( str ) ; for ( i = 0 ; str [ i ] ; i ++ ) { if ( str [ i ] == '(' ) { paren [ top ] . ch = '(' ; paren [ top ] . idx = i ; top ++ ; } else if ( str [ i ] == ')' ) { if ( top == 0 ) str [ i ] = '?' ; else { str [ i ] = ' ' ; str [ paren [ -- top ] . idx ] = ' ' ; } } else str [ i ] = ' ' ; } for ( i = 0 ; i < top ; i ++ ) str [ paren [ i ] . idx ] = '$' ; puts ( str ) ; } return 0 ; }
int main ( ) { int LeftParenIndex [ 100 ] ; char str [ 101 ] ; while ( gets ( str ) ) { int i , top = 0 ; puts ( str ) ; for ( i = 0 ; str [ i ] ; i ++ ) { if ( str [ i ] == '(' ) LeftParenIndex [ top ++ ] = i ; else if ( str [ i ] == ')' ) { if ( top == 0 ) str [ i ] = '?' ; else { str [ i ] = ' ' ; str [ LeftParenIndex [ -- top ] ] = ' ' ; } } else str [ i ] = ' ' ; } for ( i = 0 ; i < top ; i ++ ) str [ LeftParenIndex [ i ] ] = '$' ; puts ( str ) ; } return 0 ; }
int main ( ) { char str [ N + 1 ] , flag [ N + 1 ] ; int i , j , sstack [ N + 1 ] ; while ( scanf ( "%s" , str ) != EOF ) { printf ( "%s\n" , str ) ; j = 0 ; for ( i = 0 ; i < strlen ( str ) ; i ++ ) { if ( str [ i ] == '(' ) sstack [ j ++ ] = i ; else if ( str [ i ] == ')' ) { if ( j <= 0 ) flag [ i ] = '?' ; else { j -- ; flag [ sstack [ j ] ] = ' ' ; flag [ i ] = ' ' ; } } else flag [ i ] = ' ' ; } for ( i = 0 ; i < j ; i ++ ) flag [ sstack [ i ] ] = '$' ; flag [ strlen ( str ) ] = '\0' ; printf ( "%s\n" , flag ) ; } return 0 ; }
int main ( ) { char s [ 101 ] , ss [ 101 ] ; int len , i , j , q , h = 0 ; while ( gets ( s ) ) { len = strlen ( s ) ; strcpy ( ss , s ) ; for ( i = 0 ; i < len ; i ++ ) if ( s [ i ] == '(' ) { h = i ; for ( j = i + 1 ; j < len ; j ++ ) if ( s [ j ] == '(' ) i = j ; else if ( s [ j ] == ')' ) { s [ i ] = ' ' ; s [ j ] = ' ' ; break ; } if ( j == len ) break ; if ( h == i ) continue ; else i = h - 1 ; } for ( q = 0 ; q < len ; q ++ ) if ( s [ q ] == ')' ) s [ q ] = '?' ; else if ( s [ q ] == '(' ) s [ q ] = '$' ; else s [ q ] = ' ' ; printf ( "%s\n" , ss ) ; printf ( "%s\n" , s ) ; } return 0 ; }
void main ( ) { char a [ 100 ] [ 100 ] , c ; int i , b [ 100 ] , j , n , k ; for ( j = 0 ; ; j ++ ) { i = 0 ; c = getchar ( ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'z' ) || c == '(' || c == ')' ) ) break ; a [ j ] [ i ] = c ; i ++ ; while ( ( c = getchar ( ) ) != '\n' ) { a [ j ] [ i ] = c ; i ++ ; } b [ j ] = i ; } n = j ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < b [ j ] ; i ++ ) printf ( "%c" , a [ j ] [ i ] ) ; putchar ( '\n' ) ; for ( i = 0 ; i < b [ j ] ; i ++ ) { if ( ( a [ j ] [ i ] >= 'a' && a [ j ] [ i ] <= 'z' ) || ( a [ j ] [ i ] >= 'A' && a [ j ] [ i ] <= 'Z' ) ) a [ j ] [ i ] = ' ' ; } for ( i = 0 ; i < b [ j ] ; i ++ ) { if ( a [ j ] [ i ] == ')' ) { for ( k = i - 1 ; k > - 1 ; k -- ) { if ( a [ j ] [ k ] == '(' ) break ; } if ( k != - 1 ) { a [ j ] [ k ] = ' ' ; a [ j ] [ i ] = ' ' ; } } } for ( i = 0 ; i < b [ j ] ; i ++ ) { if ( a [ j ] [ i ] == '(' ) a [ j ] [ i ] = '$' ; if ( a [ j ] [ i ] == ')' ) a [ j ] [ i ] = '?' ; } for ( i = 0 ; i < b [ j ] ; i ++ ) printf ( "%c" , a [ j ] [ i ] ) ; printf ( "\n" ) ; } }
int main ( ) { char s [ 1000 ] , t [ 1000 ] ; int len ; int n ; scanf ( "%d" , & n ) ; while ( n -- > 0 ) { scanf ( "%s" , s ) ; len = strlen ( s ) ; memset ( t , ' ' , len ) ; t [ len ] = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( s [ i ] == '(' || s [ i ] == '[' || s [ i ] == '{' ) { t [ i ] = '$' ; } char match = ' ' ; if ( s [ i ] == ')' ) { match = '(' ; } else if ( s [ i ] == ']' ) { match = '[' ; } else if ( s [ i ] == '}' ) { match = '{' ; } if ( match != ' ' ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( t [ j ] == '$' ) { if ( s [ j ] == match ) { t [ j ] = ' ' ; match = ' ' ; } break ; } } if ( match != ' ' ) { t [ i ] = '?' ; } } } printf ( "%s\n%s\n" , s , t ) ; } }
int main ( ) { char num [ 101 ] , t [ 101 ] ; int s [ 101 ] ; int k , j ; int len ; int aa ; while ( gets ( num ) ) { strcpy ( t , num ) ; len = strlen ( num ) ; for ( k = 0 ; k < len ; k ++ ) { s [ k ] = 1 ; } for ( k = 0 ; k < len ; k ++ ) { if ( num [ k ] == ')' ) { for ( j = k - 1 ; j >= 0 ; j -- ) { if ( num [ j ] == '(' ) { s [ j ] = 0 ; s [ k ] = 0 ; num [ j ] = 0 ; break ; } } } } printf ( "%s\n" , t ) ; for ( aa = 0 ; aa < len ; aa ++ ) { if ( s [ aa ] == 1 && t [ aa ] == '(' ) printf ( "$" ) ; else if ( s [ aa ] == 1 && t [ aa ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } }
int main ( ) { char st [ 101 ] ; int g [ 101 ] ; int len , i , j , left ; while ( scanf ( "%s" , st ) != EOF ) { printf ( "%s\n" , st ) ; len = strlen ( st ) ; left = 0 ; for ( i = 0 ; i < len ; i ++ ) { if ( st [ i ] == '(' ) { left ++ ; g [ left ] = i ; } } for ( i = left ; i > 0 ; i -- ) { for ( j = g [ i ] + 1 ; j < len ; j ++ ) if ( st [ j ] == ')' ) { st [ g [ i ] ] = ' ' ; st [ j ] = ' ' ; break ; } } for ( i = 0 ; i < len ; i ++ ) { if ( st [ i ] == ')' ) printf ( "?" ) ; else if ( st [ i ] == '(' ) printf ( "$" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char c [ 101 ] ; int len , a [ 101 ] ; int i , j ; while ( gets ( c ) != 0 ) { len = strlen ( c ) ; for ( i = 0 ; i < len ; i ++ ) { if ( c [ i ] == '(' ) a [ i ] = 1 ; else if ( c [ i ] == ')' ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] == 1 ) { a [ j ] = 0 ; a [ i ] = 0 ; break ; } } if ( j < 0 ) a [ i ] = 2 ; } else a [ i ] = 0 ; } puts ( c ) ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == 0 ) printf ( " " ) ; else if ( a [ i ] == 1 ) printf ( "$" ) ; else printf ( "?" ) ; } printf ( "\n" ) ; } return 0 ; }
match ( char s [ ] , char r [ ] , int len ) { char stack [ 100 ] , c ; int top = 0 ; int pos ; for ( pos = 0 ; pos < len ; ++ pos ) r [ pos ] = ' ' ; r [ len ] = '\0' ; for ( pos = 0 ; pos < len ; ++ pos ) { c = s [ pos ] ; if ( c == '(' ) stack [ top ++ ] = pos ; else if ( c == ')' ) if ( top > 0 ) top -- ; else r [ pos ] = '?' ; } while ( top > 0 ) { pos = stack [ -- top ] ; r [ pos ] = '$' ; } } outresult ( char s [ ] , char r [ ] ) { puts ( s ) ; putchar ( '\n' ) ; puts ( r ) ; putchar ( '\n' ) ; } main ( ) { char line [ 101 ] , result [ 101 ] , ch ; int pos = 0 ; while ( ( ch = getchar ( ) ) != EOF ) { if ( ch != '\n' ) line [ pos ++ ] = ch ; else { line [ pos ] = '\0' ; match ( line , result , pos ) ; outresult ( line , result ) ; pos = 0 ; } } }
int main ( ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int left = 0 ; int p [ 105 ] , t = 0 ; int k , len ; char a [ 105 ] ; char b [ 105 ] ; scanf ( "%s" , a ) ; len = strlen ( a ) ; for ( k = 0 ; k < len ; k ++ ) b [ k ] = ' ' ; b [ len ] = '\0' ; for ( k = 0 ; k < len ; k ++ ) { if ( a [ k ] == '(' ) { b [ k ] = '$' ; p [ t ] = k ; t ++ ; left ++ ; } if ( a [ k ] == ')' ) { if ( left != 0 ) { t -- ; b [ p [ t ] ] = ' ' ; left -- ; } else { b [ k ] = '?' ; } } } printf ( "%s" , a ) ; printf ( "\n" ) ; printf ( "%s" , b ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { int i , l , j = 0 ; char a [ 150 ] , b [ 150 ] ; while ( cin . getline ( b , 150 ) ) { l = strlen ( b ) ; for ( i = 0 ; i < l ; i ++ ) { cout << b [ i ] ; if ( b [ i ] == '(' ) a [ i ] = b [ i ] ; else if ( b [ i ] == ')' ) a [ i ] = b [ i ] ; else a [ i ] = ' ' ; } cout << endl ; if ( a [ l - 1 ] == '(' ) a [ l - 1 ] = '$' ; for ( i = l - 1 ; i >= 0 ; i -- ) { if ( a [ i ] == '(' ) { for ( j = i + 1 ; j < l ; j ++ ) { if ( a [ j ] == ')' ) { a [ i ] = ' ' ; a [ j ] = ' ' ; break ; } } if ( j == l ) a [ i ] = '$' ; } } for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == ')' ) a [ i ] = '?' ; } for ( i = 0 ; i < l ; i ++ ) cout << a [ i ] ; cout << endl ; } return 0 ; }
int main ( ) { int ghus ( char a [ ] ) ; void noghus ( char a [ ] ) ; int n , i , t , j ; char b [ 500 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , b ) ; t = ghus ( b ) ; printf ( "%s\n" , b ) ; for ( j = 1 ; j <= t ; j ++ ) { noghus ( b ) ; } for ( j = 0 ; j < strlen ( b ) ; j ++ ) { if ( b [ j ] == '(' ) printf ( "$" ) ; else if ( b [ j ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } } int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } int ghus ( char a [ ] ) { int min ( int a , int b ) ; int m = 0 , n = 0 , i ; for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == '(' ) m ++ ; if ( a [ i ] == ')' ) n ++ ; } return min ( m , n ) ; } void noghus ( char a [ ] ) { int i , j ; for ( i = 0 ; i < strlen ( a ) - 1 ; i ++ ) { if ( a [ i ] == '(' ) { for ( j = i + 1 ; j < strlen ( a ) ; j ++ ) { if ( a [ j ] == ')' || a [ j ] == '(' ) break ; } if ( a [ j ] == ')' ) { a [ i ] = 'o' ; a [ j ] = 'o' ; } } } }
int show ( char a [ ] , int t ) { int i , k , l , j = 1 ; static int b [ 101 ] ; puts ( a ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) switch ( a [ i ] ) { case '(' : a [ i ] = ' ' ; b [ j ] = i + 1 ; j ++ ; break ; case ')' : a [ i ] = ' ' ; b [ j ] = - ( i + 1 ) ; j ++ ; break ; default : a [ i ] = ' ' ; } j -- ; do { l = 0 ; for ( k = 1 ; k <= j - 1 ; k ++ ) if ( b [ k ] > 0 ) { for ( i = k + 1 ; i <= j ; i ++ ) if ( b [ i ] != 0 ) break ; if ( b [ k ] * b [ i ] < 0 ) { b [ k ] = 0 ; b [ i ] = 0 ; l ++ ; } } } while ( l > 0 ) ; for ( i = 1 ; i <= j ; i ++ ) { if ( b [ i ] < 0 ) a [ - b [ i ] - 1 ] = '?' ; else if ( b [ i ] > 0 ) a [ b [ i ] - 1 ] = '$' ; } puts ( a ) ; return 0 ; } int main ( ) { int i , n ; scanf ( "%d\n" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { char a [ 101 ] ; int t ; gets ( a ) ; t = strlen ( a ) ; show ( a , t ) ; } return 0 ; }
int main ( ) { int n , l , i , k ; char str [ 200 ] = { 0 } ; scanf ( "%d\n" , & n ) ; while ( n ) { scanf ( "%s" , str ) ; puts ( str ) ; printf ( "\n" ) ; l = strlen ( str ) ; for ( i = l - 1 ; i >= 0 ; i -- ) { if ( str [ i ] == '(' ) { for ( k = i ; k < l ; k ++ ) { if ( str [ k ] == ')' ) { str [ i ] = ' ' ; str [ k ] = ' ' ; k = l ; } } } } for ( i = 0 ; i < l ; i ++ ) { if ( str [ i ] == '(' ) { str [ i ] = '$' ; } else if ( str [ i ] == ')' ) { str [ i ] = '?' ; } else { str [ i ] = ' ' ; } } puts ( str ) ; n -- ; } return 0 ; }
int main ( ) { int i , n , j ; char a [ 100 ] [ 101 ] , b [ 100 ] [ 101 ] , * k , * l ; for ( i = 0 ; i < 100 ; i ++ ) { gets ( a [ i ] ) ; if ( * ( * ( a + i ) ) == '\0' ) break ; for ( j = 0 ; * ( * ( a + i ) + j ) != '\0' ; j ++ ) { if ( ( * ( * ( a + i ) + j ) >= 'a' && * ( * ( a + i ) + j ) <= 'z' ) || ( * ( * ( a + i ) + j ) >= 'A' && * ( * ( a + i ) + j ) <= 'Z' ) ) b [ i ] [ j ] = ' ' ; else if ( * ( * ( a + i ) + j ) == '(' ) b [ i ] [ j ] = '$' ; else if ( * ( * ( a + i ) + j ) == ')' ) b [ i ] [ j ] = '?' ; } b [ i ] [ j ] = '\0' ; for ( k = b [ i ] ; * k != '\0' ; k ++ ) { if ( * k == '?' ) { for ( l = k - 1 ; l >= b [ i ] ; l -- ) { if ( * l == '$' ) { * l = ' ' ; * k = ' ' ; break ; } } } } } n = i ; for ( i = 0 ; i < n ; i ++ ) { puts ( a [ i ] ) ; puts ( b [ i ] ) ; } return 0 ; }
int main ( ) { char a [ 10 ] [ 20 ] , b [ 10 ] [ 20 ] ; int i , t , y , u = 0 ; while ( scanf ( "%s" , a [ u ] ) != EOF ) { strcpy ( b [ u ] , a [ u ] ) ; for ( t = 0 ; a [ u ] [ t ] != 0 ; t ++ ) { if ( a [ u ] [ t ] != 40 && a [ u ] [ t ] != 41 ) b [ u ] [ t ] = 32 ; if ( b [ u ] [ t ] == 41 ) { for ( y = t ; y > - 1 ; y -- ) { if ( b [ u ] [ y ] == 40 ) { b [ u ] [ y ] = 32 ; b [ u ] [ t ] = 32 ; break ; } } } } for ( t = 0 ; b [ u ] [ t ] != 0 ; t ++ ) { if ( b [ u ] [ t ] == 40 ) b [ u ] [ t ] = 36 ; else if ( b [ u ] [ t ] == 41 ) b [ u ] [ t ] = 63 ; } puts ( a [ u ] ) ; puts ( b [ u ] ) ; u ++ ; } return 0 ; }
int main ( ) { char string [ 1000 ] ; int i = 0 , j = 0 , length = 0 , t1 = 0 , t2 = 0 ; int flag = 0 , left = 0 , right = 0 ; while ( gets ( string ) ) { cout << string << endl ; length = strlen ( string ) ; flag = 1 , left = 0 , right = 0 ; t1 = 0 , t2 = 0 ; while ( flag == 1 ) { for ( i = 0 ; i < length ; i ++ ) { if ( string [ i ] == '(' ) { left = i ; t1 = 1 ; } else if ( t1 == 1 && string [ i ] == ')' ) { right = i ; t2 = 1 ; break ; } else continue ; } if ( t1 == 1 && t2 == 1 ) { string [ left ] = '0' ; string [ right ] = '0' ; t1 = 0 ; t2 = 0 ; flag = 1 ; } else flag = 0 ; } for ( i = 0 ; i < length ; i ++ ) { if ( string [ i ] == '(' ) string [ i ] = '$' ; else if ( string [ i ] == ')' ) string [ i ] = '?' ; else string [ i ] = ' ' ; } for ( i = 0 ; i < length ; i ++ ) { cout << string [ i ] ; } cout << endl ; } return 0 ; }
int main ( ) { char word [ 105 ] , sign [ 105 ] ; int num = 0 , i , len ; while ( cin . getline ( word , 105 ) ) { num = 0 ; len = strlen ( word ) ; for ( i = 0 ; i < len ; i ++ ) sign [ i ] = ' ' ; for ( i = 0 ; i < len ; i ++ ) { if ( word [ i ] == '(' ) num ++ ; if ( word [ i ] == ')' ) { if ( num > 0 ) num -- ; else sign [ i ] = '?' ; } } num = 0 ; for ( i = len - 1 ; i >= 0 ; i -- ) { if ( word [ i ] == ')' ) num ++ ; if ( word [ i ] == '(' ) { if ( num > 0 ) num -- ; else sign [ i ] = '$' ; } } sign [ len ] = '\0' ; cout << word << endl ; cout << sign << endl ; } return 0 ; }
int main ( ) { int n , i , j , k , l ; char a [ 100 ] [ 120 ] ; scanf ( "%d" , & n ) ; getchar ( ) ; for ( i = 0 ; i < n ; i ++ ) { gets ( a [ i ] ) ; puts ( a [ i ] ) ; k = strlen ( a [ i ] ) ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] == ')' ) { a [ i ] [ j ] = '?' ; } if ( a [ i ] [ j ] == '(' ) { a [ i ] [ j ] = '$' ; } } for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] != '?' && a [ i ] [ j ] != '$' ) { a [ i ] [ j ] = ' ' ; } } for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] == '?' ) { for ( l = j ; l >= 0 ; l -- ) { if ( a [ i ] [ l ] == '$' ) { a [ i ] [ j ] = ' ' ; a [ i ] [ l ] = ' ' ; break ; } } } } for ( j = 0 ; j < k ; j ++ ) { printf ( "%c" , a [ i ] [ j ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char a [ 110 ] ; char b [ 110 ] ; char c [ 110 ] ; while ( gets ( a ) ) { strcpy ( b , a ) ; strcpy ( c , a ) ; int i , j ; int n = strlen ( a ) ; int ju = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( a [ i ] == '(' ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] == ')' ) { a [ j ] = 99 ; b [ i ] = b [ j ] = 32 ; break ; } } if ( j == n ) { b [ i ] = '$' ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] != 32 && b [ i ] != ')' && b [ i ] != '$' ) b [ i ] = 32 ; else if ( b [ i ] == ')' ) b [ i ] = '?' ; } printf ( "%s\n" , c ) ; printf ( "%s\n" , b ) ; } return 0 ; }
void main ( ) { int b [ 101 ] , t , n , i , j ; char a [ 101 ] ; while ( gets ( a ) ) { for ( i = 0 ; i < 101 ; i ++ ) b [ i ] = 0 ; n = strlen ( a ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == '(' ) { t = - 1 ; for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] == '(' ) { t -- ; } if ( a [ j ] == ')' ) { t ++ ; } if ( t == 0 ) break ; } if ( t < 0 ) b [ i ] = 1 ; } if ( a [ i ] == ')' ) { t = - 1 ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] == '(' ) { t ++ ; } if ( a [ j ] == ')' ) { t -- ; } if ( t == 0 ) break ; } if ( t < 0 ) b [ i ] = 2 ; } } for ( i = 0 ; i < n ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 0 ) printf ( " " ) ; if ( b [ i ] == 1 ) printf ( "$" ) ; if ( b [ i ] == 2 ) printf ( "?" ) ; } printf ( "\n" ) ; } }
main ( ) { char c2 [ 101 ] ; int i , j , n ; for ( ; ; ) { scanf ( "%s" , c2 ) ; if ( c2 [ 0 ] == '\n' ) break ; printf ( "%s\n" , c2 ) ; for ( i = 0 , n = 0 ; c2 [ i ] != '\0' ; i ++ ) { if ( c2 [ i ] == '(' ) n = i ; } for ( i = n ; i >= 0 ; i -- ) { if ( c2 [ i ] == '(' ) { for ( j = i + 1 ; c2 [ j ] != '\0' ; j ++ ) { if ( c2 [ j ] == ')' ) { c2 [ j ] = 'a' ; c2 [ i ] = 'a' ; break ; } } } } for ( i = 0 ; c2 [ i ] != '\0' ; i ++ ) { if ( c2 [ i ] == '(' ) printf ( "$" ) ; else if ( c2 [ i ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; c2 [ 0 ] = '\n' ; } }
int main ( ) { int i , len , j , m = 0 , max ; char ch [ 105 ] , s [ 105 ] , str [ 105 ] ; while ( scanf ( "%s" , ch ) != EOF ) { int m = 0 ; strcpy ( s , ch ) ; strcpy ( str , ch ) ; len = strlen ( ch ) ; for ( i = 0 ; i < len ; i ++ ) { if ( ch [ i ] != '(' && ch [ i ] != ')' ) { s [ i ] = ' ' ; } else if ( ch [ i ] == ')' ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( ch [ j ] == '(' ) { m = 1 ; ch [ i ] = ' ' ; s [ i ] = ' ' ; s [ j ] = ' ' ; ch [ j ] = ' ' ; break ; } else { continue ; } } if ( m == 0 ) { s [ i ] = '?' ; } } } for ( i = 0 ; i < len ; i ++ ) { if ( s [ i ] == '(' ) { s [ i ] = '$' ; } else if ( s [ i ] == ')' ) { s [ i ] = '?' ; } } printf ( "%s\n" , str ) ; printf ( "%s\n" , s ) ; } return 0 ; }
int main ( ) { char a [ 200 ] ; int b [ 200 ] ; int n , len ; cin >> n ; cin . get ( ) ; for ( int i = 0 ; i < n ; i ++ ) { memset ( b , 0 , sizeof ( b ) ) ; cin . getline ( a , 200 ) ; len = strlen ( a ) ; for ( int i = 0 ; i < len ; i ++ ) { cout << a [ i ] ; switch ( a [ i ] ) { case '(' : b [ i ] = 1 ; break ; case ')' : b [ i ] = 2 ; break ; default : b [ i ] = 3 ; break ; } } cout << endl ; for ( int i = 0 ; i < len ; i ++ ) { if ( b [ i ] == 2 ) { for ( int j = i ; j >= 0 ; j -- ) { if ( b [ j ] == 1 ) { b [ j ] = 3 , b [ i ] = 3 ; break ; } } } } for ( int i = 0 ; i < len ; i ++ ) { if ( b [ i ] == 1 ) { cout << '$' ; } else if ( b [ i ] == 2 ) { cout << '?' ; } else { cout << ' ' ; } } cout << endl ; } return 0 ; }
int main ( ) { char a [ 102 ] , b [ 102 ] ; int len , i , left , leftNum [ 102 ] ; while ( cin >> a ) { left = 0 ; len = strlen ( a ) ; for ( i = 0 ; i < 102 ; i ++ ) b [ i ] = ' ' ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) { b [ i ] = '$' ; left ++ ; leftNum [ left ] = i ; } if ( a [ i ] == ')' ) if ( left > 0 ) { b [ leftNum [ left ] ] = ' ' ; left -- ; } else b [ i ] = '?' ; } b [ len ] = '\0' ; cout << a << endl << b << endl ; } return 0 ; }
int main ( ) { char a [ 101 ] = { 0 } ; char b [ 101 ] ; int i , j , k ; int l , r ; int len ; while ( cin >> a ) { l = 0 ; r = 0 ; for ( i = 0 ; i < 101 ; i ++ ) { if ( a [ i ] == 0 ) { len = i ; break ; } } for ( i = 0 ; i < len ; i ++ ) { b [ i ] = ' ' ; } b [ len ] = 0 ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) l ++ ; if ( a [ i ] == ')' ) l -- ; if ( l < 0 ) { b [ i ] = '?' ; l = 0 ; } } for ( i = 0 ; i < len ; i ++ ) { if ( a [ len - i - 1 ] == ')' ) r ++ ; if ( a [ len - i - 1 ] == '(' ) r -- ; if ( r < 0 ) { b [ len - i - 1 ] = '$' ; r = 0 ; } } cout << a << endl << b << endl ; for ( i = 0 ; i < 101 ; i ++ ) { a [ i ] = 0 ; } } return 0 ; }
int main ( ) { char a [ 101 ] ; int i , num = 1 , j ; while ( cin . getline ( a , 101 ) ) { cout << a << endl ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { num = 1 ; if ( a [ i ] != ')' && a [ i ] != '(' ) cout << " " ; if ( a [ i ] == '(' ) { if ( a [ i + 1 ] == '\0' ) { cout << "$" ; continue ; } for ( j = i + 1 ; a [ j ] != '\0' ; j ++ ) { if ( a [ j ] == '(' ) num ++ ; if ( a [ j ] == ')' ) num -- ; if ( num == 0 ) { cout << " " ; break ; } if ( a [ j + 1 ] == '\0' && num != 0 ) cout << "$" ; } } num = 1 ; if ( a [ i ] == ')' ) { if ( i == 0 ) { cout << "?" ; continue ; } for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] == ')' ) num ++ ; if ( a [ j ] == '(' ) num -- ; if ( num == 0 ) { cout << " " ; break ; } if ( j == 0 && num != 0 ) cout << "?" ; } } } cout << endl ; } return 0 ; }
char s [ 1000 ] ; int dp [ 1000 ] ; int main ( void ) { int i , j , k , n ; scanf ( "%d" , & n ) ; while ( scanf ( "%s" , s ) == 1 ) { memset ( dp , 0 , sizeof ( dp ) ) ; n = strlen ( s ) ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '(' ) dp [ i ] = - 1 ; if ( s [ i ] == ')' ) dp [ i ] = 1 ; } for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ')' ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( s [ j ] == '(' && dp [ j ] == - 1 ) { dp [ i ] = 0 ; dp [ j ] = 0 ; break ; } } } } printf ( "%s\n" , s ) ; for ( i = 0 ; i < n ; i ++ ) { if ( dp [ i ] == - 1 ) printf ( "$" ) ; else if ( dp [ i ] == 1 ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char line [ 101 ] , label [ 101 ] ; int pos [ 100 ] ; int left = 0 , right = 0 ; int pos_i , len ; int i ; while ( cin . getline ( line , 101 ) ) { pos_i = - 1 , left = 0 ; right = 0 ; len = strlen ( line ) ; for ( i = 0 ; i < 100 ; i ++ ) label [ i ] = ' ' ; for ( i = 0 ; line [ i ] != '\0' ; i ++ ) { if ( line [ i ] == '(' ) { pos [ ++ pos_i ] = i ; left ++ ; } if ( line [ i ] == ')' ) { if ( left <= right ) label [ i ] = '?' ; else { right ++ ; pos_i -- ; } } } if ( pos_i >= 0 ) { for ( i = 0 ; i <= pos_i ; i ++ ) label [ pos [ i ] ] = '$' ; } i = len - 1 ; label [ i + 1 ] = '\0' ; cout << line << endl ; cout << label << endl ; } return 0 ; }
main ( ) { int i , j , k , g , ans , max , temp , n , l , t ; char c [ 1000 ] ; while ( scanf ( "%s" , c ) != EOF ) { printf ( "%s\n" , c ) ; for ( k = 0 ; k < 100 ; k ++ ) { for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { if ( c [ i ] == '(' ) { for ( j = i + 1 ; c [ j ] != '\0' ; j ++ ) { if ( c [ j ] == '(' ) { i = j - 1 ; break ; } if ( c [ j ] == ')' ) { c [ i ] = ' ' ; c [ j ] = ' ' ; break ; } } } } } for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { if ( c [ i ] == '(' ) c [ i ] = '$' ; else if ( c [ i ] == ')' ) c [ i ] = '?' ; else c [ i ] = ' ' ; } printf ( "%s\n" , c ) ; } }
int main ( ) { int h , i , j , k , l , m , n , len , left = 0 , t = 0 , c [ 101 ] = { 0 } ; char a [ 101 ] , b [ 101 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int c [ 101 ] = { 0 } ; left = 0 ; t = 0 ; scanf ( "%s" , a ) ; len = strlen ( a ) ; for ( j = 0 ; j < len ; j ++ ) b [ j ] = ' ' ; b [ len ] = '\0' ; for ( j = 0 ; j < len ; j ++ ) { if ( a [ j ] != '(' && a [ j ] != ')' ) b [ j ] = ' ' ; if ( a [ j ] == '(' ) { left ++ ; b [ j ] = '$' ; c [ t ] = j ; t ++ ; } if ( a [ j ] == ')' ) { if ( left == 0 ) { b [ j ] = '?' ; } else { t -- ; b [ c [ t ] ] = ' ' ; left -- ; } } } printf ( "%s\n" , a ) ; for ( h = 0 ; h < len ; h ++ ) { printf ( "%c" , b [ h ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { int h , i , j , k , l , m , n , len , left = 0 , t = 0 , c [ 101 ] = { 0 } ; char a [ 101 ] , b [ 101 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int c [ 101 ] = { 0 } ; left = 0 ; t = 0 ; scanf ( "%s" , a ) ; len = strlen ( a ) ; for ( j = 0 ; j < len ; j ++ ) { if ( a [ j ] != '(' && a [ j ] != ')' ) b [ j ] = ' ' ; if ( a [ j ] == '(' ) { left ++ ; b [ j ] = '$' ; c [ t ] = j ; t ++ ; } if ( a [ j ] == ')' ) { if ( left == 0 ) { b [ j ] = '?' ; } else { t -- ; b [ c [ t ] ] = ' ' ; b [ j ] = ' ' ; left -- ; } } } printf ( "%s\n" , a ) ; for ( h = 0 ; h < len ; h ++ ) { printf ( "%c" , b [ h ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; char c [ 10000 ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , c ) ; printf ( "%s\n" , c ) ; int j , x ; x = strlen ( c ) ; for ( j = 0 ; j < x ; j ++ ) { if ( c [ j ] != '(' && c [ j ] != ')' ) { c [ j ] = ' ' ; } } for ( j = 0 ; j < x ; j ++ ) { if ( c [ j ] == ')' ) { int m ; for ( m = j ; m >= 0 ; m -- ) { if ( c [ m ] == '(' ) { c [ m ] = ' ' ; c [ j ] = ' ' ; break ; } } } } for ( j = 0 ; j < x ; j ++ ) { if ( c [ j ] == '(' ) { c [ j ] = '$' ; } else if ( c [ j ] == ')' ) { c [ j ] = '?' ; } } printf ( "%s\n" , c ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int N ; cin >> N ; for ( int I = 0 ; I < N ; I ++ ) { int i ; char in [ 110 ] ; cin >> in ; cout << in << endl ; int n = strlen ( in ) ; char mark [ 110 ] ; for ( i = 0 ; i < n ; i ++ ) mark [ i ] = ' ' ; int left = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( in [ i ] == '(' ) left ++ ; else if ( in [ i ] == ')' ) { if ( left ) { left -- ; } else { mark [ i ] = '?' ; } } } int right = 0 ; for ( i = n - 1 ; i >= 0 ; i -- ) { if ( in [ i ] == ')' ) right ++ ; else if ( in [ i ] == '(' ) { if ( right ) { right -- ; } else { mark [ i ] = '$' ; } } } for ( i = 0 ; i < n ; i ++ ) cout << mark [ i ] ; cout << endl ; } return 0 ; }
int main ( ) { char s [ 100 ] [ 100 ] ; int c [ 100 ] , i , j , k = 0 ; while ( ( scanf ( "%s" , s [ k ] ) ) != EOF ) { puts ( s [ k ] ) ; for ( i = 0 ; i < strlen ( s [ k ] ) ; i ++ ) { if ( s [ k ] [ i ] == '(' ) c [ i ] = - 1 ; else if ( s [ k ] [ i ] == ')' ) c [ i ] = 1 ; else c [ i ] = 0 ; } for ( i = 1 ; i < strlen ( s [ k ] ) ; i ++ ) for ( j = 0 ; j < strlen ( s [ k ] ) - i ; j ++ ) if ( c [ j ] == - 1 && c [ j + i ] == 1 ) { c [ j ] = 0 ; c [ j + i ] = 0 ; } for ( i = 0 ; i < strlen ( s [ k ] ) ; i ++ ) { if ( c [ i ] == 0 ) printf ( " " ) ; else if ( c [ i ] == - 1 ) printf ( "$" ) ; else if ( c [ i ] == 1 ) printf ( "?" ) ; } printf ( "\n" ) ; k ++ ; } return 0 ; }
void print ( int n1 , int z [ 500 ] , char s [ 500 ] ) ; void search ( int a [ 500 ] , int h ) ; char s [ 500 ] ; int z [ 500 ] ; int main ( ) { while ( scanf ( "%s" , s ) != EOF ) { int h , a , l1 = 0 , l2 = 0 ; h = strlen ( s ) ; for ( a = 0 ; a <= h - 1 ; a ++ ) { if ( s [ a ] == '(' ) { z [ a ] = 1 ; } else { if ( s [ a ] == ')' ) { z [ a ] = 2 ; } else { z [ a ] = 0 ; } } } search ( z , h ) ; print ( h , z , s ) ; } return 0 ; } void search ( int z [ 500 ] , int h ) { int k , m , n ; for ( m = 1 ; m <= h - 1 ; m ++ ) for ( k = 0 ; ( k + m ) <= ( h - 1 ) ; k ++ ) if ( ( z [ k ] == 1 ) && ( z [ k + m ] == 2 ) ) { z [ k ] = 0 ; z [ k + m ] = 0 ; } } void print ( int n1 , int z [ 500 ] , char s [ 500 ] ) { int a ; for ( a = 0 ; a < n1 ; a ++ ) { printf ( "%c" , s [ a ] ) ; } printf ( "\n" ) ; for ( a = 0 ; a < n1 ; a ++ ) { if ( z [ a ] == 0 ) printf ( " " ) ; if ( z [ a ] == 1 ) printf ( "$" ) ; if ( z [ a ] == 2 ) printf ( "?" ) ; } printf ( "\n" ) ; }
int main ( ) { int n , i ; scanf ( "%d\n" , & n ) ; while ( n > 0 ) { char s [ 104 ] , start = 0 ; int len = 0 ; gets ( s ) ; puts ( s ) ; len = strlen ( s ) ; int j ; for ( i = len - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '(' ) { for ( j = i ; j < len ; j ++ ) { if ( s [ j ] == ')' ) { s [ i ] = ' ' ; s [ j ] = ' ' ; break ; } } } } for ( i = 0 ; i < len ; i ++ ) { if ( s [ i ] == '(' ) printf ( "$" ) ; else if ( s [ i ] == ')' ) printf ( "?" ) ; else printf ( " " ) ; } printf ( "\n" ) ; n -- ; } }
struct bracket { char data [ max ] ; int top ; } ; int main ( ) { char str [ max ] = { 0 } , flag [ max ] = { 0 } ; int i , len , n ; struct bracket * leftbracket , * rightbracket ; scanf ( "%d" , & n ) ; while ( n > 0 ) { while ( scanf ( "%s" , str ) != EOF ) { leftbracket = ( struct bracket * ) malloc ( sizeof ( struct bracket ) ) ; rightbracket = ( struct bracket * ) malloc ( sizeof ( struct bracket ) ) ; leftbracket -> top = rightbracket -> top = 0 ; len = strlen ( str ) ; for ( i = 0 ; i < len ; i ++ ) { switch ( str [ i ] ) { case '(' : leftbracket -> data [ leftbracket -> top ++ ] = str [ i ] ; flag [ i ] = ' ' ; break ; case ')' : if ( leftbracket -> top > 0 ) { flag [ i ] = ' ' ; leftbracket -> top -= 1 ; } else { flag [ i ] = '?' ; } break ; default : flag [ i ] = ' ' ; break ; } } for ( i = len - 1 ; i >= 0 ; i -- ) { switch ( str [ i ] ) { case ')' : rightbracket -> data [ rightbracket -> top ++ ] = str [ i ] ; break ; case '(' : if ( rightbracket -> top > 0 ) { rightbracket -> top -= 1 ; } else { flag [ i ] = '$' ; } break ; default : break ; } } printf ( "%s\n%s\n" , str , flag ) ; memset ( str , '\0' , sizeof ( str ) ) ; memset ( flag , '\0' , sizeof ( flag ) ) ; } n -- ; } return 0 ; }
int num ; char right ( char c ) { char ch ; if ( c != '(' && c != ')' ) ch = ' ' ; else if ( c == ')' ) { if ( num == 0 ) ch = '?' ; else { num -- ; ch = ' ' ; } } else { num ++ ; ch = c ; } return ch ; } char left ( char c , char a ) { char ch ; if ( a == ' ' || a == '?' ) { ch = a ; if ( c == ')' ) num ++ ; } else if ( num == 0 ) ch = '$' ; else { num -- ; ch = ' ' ; } return ch ; } main ( ) { int i ; char s [ 101 ] , a [ 101 ] ; while ( gets ( s ) ) { num = 0 ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) a [ i ] = right ( s [ i ] ) ; num = 0 ; for ( i = strlen ( s ) - 1 ; i >= 0 ; i -- ) a [ i ] = left ( s [ i ] , a [ i ] ) ; puts ( s ) ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int num ; char right ( char c ) { char ch ; if ( c != '(' && c != ')' ) ch = ' ' ; else if ( c == ')' ) { if ( num == 0 ) ch = '?' ; else { num -- ; ch = ' ' ; } } else { num ++ ; ch = c ; } return ch ; } char left ( char c , char a ) { char ch ; if ( a == ' ' || a == '?' ) { ch = a ; if ( c == ')' ) num ++ ; } else if ( num == 0 ) ch = '$' ; else { num -- ; ch = ' ' ; } return ch ; } main ( ) { int i , n ; char s [ 101 ] , a [ 101 ] ; scanf ( "%d" , & n ) ; while ( gets ( s ) ) { num = 0 ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) a [ i ] = right ( s [ i ] ) ; num = 0 ; for ( i = strlen ( s ) - 1 ; i >= 0 ; i -- ) a [ i ] = left ( s [ i ] , a [ i ] ) ; puts ( s ) ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { char a [ 100 ] , b [ 100 ] ; int left [ 100 ] , k = 0 , len , i ; while ( scanf ( "%s" , & a ) != EOF ) { len = strlen ( a ) ; puts ( a ) ; for ( i = 0 ; i < len ; i ++ ) { b [ i ] = 32 ; } for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) { k ++ ; left [ k ] = i ; } } for ( ; k > 0 ; k -- ) { for ( i = left [ k ] ; i < len ; i ++ ) { if ( a [ i ] == ')' ) { a [ i ] = ' ' ; a [ left [ k ] ] = ' ' ; break ; } } } for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) { b [ i ] = '$' ; } if ( a [ i ] == ')' ) { b [ i ] = '?' ; } } for ( i = 0 ; i < len ; i ++ ) printf ( "%c" , b [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { int i , l , flag = 0 , temp , z ; char a [ 1000 ] ; while ( gets ( a ) != NULL ) { printf ( "%s\n" , a ) ; l = strlen ( a ) ; for ( z = 1 ; z <= l ; z ++ ) { flag = 0 ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] != '(' && a [ i ] != ')' ) { a [ i ] = ' ' ; } if ( a [ i ] == '(' ) { flag = 1 ; temp = i ; } if ( a [ i ] == ')' && flag == 1 ) { a [ i ] = ' ' ; a [ temp ] = ' ' ; flag = 0 ; } } } for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; if ( a [ i ] == ')' ) a [ i ] = '?' ; } printf ( "%s\n" , a ) ; } return 0 ; }
int main ( ) { char a [ 100 ] ; int b [ 100 ] = { 0 } ; while ( cin . getline ( a , 101 ) ) { cout << a << endl ; char a1 [ 100 ] = " " ; int len = strlen ( a ) ; int i = 0 ; int lnum = 0 , rnum = 0 ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) { b [ lnum ] = i ; lnum ++ ; } if ( a [ i ] == ')' ) { rnum ++ ; if ( rnum > lnum ) { a1 [ i ] = '?' ; rnum -- ; } else { lnum -- ; rnum -- ; } } } for ( i = 0 ; i < lnum ; i ++ ) a1 [ b [ i ] ] = '$' ; for ( i = 0 ; i < len ; i ++ ) { if ( ( a1 [ i ] == '$' ) || ( a1 [ i ] == '?' ) ) cout << a1 [ i ] ; else cout << " " ; } cout << endl ; } return 0 ; }
main ( ) { char a [ 101 ] ; int l , i , j , n ; while ( scanf ( "%s" , a ) != EOF ) { l = strlen ( a ) ; puts ( a ) ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] != '(' && a [ i ] != ')' ) a [ i ] = ' ' ; else { if ( a [ i ] == ')' ) { n = 0 ; for ( j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] == '(' ) { a [ i ] = ' ' ; a [ j ] = ' ' ; n ++ ; break ; } } if ( n == 0 ) a [ i ] = '?' ; } } } for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; } puts ( a ) ; } return 0 ; }
int f1 ( char zichuan [ ] , int changdu ) { int i , n ; for ( i = changdu - 1 ; i >= 0 ; i -- ) { if ( zichuan [ i ] == '(' ) { n = i + 1 ; while ( zichuan [ n ] != ')' ) { n = n + 1 ; } if ( n < changdu ) { zichuan [ i ] = ' ' ; zichuan [ n ] = ' ' ; } } } return 0 ; } int main ( ) { int i = 0 , changdu ; char s [ 100 ] ; while ( gets ( s ) ) { changdu = strlen ( s ) ; printf ( "%s\n" , s ) ; f1 ( s , changdu ) ; for ( i = 0 ; i < changdu ; i ++ ) { switch ( s [ i ] ) { case '(' : s [ i ] = '$' ; break ; case ')' : s [ i ] = '?' ; break ; default : s [ i ] = ' ' ; break ; } } for ( i = 0 ; i < changdu ; i ++ ) { printf ( "%c" , s [ i ] ) ; } printf ( "\n" ) ; } return 0 ; }
main ( ) { char a [ 100 ] [ 101 ] , b [ 101 ] , c [ 101 ] ; int n , m ; scanf ( "%d" , & n ) ; for ( m = 0 ; m < n ; m ++ ) { scanf ( "%s" , a [ m ] ) ; } for ( m = 0 ; m < n ; m ++ ) { int i = 0 , j = 0 , k = 0 ; int n ; n = strlen ( a [ m ] ) ; for ( i = 0 ; i < n ; i ++ ) { b [ i ] = ' ' ; c [ i ] = ' ' ; } for ( i = n - 1 ; i >= 0 ; i -- ) if ( a [ m ] [ i ] == '(' ) b [ i ] = a [ m ] [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ m ] [ i ] == ')' ) c [ i ] = a [ m ] [ i ] ; for ( i = n - 1 ; i >= 0 ; i -- ) if ( b [ i ] == '(' ) { for ( j = i + 1 ; j < n ; j ++ ) if ( c [ j ] == ')' ) { c [ j ] = ' ' ; b [ i ] = ' ' ; break ; } } printf ( "%s\n" , a [ m ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] != ' ' ) a [ m ] [ i ] = '$' ; if ( c [ i ] != ' ' ) a [ m ] [ i ] = '?' ; if ( b [ i ] == ' ' && c [ i ] == ' ' ) a [ m ] [ i ] = ' ' ; } printf ( "%s\n" , a [ m ] ) ; } }
int main ( ) { int i , j , flag [ 101 ] = { 0 } ; char str [ 101 ] ; while ( cin >> str ) { for ( i = 0 ; i < strlen ( str ) ; i ++ ) { cout << str [ i ] ; if ( str [ i ] == ')' ) { for ( j = i ; j >= 0 ; j -- ) { if ( str [ j ] == '(' && flag [ j ] == 0 ) { flag [ i ] = 1 ; flag [ j ] = 1 ; break ; } } } } cout << endl ; for ( i = 0 ; i < strlen ( str ) ; i ++ ) { if ( str [ i ] == '(' && flag [ i ] == 0 ) cout << "$" ; else if ( str [ i ] == ')' && flag [ i ] == 0 ) cout << "?" ; else cout << " " ; } cout << endl ; memset ( flag , 0 , sizeof ( flag ) ) ; } return 0 ; }
int main ( ) { int n ; cin >> n ; while ( n -- ) { char a [ 1000 ] ; cin >> a ; cout << a << '\n' ; int len = strlen ( a ) ; for ( int i = 0 ; i < len ; i ++ ) { int l = - 1 , r = - 1 ; for ( int j = i ; j >= 0 ; j -- ) { if ( a [ j ] == ')' && j != i ) break ; else if ( a [ j ] == '(' ) { l = j ; break ; } } for ( int j = i ; j < len ; j ++ ) { if ( a [ j ] == '(' && j != i ) break ; else if ( a [ j ] == ')' ) { r = j ; break ; } } if ( r != - 1 && l != - 1 ) { a [ r ] = '0' ; a [ l ] = '0' ; } } for ( int i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) cout << '$' ; else if ( a [ i ] == ')' ) cout << '?' ; else cout << " " ; } cout << '\n' ; } return 0 ; }
int main ( ) { char words [ 101 ] = { 0 } ; while ( cin >> words ) { cout << words << endl ; int i = 0 , j = 0 ; for ( i = 0 ; words [ i ] != 0 ; i ++ ) { if ( words [ i ] != '(' && words [ i ] != ')' ) words [ i ] = ' ' ; if ( words [ i ] == ')' ) { for ( j = i - 1 ; j >= 0 ; j -- ) { if ( words [ j ] == '(' ) { words [ j ] = ' ' ; words [ i ] = ' ' ; break ; } } } } for ( i = 0 ; words [ i ] != 0 ; i ++ ) { if ( words [ i ] == '(' ) words [ i ] = '$' ; if ( words [ i ] == ')' ) words [ i ] = '?' ; } cout << words << endl ; } return 0 ; }
int main ( ) { int n , i , j , m = 0 , x , y ; scanf ( "%d" , & n ) ; char a [ 100 ] [ 1000 ] ; for ( i = 0 ; i < n + 1 ; i ++ ) gets ( a [ i ] ) ; for ( i = 0 ; i < n + 1 ; i ++ ) { for ( j = 0 ; a [ i ] [ j ] != '\0' ; j ++ ) printf ( "%c" , a [ i ] [ j ] ) ; printf ( "\n" ) ; x = j ; for ( j = 0 ; j < x ; j ++ ) { if ( a [ i ] [ j ] == ')' ) { if ( j == 0 ) a [ i ] [ j ] = '?' ; for ( m = 1 ; j - m >= 0 ; m ++ ) if ( a [ i ] [ j - m ] == '(' ) { a [ i ] [ j - m ] = ' ' ; a [ i ] [ j ] = ' ' ; break ; } else a [ i ] [ j ] = '?' ; } if ( a [ i ] [ j ] != '(' && a [ i ] [ j ] != ')' && a [ i ] [ j ] != '?' ) a [ i ] [ j ] = ' ' ; } for ( j = x - 1 ; j >= 0 ; j -- ) if ( a [ i ] [ j ] == '(' ) { if ( j == x - 1 ) a [ i ] [ j ] = '$' ; else for ( m = 1 ; j + m < x ; m ++ ) if ( a [ i ] [ j + m ] == ')' ) { a [ i ] [ j ] = ' ' ; a [ i ] [ j + m ] = ' ' ; break ; } else a [ i ] [ j ] = '$' ; } for ( j = 0 ; j < x ; j ++ ) printf ( "%c" , a [ i ] [ j ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { int n , i , j , m = 0 , x , y ; scanf ( "%d" , & n ) ; char a [ n ] [ 1000 ] ; getchar ( ) ; for ( i = 0 ; i < n ; i ++ ) gets ( a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; a [ i ] [ j ] != '\0' ; j ++ ) printf ( "%c" , a [ i ] [ j ] ) ; printf ( "\n" ) ; x = j ; for ( j = 0 ; j < x ; j ++ ) { if ( a [ i ] [ j ] == ')' ) { if ( j == 0 ) a [ i ] [ j ] = '?' ; for ( m = 1 ; j - m >= 0 ; m ++ ) if ( a [ i ] [ j - m ] == '(' ) { a [ i ] [ j - m ] = ' ' ; a [ i ] [ j ] = ' ' ; break ; } else a [ i ] [ j ] = '?' ; } if ( a [ i ] [ j ] != '(' && a [ i ] [ j ] != ')' && a [ i ] [ j ] != '?' ) a [ i ] [ j ] = ' ' ; } for ( j = x - 1 ; j >= 0 ; j -- ) if ( a [ i ] [ j ] == '(' ) { if ( j == x - 1 ) a [ i ] [ j ] = '$' ; else for ( m = 1 ; j + m < x ; m ++ ) if ( a [ i ] [ j + m ] == ')' ) { a [ i ] [ j ] = ' ' ; a [ i ] [ j + m ] = ' ' ; break ; } else a [ i ] [ j ] = '$' ; } for ( j = 0 ; j < x ; j ++ ) printf ( "%c" , a [ i ] [ j ] ) ; printf ( "\n" ) ; } return 0 ; }
char s [ 1000 ] ; char m [ 1000 ] ; int match ( int l ) { int r = l ; while ( s [ ++ r ] != ')' ) { if ( s [ r ] == '(' ) r = match ( r ) ; if ( s [ r ] == '\0' ) break ; } if ( s [ r ] == '\0' ) m [ l ] = '$' ; return r ; } int nextL ( int i ) { while ( s [ i ] != '\0' && s [ i ] != '(' ) { if ( s [ i ] == ')' ) m [ i ] = '?' ; i ++ ; } return i ; } int main ( ) { int i , j , k ; while ( cin >> s ) { for ( i = 0 ; i < strlen ( s ) ; ++ i ) m [ i ] = ' ' ; m [ i ] = '\0' ; i = 0 ; i = nextL ( i ) ; while ( s [ i ] != '\0' ) { i = match ( i ) ; if ( s [ i ] == '\0' ) break ; else i ++ ; i = nextL ( i ) ; } cout << s << endl << m << endl ; } return 0 ; }
void course ( char a [ ] , int n ) { int i , j , k ; for ( k = 0 ; k < n ; k ++ ) { if ( a [ k ] == ')' ) a [ k ] = '?' ; else if ( a [ k ] == '(' ) a [ k ] = '$' ; else a [ k ] = 32 ; } for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] == '$' ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] == '$' ) break ; else if ( a [ j ] == '?' ) { a [ i ] = 32 ; a [ j ] = 32 ; break ; } else continue ; } } } } } int main ( ) { char a [ 10000 ] ; int n ; while ( scanf ( "%s" , a ) != EOF ) { puts ( a ) ; n = strlen ( a ) ; course ( a , n ) ; puts ( a ) ; } return 0 ; }
int left ( int x , char s [ ] , int n ) ; int main ( ) { int l ; char c [ 101 ] = { 0 } ; gets ( c ) ; puts ( c ) ; l = left ( 0 , c , 0 ) ; printf ( "%s" , c ) ; while ( ( scanf ( "%s" , c ) != EOF ) ) { printf ( "\n" ) ; puts ( c ) ; l = left ( 0 , c , 0 ) ; printf ( "%s" , c ) ; } return 0 ; } int left ( int x , char s [ ] , int n ) { int a ; if ( s [ n ] != '\0' ) { if ( s [ n ] == '(' ) { a = left ( x + 1 , s , n + 1 ) ; if ( a > 0 ) { s [ n ] = ' ' ; return ( a - 1 ) ; } else { s [ n ] = '$' ; return 0 ; } } else if ( s [ n ] == ')' ) { if ( x > 0 ) { s [ n ] = ' ' ; return ( left ( x - 1 , s , n + 1 ) + 1 ) ; } else { s [ n ] = '?' ; return ( left ( 0 , s , n + 1 ) + 1 ) ; } } else { s [ n ] = ' ' ; return left ( x , s , n + 1 ) ; } } else return 0 ; }
char s2 [ 101 ] ; int ma ( char s [ ] , int p , int le ) { int ri ; if ( s [ p ] == 0 ) { s2 [ p ] = 0 ; return 0 ; } else { if ( s [ p ] == '(' ) { ri = ma ( s , p + 1 , le + 1 ) ; if ( ri ) { s2 [ p ] = ' ' ; return ri - 1 ; } else { s2 [ p ] = '$' ; return 0 ; } } else if ( s [ p ] == ')' ) { if ( le ) { s2 [ p ] = ' ' ; return ma ( s , p + 1 , le - 1 ) + 1 ; } else { s2 [ p ] = '?' ; return ma ( s , p + 1 , 0 ) + 1 ; } } else { s2 [ p ] = ' ' ; return ma ( s , p + 1 , le ) ; } } } int main ( ) { int n ; scanf ( "%d\n" , & n ) ; char s1 [ 101 ] ; int t ; while ( n ) { n = n - 1 ; gets ( s1 ) ; puts ( s1 ) ; t = ma ( s1 , 0 , 0 ) ; printf ( "%s" , s2 ) ; if ( n ) printf ( "\n" ) ; } return 0 ; }
int show ( char a [ ] , int t ) { int i , k , l , j = 1 ; static int b [ 101 ] ; puts ( a ) ; for ( i = 0 ; i <= t - 1 ; i ++ ) switch ( a [ i ] ) { case '(' : a [ i ] = ' ' ; b [ j ] = i + 1 ; j ++ ; break ; case ')' : a [ i ] = ' ' ; b [ j ] = - ( i + 1 ) ; j ++ ; break ; default : a [ i ] = ' ' ; } j -- ; do { l = 0 ; for ( k = 1 ; k <= j - 1 ; k ++ ) if ( b [ k ] > 0 ) { for ( i = k + 1 ; i <= j ; i ++ ) if ( b [ i ] != 0 ) break ; if ( b [ k ] * b [ i ] < 0 ) { b [ k ] = 0 ; b [ i ] = 0 ; l ++ ; } } } while ( l > 0 ) ; for ( i = 1 ; i <= j ; i ++ ) { if ( b [ i ] < 0 ) a [ - b [ i ] - 1 ] = '?' ; else if ( b [ i ] > 0 ) a [ b [ i ] - 1 ] = '$' ; } puts ( a ) ; return 0 ; } int main ( ) { int i , n ; scanf ( "%d\n" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { char a [ 101 ] ; int t ; a [ 0 ] = '\n' ; gets ( a ) ; if ( a [ 0 ] != '\n' ) { t = strlen ( a ) ; show ( a , t ) ; } else break ; } return 0 ; }
int j = 1 ; int main ( ) { char a [ 101 ] ; a [ 0 ] = 0 ; l : scanf ( "%s" , a ) ; if ( a [ 0 ] == 0 ) return 0 ; else printf ( "%s\n" , a ) ; int r , i , k ; r = strlen ( a ) ; for ( i = r - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != '(' && a [ i ] != ')' ) a [ i ] = ' ' ; else if ( a [ i ] == '(' ) { for ( k = i ; k <= r - 1 ; k ++ ) { if ( a [ k ] == ')' ) { a [ i ] = ' ' ; a [ k ] = ' ' ; break ; } } } } for ( i = 0 ; i <= r - 1 ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; else if ( a [ i ] == ')' ) a [ i ] = '?' ; } printf ( "%s\n" , a ) ; return main ( ) ; }
main ( ) { int i ; for ( i = 0 ; i < 100 ; i ++ ) { char a [ 100 ] = { '\0' } , b [ 100 ] = { '\0' } ; int c [ 100 ] = { 0 } , d [ 100 ] = { 0 } ; int k , m , t = 0 , c1 = 0 , c2 = 0 , j1 = 0 , j2 = 0 , z = 0 , y = 0 , h = 0 ; scanf ( "%s" , a ) ; int l = strlen ( a ) ; for ( k = 0 ; k < l ; k ++ ) { if ( a [ k ] == '(' ) { c1 = k ; c [ j1 ] = k ; j1 ++ ; } else if ( a [ k ] == ')' ) { c2 = k ; d [ j2 ] = k ; j2 ++ ; } else b [ k ] = ' ' ; } for ( k = 0 ; k < j2 ; k ++ ) { for ( m = 0 ; m < j1 ; m ++ ) if ( d [ k ] > c [ m ] ) { y ++ ; if ( c [ m ] != - 1 ) { t ++ ; h = m ; } else z = m ; } if ( t == 0 ) { b [ d [ k ] ] = '?' ; d [ k ] = - 1 ; } else { if ( z != y - 1 ) { b [ c [ y - 1 ] ] = ' ' ; c [ y - 1 ] = - 1 ; b [ d [ k ] ] = ' ' ; d [ k ] = - 1 ; } else { b [ c [ h ] ] = ' ' ; c [ h ] = - 1 ; b [ d [ k ] ] = ' ' ; d [ k ] = - 1 ; } } t = 0 ; y = 0 ; } for ( k = 0 ; k < j1 ; k ++ ) { if ( c [ k ] != - 1 ) b [ c [ k ] ] = '$' ; } for ( k = 0 ; k < j2 ; k ++ ) { if ( d [ k ] != - 1 ) b [ d [ k ] ] = '?' ; } printf ( "%s\n" , a ) ; for ( k = 0 ; k < l ; k ++ ) printf ( "%c" , b [ k ] ) ; printf ( "\n" ) ; } getchar ( ) ; getchar ( ) ; }
int a ; char str [ 100 ] ; void find ( void ) ; int main ( ) { int i ; while ( cin >> str ) { cout << str << endl ; a = strlen ( str ) ; find ( ) ; for ( i = 0 ; i < a ; i ++ ) { if ( str [ i ] == '(' ) cout << "$" ; else { if ( str [ i ] == ')' ) cout << "?" ; else cout << " " ; } } cout << endl ; } return 0 ; } void find ( void ) { int i = 0 ; int p = - 1 , q = - 1 ; for ( i = 0 ; i < a ; i ++ ) { if ( str [ i ] != '(' && str [ i ] != ')' ) str [ i ] = '\0' ; if ( str [ i ] == '(' ) p = i ; if ( p != - 1 && str [ i ] == ')' ) { q = i ; break ; } } if ( p != - 1 && q != - 1 ) { str [ p ] = '\0' ; str [ q ] = '\0' ; find ( ) ; } }
int main ( ) { int i , j ; char a [ 101 ] = { 0 } , b [ 101 ] = { 0 } ; while ( scanf ( "%s" , a ) != EOF ) { strcpy ( b , a ) ; for ( i = 0 ; a [ i ] != 0 ; i ++ ) { if ( a [ i ] == '(' ) a [ i ] = '$' ; else if ( a [ i ] == ')' ) a [ i ] = '?' ; else a [ i ] = ' ' ; } for ( i = 0 ; a [ i ] != 0 ; i ++ ) { if ( a [ i ] == '?' ) { for ( j = i - 1 ; j > - 1 ; j -- ) if ( a [ j ] == '$' ) { a [ j ] = ' ' ; a [ i ] = ' ' ; break ; } } } printf ( "%s\n" , b ) ; printf ( "%s\n" , a ) ; } return 0 ; }
int main ( ) { int n , i , j , l ; char s [ 102 ] ; while ( scanf ( "%s" , s ) != EOF ) { l = strlen ( s ) ; printf ( "%s\n" , s ) ; for ( i = 0 ; i < l ; i ++ ) if ( s [ i ] == '(' ) s [ i ] = '$' ; else if ( s [ i ] == ')' ) { s [ i ] = '?' ; for ( j = i - 1 ; j > - 1 ; j -- ) if ( s [ j ] == '$' ) { s [ j ] = ' ' ; s [ i ] = ' ' ; break ; } } else s [ i ] = ' ' ; printf ( "%s\n" , s ) ; } return 0 ; }
int main ( ) { char a [ 1000 ] = { 0 } , b [ 1000 ] = { 0 } ; int i , j ; while ( gets ( a ) ) { for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { b [ i ] = a [ i ] ; } b [ i ] = '\0' ; for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { if ( b [ i ] == ')' ) { for ( j = i ; j >= 0 ; j -- ) { if ( b [ j ] == '(' ) { b [ j ] = ' ' ; b [ i ] = ' ' ; break ; } } } } for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { if ( ( b [ i ] >= 'a' && b [ i ] <= 'z' ) || ( b [ i ] >= 'A' && b [ i ] <= 'Z' ) ) b [ i ] = ' ' ; else if ( b [ i ] == '(' ) b [ i ] = '$' ; else if ( b [ i ] == ')' ) b [ i ] = '?' ; } cout << a << endl ; cout << b << endl ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , i , j , k , m ; int len ; char c [ 101 ] = { '0' } ; scanf ( "%d" , & n ) ; getchar ( ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , c ) ; printf ( "%s\n" , c ) ; len = strlen ( c ) ; for ( j = len - 1 ; j >= 0 ; j -- ) { if ( c [ j ] != '(' && c [ j ] != ')' ) c [ j ] = ' ' ; if ( c [ j ] == '(' && j == len - 1 ) c [ j ] = '$' ; if ( c [ j ] == '(' ) { k = j ; for ( m = k ; m < len ; m ++ ) { if ( c [ m ] == ')' ) { c [ m ] = ' ' ; c [ j ] = ' ' ; break ; } } if ( m == len - 1 && c [ len - 1 ] != ' ' ) { c [ j ] = '$' ; } } } for ( j = 0 ; j < len ; j ++ ) { if ( c [ j ] == ')' ) c [ j ] = '?' ; if ( c [ j ] == '(' ) c [ j ] = '$' ; } printf ( "%s\n" , c ) ; } return 0 ; }
int main ( ) { char a [ 101 ] ; int s [ 101 ] , len , k = 0 , i ; while ( cin >> a ) { for ( len = 0 ; a [ len ] != '\0' ; len ++ ) ; cout << a << endl ; for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == '(' ) s [ k ++ ] = i ; if ( a [ i ] == ')' && k > 0 ) { a [ s [ -- k ] ] = ' ' ; a [ i ] = ' ' ; } if ( a [ i ] != '(' && a [ i ] != ')' ) a [ i ] = ' ' ; if ( a [ i ] == ')' && k == 0 ) a [ i ] = '?' ; } for ( i = k - 1 ; i >= 0 ; i -- ) a [ s [ i ] ] = '$' ; cout << a << endl ; memset ( a , 0 , sizeof ( a ) ) ; k = 0 ; } return 0 ; }
int main ( ) { char a [ 105 ] ; int mark [ 105 ] = { 0 } ; while ( cin . getline ( a , 101 ) ) { for ( int i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == '(' ) { mark [ i ] = 1 ; } if ( a [ i ] == ')' ) { mark [ i ] = - 1 ; } } for ( int i = 1 ; i < strlen ( a ) ; i ++ ) { if ( mark [ i ] == - 1 ) { for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( mark [ j ] == 1 ) { mark [ i ] = 0 ; mark [ j ] = 0 ; break ; } } } } for ( int i = 0 ; i < strlen ( a ) ; i ++ ) cout << a [ i ] ; cout << endl ; for ( int i = 0 ; i < strlen ( a ) ; i ++ ) { if ( mark [ i ] == 0 ) cout << " " ; else if ( mark [ i ] == 1 ) cout << "$" ; else cout << "?" ; } cout << endl ; for ( int i = 0 ; i < strlen ( a ) ; i ++ ) mark [ i ] = 0 ; } return 0 ; }
int main ( ) { int len = 0 , i = 0 , j = 0 , sum = 0 ; char in [ 101 ] ; int sign [ 101 ] ; char out [ 101 ] ; while ( cin >> in ) { len = strlen ( in ) ; for ( i = 0 ; i < len ; i ++ ) sign [ i ] = 0 ; for ( i = 0 ; i < len ; i ++ ) out [ i ] = ' ' ; out [ len ] = '\0' ; for ( i = 0 ; i < len ; i ++ ) { sum = 1 ; if ( in [ i ] == '(' ) { if ( i == len - 1 ) out [ i ] = '$' ; else { for ( j = i + 1 ; j < len ; j ++ ) { if ( in [ j ] == '(' ) sum = sum + 1 ; if ( in [ j ] == ')' ) sum = sum - 1 ; if ( sum == 0 ) { sign [ j ] = 1 ; break ; } } if ( sum != 0 ) out [ i ] = '$' ; } } } for ( i = 0 ; i < len ; i ++ ) { if ( in [ i ] == ')' && sign [ i ] == 0 ) out [ i ] = '?' ; } cout << in << endl ; cout << out << endl ; } return 0 ; }
int main ( ) { int len = 0 , i = 0 , j = 0 , sum = 0 ; char in [ 101 ] ; int sign [ 101 ] ; char out [ 101 ] ; while ( cin . getline ( in , 101 ) && in [ 0 ] != '\0' ) { len = strlen ( in ) ; for ( i = 0 ; i < len ; i ++ ) sign [ i ] = 0 ; for ( i = 0 ; i < len ; i ++ ) out [ i ] = ' ' ; out [ len ] = '\0' ; for ( i = 0 ; i < len ; i ++ ) { sum = 1 ; if ( in [ i ] == '(' ) { if ( i == len - 1 ) out [ i ] = '$' ; else { for ( j = i + 1 ; j < len ; j ++ ) { if ( in [ j ] == '(' ) sum = sum + 1 ; if ( in [ j ] == ')' ) sum = sum - 1 ; if ( sum == 0 ) { sign [ j ] = 1 ; break ; } } if ( sum != 0 ) out [ i ] = '$' ; } } } for ( i = 0 ; i < len ; i ++ ) { if ( in [ i ] == ')' && sign [ i ] == 0 ) out [ i ] = '?' ; } cout << in << endl ; cout << out << endl ; } return 0 ; }
int main ( ) { char a [ 205 ] ; while ( cin . getline ( a , 200 ) ) { char b [ 205 ] ; int x [ 205 ] = { - 1 } , y [ 205 ] = { - 1 } , i , j , k , n , p , q ; p = 0 ; q = 0 ; n = strlen ( a ) ; for ( i = 0 ; i < n ; i ++ ) b [ i ] = ' ' ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == '(' ) { p ++ ; x [ p ] = i ; } if ( a [ i ] == ')' ) { q ++ ; y [ q ] = i ; if ( ( p != 0 ) && ( x [ p ] < y [ q ] ) ) { x [ p ] = - 1 ; y [ q ] = - 1 ; p -- ; q -- ; } } } for ( i = 1 ; i <= p ; i ++ ) b [ x [ i ] ] = '$' ; for ( i = 1 ; i <= q ; i ++ ) b [ y [ i ] ] = '?' ; cout << a << endl ; for ( i = 0 ; i < n ; i ++ ) cout << b [ i ] ; cout << endl ; } return 0 ; }
int main ( ) { char line [ 101 ] , label [ 101 ] ; int pos [ 100 ] ; int left = 0 , right = 0 ; int pos_i , len ; int i ; while ( cin . getline ( line , 101 ) ) { pos_i = - 1 , left = 0 ; right = 0 ; len = strlen ( line ) ; for ( i = 0 ; i < 100 ; i ++ ) label [ i ] = ' ' ; for ( i = 0 ; line [ i ] != '\0' ; i ++ ) { if ( line [ i ] == '(' ) { pos [ ++ pos_i ] = i ; left ++ ; } if ( line [ i ] == ')' ) if ( left <= right ) label [ i ] = '?' ; else { right ++ ; pos_i -- ; } } if ( pos_i >= 0 ) { for ( i = 0 ; i <= pos_i ; i ++ ) label [ pos [ i ] ] = '$' ; } label [ len ] = '\0' ; cout << line << endl ; cout << label << endl ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; k , m , n ; int min , sum ; scanf ( "%d" , & m ) ; for ( k = 0 ; k < m ; k ++ ) { n = m ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } while ( n > 1 ) { for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ i ] [ j ] < min ) { min = a [ i ] [ j ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j } } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] [ j ] < min ) { min = a [ i ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { a [ i ] [ j } } /* ??(1,1)?? */ sum += a [ 1 ] [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } } for ( j = 2 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } } /* ??????1 */ n -- ; } /* ???? */ printf ( "%d\n" , sum ) ; } return 0 ; } char mn [ ] 31 } ; int xn = 0 ; int max_files = sizeoizeof ( mn [ 0 ] ) ; char * output_dir = "data" ; int rnd ( int min , int max ) { return min + ( ( rand ( ) << 15 ) | rand ( ) ) % ( max - min + 1 ) ; } void xbuild ( ) { k , n ; n = mn [ xn ] ; printf ( "%d\n" , n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) { printf ( "%d" ) ; for ( j = 1 ; j < n ; j ++ ) { printf ( " %d" ) ; } printf ( "\n" ) ; } } xn ++ ; }
int main ( ) { int n , cnt , kobe ; cin >> n ; cnt = n ; int ( * p ) [ 200 ] , a [ 200 ] [ 200 ] = { 0 } ; while ( cnt -- ) { int i , j , sum = 0 ; long min ; kobe = n ; p = a ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> * ( * ( p + i ) + j ) ; for ( int k = 0 ; k < n - 1 ; k ++ ) { for ( i = 0 ; i < kobe ; i ++ ) { min = 999999999 ; for ( j = 0 ; j < kobe ; j ++ ) if ( * ( * ( p + i ) + j ) < min ) min = * ( * ( p + i ) + j ) ; for ( j = 0 ; j < kobe ; j ++ ) * ( * ( p + i ) + j ) -= min ; } for ( j = 0 ; j < kobe ; j ++ ) { min = 999999999 ; for ( i = 0 ; i < kobe ; i ++ ) if ( * ( * ( p + i ) + j ) < min ) min = * ( * ( p + i ) + j ) ; for ( i = 0 ; i < kobe ; i ++ ) * ( * ( p + i ) + j ) -= min ; } sum += * ( * ( p + 1 ) + 1 ) ; for ( i = 1 ; i < kobe ; i ++ ) for ( j = 0 ; j < kobe ; j ++ ) * ( * ( p + i ) + j ) = * ( * ( p + i + 1 ) + j ) ; for ( j = 1 ; j < kobe ; j ++ ) for ( i = 0 ; i < kobe ; i ++ ) * ( * ( p + i ) + j ) = * ( * ( p + i ) + j + 1 ) ; kobe -- ; } cout << sum << endl ; } return 0 ; }
int a [ 1000 ] [ 1000 ] = { 0 } ; int sum ( int n ) { int i , j , x , t ; int p , q ; if ( n == 1 ) return 0 ; for ( i = 0 ; i < n ; i ++ ) { x = 32767 ; for ( j = 0 ; j < n ; j ++ ) if ( x > * ( * ( a + i ) + j ) ) x = * ( * ( a + i ) + j ) ; if ( x != 0 ) for ( j = 0 ; j < n ; j ++ ) ( * ( * ( a + i ) + j ) ) -= x ; } for ( i = 0 ; i < n ; i ++ ) { x = 32767 ; for ( j = 0 ; j < n ; j ++ ) if ( x > * ( * ( a + j ) + i ) ) x = * ( * ( a + j ) + i ) ; if ( x != 0 ) for ( j = 0 ; j < n ; j ++ ) ( * ( * ( a + j ) + i ) ) -= x ; } t = * ( * ( a + 1 ) + 1 ) ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n ; j ++ ) * ( * ( a + i ) + j ) = * ( * ( a + i + 1 ) + j ) ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n - 1 ; j ++ ) * ( * ( a + j ) + i ) = * ( * ( a + j ) + i + 1 ) ; return ( t + sum ( n - 1 ) ) ; } int main ( ) { int n , i , p , q ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( p = 0 ; p < n ; p ++ ) for ( q = 0 ; q < n ; q ++ ) scanf ( "%d" , & a [ p ] [ q ] ) ; printf ( "%d\n" , sum ( n ) ) ; } return 0 ; }
int main ( ) { int n , i , j , k , l , sum , min ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) scanf ( "%d" , & a [ j ] [ k ] ) ; for ( l = 0 ; l < n - 1 ; l ++ ) { for ( j = 0 ; j < n - l ; j ++ ) { min = a [ j ] [ 0 ] ; for ( k = 1 ; k < n - l ; k ++ ) { if ( min > a [ j ] [ k ] ) min = a [ j ] [ k ] ; } for ( k = 0 ; k < n - l ; k ++ ) a [ j ] [ k ] = a [ j ] [ k ] - min ; } for ( j = 0 ; j < n - l ; j ++ ) { min = a [ 0 ] [ j ] ; for ( k = 1 ; k < n - l ; k ++ ) { if ( min > a [ k ] [ j ] ) min = a [ k ] [ j ] ; } for ( k = 0 ; k < n - l ; k ++ ) a [ k ] [ j ] = a [ k ] [ j ] - min ; } sum = sum + a [ 1 ] [ 1 ] ; for ( j = 1 ; j < n - l - 1 ; j ++ ) { a [ j ] [ 0 ] = a [ j + 1 ] [ 0 ] ; } for ( j = 1 ; j < n - l - 1 ; j ++ ) { a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; } for ( j = 2 ; j < n - l ; j ++ ) { for ( k = 2 ; k < n - l ; k ++ ) { a [ j - 1 ] [ k - 1 ] = a [ j ] [ k ] ; } } } printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int min ( int x [ ] , int y ) ; int i , j , k , n , a [ 200 ] [ 200 ] , b [ 200 ] , sum , t ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { sum = 0 ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= n ; k ++ ) { scanf ( "%d" , & a [ k ] [ j ] ) ; } } for ( t = n ; t >= 2 ; t -- ) { for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= t ; k ++ ) { b [ k ] = a [ k ] [ j ] ; } for ( k = 1 ; k <= t ; k ++ ) { a [ k ] [ j ] -= min ( b , t ) ; } } for ( j = 1 ; j <= t ; j ++ ) { for ( k = 1 ; k <= t ; k ++ ) { b [ k ] = a [ j ] [ k ] ; } for ( k = 1 ; k <= t ; k ++ ) { a [ j ] [ k ] -= min ( b , t ) ; } } sum += a [ 2 ] [ 2 ] ; for ( j = 3 ; j <= t ; j ++ ) { for ( k = 3 ; k <= t ; k ++ ) { a [ k - 1 ] [ j - 1 ] = a [ k ] [ j ] ; } } for ( j = 3 ; j <= t ; j ++ ) { a [ 1 ] [ j - 1 ] = a [ 1 ] [ j ] ; } for ( j = 3 ; j <= t ; j ++ ) { a [ j - 1 ] [ 1 ] = a [ j ] [ 1 ] ; } } printf ( "%d\n" , sum ) ; } return 0 ; } int min ( int x [ ] , int y ) { int i , min = 999999 ; for ( i = 1 ; i <= y ; i ++ ) { if ( x [ i ] < min ) { min = x [ i ] ; } } return ( min ) ; }
int main ( ) { int a [ 101 ] [ 101 ] , n ; int ( * p ) [ 101 ] ; scanf ( "%d" , & n ) ; int nn = n , min , s , i , j , nnn = n ; while ( nn -- ) { n = nnn ; s = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , * ( a + i ) + j ) ; while ( n > 1 ) { for ( i = 0 ; i < n ; i ++ ) { min = 1000000 ; for ( j = 0 ; j < n ; j ++ ) if ( * ( * ( a + i ) + j ) < min ) min = * ( * ( a + i ) + j ) ; for ( j = 0 ; j < n ; j ++ ) * ( * ( a + i ) + j ) -= min ; } for ( j = 0 ; j < n ; j ++ ) { min = 1000000 ; for ( i = 0 ; i < n ; i ++ ) if ( * ( * ( a + i ) + j ) < min ) min = * ( * ( a + i ) + j ) ; for ( i = 0 ; i < n ; i ++ ) * ( * ( a + i ) + j ) -= min ; } s = s + * ( * ( a + 1 ) + 1 ) ; for ( i = 1 ; i < n - 1 ; i ++ ) { * ( ( * a ) + i ) = * ( ( * a ) + i + 1 ) ; } for ( i = 1 ; i < n - 1 ; i ++ ) { * ( * ( a + i ) ) = * ( * ( a + i + 1 ) ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) * ( * ( a + i ) + j ) = * ( * ( a + i + 1 ) + j + 1 ) ; } n -- ; } printf ( "%d\n" , s ) ; } }
int tozero ( int n ) ; void delete1 ( int , int ) ; void delete2 ( int , int ) ; void movea ( int ) ; int a [ 100 ] [ 100 ] , sum = 0 ; int main ( ) { int n , i , j , k ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j <= 99 ; j ++ ) for ( k = 0 ; k <= 99 ; k ++ ) * ( * ( a + j ) + k ) = 0 ; int r , l , lim = 99 ; char c ; for ( r = 0 ; r < n ; r ++ ) for ( l = 0 ; l < n ; l ++ ) { scanf ( "%d" , * ( a + r ) + l ) ; } sum = tozero ( r ) ; printf ( "%d\n" , sum ) ; sum = 0 ; } } void delete1 ( int r , int n ) { int min = * ( * ( a + r ) + 0 ) , j ; for ( j = 0 ; j < n ; j ++ ) if ( * ( * ( a + r ) + j ) < min ) min = * ( * ( a + r ) + j ) ; for ( j = 0 ; j < n ; j ++ ) * ( * ( a + r ) + j ) -= min ; } void delete2 ( int l , int n ) { int min = * ( * ( a + 0 ) + l ) , j ; for ( j = 0 ; j < n ; j ++ ) if ( * ( * ( a + j ) + l ) < min ) min = * ( * ( a + j ) + l ) ; for ( j = 0 ; j < n ; j ++ ) * ( * ( a + j ) + l ) -= min ; } void movea ( int n ) { int i , j , k ; for ( i = 1 ; i < n - 1 ; i ++ ) * ( * ( a + 0 ) + i ) = * ( * ( a + 0 ) + i + 1 ) ; for ( i = 1 ; i < n - 1 ; i ++ ) * ( * ( a + i ) + 0 ) = * ( * ( a + i + 1 ) + 0 ) ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 2 ; j < n ; j ++ ) * ( * ( a + i ) + j ) = * ( * ( a + i + 1 ) + j ) ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) * ( * ( a + j ) + i ) = * ( * ( a + j ) + i + 1 ) ; } int tozero ( int n ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) delete1 ( i , n ) ; for ( i = 0 ; i < n ; i ++ ) delete2 ( i , n ) ; sum += * ( * ( a + 1 ) + 1 ) ; movea ( n ) ; if ( n >= 3 ) tozero ( n - 1 ) ; return sum ; }
int main ( ) { int ml ( int a [ 101 ] , int m ) ; void guiling ( int a [ 101 ] [ 101 ] , int m ) ; void xiaojian ( int a [ 101 ] [ 101 ] , int m ) ; int n ; int i , j , k ; int sum ; int a [ 101 ] [ 101 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & a [ j ] [ k ] ) ; } } sum = 0 ; for ( j = n ; j > 1 ; j -- ) { guiling ( a , j ) ; sum = sum + a [ 1 ] [ 1 ] ; xiaojian ( a , j ) ; } printf ( "%d\n" , sum ) ; } return 0 ; } int ml ( int a [ 101 ] , int m ) { int i ; int n = a [ 0 ] ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] < n ) n = a [ i ] ; } return n ; } void guiling ( int a [ 101 ] [ 101 ] , int m ) { int ml ( int a [ 101 ] , int m ) ; int i , j ; int minc , minl ; for ( i = 0 ; i < m ; i ++ ) { minl = ml ( a [ i ] , m ) ; for ( j = 0 ; j < m ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - minl ; } } for ( j = 0 ; j < m ; j ++ ) { minc = a [ 0 ] [ j ] ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] [ j ] < minc ) minc = a [ i ] [ j ] ; } for ( i = 0 ; i < m ; i ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - minc ; } } } void xiaojian ( int a [ 101 ] [ 101 ] , int m ) { int i , j ; if ( m > 1 ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 1 ; j < m - 1 ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } } for ( j = 0 ; j < m - 1 ; j ++ ) { for ( i = 1 ; i < m - 1 ; i ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } } } }
int min ( int a [ ] , int nx ) { int x , min ; min = a [ 0 ] ; for ( x = 0 ; x <= nx - 1 ; x ++ ) { if ( a [ x ] <= min ) { min = a [ x ] ; } } return min ; } int main ( ) { int temp , nx , y , sum , i , j , k , n , a [ 100 ] [ 100 ] , b [ 100 ] , m ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { sum = 0 ; nx = n ; for ( j = 0 ; j <= n - 1 ; j ++ ) { for ( k = 0 ; k <= n - 1 ; k ++ ) { cin >> a [ j ] [ k ] ; } } for ( y = 1 ; y <= n - 1 ; y ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { temp = min ( a [ j ] , nx ) ; for ( k = 0 ; k <= n - 1 ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - temp ; } } for ( k = 0 ; k <= n - 1 ; k ++ ) { for ( m = 0 ; m <= n - 1 ; m ++ ) { b [ m ] = a [ m ] [ k ] ; } temp = min ( b , nx ) ; for ( j = 0 ; j <= n - 1 ; j ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - temp ; } } sum = sum + a [ 1 ] [ 1 ] ; for ( j = 1 ; j <= n - 2 ; j ++ ) { for ( k = 0 ; k <= n - 1 ; k ++ ) { a [ j ] [ k ] = a [ j + 1 ] [ k ] ; } } for ( k = 1 ; k <= n - 2 ; k ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { a [ j ] [ k ] = a [ j ] [ k + 1 ] ; } } nx -- ; } cout << sum << endl ; } return 0 ; }
int gl ( int a [ ] [ 102 ] , int k ) { int i , j ; for ( i = 0 ; i < k ; i ++ ) { int min = 999 ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < k ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } for ( i = 0 ; i < k ; i ++ ) { int min = 999 ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } for ( j = 0 ; j < k ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i ] - min ; } } return ( a [ 1 ] [ 1 ] ) ; } void xj ( int a [ ] [ 102 ] , int k ) { int i , j ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 2 ; j < k ; j ++ ) { a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } } for ( i = 0 ; i < k ; i ++ ) { for ( j = 2 ; j < k ; j ++ ) { a [ j - 1 ] [ i ] = a [ j ] [ i ] ; } } } int main ( ) { int i , k ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { int j , l , sum = 0 , a [ 102 ] [ 102 ] ; for ( j = 0 ; j < k ; j ++ ) { for ( l = 0 ; l < k ; l ++ ) scanf ( "%d" , & a [ j ] [ l ] ) ; } for ( j = 0 ; j < k - 1 ; j ++ ) { int temp ; temp = gl ( a , k - j ) ; sum = sum + temp ; xj ( a , k - j ) ; } printf ( "%d\n" , sum ) ; } }
void f1 ( int n , int a [ 100 ] [ 100 ] ) { int i ; for ( i = 0 ; i <= n - 1 ; i ++ ) { int x = a [ i ] [ 0 ] , j ; for ( j = 1 ; j <= n - 1 ; j ++ ) if ( x > a [ i ] [ j ] ) x = a [ i ] [ j ] ; if ( x > 0 ) for ( j = 0 ; j <= n - 1 ; j ++ ) a [ i ] [ j ] -= x ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { int x = a [ 0 ] [ i ] , j ; for ( j = 1 ; j <= n - 1 ; j ++ ) if ( x > a [ j ] [ i ] ) x = a [ j ] [ i ] ; if ( x > 0 ) for ( j = 0 ; j <= n - 1 ; j ++ ) a [ j ] [ i ] -= x ; } } void f2 ( int n , int a [ 100 ] [ 100 ] ) { int i , j ; for ( i = 1 ; i <= n - 2 ; i ++ ) { a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; } for ( i = 1 ; i <= n - 2 ; i ++ ) for ( j = 1 ; j <= n - 2 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } int loop ( int n , int a [ 100 ] [ 100 ] ) { f1 ( n , a ) ; int x = a [ 1 ] [ 1 ] ; if ( n == 2 ) return a [ 1 ] [ 1 ] ; else { f2 ( n , a ) ; return x + loop ( n - 1 , a ) ; } } void main ( void ) { int t , n ; scanf ( "%d" , & n ) ; for ( t = 1 ; t <= n ; t ++ ) { int a [ 100 ] [ 100 ] , i , j ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; printf ( "%d\n" , loop ( n , a ) ) ; } }
int main ( ) { int n ; int w [ 100 ] [ 100 ] ; cin >> n ; for ( int nn = 0 ; nn < n ; nn ++ ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> w [ i ] [ j ] ; int s = 0 ; for ( int t = 0 ; t < n - 1 ; t ++ ) { for ( int i = 0 ; i < n ; i ++ ) if ( ( ! i ) || ( i - t > 0 ) ) { int m = w [ i ] [ 0 ] ; for ( int j = t + 1 ; j < n ; j ++ ) m = min ( m , w [ i ] [ j ] ) ; w [ i ] [ 0 ] -= m ; for ( int j = t + 1 ; j < n ; j ++ ) w [ i ] [ j ] -= m ; } for ( int j = 0 ; j < n ; j ++ ) if ( ( ! j ) || ( j - t > 0 ) ) { int m = w [ 0 ] [ j ] ; for ( int i = t + 1 ; i < n ; i ++ ) m = min ( m , w [ i ] [ j ] ) ; w [ 0 ] [ j ] -= m ; for ( int i = t + 1 ; i < n ; i ++ ) w [ i ] [ j ] -= m ; } s += w [ t + 1 ] [ t + 1 ] ; } cout << s << endl ; } return 0 ; }
int m , a [ 100 ] [ 100 ] , s ; void guiling ( ) { int i , j , min ; for ( i = 0 ; i < m ; i ++ ) { min = pow ( 2 , 31.0 ) - 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < m ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( i = 0 ; i < m ; i ++ ) { min = pow ( 2 , 31.0 ) - 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } for ( j = 0 ; j < m ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - min ; } if ( m >= 2 ) s = s + a [ 1 ] [ 1 ] ; } void xiaojian ( ) { int i , j ; for ( i = 0 ; i < m ; i ++ ) for ( j = 1 ; j < m - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; for ( j = 0 ; j < m - 1 ; j ++ ) for ( i = 1 ; i < m - 1 ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; m -- ; guiling ( ) ; if ( m > 2 ) xiaojian ( ) ; else cout << s << endl ; } int main ( ) { int n , t , i , j ; cin >> n ; t = n ; while ( n > 0 ) { m = t ; s = 0 ; for ( i = 0 ; i < t ; i ++ ) for ( j = 0 ; j < t ; j ++ ) cin >> a [ i ] [ j ] ; guiling ( ) ; xiaojian ( ) ; n -- ; } return 0 ; }
void main ( ) { int m , N , n , o , i , j , r , a [ 200 ] [ 200 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( N = 1 ; N <= n ; N ++ ) { r = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( m = 0 ; m <= n - 2 ; m ++ ) { for ( i = 0 ; i <= n - 1 ; i ++ ) { { if ( ( i >= 1 ) && ( i <= m ) ) { i = m ; continue ; } } o = a [ i ] [ 0 ] ; for ( j = 1 ; j <= n - 1 ; j ++ ) { { if ( ( j >= 1 ) && ( j <= m ) ) { j = m ; continue ; } } o = ( o <= a [ i ] [ j ] ) ? o : a [ i ] [ j ] ; } for ( j = 0 ; j <= n - 1 ; j ++ ) { { if ( ( j >= 1 ) && ( j <= m ) ) { j = m ; continue ; } } a [ i ] [ j ] = a [ i ] [ j ] - o ; } } for ( j = 0 ; j <= n - 1 ; j ++ ) { { if ( ( j >= 1 ) && ( j <= m ) ) { j = m ; continue ; } } o = a [ 0 ] [ j ] ; for ( i = 1 ; i <= n - 1 ; i ++ ) { { if ( ( i >= 1 ) && ( i <= m ) ) { i = m ; continue ; } } o = ( o <= a [ i ] [ j ] ) ? o : a [ i ] [ j ] ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { { if ( ( i >= 1 ) && ( i <= m ) ) { i = m ; continue ; } } a [ i ] [ j ] = a [ i ] [ j ] - o ; } } r = r + a [ 1 + m ] [ 1 + m ] ; } printf ( "%d\n" , r ) ; } }
int sm1 ( int line , int sum1 , int array1 [ 100 ] [ 100 ] ) { int min = array1 [ line ] [ 0 ] ; for ( int i = 0 ; i < sum1 ; i ++ ) if ( min > array1 [ line ] [ i ] ) min = array1 [ line ] [ i ] ; return min ; } int sm2 ( int row , int sum2 , int array2 [ 100 ] [ 100 ] ) { int min = array2 [ 0 ] [ row ] ; for ( int i = 0 ; i < sum2 ; i ++ ) if ( min > array2 [ i ] [ row ] ) min = array2 [ i ] [ row ] ; return min ; } int main ( ) { int n ; cin >> n ; for ( int step = 0 ; step < n ; step ++ ) { int jz [ 100 ] [ 100 ] , he = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> jz [ i ] [ j ] ; for ( int Count = 0 ; Count < n - 1 ; Count ++ ) { for ( int i = 0 ; i < n - Count ; i ++ ) { int minl = sm1 ( i , n - Count , jz ) ; for ( int j = 0 ; j < n - Count ; j ++ ) jz [ i ] [ j ] -= minl ; } for ( int j = 0 ; j < n - Count ; j ++ ) { int minr = sm2 ( j , n - Count , jz ) ; for ( int i = 0 ; i < n - Count ; i ++ ) jz [ i ] [ j ] -= minr ; } he += jz [ 1 ] [ 1 ] ; for ( int i = 2 ; i < n - Count ; i ++ ) for ( int j = 2 ; j < n - Count ; j ++ ) jz [ i - 1 ] [ j - 1 ] = jz [ i ] [ j ] ; for ( int i = 2 ; i < n - Count ; i ++ ) jz [ i - 1 ] [ 0 ] = jz [ i ] [ 0 ] ; for ( int j = 2 ; j < n - Count ; j ++ ) jz [ 0 ] [ j - 1 ] = jz [ 0 ] [ j ] ; } cout << he << endl << endl ; } return 0 ; }
int main ( ) { int n , number [ 100 ] [ 100 ] , i , p , o , u , count , min ; scanf ( "%d" , & n ) ; for ( o = 0 ; o < n ; o ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( p = 0 ; p < n ; p ++ ) { scanf ( "%d" , & number [ i ] [ p ] ) ; } } count = 0 ; for ( u = 0 ; u < n - 1 ; u ++ ) { for ( i = 0 ; i < n - u ; i ++ ) { min = 999999 ; for ( p = 0 ; p < n - u ; p ++ ) { if ( min > number [ i ] [ p ] ) { min = number [ i ] [ p ] ; } } for ( p = 0 ; p < n - u ; p ++ ) { number [ i ] [ p ] -= min ; } } for ( p = 0 ; p < n - u ; p ++ ) { min = 999999 ; for ( i = 0 ; i < n - u ; i ++ ) { if ( min > number [ i ] [ p ] ) { min = number [ i ] [ p ] ; } } for ( i = 0 ; i < n - u ; i ++ ) { number [ i ] [ p ] -= min ; } } count += number [ 1 ] [ 1 ] ; for ( i = 1 ; i < n - u - 1 ; i ++ ) { number [ i ] [ 0 ] = number [ i + 1 ] [ 0 ] ; } for ( p = 1 ; p < n - u - 1 ; p ++ ) { number [ 0 ] [ p ] = number [ 0 ] [ p + 1 ] ; } for ( p = 1 ; p < n - u - 1 ; p ++ ) { for ( i = 1 ; i < n - u - 1 ; i ++ ) { number [ i ] [ p ] = number [ i + 1 ] [ p + 1 ] ; } } } printf ( "%d\n" , count ) ; } return 0 ; }
int main ( ) { int n , a [ 100 ] [ 100 ] , sum = 0 , i , j , k , m , z , x , p = 0 , min1 [ 100 ] , min2 [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , & a [ j ] [ k ] ) ; } } sum = 0 ; p = 0 ; while ( p < n ) { for ( m = 0 ; m < n - p ; m ++ ) { min1 [ m ] = a [ m ] [ 0 ] ; for ( k = 0 ; k < n - p ; k ++ ) { if ( min1 [ m ] > a [ m ] [ k ] ) { min1 [ m ] = a [ m ] [ k ] ; } } } for ( z = 0 ; z < n - p ; z ++ ) { for ( x = 0 ; x < n - p ; x ++ ) { a [ z ] [ x ] = a [ z ] [ x ] - min1 [ z ] ; } } for ( m = 0 ; m < n - p ; m ++ ) { min2 [ m ] = a [ 0 ] [ m ] ; for ( k = 0 ; k < n - p ; k ++ ) { if ( min2 [ m ] > a [ k ] [ m ] ) { min2 [ m ] = a [ k ] [ m ] ; } } } for ( z = 0 ; z < n - p ; z ++ ) { for ( x = 0 ; x < n - p ; x ++ ) { a [ z ] [ x ] = a [ z ] [ x ] - min2 [ x ] ; } } sum = sum + a [ 1 ] [ 1 ] ; for ( z = 0 ; z < n - p ; z ++ ) { for ( m = 1 ; m < n - p ; m ++ ) { a [ z ] [ m ] = a [ z ] [ m + 1 ] ; } } for ( z = 0 ; z < n - p ; z ++ ) { for ( m = 1 ; m < n - p ; m ++ ) { a [ m ] [ z ] = a [ m + 1 ] [ z ] ; } } p ++ ; } printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int i , j , k , m , n , sum , min ; int a [ 101 ] [ 101 ] ; scanf ( "%d" , & n ) ; for ( m = 0 ; m < n ; m ++ ) { sum = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( k = n ; k > 1 ; k -- ) { for ( i = 0 ; i < k ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < k ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( j = 0 ; j < k ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < k ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( i = 0 ; i < k ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } sum = sum + a [ 1 ] [ 1 ] ; for ( i = 2 ; i < k ; i ++ ) for ( j = 0 ; j < k ; j ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; for ( j = 2 ; j < k ; j ++ ) for ( i = 0 ; i < k - 1 ; i ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } printf ( "%d\n" , sum ) ; } return 0 ; }
void f1 ( int * p , int n , int k ) { int i , m = * p ; for ( i = 0 ; i < n ; i ++ ) { if ( * ( p + i ) < m ) m = * ( p + i ) ; } for ( i = 0 ; i < n ; i ++ ) * ( p + i ) = * ( p + i ) - m ; if ( k > 1 ) f1 ( p + 100 , n , ( k - 1 ) ) ; } void f2 ( int * p , int n , int k ) { int i , m = * p ; for ( i = 0 ; i < n ; i ++ ) { if ( * ( p + i * 100 ) < m ) m = * ( p + i * 100 ) ; } for ( i = 0 ; i < n ; i ++ ) * ( p + i * 100 ) = * ( p + i * 100 ) - m ; if ( k > 1 ) f2 ( p + 1 , n , ( k - 1 ) ) ; } int main ( ) { int * p , a [ 100 ] [ 100 ] , n , i , j , t , m , h ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( t = 0 ; t < n ; t ++ ) scanf ( "%d" , & a [ j ] [ t ] ) ; } p = a [ 0 ] ; h = 0 ; for ( j = n ; j > 1 ; j -- ) { f1 ( p , j , j ) ; f2 ( p , j , j ) ; h += a [ 1 ] [ 1 ] ; for ( t = 0 ; t < j ; t ++ ) { for ( m = 1 ; m < ( j - 1 ) ; m ++ ) a [ t ] [ m ] = a [ t ] [ m + 1 ] ; } for ( t = 0 ; t < ( j - 1 ) ; t ++ ) { for ( m = 1 ; m < ( j - 1 ) ; m ++ ) a [ m ] [ t ] = a [ m + 1 ] [ t ] ; } } printf ( "%d\n" , h ) ; } return 0 ; }
int main ( ) { int n , i , j , k , l , a [ 120 ] [ 120 ] , m , s , d ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { m = n ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k < m ; k ++ ) { scanf ( "%d" , & a [ j ] [ k ] ) ; } } s = 0 ; while ( m >= 2 ) { for ( j = 0 ; j < m ; j ++ ) { d = 0 ; for ( l = 1 ; l < m ; l ++ ) { if ( a [ j ] [ l ] < a [ j ] [ d ] ) d = l ; } d = a [ j ] [ d ] ; for ( k = 0 ; k < m ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - d ; } } for ( j = 0 ; j < m ; j ++ ) { d = 0 ; for ( l = 1 ; l < m ; l ++ ) { if ( a [ l ] [ j ] < a [ d ] [ j ] ) d = l ; } d = a [ d ] [ j ] ; for ( k = 0 ; k < m ; k ++ ) { a [ k ] [ j ] = a [ k ] [ j ] - d ; } } s = s + a [ 1 ] [ 1 ] ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 2 ; k < m ; k ++ ) { a [ j ] [ k - 1 ] = a [ j ] [ k ] ; } } for ( j = 0 ; j < m - 1 ; j ++ ) { for ( k = 2 ; k < m ; k ++ ) { a [ k - 1 ] [ j ] = a [ k ] [ j ] ; } } m -- ; } printf ( "%d\n" , s ) ; } return 0 ; }
int s = 0 , a [ 100 ] [ 100 ] ; void hang ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { int min = a [ i ] [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; } for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } min = 0 ; } } void lie ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { int min = a [ 0 ] [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( min >= a [ j ] [ i ] ) min = a [ j ] [ i ] ; } for ( int j = 0 ; j < n ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i ] - min ; } min = 0 ; } } void xiaoqu ( int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) { a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } } } void sum ( int n ) { if ( n > 1 ) { hang ( n ) ; lie ( n ) ; s += a [ 1 ] [ 1 ] ; xiaoqu ( n ) ; sum ( n - 1 ) ; } } int main ( ) { int n ; cin >> n ; int k = n ; while ( k ) { k -- ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } sum ( n ) ; cout << s << endl ; s = 0 ; } return 0 ; }
void f1 ( int a [ ] [ 100 ] , int k ) { int i , j , min ; for ( j = 0 ; j < k ; j ++ ) { min = a [ j ] [ 0 ] ; for ( i = 1 ; i < k ; i ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } for ( i = 0 ; i < k ; i ++ ) { a [ j ] [ i ] = a [ j ] [ i ] - min ; } } for ( i = 0 ; i < k ; i ++ ) { min = a [ 0 ] [ i ] ; for ( j = 0 ; j < k ; j ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } for ( j = 0 ; j < k ; j ++ ) { a [ j ] [ i ] -= min ; } } } void f2 ( int a [ ] [ 100 ] , int k ) { int i , j ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 1 ; j < k - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } for ( i = 0 ; i < k ; i ++ ) { for ( j = 1 ; j < k - 1 ; j ++ ) a [ j ] [ i ] = a [ j + 1 ] [ i ] ; } } main ( ) { int n , z , k ; scanf ( "%d" , & n ) ; k = n ; for ( z = 0 ; z < n ; z ++ ) { int i , j , sum = 0 ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } k = n ; for ( k ; k > 1 ; k -- ) { f1 ( a , k ) ; sum += a [ 1 ] [ 1 ] ; f2 ( a , k ) ; } printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int k , m , n , a [ 100 ] [ 100 ] , i , j , min , sum = 0 ; scanf ( "%d" , & n ) ; k = m = n ; while ( k -- ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } while ( -- m ) { for ( i = 0 ; i <= m ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j <= m ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } if ( min != 0 ) { for ( j = 0 ; j <= m ; j ++ ) a [ i ] [ j ] -= min ; } } for ( i = 0 ; i <= m ; i ++ ) { min = a [ 0 ] [ i ] ; for ( j = 0 ; j <= m ; j ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } if ( min != 0 ) { for ( j = 0 ; j <= m ; j ++ ) a [ j ] [ i ] -= min ; } } sum += a [ 1 ] [ 1 ] ; for ( i = 1 ; i < m ; i ++ ) a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; for ( i = 1 ; i < m ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( i = 1 ; i < m ; i ++ ) for ( j = 1 ; j < m ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } printf ( "%d\n" , sum ) ; sum = 0 ; m = n ; } return 0 ; }
int main ( ) { int i = 0 , j = 0 , k = 0 , m = 0 , n = 0 ; int num ; cin >> num ; int an [ 100 ] [ 100 ] ; for ( int c = 0 ; c < num ; c ++ ) { for ( int i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j < num ; j ++ ) cin >> * ( * ( an + i ) + j ) ; } int sum = 0 ; int hang ; for ( hang = num ; hang > 1 ; hang -- ) { int a = 0 , b = 0 ; for ( m = 0 ; m < hang ; m ++ ) { a = * ( * ( an + m ) + 0 ) ; for ( n = 0 ; n < hang ; n ++ ) { if ( * ( * ( an + m ) + n ) < a ) a = * ( * ( an + m ) + n ) ; } for ( n = 0 ; n < hang ; n ++ ) * ( * ( an + m ) + n ) = * ( * ( an + m ) + n ) - a ; } for ( m = 0 ; m < hang ; m ++ ) { b = * ( * ( an + 0 ) + m ) ; for ( n = 0 ; n < hang ; n ++ ) { if ( * ( * ( an + n ) + m ) < b ) b = * ( * ( an + n ) + m ) ; } for ( n = 0 ; n < hang ; n ++ ) * ( * ( an + n ) + m ) = * ( * ( an + n ) + m ) - b ; } sum = sum + an [ 1 ] [ 1 ] ; for ( i = 0 ; i < hang ; i ++ ) { for ( j = 1 ; j < hang ; j ++ ) * ( * ( an + i ) + j ) = * ( * ( an + i ) + j + 1 ) ; } for ( i = 0 ; i < hang ; i ++ ) { for ( j = 1 ; j < hang ; j ++ ) * ( * ( an + j ) + i ) = * ( * ( an + j + 1 ) + i ) ; } } cout << sum << endl ; } return 0 ; }
int guiling ( int count ) ; int xiaojian ( int count ) ; int n ; int a [ 101 ] [ 101 ] ; int main ( ) { int i , j , k ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { int sum = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } for ( int count = n ; count > 1 ; count -- ) { guiling ( count ) ; sum += a [ 1 ] [ 1 ] ; xiaojian ( count ) ; } cout << sum << endl ; } return 0 ; } int guiling ( int count ) { int j , k ; for ( j = 0 ; j < count ; j ++ ) { int min = a [ j ] [ 0 ] ; for ( k = 1 ; k < count ; k ++ ) { if ( min > a [ j ] [ k ] ) { min = a [ j ] [ k ] ; } } for ( k = 0 ; k < count ; k ++ ) { a [ j ] [ k ] -= min ; } } for ( k = 0 ; k < count ; k ++ ) { int min = a [ 0 ] [ k ] ; for ( j = 1 ; j < count ; j ++ ) { if ( min > a [ j ] [ k ] ) { min = a [ j ] [ k ] ; } } for ( j = 0 ; j < count ; j ++ ) { a [ j ] [ k ] -= min ; } } } int xiaojian ( int count ) { int j , k ; for ( j = 1 ; j < count - 1 ; j ++ ) { a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; a [ j ] [ 0 ] = a [ j + 1 ] [ 0 ] ; for ( k = 1 ; k < count - 1 ; k ++ ) { a [ j ] [ k ] = a [ j + 1 ] [ k + 1 ] ; } } }
int main ( ) { int n , i , j , k , l , a [ 100 ] [ 100 ] , min = 0 , sum [ 100 ] ; scanf ( "%d" , & n ) ; for ( k = 1 ; k <= n ; k ++ ) { sum [ k ] = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( l = 1 ; l <= n - 1 ; l ++ ) { for ( i = 0 ; i <= n - l ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 1 ; j <= n - l ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( j = 0 ; j <= n - l ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( j = 0 ; j <= n - l ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 1 ; i <= n - l ; i ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( i = 0 ; i <= n - l ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } sum [ k ] = sum [ k ] + a [ 1 ] [ 1 ] ; { for ( j = 0 ; j <= n - l ; j ++ ) { for ( i = 1 ; i <= n - l - 1 ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } for ( i = 0 ; i <= n - l - 1 ; i ++ ) { for ( j = 1 ; j <= n - l - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } } } } for ( k = 1 ; k <= n ; k ++ ) printf ( "%d\n" , sum [ k ] ) ; return 0 ; }
int n ; int min ( int x [ ] ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { if ( x [ i ] < 0 ) continue ; for ( j = 0 ; j < n ; j ++ ) { if ( x [ i ] > x [ j ] && x [ j ] >= 0 ) break ; } if ( j == n ) return x [ i ] ; } return 0 ; } void cut ( int a [ 50 ] [ 50 ] , int k ) { int i , j , m ; for ( i = 0 ; i < n ; i ++ ) { m = min ( a [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] -= m ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { m = a [ i ] [ j ] ; a [ i ] [ j ] = a [ j ] [ i ] ; a [ j ] [ i ] = m ; } } for ( i = 0 ; i < n ; i ++ ) { m = min ( a [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] -= m ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { m = a [ i ] [ j ] ; a [ i ] [ j ] = a [ j ] [ i ] ; a [ j ] [ i ] = m ; } } } void xiaojian ( int a [ 50 ] [ 50 ] , int k ) { int i ; for ( i = 0 ; i < n ; i ++ ) { a [ k ] [ i ] = - 1 ; a [ i ] [ k ] = - 1 ; } } int main ( ) { int a [ 50 ] [ 50 ] [ 50 ] , j , i , k , l , sum ; scanf ( "%d" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ k ] [ j ] [ i ] ) ; } } sum = 0 ; for ( j = 1 ; j < n ; j ++ ) { cut ( a [ k ] , j ) ; sum = sum + a [ k ] [ j ] [ j ] ; xiaojian ( a [ k ] , j ) ; } printf ( "%d\n" , sum ) ; } }
int f ( int a [ 100 ] [ 100 ] , int n ) { static int s = 0 ; int i , j ; double m1 , m2 ; int * p ; if ( n == 1 ) { printf ( "%d\n" , s ) ; s = 0 ; } if ( n > 1 ) { for ( i = 0 ; i < n ; i ++ ) { p = a [ i ] ; m1 = 100000 ; for ( j = 0 ; j < n ; j ++ ) if ( p [ j ] <= m1 ) m1 = p [ j ] ; for ( j = 0 ; j < n ; j ++ ) p [ j ] = p [ j ] - m1 ; } for ( j = 0 ; j < n ; j ++ ) { m2 = 100000 ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] [ j ] <= m2 ) m2 = a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= m2 ; } s += a [ 1 ] [ 1 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } for ( j = 1 ; j < n - 1 ; j ++ ) { for ( i = 0 ; i < n - 1 ; i ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } f ( a , n - 1 ) ; } } main ( ) { int n , i , j , k ; int a [ 100 ] [ 100 ] ; scanf ( "%d\n" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) scanf ( "%d" , & a [ j ] [ k ] ) ; } f ( a , n ) ; } }
int cal ( int matrix [ ] [ 120 ] , int n ) { if ( n == 1 ) return ( 0 ) ; int i , j , min , s ; for ( i = 0 ; i < n ; i ++ ) { min = 32767 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrix [ i ] [ j ] < min ) min = matrix [ i ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) matrix [ i ] [ j ] = matrix [ i ] [ j ] - min ; } for ( i = 0 ; i < n ; i ++ ) { min = 32767 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrix [ j ] [ i ] < min ) min = matrix [ j ] [ i ] ; } for ( j = 0 ; j < n ; j ++ ) matrix [ j ] [ i ] = matrix [ j ] [ i ] - min ; } s = matrix [ 1 ] [ 1 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n ; j ++ ) matrix [ i ] [ j ] = matrix [ i + 1 ] [ j ] ; for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) matrix [ i ] [ j ] = matrix [ i ] [ j + 1 ] ; return ( s + cal ( matrix , n - 1 ) ) ; } int main ( ) { int n , i , j , k ; int a [ 120 ] [ 120 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) scanf ( "%d" , & a [ j ] [ k ] ) ; printf ( "%d\n" , cal ( a , n ) ) ; } return ( 0 ) ; }
void xiao ( int a [ 100 ] [ 100 ] , int n ) { int min , i , j ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; if ( min > 0 ) for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; if ( min > 0 ) for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } } void move ( int a [ 100 ] [ 100 ] , int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 2 ; j < n ; j ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) for ( i = 2 ; i < n ; i ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } int count ( int a [ 100 ] [ 100 ] , int n , int s ) { if ( n == 1 ) return ( s ) ; else { xiao ( a , n ) ; s = s + a [ 1 ] [ 1 ] ; move ( a , n ) ; return ( count ( a , n - 1 , s ) ) ; } } int main ( ) { int n , i , j , s , t , a [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; t = n ; while ( t > 0 ) { s = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; printf ( "%d\n" , count ( a , n , s ) ) ; t -- ; } }
int func ( int a [ 100 ] [ 100 ] , int rank , int sum ) { if ( rank == 1 ) return ( sum ) ; int i , j , k , min = 1000 ; for ( i = 0 ; i <= rank - 1 ; i ++ ) { for ( j = 0 ; j <= rank - 1 ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j <= rank - 1 ; j ++ ) a [ i ] [ j ] -= min ; min = 1000 ; } for ( j = 0 ; j <= rank - 1 ; j ++ ) { for ( i = 0 ; i <= rank - 1 ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( i = 0 ; i <= rank - 1 ; i ++ ) a [ i ] [ j ] -= min ; min = 1000 ; } sum += a [ 1 ] [ 1 ] ; for ( j = 1 ; j <= rank - 2 ; j ++ ) a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; for ( i = 1 ; i <= rank - 2 ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( i = 1 ; i <= rank - 2 ; i ++ ) { for ( j = 1 ; j <= rank - 2 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } func ( a , rank - 1 , sum ) ; } int main ( ) { int n , i , j , k ; int matrix [ 100 ] [ 100 ] = { { 0 } } , sum = 0 ; scanf ( "%d" , & n ) ; for ( k = 1 ; k <= n ; k ++ ) { sum = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) scanf ( "%d" , & matrix [ i ] [ j ] ) ; } printf ( "%d\n" , func ( matrix , n , sum ) ) ; } }
void guiling ( int a [ ] [ 100 ] , int ) ; void xiaojian ( int a [ ] [ 100 ] , int ) ; int main ( ) { int n , a [ 100 ] [ 100 ] , k , i , j , sum ; cin >> n ; for ( k = 0 ; k < n ; k ++ ) { sum = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( int t = 0 ; t < n - 1 ; t ++ ) { guiling ( a , n - t ) ; sum += a [ 1 ] [ 1 ] ; xiaojian ( a , n - t ) ; } cout << sum << endl ; } return 0 ; } void guiling ( int a [ ] [ 100 ] , int n ) { int i , j , min ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= min ; } for ( i = 0 ; i < n ; i ++ ) { min = a [ 0 ] [ i ] ; for ( j = 0 ; j < n ; j ++ ) if ( min > a [ j ] [ i ] ) min = a [ j ] [ i ] ; for ( j = 0 ; j < n ; j ++ ) a [ j ] [ i ] -= min ; } } void xiaojian ( int a [ ] [ 100 ] , int n ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) for ( j = 2 ; j < n ; j ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; }
int minline ( int n , int u , int * * a ) { int temp = a [ 0 ] [ u ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( temp > a [ i ] [ u ] ) { temp = a [ i ] [ u ] ; } } return temp ; } int mincross ( int n , int a [ ] ) { int temp = a [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( temp > a [ i ] ) { temp = a [ i ] ; } } return temp ; } int ans ( int n , int * * pp ) { int sum = 0 ; for ( int y = 0 ; y < n - 1 ; y ++ ) { for ( int i = 0 ; i < n - y ; i ++ ) { int minTemp = mincross ( n - y , pp [ i ] ) ; for ( int j = 0 ; j < n - y ; j ++ ) { pp [ i ] [ j ] = pp [ i ] [ j ] - minTemp ; } } for ( int i = 0 ; i < n - y ; i ++ ) { int minTemp = minline ( n - y , i , pp ) ; for ( int j = 0 ; j < n - y ; j ++ ) { pp [ j ] [ i ] = pp [ j ] [ i ] - minTemp ; } } sum = sum + pp [ 1 ] [ 1 ] ; for ( int i = 0 ; i < n - y ; i ++ ) { for ( int j = 1 ; j < n - 1 - y ; j ++ ) { pp [ i ] [ j ] = pp [ i ] [ j + 1 ] ; } } for ( int i = 0 ; i < n - 1 - y ; i ++ ) { for ( int j = 1 ; j < n - y - 1 ; j ++ ) { pp [ j ] [ i ] = pp [ j + 1 ] [ i ] ; } } } return sum ; } int main ( void ) { int n = 0 ; scanf ( "%d" , & n ) ; int * * pp ; pp = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( int i = 0 ; i < n ; i ++ ) { pp [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } for ( int w = 0 ; w < n ; w ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & pp [ i ] [ j ] ) ; } } printf ( "%d\n" , ans ( n , pp ) ) ; } for ( int i = 0 ; i < n ; i ++ ) { free ( pp [ i ] ) ; } free ( pp ) ; return 0 ; }
int a [ 100 ] [ 100 ] ; int xiao ( int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { int min = a [ i ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; if ( min == 0 ) continue ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= min ; } for ( i = 0 ; i < n ; i ++ ) { int min = a [ 0 ] [ i ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; if ( min == 0 ) continue ; for ( j = 0 ; j < n ; j ++ ) a [ j ] [ i ] -= min ; } return a [ 1 ] [ 1 ] ; } void suo ( int n ) { int i , j ; for ( i = 1 ; i < n - 1 ; i ++ ) a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; return ; } int main ( ) { int n , l , i , j ; cin >> n ; for ( l = 0 ; l < n ; l ++ ) { int count = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; i = n ; while ( i > 1 ) { count = count + xiao ( i ) ; suo ( i ) ; i -- ; } cout << count << endl ; } return 0 ; }
int main ( ) { int n , range ; cin >> range ; n = range ; int a [ 102 ] [ 102 ] , ( * p ) [ 102 ] = a ; int i , j , k , q , sum = 0 ; for ( i = 0 ; i < range ; i ++ ) { sum = 0 ; n = range ; int minrow = 999999 , mincol = 999999 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) cin >> * ( * ( p + j ) + k ) ; for ( ; n > 1 ; ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) if ( * ( * ( p + j ) + k ) < minrow ) minrow = * ( * ( p + j ) + k ) ; for ( k = 0 ; k < n ; k ++ ) * ( * ( p + j ) + k ) = * ( * ( p + j ) + k ) - minrow ; minrow = 999999 ; } for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) if ( * ( * ( p + j ) + k ) < mincol ) mincol = * ( * ( p + j ) + k ) ; for ( j = 0 ; j < n ; j ++ ) * ( * ( p + j ) + k ) = * ( * ( p + j ) + k ) - mincol ; mincol = 999999 ; } ; k ++ ) * ( * ( p + j ) + k ) = * ( * ( p + j + 1 ) + k ) ; } for ( j = 1 ; j <= n - 2 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) * ( * ( p + k ) + j ) = * ( * ( p + k ) + j + 1 ) ; } n -- ; } cout << sum << endl ; } return 0 ; }
int sum = 0 , r_small [ 100 ] = { 0 } , c_small [ 100 ] = { 0 } ; int fun ( int num [ ] [ 100 ] , int n ) ; void small1 ( int num [ ] [ 100 ] , int n ) ; void small2 ( int num [ ] [ 100 ] , int n ) ; int main ( ) { int n , i , j , num [ 100 ] [ 100 ] ; cin >> n ; for ( int p = 0 ; p < n ; p ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> num [ i ] [ j ] ; fun ( num , n ) ; cout << sum << endl ; sum = 0 ; } return 0 ; } int fun ( int num [ ] [ 100 ] , int n ) { if ( n == 1 ) return sum ; int i , j ; small1 ( num , n ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) num [ i ] [ j ] = num [ i ] [ j ] - r_small [ i ] ; small2 ( num , n ) ; for ( j = 0 ; j < n ; j ++ ) for ( i = 0 ; i < n ; i ++ ) num [ i ] [ j ] = num [ i ] [ j ] - c_small [ j ] ; sum += num [ 1 ] [ 1 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) num [ i ] [ j ] = num [ i ] [ j + 1 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 1 ; i < n - 1 ; i ++ ) num [ i ] [ j ] = num [ i + 1 ] [ j ] ; fun ( num , n - 1 ) ; } void small1 ( int num [ ] [ 100 ] , int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { r_small [ i ] = num [ i ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) r_small [ i ] = ( r_small [ i ] < num [ i ] [ j ] ) ? r_small [ i ] : num [ i ] [ j ] ; } } void small2 ( int num [ ] [ 100 ] , int n ) { int i , j ; for ( j = 0 ; j < n ; j ++ ) { c_small [ j ] = num [ 0 ] [ j ] ; for ( i = 1 ; i < n ; i ++ ) c_small [ j ] = ( c_small [ j ] < num [ i ] [ j ] ) ? c_small [ j ] : num [ i ] [ j ] ; } }
int matrix [ 100 ] [ 100 ] = { 0 } ; void change ( int k , int n ) { matrix [ k + 1 ] [ k + 1 ] = matrix [ k ] [ k ] ; int i = 0 ; if ( n - 1 >= k + 2 ) { for ( i = k + 2 ; i <= n - 1 ; i ++ ) matrix [ k + 1 ] [ i ] = matrix [ k ] [ i ] ; for ( i = k + 2 ; i <= n - 1 ; i ++ ) matrix [ i ] [ k + 1 ] = matrix [ i ] [ k ] ; } } int main ( ) { int n = 0 ; cin >> n ; int m = 0 ; int sum [ 100 ] = { 0 } ; for ( m = 0 ; m <= n - 1 ; m ++ ) { int i = 0 , j = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) for ( j = 0 ; j <= n - 1 ; j ++ ) cin >> matrix [ i ] [ j ] ; int k = 0 ; for ( k = 0 ; k <= n - 2 ; k ++ ) { int min = 10000 ; for ( i = k ; i <= n - 1 ; i ++ ) { min = 10000 ; for ( j = k ; j <= n - 1 ; j ++ ) if ( matrix [ i ] [ j ] < min ) min = matrix [ i ] [ j ] ; for ( j = k ; j <= n - 1 ; j ++ ) matrix [ i ] [ j ] = matrix [ i ] [ j ] - min ; } for ( j = k ; j <= n - 1 ; j ++ ) { min = 10000 ; for ( i = k ; i <= n - 1 ; i ++ ) if ( matrix [ i ] [ j ] < min ) min = matrix [ i ] [ j ] ; for ( i = k ; i <= n - 1 ; i ++ ) matrix [ i ] [ j ] = matrix [ i ] [ j ] - min ; } sum [ m ] = sum [ m ] + matrix [ k + 1 ] [ k + 1 ] ; change ( k , n ) ; } } for ( m = 0 ; m <= n - 1 ; m ++ ) cout << sum [ m ] << endl ; return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int k = 1 , n = 0 ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { int i = 0 , j = 0 , m ; int result = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; int min = 0 ; for ( m = n ; m > 1 ; m -- ) { for ( i = 0 ; i < m ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < m ; j ++ ) { if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < m ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( j = 0 ; j < m ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < m ; i ++ ) { if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; } for ( i = 0 ; i < m ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } result = result + a [ 1 ] [ 1 ] ; for ( j = 1 ; j < m - 1 ; j ++ ) a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; for ( i = 1 ; i < m - 1 ; i ++ ) { a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( j = 1 ; j < m - 1 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } } cout << result << endl ; } return 0 ; }
int a [ 100 ] [ 100 ] ; int jieguo ( int n ) { int min = 10000 ; int p = 0 , i = 0 , j = 0 , sum = 0 ; if ( n == 2 ) { for ( i = 0 ; i < n ; i ++ ) { min = 10000 ; for ( j = 0 ; j < n ; j ++ ) { if ( min > a [ i ] [ j ] ) { min = a [ i ] [ j ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } for ( i = 0 ; i < n ; i ++ ) { min = 10000 ; for ( j = 0 ; j < n ; j ++ ) { if ( min > a [ j ] [ i ] ) { min = a [ j ] [ i ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i ] - min ; } } return a [ 1 ] [ 1 ] ; } else { for ( i = 0 ; i < n ; i ++ ) { min = 10000 ; for ( j = 0 ; j < n ; j ++ ) { if ( min > a [ i ] [ j ] ) { min = a [ i ] [ j ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } for ( i = 0 ; i < n ; i ++ ) { min = 10000 ; for ( j = 0 ; j < n ; j ++ ) { if ( min > a [ j ] [ i ] ) { min = a [ j ] [ i ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i ] - min ; } } sum = a [ 1 ] [ 1 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } } for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i + 1 ] ; } } return ( sum + jieguo ( n - 1 ) ) ; } } int main ( ) { int n = 0 , k = 0 , i = 0 , j = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = 0 ; } } cin >> n ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } cout << jieguo ( n ) << endl ; } return 0 ; }
int juzhen [ 101 ] [ 101 ] [ 101 ] = { 0 } ; int guiling ( int m , int n ) { int i , j , k = n , result = 0 , num [ 101 ] [ 101 ] = { 0 } , min [ 101 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { num [ i ] [ j ] = juzhen [ m ] [ i ] [ j ] ; } } while ( k > 1 ) { for ( i = 0 ; i < k ; i ++ ) { min [ i ] = 10000 ; for ( j = 0 ; j < k ; j ++ ) { if ( num [ i ] [ j ] <= min [ i ] ) min [ i ] = num [ i ] [ j ] ; } } for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { num [ i ] [ j ] = num [ i ] [ j ] - min [ i ] ; } } for ( j = 0 ; j < k ; j ++ ) { min [ j ] = 10000 ; for ( i = 0 ; i < k ; i ++ ) { if ( num [ i ] [ j ] <= min [ j ] ) min [ j ] = num [ i ] [ j ] ; } } for ( j = 0 ; j < k ; j ++ ) { for ( i = 0 ; i < k ; i ++ ) { num [ i ] [ j ] = num [ i ] [ j ] - min [ j ] ; } } result = result + num [ 1 ] [ 1 ] ; for ( i = 1 ; i < k - 1 ; i ++ ) { for ( j = 0 ; j < k ; j ++ ) { num [ i ] [ j ] = num [ i + 1 ] [ j ] ; } } for ( j = 1 ; j < k - 1 ; j ++ ) { for ( i = 0 ; i < k ; i ++ ) { num [ i ] [ j ] = num [ i ] [ j + 1 ] ; } } k -- ; } return result ; } int main ( ) { int i , j , k , p ; cin >> p ; for ( k = 0 ; k < p ; k ++ ) { for ( i = 0 ; i < p ; i ++ ) { for ( j = 0 ; j < p ; j ++ ) { cin >> juzhen [ k ] [ i ] [ j ] ; } } } for ( i = 0 ; i < p ; i ++ ) { int answer = 0 ; answer = guiling ( i , p ) ; cout << answer << endl ; } return 0 ; }
int n , a [ 100 ] [ 100 ] , sum ; void col ( int c ) { if ( c == n ) { cout << sum << endl ; return ; } int min ; for ( int i = 0 ; i <= n - c ; i ++ ) { min = a [ i ] [ 0 ] ; for ( int j = 1 ; j <= n - c ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; if ( min != 0 ) for ( int j = 0 ; j <= n - c ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( int i = 0 ; i <= n - c ; i ++ ) { min = a [ 0 ] [ i ] ; for ( int j = 1 ; j <= n - c ; j ++ ) if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; if ( min != 0 ) for ( int j = 0 ; j <= n - c ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - min ; } sum += a [ 1 ] [ 1 ] ; a [ 1 ] [ 1 ] = a [ 2 ] [ 2 ] ; for ( int i = 1 ; i < n - c ; i ++ ) a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; for ( int i = 1 ; i < n - c ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( int i = 1 ; i < n - c ; i ++ ) for ( int j = 1 ; j < n - c ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; col ( c + 1 ) ; } int main ( ) { cin >> n ; for ( int l = 0 ; l < n ; l ++ ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; sum = 0 ; col ( 1 ) ; } return 0 ; }
int main ( ) { int n = 0 , i = 0 , j = 0 , k = 0 , h = 0 , n1 = 0 , sum = 0 ; cin >> n ; int s [ n + 1 ] [ n + 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) { for ( h = 0 ; h < n ; h ++ ) { cin >> s [ k ] [ h ] ; } } sum = 0 ; for ( n1 = n ; n1 >= 2 ; n1 -- ) { for ( j = 0 ; j <= n1 - 1 ; j ++ ) { s [ j ] [ n1 ] = s [ j ] [ 0 ] ; for ( h = 0 ; h <= n1 - 1 ; h ++ ) { if ( s [ j ] [ h ] < s [ j ] [ n1 ] ) s [ j ] [ n1 ] = s [ j ] [ h ] ; } } for ( j = 0 ; j <= n1 - 1 ; j ++ ) { for ( h = 0 ; h <= n1 - 1 ; h ++ ) { s [ j ] [ h ] = s [ j ] [ h ] - s [ j ] [ n1 ] ; } } for ( j = 0 ; j <= n - 1 ; j ++ ) { s [ n1 ] [ j ] = s [ 0 ] [ j ] ; for ( h = 0 ; h <= n1 - 1 ; h ++ ) { if ( s [ h ] [ j ] < s [ n1 ] [ j ] ) s [ n1 ] [ j ] = s [ h ] [ j ] ; } } for ( j = 0 ; j <= n1 - 1 ; j ++ ) { for ( h = 0 ; h <= n1 - 1 ; h ++ ) { s [ h ] [ j ] = s [ h ] [ j ] - s [ n1 ] [ j ] ; } } sum = sum + s [ 1 ] [ 1 ] ; if ( n1 > 2 ) { for ( j = 2 ; j <= n1 - 1 ; j ++ ) { s [ 0 ] [ j - 1 ] = s [ 0 ] [ j ] ; s [ j - 1 ] [ 0 ] = s [ j ] [ 0 ] ; } for ( j = 1 ; j <= n1 - 2 ; j ++ ) { for ( h = 1 ; h <= n1 - 2 ; h ++ ) { s [ j ] [ h ] = s [ j + 1 ] [ h + 1 ] ; } } } } cout << sum << endl ; } return 0 ; }
void rowset ( int a [ ] [ 105 ] , int n ) { int i , j ; int min ; for ( i = 0 ; i <= n - 1 ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j <= n - 1 ; j ++ ) if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; for ( j = 0 ; j <= n - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } } void lineset ( int a [ ] [ 105 ] , int n ) { int i , j ; int min ; for ( i = 0 ; i <= n - 1 ; i ++ ) { min = a [ 0 ] [ i ] ; for ( j = 0 ; j <= n - 1 ; j ++ ) if ( min > a [ j ] [ i ] ) min = a [ j ] [ i ] ; for ( j = 0 ; j <= n - 1 ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - min ; } } void form ( int a [ ] [ 105 ] , int n ) { int i , j , k ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 2 ; j <= n - 1 ; j ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } for ( j = 0 ; j <= n - 2 ; j ++ ) { for ( i = 2 ; i <= n - 1 ; i ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } } int main ( int argc , char * argv [ ] ) { int n , i , j , k , flag ; scanf ( "%d" , & n ) ; int a [ n ] [ 105 ] ; int sum ; flag = n ; for ( i = 0 ; i <= n - 1 ; i ++ ) { sum = 0 ; for ( j = 0 ; j <= n - 1 ; j ++ ) for ( k = 0 ; k <= n - 1 ; k ++ ) scanf ( "%d" , a [ j ] + k ) ; flag = n ; while ( flag >= 2 ) { rowset ( a , flag ) ; lineset ( a , flag ) ; sum += a [ 1 ] [ 1 ] ; form ( a , flag ) ; flag -- ; } printf ( "%d" , sum ) ; ( i <= n - 2 ) ? printf ( "\n" ) : printf ( "" ) ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , n , sum ; int i , j , k ; cin >> n ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; int f ( int a [ 100 ] [ 100 ] , int n ) ; sum = f ( a , n ) ; cout << sum << endl ; } return 0 ; } int f ( int a [ 100 ] [ 100 ] , int n ) { if ( n == 1 ) return 0 ; int i , j , k , min , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] <= min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ j ] <= min ) min = a [ i ] [ j ] ; } for ( i = 0 ; i < n ; i ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } k = a [ 1 ] [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } for ( j = 2 ; j < n ; j ++ ) { for ( i = 0 ; i < ( n - 1 ) ; i ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } n = n - 1 ; sum = k + f ( a , n ) ; return ( sum ) ; }
int a [ 100 ] [ 100 ] = { 0 } , sum = 0 ; void guiling ( int n ) { int i , j , min ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= min ; } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } if ( min != 0 ) { for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= min ; } } } void xiaojian ( int n ) { int i , j ; sum += a [ 1 ] [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) a [ i - 1 ] [ 0 ] = a [ i ] [ 0 ] ; for ( j = 2 ; j < n ; j ++ ) a [ 0 ] [ j - 1 ] = a [ 0 ] [ j ] ; for ( i = 2 ; i < n ; i ++ ) for ( j = 2 ; j < n ; j ++ ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] ; } int main ( ) { int i , j , n , k , m ; cin >> n ; for ( k = 0 ; k < n ; k ++ ) { m = n ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; while ( m > 2 ) { guiling ( m ) ; xiaojian ( m ) ; m -- ; } guiling ( 2 ) ; sum += a [ 1 ] [ 1 ] ; cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int n , q , i , j , min1 [ 100 ] , min2 [ 100 ] , a [ 100 ] [ 100 ] , d , w ; cin >> n ; w = n ; for ( q = 0 ; q < w ; q ++ ) { d = 0 ; n = w ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 0 ; j < w ; j ++ ) { cin >> a [ i ] [ j ] ; } } while ( n >= 2 ) { for ( i = 0 ; i < n ; i ++ ) min1 [ i ] = 1000 ; for ( i = 0 ; i < n ; i ++ ) min2 [ i ] = 1000 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( min1 [ i ] > a [ i ] [ j ] ) { min1 [ i ] = a [ i ] [ j ] ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] -= min1 [ i ] ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( min2 [ j ] > a [ i ] [ j ] ) { min2 [ j ] = a [ i ] [ j ] ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { a [ i ] [ j ] -= min2 [ j ] ; } } d += a [ 1 ] [ 1 ] ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 2 ; i < n ; i ++ ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 2 ; j < n ; j ++ ) { a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } } n -- ; } cout << d << endl ; } return 0 ; }
void min ( int a [ ] , int b ) ; int main ( ) { int n = 0 , i = 0 , sum = 0 ; cin >> n ; const int p = n ; for ( i = 0 ; i < p ; i ++ , sum = 0 ) { int z [ 101 ] [ 101 ] = { 0 } , z2 [ 101 ] = { 0 } ; int j = 0 , k = 0 ; n = p ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) cin >> z [ j ] [ k ] ; do { for ( j = 0 ; j < n ; j ++ ) min ( z [ j ] , n ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) z2 [ k ] = z [ k ] [ j ] ; min ( z2 , n ) ; for ( k = 0 ; k < n ; k ++ ) z [ k ] [ j ] = z2 [ k ] ; } sum += z [ 1 ] [ 1 ] ; for ( j = 0 ; j < n ; j ++ ) for ( k = 1 ; k < n - 1 ; k ++ ) z [ j ] [ k ] = z [ j ] [ k + 1 ] ; for ( j = 0 ; j < n ; j ++ ) for ( k = 1 ; k < n - 1 ; k ++ ) z [ k ] [ j ] = z [ k + 1 ] [ j ] ; n -- ; } while ( n > 1 ) ; cout << sum << endl ; } return 0 ; } void min ( int a [ ] , int b ) { int w = 0 , y = 10000 ; for ( w = 0 ; w < b ; w ++ ) { if ( a [ w ] < y ) y = a [ w ] ; } for ( w = 0 ; w < b ; w ++ ) a [ w ] = a [ w ] - y ; }
int main ( ) { int n , i , j , k , total ; cin >> n ; int a [ n ] [ n ] ; int numbers = n ; for ( k = 0 ; k < numbers ; k ++ ) { total = 0 ; for ( i = 0 ; i < numbers ; i ++ ) for ( j = 0 ; j < numbers ; j ++ ) cin >> a [ i ] [ j ] ; for ( n = numbers ; n > 1 ; n -- ) { for ( i = 0 ; i < n ; i ++ ) { int temp = a [ i ] [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) if ( a [ i ] [ j ] < temp ) temp = a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= temp ; } for ( j = 0 ; j < n ; j ++ ) { int temp = a [ 0 ] [ j ] ; for ( i = 1 ; i < n ; i ++ ) if ( a [ i ] [ j ] < temp ) temp = a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= temp ; } total += a [ 1 ] [ 1 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 1 ; i < n - 1 ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } cout << total << endl ; } return 0 ; }
int a [ 100 ] [ 100 ] , n ; int sum ( int n ) { if ( n == 1 ) return 0 ; else { int i , j , m ; for ( i = 0 ; i < n ; ++ i ) { m = 1000 ; for ( j = 0 ; j < n ; ++ j ) if ( a [ i ] [ j ] < m ) m = a [ i ] [ j ] ; for ( j = 0 ; j < n ; ++ j ) a [ i ] [ j ] -= m ; } for ( i = 0 ; i < n ; ++ i ) { m = 1000 ; for ( j = 0 ; j < n ; ++ j ) if ( a [ j ] [ i ] < m ) m = a [ j ] [ i ] ; for ( j = 0 ; j < n ; ++ j ) a [ j ] [ i ] -= m ; } int num = a [ 1 ] [ 1 ] ; for ( i = 0 ; i < n ; ++ i ) for ( j = 2 ; j < n ; ++ j ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; for ( i = 0 ; i < n - 1 ; ++ i ) for ( j = 2 ; j < n ; ++ j ) a [ j - 1 ] [ i ] = a [ j ] [ i ] ; return num + sum ( n - 1 ) ; } } int main ( ) { int i , j , k ; cin >> n ; for ( k = 0 ; k < n ; ++ k ) { for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j < n ; ++ j ) cin >> a [ i ] [ j ] ; cout << sum ( n ) << endl ; } return 0 ; }
int main ( ) { int n = 0 ; cin >> n ; getchar ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int a [ 110 ] [ 110 ] ; for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; int sum = 0 ; for ( int r = 1 ; r < n ; r ++ ) { for ( int k = 0 ; k < n - r + 1 ; k ++ ) { int min = 100000 ; for ( int j = 0 ; j < n - r + 1 ; j ++ ) { if ( min > a [ k ] [ j ] ) min = a [ k ] [ j ] ; } for ( int j = 0 ; j < n - r + 1 ; j ++ ) a [ k ] [ j ] = a [ k ] [ j ] - min ; } for ( int j = 0 ; j < n - r + 1 ; j ++ ) { int min = 10000000 ; for ( int k = 0 ; k < n - r + 1 ; k ++ ) { if ( min > a [ k ] [ j ] ) min = a [ k ] [ j ] ; } for ( int k = 0 ; k < n - r + 1 ; k ++ ) a [ k ] [ j ] = a [ k ] [ j ] - min ; } sum = sum + a [ 1 ] [ 1 ] ; for ( int k = 1 ; k < n - r ; k ++ ) { for ( int j = 0 ; j < n - r + 1 ; j ++ ) { a [ k ] [ j ] = a [ k + 1 ] [ j ] ; } } for ( int j = 1 ; j < n - r ; j ++ ) { for ( int k = 0 ; k < n - r ; k ++ ) { a [ k ] [ j ] = a [ k ] [ j + 1 ] ; } } } cout << sum << endl ; } return 0 ; }
int main ( ) { int n ; int matrix [ 100 ] [ 100 ] ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> matrix [ j ] [ k ] ; for ( int m = n ; m > 1 ; m -- ) { for ( int j = 0 ; j < m ; j ++ ) { int min = matrix [ j ] [ 0 ] ; for ( int k = 1 ; k < m ; k ++ ) { if ( matrix [ j ] [ k ] < min ) min = matrix [ j ] [ k ] ; } for ( int k = 0 ; k < m ; k ++ ) matrix [ j ] [ k ] -= min ; } for ( int j = 0 ; j < m ; j ++ ) { int min = matrix [ 0 ] [ j ] ; for ( int k = 1 ; k < m ; k ++ ) { if ( matrix [ k ] [ j ] < min ) min = matrix [ k ] [ j ] ; } for ( int k = 0 ; k < m ; k ++ ) matrix [ k ] [ j ] -= min ; } sum += matrix [ 1 ] [ 1 ] ; for ( int i = 1 ; i < m ; i ++ ) { for ( int j = 1 ; j < m ; j ++ ) matrix [ i ] [ j ] = matrix [ i + 1 ] [ j + 1 ] ; matrix [ 0 ] [ i ] = matrix [ 0 ] [ i + 1 ] ; matrix [ i ] [ 0 ] = matrix [ i + 1 ] [ 0 ] ; } } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i , j , k , a [ 100 ] [ 100 ] , p , min , sum = 0 ; cin >> n ; for ( p = 1 ; p <= n ; p ++ ) { for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( k = 1 ; k <= n - 1 ; k ++ ) { for ( i = 0 ; i <= n - 1 ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = k ; j <= n - 1 ; j ++ ) { if ( a [ i ] [ j ] < min ) { min = a [ i ] [ j ] ; } } for ( j = 0 ; j <= n - 1 ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } for ( j = 0 ; j <= n - 1 ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = k ; i <= n - 1 ; i ++ ) { if ( a [ i ] [ j ] < min ) { min = a [ i ] [ j ] ; } } for ( i = 0 ; i <= n - 1 ; i ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } sum = sum + a [ k ] [ k ] ; } cout << sum << endl ; sum = 0 ; } return 0 ; }
void sub ( int a [ M ] , int n ) { int i , min = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( min > a [ i ] ) min = a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) a [ i ] -= min ; } int main ( ) { int n , k , i , j , count , sum ; scanf ( "%d" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { int a [ M ] [ M ] , temp [ M ] ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } for ( count = 0 ; count < n - 1 ; count ++ ) { for ( i = count ; i < n ; i ++ ) { for ( j = count ; j < n ; j ++ ) temp [ j - count ] = a [ i ] [ j ] ; sub ( temp , n - count ) ; for ( j = count ; j < n ; j ++ ) a [ i ] [ j ] = temp [ j - count ] ; } for ( j = count ; j < n ; j ++ ) { for ( i = count ; i < n ; i ++ ) temp [ i - count ] = a [ i ] [ j ] ; sub ( temp , n - count ) ; for ( i = count ; i < n ; i ++ ) a [ i ] [ j ] = temp [ i - count ] ; } sum += a [ count + 1 ] [ count + 1 ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] [ count + 1 ] = a [ i ] [ count ] ; for ( j = 0 ; j < n ; j ++ ) a [ count + 1 ] [ j ] = a [ count ] [ j ] ; } printf ( "%d\n" , sum ) ; } return 0 ; }
int a [ 110 ] [ 110 ] ; int rmin [ 110 ] , cmin [ 110 ] ; void clear ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { rmin [ i ] = a [ i ] [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] < rmin [ i ] ) rmin [ i ] = a [ i ] [ j ] ; } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - rmin [ i ] ; for ( int i = 0 ; i < n ; i ++ ) { cmin [ i ] = a [ 0 ] [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( a [ j ] [ i ] < cmin [ i ] ) cmin [ i ] = a [ j ] [ i ] ; } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - cmin [ i ] ; } void del ( int n ) { for ( int i = 1 ; i < n - 1 ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) a [ j ] [ i ] = a [ j ] [ i + 1 ] ; } int main ( ) { int n ; cin >> n ; int sum ; for ( int m = 0 ; m < n ; m ++ ) { sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; for ( int i = n ; i > 1 ; i -- ) { clear ( i ) ; sum += a [ 1 ] [ 1 ] ; del ( i ) ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , m , i , j , k , sum , min ; cin >> m ; for ( i = 1 ; i <= m ; i ++ ) { int a [ m ] [ m ] ; for ( j = 0 ; j < m ; j ++ ) for ( k = 0 ; k < m ; k ++ ) cin >> a [ j ] [ k ] ; sum = 0 ; for ( n = m ; n > 1 ; n -- ) { for ( j = 0 ; j < n ; j ++ ) { min = a [ j ] [ 0 ] ; for ( k = 1 ; k < n ; k ++ ) { if ( a [ j ] [ k ] < min ) { min = a [ j ] [ k ] ; } } for ( k = 0 ; k < n ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min ; } } for ( k = 0 ; k < n ; k ++ ) { min = a [ 0 ] [ k ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a [ j ] [ k ] < min ) { min = a [ j ] [ k ] ; } } for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min ; } } sum = sum + a [ 1 ] [ 1 ] ; for ( j = 1 ; j < n - 1 ; j ++ ) for ( k = 0 ; k < n ; k ++ ) { a [ j ] [ k ] = a [ j + 1 ] [ k ] ; } for ( k = 1 ; k < n - 1 ; k ++ ) for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ k ] = a [ j ] [ k + 1 ] ; } } cout << sum << endl ; } return 0 ; }
int a [ 101 ] [ 101 ] ; int hanshu ( int n ) ; int main ( ) { int i , j , k , n ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) cin >> a [ i ] [ j ] ; } cout << hanshu ( n ) << endl ; } return 0 ; } int hanshu ( int n ) { int min , sum = 0 , i , j ; if ( n == 1 ) return 0 ; else { for ( i = 1 ; i <= n ; i ++ ) { min = 10000 ; for ( j = 1 ; j <= n ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 1 ; j <= n ; j ++ ) a [ i ] [ j ] -= min ; } for ( j = 1 ; j <= n ; j ++ ) { min = 10000 ; for ( i = 1 ; i <= n ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( i = 1 ; i <= n ; i ++ ) a [ i ] [ j ] -= min ; } sum = a [ 2 ] [ 2 ] ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 2 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; for ( j = 1 ; j < n ; j ++ ) for ( i = 2 ; i < n ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; return sum + hanshu ( n - 1 ) ; } }
int main ( ) { int n = 0 , s = 0 , t = 0 , k = 0 , i = 0 , j = 0 , m = 0 , q = 0 , min = 0 , r = 0 , h = 0 , w = 0 , v = 0 ; cin >> n ; for ( r = 1 ; r <= n ; r ++ ) { int number = 0 ; const int p = n ; int a [ p + 1 ] [ p + 1 ] ; for ( i = 1 ; i <= p ; i ++ ) { for ( j = 1 ; j <= p ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( k = 1 ; k <= p - 1 ; k ++ ) { for ( s = k ; s <= p ; s ++ ) { min = a [ s ] [ k ] ; for ( t = k ; t <= p ; t ++ ) { if ( a [ s ] [ t ] < min ) min = a [ s ] [ t ] ; } for ( m = k ; m <= p ; m ++ ) { a [ s ] [ m ] -= min ; } } for ( h = k ; h <= p ; h ++ ) { min = a [ k ] [ h ] ; for ( w = k ; w <= p ; w ++ ) { if ( a [ w ] [ h ] < min ) min = a [ w ] [ h ] ; } for ( q = k ; q <= p ; q ++ ) { a [ q ] [ h ] -= min ; } } number += a [ k + 1 ] [ k + 1 ] ; a [ k + 1 ] [ k + 1 ] = a [ k ] [ k ] ; for ( v = k + 2 ; v <= p ; v ++ ) { a [ k + 1 ] [ v ] = a [ k ] [ v ] ; a [ v ] [ k + 1 ] = a [ v ] [ k ] ; } } cout << number << endl ; } return 0 ; }
int JU [ 100 ] [ 100 ] ; int main ( ) { int n , i , j , h , l , M ; void JUbian ( int N , int JU [ 100 ] [ 100 ] ) ; void JUxiao ( int N , int JU [ 100 ] [ 100 ] ) ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { M = 0 ; for ( h = 0 ; h < n ; h ++ ) { for ( l = 0 ; l < n ; l ++ ) { scanf ( "%d" , & JU [ h ] [ l ] ) ; } } for ( j = n ; j > 1 ; j -- ) { JUbian ( j , JU ) ; M = M + JU [ 1 ] [ 1 ] ; JUxiao ( j , JU ) ; } printf ( "%d\n" , M ) ; } return 0 ; } void JUbian ( int n , int JU [ 100 ] [ 100 ] ) { int h , l , min ; for ( h = 0 ; h < n ; h ++ ) { min = JU [ h ] [ 0 ] ; for ( l = 1 ; l < n ; l ++ ) { if ( JU [ h ] [ l ] < min ) min = JU [ h ] [ l ] ; } for ( l = 0 ; l < n ; l ++ ) { JU [ h ] [ l ] = JU [ h ] [ l ] - min ; } } for ( l = 0 ; l < n ; l ++ ) { min = JU [ 0 ] [ l ] ; for ( h = 1 ; h < n ; h ++ ) { if ( JU [ h ] [ l ] < min ) min = JU [ h ] [ l ] ; } for ( h = 0 ; h < n ; h ++ ) { JU [ h ] [ l ] = JU [ h ] [ l ] - min ; } } } void JUxiao ( int n , int JU [ 100 ] [ 100 ] ) { int h , l ; for ( h = 0 ; h < n - 1 ; h ++ ) { for ( l = 0 ; l < n ; l ++ ) { if ( h > 0 ) { JU [ h ] [ l ] = JU [ h + 1 ] [ l ] ; } } } for ( l = 0 ; l < n - 1 ; l ++ ) { for ( h = 0 ; h < n - 1 ; h ++ ) { if ( l > 0 ) { JU [ h ] [ l ] = JU [ h ] [ l + 1 ] ; } } } }
int n , i , j , k , rec , sum ; int x [ 150 ] [ 150 ] ; void F ( ) { int p , q , min ; for ( p = 1 ; p <= rec ; p ++ ) { min = ( * ( * ( x + p ) + 1 ) ) ; for ( q = 1 ; q <= rec ; q ++ ) min = ( ( * ( * ( x + p ) + q ) ) < min ) ? ( * ( * ( x + p ) + q ) ) : min ; for ( q = 1 ; q <= rec ; q ++ ) ( * ( * ( x + p ) + q ) ) -= min ; } for ( p = 1 ; p <= rec ; p ++ ) { min = ( * ( * ( x + 1 ) + p ) ) ; for ( q = 1 ; q <= rec ; q ++ ) min = ( ( * ( * ( x + q ) + p ) ) < min ) ? ( * ( * ( x + q ) + p ) ) : min ; for ( q = 1 ; q <= rec ; q ++ ) ( * ( * ( x + q ) + p ) ) -= min ; } sum += ( * ( * ( x + 2 ) + 2 ) ) ; for ( p = 2 ; p < rec ; p ++ ) ( * ( * ( x + 1 ) + p ) ) = ( * ( * ( x + 1 ) + p + 1 ) ) ; for ( p = 2 ; p < rec ; p ++ ) ( * ( * ( x + p ) + 1 ) ) = ( * ( * ( x + p + 1 ) + 1 ) ) ; for ( p = 2 ; p < rec ; p ++ ) { for ( q = 2 ; q < rec ; q ++ ) ( * ( * ( x + p ) + q ) ) = ( * ( * ( x + p + 1 ) + q + 1 ) ) ; } return ; } int main ( ) { cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { rec = n ; sum = 0 ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) cin >> ( * ( * ( x + i ) + j ) ) ; while ( rec > 1 ) { F ( ) ; rec -- ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i , j , k , l ; cin >> n ; int a [ 100 ] [ 100 ] ; int sum = 0 , temp = 1 ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; int min ; sum = 0 ; temp = 1 ; for ( l = 0 ; l < n - 1 ; l ++ ) { for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] [ j ] < min && a [ i ] [ j ] >= 0 ) min = a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] [ j ] >= 0 ) a [ i ] [ j ] -= min ; } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] [ j ] < min && a [ i ] [ j ] >= 0 ) min = a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] [ j ] >= 0 ) a [ i ] [ j ] -= min ; } sum += a [ temp ] [ temp ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] [ temp ] = - 1 ; for ( j = 0 ; j < n ; j ++ ) a [ temp ] [ j ] = - 1 ; temp ++ ; } cout << sum << endl ; } return 0 ; }
int n , a [ 200 ] [ 200 ] , temp , sum [ 200 ] ; void zero ( int i ) { int mi = 1000 ; for ( int j = i ; j <= n ; j ++ ) { for ( int k = i ; k <= n ; k ++ ) mi = min ( * ( * ( a + j ) + k ) , mi ) ; for ( int k = i ; k <= n ; k ++ ) * ( * ( a + j ) + k ) = * ( * ( a + j ) + k ) - mi ; mi = 1000 ; } mi = 1000 ; for ( int k = i ; k <= n ; k ++ ) { for ( int j = i ; j <= n ; j ++ ) mi = min ( * ( * ( a + j ) + k ) , mi ) ; for ( int j = i ; j <= n ; j ++ ) * ( * ( a + j ) + k ) = * ( * ( a + j ) + k ) - mi ; mi = 1000 ; } } int main ( ) { cin >> n ; for ( int l = 1 ; l <= n ; l ++ ) { sum [ l ] = 0 ; for ( int j = 1 ; j <= n ; j ++ ) for ( int k = 1 ; k <= n ; k ++ ) cin >> * ( * ( a + j ) + k ) ; for ( int i = 1 ; i <= n ; i ++ ) { temp = * ( * ( a + 1 ) + i ) ; * ( * ( a + 1 ) + i ) = * ( * ( a + 2 ) + i ) ; * ( * ( a + 2 ) + i ) = temp ; } for ( int i = 1 ; i <= n ; i ++ ) { temp = * ( * ( a + i ) + 1 ) ; * ( * ( a + i ) + 1 ) = * ( * ( a + i ) + 2 ) ; * ( * ( a + i ) + 2 ) = temp ; } for ( int i = 1 ; i <= n - 1 ; i ++ ) { zero ( i ) ; sum [ l ] += * ( * ( a + i ) + i ) ; for ( int k = i + 1 ; k <= n ; k ++ ) { temp = * ( * ( a + i + 1 ) + k ) ; * ( * ( a + i + 1 ) + k ) = * ( * ( a + i + 2 ) + k ) ; * ( * ( a + i + 2 ) + k ) = temp ; } for ( int j = i + 1 ; j <= n ; j ++ ) { temp = * ( * ( a + j ) + i + 1 ) ; * ( * ( a + j ) + i + 1 ) = * ( * ( a + j ) + i + 2 ) ; * ( * ( a + j ) + i + 2 ) = temp ; } } cout << sum [ l ] << endl ; } return 0 ; }
int main ( ) { int n , i , j , k ; int a [ 100 ] [ 100 ] ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; int m = n ; int sum = 0 ; while ( 1 ) { int min ; for ( i = 0 ; i < m ; i ++ ) { min = 1000 ; for ( j = 0 ; j < m ; j ++ ) { if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < m ; j ++ ) a [ i ] [ j ] -= min ; } for ( j = 0 ; j < m ; j ++ ) { min = 1000 ; for ( i = 0 ; i < m ; i ++ ) if ( min > a [ i ] [ j ] ) min = a [ i ] [ j ] ; for ( i = 0 ; i < m ; i ++ ) a [ i ] [ j ] -= min ; } sum += a [ 1 ] [ 1 ] ; m -- ; if ( m == 1 ) { cout << sum << endl ; break ; } for ( i = 1 ; i < m ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( j = 1 ; j < m ; j ++ ) a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; for ( i = 1 ; i < m ; i ++ ) for ( j = 1 ; j < m ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } } return 0 ; }
int n , i , j , k , l , len = 0 , sum = 0 ; int array [ 100 ] [ 100 ] ; void guilinhang ( int a ) { int min = array [ a ] [ 0 ] ; for ( l = 0 ; l < len ; l ++ ) { if ( array [ a ] [ l ] < min ) min = array [ a ] [ l ] ; } for ( l = 0 ; l < len ; l ++ ) array [ a ] [ l ] = array [ a ] [ l ] - min ; } void guilinlie ( int a ) { int min = array [ 0 ] [ a ] ; for ( l = 0 ; l < len ; l ++ ) { if ( array [ l ] [ a ] < min ) min = array [ l ] [ a ] ; } for ( l = 0 ; l < len ; l ++ ) array [ l ] [ a ] = array [ l ] [ a ] - min ; } void xiaojian ( int a ) { if ( a == 2 ) return ; else if ( a > 2 ) { for ( i = 1 ; i < a - 1 ; i ++ ) { for ( j = 0 ; j < a ; j ++ ) array [ j ] [ i ] = array [ j ] [ i + 1 ] ; } for ( i = 1 ; i < a - 1 ; i ++ ) { for ( j = 0 ; j < a ; j ++ ) array [ i ] [ j ] = array [ i + 1 ] [ j ] ; } } } int main ( ) { cin >> n ; for ( k = 0 ; k < n ; k ++ ) { len = n ; sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> array [ i ] [ j ] ; } } while ( len >= 2 ) { for ( i = 0 ; i < len ; i ++ ) { guilinhang ( i ) ; } for ( i = 0 ; i < len ; i ++ ) { guilinlie ( i ) ; } sum = sum + array [ 1 ] [ 1 ] ; xiaojian ( len ) ; len -- ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i , j , min ; int a [ 103 ] [ 103 ] ; cin >> n ; for ( int count = 1 ; count <= n ; count ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } int n0 = n , sum = 0 ; while ( n0 >= 2 ) { for ( i = 0 ; i < n0 ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 1 ; j < n0 ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < n0 ; j ++ ) { a [ i ] [ j ] -= min ; } } for ( j = 0 ; j < n0 ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 1 ; i < n0 ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( i = 0 ; i < n0 ; i ++ ) { a [ i ] [ j ] -= min ; } } sum += a [ 1 ] [ 1 ] ; for ( i = 1 ; i < n0 ; i ++ ) for ( j = 0 ; j < n0 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; for ( j = 1 ; j < n0 ; j ++ ) for ( i = 0 ; i < n0 ; i ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; n0 -- ; } cout << sum << endl ; } return 0 ; }
int board [ 100 ] [ 100 ] ; void Subduction ( int ) ; void Turn ( int ) ; int n ; int sum ; int main ( ) { int i ; cin >> n ; for ( i = 0 ; i <= n - 1 ; i ++ ) { sum = 0 ; int j , k ; for ( j = 0 ; j <= n - 1 ; j ++ ) { for ( k = 0 ; k <= n - 1 ; k ++ ) { cin >> board [ j ] [ k ] ; } } Subduction ( n ) ; } return 0 ; } void Subduction ( int m ) { if ( m == 1 ) { cout << sum << endl ; } else { int rowmin [ 100 ] ; int colmin [ 100 ] ; int p , q ; for ( p = 0 ; p <= m - 1 ; p ++ ) { rowmin [ p ] = board [ p ] [ 0 ] ; for ( q = 0 ; q <= m - 1 ; q ++ ) { if ( board [ p ] [ q ] < rowmin [ p ] ) { rowmin [ p ] = board [ p ] [ q ] ; } } } for ( p = 0 ; p <= m - 1 ; p ++ ) { for ( q = 0 ; q <= m - 1 ; q ++ ) { board [ p ] [ q ] -= rowmin [ p ] ; } } for ( q = 0 ; q <= m - 1 ; q ++ ) { colmin [ q ] = board [ 0 ] [ q ] ; for ( p = 0 ; p <= m - 1 ; p ++ ) { if ( board [ p ] [ q ] < colmin [ q ] ) { colmin [ q ] = board [ p ] [ q ] ; } } } for ( q = 0 ; q <= m - 1 ; q ++ ) { for ( p = 0 ; p <= m - 1 ; p ++ ) { board [ p ] [ q ] -= colmin [ q ] ; } } sum += board [ 1 ] [ 1 ] ; Turn ( m ) ; Subduction ( m - 1 ) ; } } void Turn ( int m ) { int p , q ; for ( q = 1 ; q <= m - 2 ; q ++ ) { board [ 0 ] [ q ] = board [ 0 ] [ q + 1 ] ; } for ( p = 1 ; p <= m - 2 ; p ++ ) { board [ p ] [ 0 ] = board [ p + 1 ] [ 0 ] ; } for ( p = 1 ; p <= m - 2 ; p ++ ) { for ( q = 1 ; q <= m - 2 ; q ++ ) { board [ p ] [ q ] = board [ p + 1 ] [ q + 1 ] ; } } }
int main ( ) { int n ; cin >> n ; int s , i , j ; for ( s = 1 ; s <= n ; s ++ ) { int b = n , yi = 0 , min = 10000 ; int a [ 110 ] [ 110 ] = { 0 } ; int c = 2 ; int bi [ 110 ] = { 0 } , bj [ 110 ] = { 0 } ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( b = n ; b >= 2 ; b -- ) { for ( i = 1 ; i <= n ; i ++ ) { if ( bi [ i ] == 1 ) continue ; for ( j = 1 ; j <= n ; j ++ ) { if ( ( bj [ j ] == 0 ) && ( a [ i ] [ j ] <= min ) ) min = a [ i ] [ j ] ; } if ( min != 0 ) { for ( j = 1 ; j <= n ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } min = 10000 ; } min = 10000 ; for ( j = 1 ; j <= n ; j ++ ) { if ( bj [ j ] == 1 ) continue ; for ( i = 1 ; i <= n ; i ++ ) { if ( ( bi [ i ] == 0 ) && ( a [ i ] [ j ] <= min ) ) min = a [ i ] [ j ] ; } if ( min != 0 ) { for ( i = 1 ; i <= n ; i ++ ) { a [ i ] [ j ] = a [ i ] [ j ] - min ; } } min = 100000 ; } yi = yi + a [ c ] [ c ] ; bi [ c ] = 1 ; bj [ c ] = 1 ; min = 10000 ; c ++ ; } cout << yi << endl ; } return 0 ; }
int main ( ) { int N = 0 ; cin >> N ; for ( int n = 0 ; n < N ; n ++ ) { int a [ 100 ] [ 100 ] = { 0 } ; int Sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) cin >> a [ i ] [ j ] ; for ( int m = N ; m > 1 ; m -- ) { for ( int i = 0 ; i < m ; i ++ ) { int Min = a [ i ] [ 0 ] ; for ( int j = 0 ; j < m ; j ++ ) if ( Min > a [ i ] [ j ] ) Min = a [ i ] [ j ] ; for ( int j = 0 ; j < m ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - Min ; } for ( int j = 0 ; j < m ; j ++ ) { int Min = a [ 0 ] [ j ] ; for ( int i = 0 ; i < m ; i ++ ) if ( Min > a [ i ] [ j ] ) Min = a [ i ] [ j ] ; for ( int i = 0 ; i < m ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - Min ; } Sum = Sum + a [ 1 ] [ 1 ] ; for ( int j = 1 ; j < m - 1 ; j ++ ) a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; for ( int i = 1 ; i < m - 1 ; i ++ ) a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( int i = 1 ; i < m - 1 ; i ++ ) for ( int j = 1 ; j < m - 1 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } cout << Sum << endl ; } return 0 ; }
int main ( ) { int n , n1 , num [ 101 ] [ 101 ] , i , j , k , min = 99999 , sum = 0 ; int ( * p ) [ 101 ] ; cin >> n ; for ( k = 0 ; k < n ; k ++ ) { n1 = n ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> num [ i ] [ j ] ; p = num ; for ( ; n1 >= 2 ; n1 -- ) { for ( i = 0 ; i < n1 ; i ++ ) { for ( j = 0 ; j < n1 ; j ++ ) { if ( * ( * ( p + i ) + j ) < min ) min = * ( * ( p + i ) + j ) ; } for ( j = 0 ; j < n1 ; j ++ ) * ( * ( p + i ) + j ) -= min ; min = 99999 ; } min = 99999 ; for ( j = 0 ; j < n1 ; j ++ ) { for ( i = 0 ; i < n1 ; i ++ ) { if ( * ( * ( p + i ) + j ) < min ) min = * ( * ( p + i ) + j ) ; } for ( i = 0 ; i < n1 ; i ++ ) num [ i ] [ j ] -= min ; min = 99999 ; } sum += * ( * ( p + 1 ) + 1 ) ; min = 99999 ; for ( i = 1 ; i < n1 - 1 ; i ++ ) for ( j = 0 ; j < n1 ; j ++ ) * ( * ( p + i ) + j ) = * ( * ( p + i + 1 ) + j ) ; for ( j = 1 ; j < n1 - 1 ; j ++ ) for ( i = 0 ; i < n1 ; i ++ ) * ( * ( p + i ) + j ) = * ( * ( p + i ) + j + 1 ) ; } cout << sum << endl ; sum = 0 ; } return 0 ; }
int f ( int n , int a [ 101 ] [ 101 ] ) { int i , j , min , k ; for ( i = 1 ; i <= n ; i ++ ) { min = a [ i ] [ 1 ] ; for ( j = 1 ; j <= n ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( j = 1 ; j <= n ; j ++ ) a [ i ] [ j ] -= min ; } for ( i = 1 ; i <= n ; i ++ ) { min = a [ 1 ] [ i ] ; for ( j = 1 ; j <= n ; j ++ ) if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; for ( j = 1 ; j <= n ; j ++ ) a [ j ] [ i ] -= min ; } if ( n == 2 ) return a [ 2 ] [ 2 ] ; else { k = a [ 2 ] [ 2 ] ; for ( i = 3 ; i <= n ; i ++ ) { a [ 1 ] [ i - 1 ] = a [ 1 ] [ i ] ; a [ i - 1 ] [ 1 ] = a [ i ] [ 1 ] ; } for ( i = 3 ; i <= n ; i ++ ) for ( j = 3 ; j <= n ; j ++ ) a [ i - 1 ] [ j - 1 ] = a [ i ] [ j ] ; n -- ; return k + f ( n , a ) ; } } int main ( ) { int a [ 101 ] [ 101 ] = { 0 } , n , i , j , k ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) cin >> a [ i ] [ j ] ; cout << f ( n , a ) << endl ; memset ( a , 0 , sizeof ( a ) ) ; } return 0 ; }
int a [ 100 ] [ 100 ] ; int sum ; int f ( int n ) { if ( n == 1 ) return 0 ; int i , j , min = 0 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( i = 0 ; i < n ; i ++ ) { min = a [ 0 ] [ i ] ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; } for ( j = 0 ; j < n ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - min ; } sum = sum + a [ 1 ] [ 1 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 2 ; j < n ; j ++ ) { a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } } for ( i = 2 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } } return sum + f ( n - 1 ) ; } int main ( ) { int i , n , j , k , x , sum ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { x = 0 ; sum = 0 ; for ( j = 0 ; j < n ; j ++ ) for ( k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; x = f ( n ) ; cout << x << endl ; } return 0 ; }
int main ( ) { int n , m [ 105 ] [ 105 ] , s , min = 10000 , sum = 0 ; cin >> n ; s = n ; for ( int g = 1 ; g <= n ; g ++ ) { sum = 0 ; s = n ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> m [ i ] [ j ] ; for ( int k = 1 ; k <= n - 1 ; k ++ ) { for ( int i = 1 ; i <= s ; i ++ ) { min = 10000 ; for ( int j = 1 ; j <= s ; j ++ ) if ( m [ i ] [ j ] < min ) min = m [ i ] [ j ] ; for ( int j = 1 ; j <= s ; j ++ ) m [ i ] [ j ] = m [ i ] [ j ] - min ; } for ( int i = 1 ; i <= s ; i ++ ) { min = 10000 ; for ( int j = 1 ; j <= s ; j ++ ) if ( m [ j ] [ i ] < min ) min = m [ j ] [ i ] ; for ( int j = 1 ; j <= s ; j ++ ) m [ j ] [ i ] = m [ j ] [ i ] - min ; } sum = sum + m [ 2 ] [ 2 ] ; for ( int i = 2 ; i <= s - 1 ; i ++ ) { for ( int j = 1 ; j <= s ; j ++ ) { m [ i ] [ j ] = m [ i + 1 ] [ j ] ; } } for ( int i = 2 ; i <= s - 1 ; i ++ ) { for ( int j = 1 ; j <= s - 1 ; j ++ ) m [ j ] [ i ] = m [ j ] [ i + 1 ] ; } s = s - 1 ; } cout << sum << endl ; } return 0 ; }
int sum = 0 ; int a [ 100 ] [ 100 ] = { 0 } ; void temp ( int n ) { if ( n == 1 ) return ; for ( int i = 0 ; i < n ; i ++ ) { int miner = 1000 ; for ( int j = 0 ; j < n ; j ++ ) if ( miner > a [ i ] [ j ] ) miner = a [ i ] [ j ] ; for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - miner ; } for ( int j = 0 ; j < n ; j ++ ) { int miner = 1000 ; for ( int i = 0 ; i < n ; i ++ ) if ( miner > a [ i ] [ j ] ) miner = a [ i ] [ j ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ j ] = a [ i ] [ j ] - miner ; } sum = sum + a [ 1 ] [ 1 ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 1 ; j < n - 1 ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; for ( int j = 0 ; j < n - 1 ; j ++ ) for ( int i = 1 ; i < n - 1 ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; temp ( n - 1 ) ; } int main ( ) { int n ; cin >> n ; for ( int m = 0 ; m < n ; m ++ ) { sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; temp ( n ) ; cout << sum << endl ; } return 0 ; }
int n = 0 ; int juzhen [ 101 ] [ 101 ] = { 0 } , sum = 0 , hang = 0 ; void hangxiao ( ) ; void liexiao ( ) ; void xiaojian ( ) ; void hangxiao ( ) { int i , j , xiao = 1000 ; for ( i = 0 ; i < hang ; i ++ ) { for ( j = 0 ; j < hang ; j ++ ) { if ( xiao > juzhen [ i ] [ j ] ) { xiao = juzhen [ i ] [ j ] ; } } for ( j = 0 ; j < hang ; j ++ ) { juzhen [ i ] [ j ] -= xiao ; } xiao = 1000 ; } } void liexiao ( ) { int i , j , xiao = 1000 ; for ( j = 0 ; j < hang ; j ++ ) { for ( i = 0 ; i < hang ; i ++ ) { if ( xiao > juzhen [ i ] [ j ] ) { xiao = juzhen [ i ] [ j ] ; } } for ( i = 0 ; i < hang ; i ++ ) { juzhen [ i ] [ j ] -= xiao ; } xiao = 1000 ; } } void xiaojian ( ) { int i , j , xiao = 0 ; for ( i = 2 ; i < hang ; i ++ ) { for ( j = 0 ; j < hang ; j ++ ) { juzhen [ i - 1 ] [ j ] = juzhen [ i ] [ j ] ; } } for ( j = 2 ; j < hang ; j ++ ) { for ( i = 0 ; i < hang ; i ++ ) { juzhen [ i ] [ j - 1 ] = juzhen [ i ] [ j ] ; } } } int main ( ) { int a ; cin >> a ; n = a ; while ( a > 0 ) { memset ( juzhen , 0 , sizeof ( juzhen ) ) ; sum = 0 ; int b , c , d , e , i , j ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> juzhen [ i ] [ j ] ; hang = n ; while ( hang > 1 ) { hangxiao ( ) ; liexiao ( ) ; sum += juzhen [ 1 ] [ 1 ] ; xiaojian ( ) ; hang -- ; } cout << sum << endl ; a -- ; } return 0 ; }
int sum = 0 ; int main ( ) { void Subtraction ( int [ 100 ] [ 100 ] , int ) ; int n = 0 ; cin >> n ; int a [ 100 ] [ 100 ] ; for ( int f = 1 ; f <= n ; f ++ ) { for ( int i = 0 ; i <= n - 1 ; i ++ ) { for ( int j = 0 ; j <= n - 1 ; j ++ ) { cin >> a [ i ] [ j ] ; } } sum = 0 ; Subtraction ( a , n ) ; if ( f == n ) cout << sum ; else cout << sum << endl ; } return 0 ; } void Subtraction ( int m [ 100 ] [ 100 ] , int n ) { if ( n != 1 ) { for ( int i = 0 ; i <= n - 1 ; i ++ ) { int min = m [ i ] [ 0 ] ; for ( int j = 0 ; j <= n - 1 ; j ++ ) { if ( min > m [ i ] [ j ] ) min = m [ i ] [ j ] ; } for ( int j = 0 ; j <= n - 1 ; j ++ ) { m [ i ] [ j ] -= min ; } } for ( int i = 0 ; i <= n - 1 ; i ++ ) { int min = m [ 0 ] [ i ] ; for ( int j = 0 ; j <= n - 1 ; j ++ ) { if ( min > m [ j ] [ i ] ) min = m [ j ] [ i ] ; } for ( int j = 0 ; j <= n - 1 ; j ++ ) { m [ j ] [ i ] -= min ; } } j = 0 ; j <= n - 1 ; j ++ ) { if ( j == 1 ) continue ;
int a [ 100 ] [ 100 ] ; int findmin ( int c , int low , int n ) { int min ; if ( c == 1 ) { int i ; min = a [ low ] [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ low ] [ i ] < min ) min = a [ low ] [ i ] ; } } if ( c == 0 ) { int i ; min = a [ 0 ] [ low ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ low ] < min ) min = a [ i ] [ low ] ; } } return min ; } int dec ( int n , int sum ) { if ( n == 1 ) return sum ; int i , j , k , min ; for ( i = 0 ; i < n ; i ++ ) { min = findmin ( 1 , i , n ) ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = a [ i ] [ j ] - min ; } for ( i = 0 ; i < n ; i ++ ) { min = findmin ( 0 , i , n ) ; for ( j = 0 ; j < n ; j ++ ) a [ j ] [ i ] = a [ j ] [ i ] - min ; } sum = sum + a [ 1 ] [ 1 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) { a [ j ] [ i ] = a [ j + 1 ] [ i ] ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 1 ; j < n - 1 ; j ++ ) { a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } return dec ( n - 1 , sum ) ; } int main ( int argc , const char * argv [ ] ) { int n ; cin >> n ; int i , j , s , t ; for ( int k = 1 ; k <= n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; cout << dec ( n , 0 ) << endl ; } return 0 ; }
int main ( ) { int n , m ; cin >> n ; m = n ; int sum = 0 ; for ( int i = 0 ; i < m ; i ++ ) { n = m ; int a [ 100 ] [ 100 ] ; sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } } while ( n > 1 ) { for ( int j = 0 ; j < n ; j ++ ) { int min = a [ j ] [ 0 ] ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ j ] [ k ] < min ) min = a [ j ] [ k ] ; } for ( int k = 0 ; k < n ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min ; } } for ( int j = 0 ; j < n ; j ++ ) { int min = a [ 0 ] [ j ] ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] [ j ] < min ) min = a [ k ] [ j ] ; } for ( int k = 0 ; k < n ; k ++ ) { a [ k ] [ j ] = a [ k ] [ j ] - min ; } } sum = sum + a [ 1 ] [ 1 ] ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 1 ; k < n - 1 ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k + 1 ] ; } } for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 1 ; k < n - 1 ; k ++ ) { a [ k ] [ j ] = a [ k + 1 ] [ j ] ; } } n = n - 1 ; } cout << sum << endl ; } return 0 ; }
int n , a [ 100 ] [ 100 ] ; void hang ( int m ) { int min = 10000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ m ] [ i ] < min ) min = a [ m ] [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) a [ m ] [ i ] -= min ; } void lie ( int m ) { int min = 10000 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] [ m ] < min ) min = a [ i ] [ m ] ; } for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ m ] -= min ; } void del ( int a [ 100 ] [ 100 ] ) { int i , j ; for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } } for ( i = 1 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ i ] = a [ j ] [ i + 1 ] ; } } } int main ( ) { int i ; cin >> n ; for ( int l = 0 ; l < n ; l ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } int k = 0 , sum = 0 ; while ( k < n - 1 ) { for ( i = 0 ; i < n ; i ++ ) hang ( i ) ; for ( i = 0 ; i < n ; i ++ ) lie ( i ) ; sum += a [ 1 ] [ 1 ] ; del ( a ) ; k ++ ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i , j , k , m , h , l , s = 0 , n1 ; cin >> n ; n1 = n ; int min1 [ 100 ] ; int min2 [ 100 ] ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } } while ( n != 1 ) { for ( j = 0 ; j < n ; j ++ ) { min1 [ j ] = a [ j ] [ 0 ] ; for ( k = 0 ; k < n ; k ++ ) { if ( min1 [ j ] > a [ j ] [ k ] ) { min1 [ j ] = a [ j ] [ k ] ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min1 [ j ] ; } } for ( k = 0 ; k < n ; k ++ ) { min2 [ k ] = a [ 0 ] [ k ] ; for ( j = 0 ; j < n ; j ++ ) { if ( min2 [ k ] > a [ j ] [ k ] ) { min2 [ k ] = a [ j ] [ k ] ; } } } for ( k = 0 ; k < n ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min2 [ k ] ; } } s = s + a [ 1 ] [ 1 ] ; for ( m = 2 ; m < n ; m ++ ) { a [ 0 ] [ m - 1 ] = a [ 0 ] [ m ] ; a [ m - 1 ] [ 0 ] = a [ m ] [ 0 ] ; } for ( h = 2 ; h < n ; h ++ ) { for ( l = 2 ; l < n ; l ++ ) { a [ h - 1 ] [ l - 1 ] = a [ h ] [ l ] ; } } n -- ; } cout << s << endl ; s = 0 ; n = n1 ; } return 0 ; }
int main ( ) { int n , a [ 102 ] [ 102 ] = { 0 } , sum = 0 ; cin >> n ; int i , j , k , cc ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= n ; k ++ ) { cin >> * ( * ( a + j ) + k ) ; } } cc = n ; while ( cc > 1 ) { int min = 10000 ; for ( j = 1 ; j <= cc ; j ++ ) { for ( k = 1 ; k <= cc ; k ++ ) { if ( min > * ( * ( a + j ) + k ) ) min = * ( * ( a + j ) + k ) ; } for ( k = 1 ; k <= cc ; k ++ ) { * ( * ( a + j ) + k ) = * ( * ( a + j ) + k ) - min ; } min = 10000 ; } min = 10000 ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 1 ; k <= cc ; k ++ ) { if ( min > * ( * ( a + k ) + j ) ) min = * ( * ( a + k ) + j ) ; } for ( k = 1 ; k <= cc ; k ++ ) { * ( * ( a + k ) + j ) = * ( * ( a + k ) + j ) - min ; } min = 10000 ; } sum += * ( * ( a + 2 ) + 2 ) ; for ( j = 3 ; j <= cc ; j ++ ) { for ( k = 1 ; k <= cc ; k ++ ) { * ( * ( a + j - 1 ) + k ) = * ( * ( a + j ) + k ) ; } } for ( j = 1 ; j <= cc ; j ++ ) { for ( k = 3 ; k <= cc ; k ++ ) { * ( * ( a + j ) + k - 1 ) = * ( * ( a + j ) + k ) ; } } cc -- ; } cout << sum << endl ; } return 0 ; }
int a [ 200 ] [ 200 ] , sum = 0 ; void solve ( int n ) { if ( n != 1 ) { for ( int i = 0 ; i < n ; i ++ ) { int min = a [ i ] [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( min > a [ i ] [ j ] ) { min = a [ i ] [ j ] ; } } for ( int j = 0 ; j < n ; j ++ ) { a [ i ] [ j ] -= min ; } } for ( int i = 0 ; i < n ; i ++ ) { int min = a [ 0 ] [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( min > a [ j ] [ i ] ) { min = a [ j ] [ i ] ; } } for ( int j = 0 ; j < n ; j ++ ) { a [ j ] [ i ] -= min ; } } sum += a [ 1 ] [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; } for ( int i = 1 ; i < n - 1 ; i ++ ) for ( int j = 1 ; j < n - 1 ; j ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } solve ( n - 1 ) ; } } int main ( ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } solve ( n ) ; cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { int a [ 110 ] [ 110 ] = { 0 } ; int min = 10000 , s = 0 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; } for ( int m = 1 ; m < n ; m ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) { if ( ( j == 0 || j >= m ) && ( k == 0 || k >= m ) ) { if ( a [ j ] [ k ] < min ) min = a [ j ] [ k ] ; } } for ( int k = 0 ; k < n ; k ++ ) { if ( ( j == 0 || j >= m ) && ( k == 0 || k >= m ) ) a [ j ] [ k ] = a [ j ] [ k ] - min ; } min = 10000 ; } for ( int k = 0 ; k < n ; k ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( ( j == 0 || j >= m ) && ( k == 0 || k >= m ) ) { if ( a [ j ] [ k ] < min ) min = a [ j ] [ k ] ; } } for ( int j = 0 ; j < n ; j ++ ) { if ( ( j == 0 || j >= m ) && ( k == 0 || k >= m ) ) a [ j ] [ k ] = a [ j ] [ k ] - min ; } min = 10000 ; } s = s + a [ m ] [ m ] ; for ( int j = 0 ; j < n ; j ++ ) a [ j ] [ m ] = 100000 ; for ( int j = 0 ; j < n ; j ++ ) a [ m ] [ j ] = 100000 ; } cout << s << endl ; } return 0 ; }
int min ( int a [ 100 ] [ 100 ] , int , int , int ) ; int main ( ) { int n , a [ 100 ] [ 100 ] , m , j , k , t ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } } m = 0 ; for ( int l = 0 ; l < n - 1 ; l ++ ) { for ( j = 0 ; j < n - l ; j ++ ) { t = min ( a , 0 , j , n - l ) ; for ( k = 0 ; k < n - l ; k ++ ) { a [ j ] [ k ] -= t ; } } for ( j = 0 ; j < n - l ; j ++ ) { t = min ( a , 1 , j , n - l ) ; for ( k = 0 ; k < n - l ; k ++ ) { a [ k ] [ j ] -= t ; } } m += a [ 1 ] [ 1 ] ; for ( j = 0 ; j < n - l ; j ++ ) { for ( k = 1 ; k < n - l - 1 ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k + 1 ] ; } } for ( j = 0 ; j < n - l - 1 ; j ++ ) { for ( k = 1 ; k < n - l - 1 ; k ++ ) { a [ k ] [ j ] = a [ k + 1 ] [ j ] ; } } } cout << m << endl ; } return 0 ; } int min ( int a [ 100 ] [ 100 ] , int s , int l , int n ) { int t ; if ( s == 0 ) { t = a [ l ] [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( t > a [ l ] [ i ] ) t = a [ l ] [ i ] ; } } else { t = a [ 0 ] [ l ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( t > a [ j ] [ l ] ) t = a [ j ] [ l ] ; } } return t ; }
int main ( ) { int n ; int sum = 0 ; cin >> n ; int i , j , k , h , p , q ; for ( k = 0 ; k < n ; k ++ ) { sum = 0 ; int board [ 105 ] [ 105 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> board [ i ] [ j ] ; } } for ( h = 0 ; h < n ; h ++ ) { for ( i = h ; i < n ; i ++ ) { int min = board [ i ] [ h ] ; for ( j = h ; j < n ; j ++ ) { if ( board [ i ] [ j ] < min ) { min = board [ i ] [ j ] ; } } for ( j = h ; j < n ; j ++ ) { board [ i ] [ j ] -= min ; } } for ( j = h ; j < n ; j ++ ) { int min = board [ h ] [ j ] ; for ( i = h ; i < n ; i ++ ) { if ( board [ i ] [ j ] < min ) { min = board [ i ] [ j ] ; } } for ( i = h ; i < n ; i ++ ) { board [ i ] [ j ] -= min ; } } sum += board [ h + 1 ] [ h + 1 ] ; board [ h + 1 ] [ h + 1 ] = board [ h ] [ h ] ; for ( p = h + 2 ; p < n ; p ++ ) { board [ h + 1 ] [ p ] = board [ h ] [ p ] ; } for ( p = h + 2 ; p < n ; p ++ ) { board [ p ] [ h + 1 ] = board [ p ] [ h ] ; } } cout << sum << endl ; } return 0 ; }
int n , A [ 111 ] [ 111 ] ; void sum ( ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> A [ i ] [ j ] ; int S = 0 ; for ( int t = n ; t > 1 ; t -- ) { for ( int i = 0 ; i < t ; i ++ ) { int min = 999999 ; for ( int j = 0 ; j < t ; j ++ ) { if ( A [ i ] [ j ] < min ) min = A [ i ] [ j ] ; } for ( int j = 0 ; j < t ; j ++ ) { A [ i ] [ j ] -= min ; } } for ( int i = 0 ; i < t ; i ++ ) { int min = 999999 ; for ( int j = 0 ; j < t ; j ++ ) { if ( A [ j ] [ i ] < min ) min = A [ j ] [ i ] ; } for ( int j = 0 ; j < t ; j ++ ) { A [ j ] [ i ] -= min ; } } S += A [ 1 ] [ 1 ] ; for ( int i = 1 ; i < t ; i ++ ) for ( int j = 0 ; j < t ; j ++ ) A [ i ] [ j ] = A [ i + 1 ] [ j ] ; for ( int i = 1 ; i < t ; i ++ ) for ( int j = 0 ; j < t ; j ++ ) A [ j ] [ i ] = A [ j ] [ i + 1 ] ; } cout << S << endl ; } int main ( ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) sum ( ) ; }
int a [ 100 ] [ 100 ] , sum = 0 ; int minr ( int u , int n ) { int i , minn = a [ u ] [ 1 ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( minn >= a [ u ] [ i ] ) minn = a [ u ] [ i ] ; } return minn ; } int minc ( int v , int n ) { int i , minn = a [ 1 ] [ v ] ; for ( i = 1 ; i <= n ; i ++ ) { if ( minn >= a [ i ] [ v ] ) minn = a [ i ] [ v ] ; } return minn ; } void f2 ( int n ) { int u , v ; for ( u = 2 ; u <= n - 1 ; u ++ ) { for ( v = 1 ; v <= n ; v ++ ) { a [ u ] [ v ] = a [ u + 1 ] [ v ] ; } } for ( v = 2 ; v <= n - 1 ; v ++ ) { for ( u = 1 ; u <= n ; u ++ ) { a [ u ] [ v ] = a [ u ] [ v + 1 ] ; } } return ; } void f1 ( int n ) { if ( n == 1 ) { cout << sum << endl ; return ; } int u , v ; for ( u = 1 ; u <= n ; u ++ ) { int temp = minr ( u , n ) ; for ( v = 1 ; v <= n ; v ++ ) { a [ u ] [ v ] = a [ u ] [ v ] - temp ; } } for ( v = 1 ; v <= n ; v ++ ) { int temp = minc ( v , n ) ; for ( u = 1 ; u <= n ; u ++ ) { a [ u ] [ v ] = a [ u ] [ v ] - temp ; } } sum = sum + a [ 2 ] [ 2 ] ; f2 ( n ) ; f1 ( n - 1 ) ; } int main ( ) { int n , i , u , v ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { sum = 0 ; for ( u = 1 ; u <= n ; u ++ ) { for ( v = 1 ; v <= n ; v ++ ) { cin >> a [ u ] [ v ] ; } } f1 ( n ) ; } return 0 ; }
int num [ 100 ] [ 100 ] ; int n = 0 ; int xiaoling ( int a ) ; int main ( ) { int i , j , sum = 0 , k ; cin >> n ; for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> num [ i ] [ j ] ; } } sum = xiaoling ( n ) ; cout << sum << endl ; } return 0 ; } int xiaoling ( int a ) { int i , j , min , temp = 0 ; if ( a == 1 ) return 0 ; for ( i = 0 ; i < a ; i ++ ) { min = num [ i ] [ 0 ] ; for ( j = 0 ; j < a ; j ++ ) { min = ( min > num [ i ] [ j ] ) ? num [ i ] [ j ] : min ; } if ( min != 0 ) { for ( j = 0 ; j < a ; j ++ ) { num [ i ] [ j ] = num [ i ] [ j ] - min ; } } } for ( i = 0 ; i < a ; i ++ ) { min = num [ 0 ] [ i ] ; for ( j = 0 ; j < a ; j ++ ) { min = ( min > num [ j ] [ i ] ) ? num [ j ] [ i ] : min ; } if ( min != 0 ) { for ( j = 0 ; j < a ; j ++ ) { num [ j ] [ i ] = num [ j ] [ i ] - min ; } } } temp = num [ 1 ] [ 1 ] ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 1 ; j < a - 1 ; j ++ ) { num [ i ] [ j ] = num [ i ] [ j + 1 ] ; } } for ( i = 0 ; i < a ; i ++ ) { for ( j = 1 ; j < a - 1 ; j ++ ) { num [ j ] [ i ] = num [ j + 1 ] [ i ] ; } } return temp + xiaoling ( a - 1 ) ; }
int a [ 100 ] [ 100 ] = { 0 } ; void function ( int n ) { int i , j , k , min , num = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( i = n ; i > 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { min = a [ j ] [ 0 ] ; for ( k = 0 ; k < i ; k ++ ) { if ( a [ j ] [ k ] < min ) min = a [ j ] [ k ] ; } for ( k = 0 ; k < i ; k ++ ) { a [ j ] [ k ] = a [ j ] [ k ] - min ; } } for ( j = 0 ; j < i ; j ++ ) { min = a [ 0 ] [ j ] ; for ( k = 0 ; k < i ; k ++ ) { if ( a [ k ] [ j ] < min ) min = a [ k ] [ j ] ; } for ( k = 0 ; k < i ; k ++ ) { a [ k ] [ j ] = a [ k ] [ j ] - min ; } } num = num + a [ 1 ] [ 1 ] ; for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( j == 0 && k > 1 ) a [ j ] [ k - 1 ] = a [ j ] [ k ] ; if ( k == 0 && j > 1 ) a [ j - 1 ] [ k ] = a [ j ] [ k ] ; if ( j > 1 && k > 1 ) a [ j - 1 ] [ k - 1 ] = a [ j ] [ k ] ; } } } cout << num << endl ; } int main ( ) { int n , i ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { function ( n ) ; } return 0 ; }
int main ( ) { int n = 0 , a [ 110 ] [ 110 ] ; int sum = 0 ; cin >> n ; int i = 0 , j = 0 , k = 0 ; for ( k = 0 ; k < n ; k ++ ) { sum = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { int mi = 9999999 ; for ( j = 0 ; j < n - i ; j ++ ) { mi = 9999999 ; for ( int m = 0 ; m < n - i ; m ++ ) if ( a [ j ] [ m ] < mi ) mi = a [ j ] [ m ] ; for ( int m = 0 ; m < n - i ; m ++ ) a [ j ] [ m ] -= mi ; } for ( j = 0 ; j < n - i ; j ++ ) { mi = 9999999 ; for ( int m = 0 ; m < n - i ; m ++ ) if ( a [ m ] [ j ] < mi ) mi = a [ m ] [ j ] ; for ( int m = 0 ; m < n - i ; m ++ ) a [ m ] [ j ] -= mi ; } sum += a [ 1 ] [ 1 ] ; for ( j = 1 ; j < n - i - 1 ; j ++ ) a [ 0 ] [ j ] = a [ 0 ] [ j + 1 ] ; for ( j = 1 ; j < n - i - 1 ; j ++ ) { a [ j ] [ 0 ] = a [ j + 1 ] [ 0 ] ; for ( int m = 1 ; m < n - i - 1 ; m ++ ) a [ j ] [ m ] = a [ j + 1 ] [ m + 1 ] ; } } cout << sum << endl ; } return 0 ; }
int a [ 100 ] [ 100 ] ; int sum ( int n ) ; int main ( ) { int n ; cin >> n ; int k , i , j ; for ( k = 1 ; k <= n ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; cout << sum ( n ) << endl ; } return 0 ; } int sum ( int n ) { int i , j ; int min ; int num ; for ( i = 0 ; i < n ; i ++ ) { min = a [ i ] [ 0 ] ; for ( j = 0 ; j < n ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= min ; } for ( j = 0 ; j < n ; j ++ ) { min = a [ 0 ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= min ; } num = a [ 1 ] [ 1 ] ; if ( n == 2 ) return num ; else { for ( i = 2 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) a [ i - 1 ] [ j ] = a [ i ] [ j ] ; for ( j = 2 ; j < n ; j ++ ) for ( i = 0 ; i < n ; i ++ ) a [ i ] [ j - 1 ] = a [ i ] [ j ] ; return num + sum ( n - 1 ) ; } }
int main ( ) { int n , i , j , k , l , min = 0 , num ; int s [ 100 ] [ 100 ] ; cin >> n ; for ( l = 1 ; l <= n ; l ++ ) { num = 0 ; memset ( s , 0 , sizeof ( s ) ) ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) cin >> * ( * ( s + i ) + j ) ; for ( k = 0 ; k <= n - 2 ; k ++ ) { for ( i = 1 ; i <= n - k ; i ++ ) { min = s [ i ] [ 1 ] ; for ( j = 1 ; j <= n - k ; j ++ ) { if ( * ( * ( s + i ) + j ) < min ) min = * ( * ( s + i ) + j ) ; } for ( j = 1 ; j <= n - k ; j ++ ) { * ( * ( s + i ) + j ) -= min ; } } for ( j = 1 ; j <= n - k ; j ++ ) { min = s [ 1 ] [ j ] ; for ( i = 1 ; i <= n - k ; i ++ ) { if ( * ( * ( s + i ) + j ) < min ) min = * ( * ( s + i ) + j ) ; } for ( i = 1 ; i <= n - k ; i ++ ) { * ( * ( s + i ) + j ) -= min ; } } num += s [ 2 ] [ 2 ] ; for ( i = 1 ; i <= n - k ; i ++ ) for ( j = 2 ; j <= n - k - 1 ; j ++ ) * ( * ( s + i ) + j ) = * ( * ( s + i ) + j + 1 ) ; for ( j = 1 ; j <= n - k ; j ++ ) for ( i = 2 ; i <= n - k - 1 ; i ++ ) * ( * ( s + i ) + j ) = * ( * ( s + i + 1 ) + j ) ; } cout << num << endl ; } return 0 ; }
int main ( ) { int num ; cin >> num ; int n = num , numcas = num ; int a [ 301 ] [ 301 ] ; while ( num -- ) { int s = 0 ; memset ( a , 0 , sizeof ( a ) ) ; for ( int i = 0 ; i < numcas ; i ++ ) for ( int j = 0 ; j < numcas ; j ++ ) { cin >> a [ i ] [ j ] ; } n = numcas ; while ( 1 ) { if ( n == 0 ) { cout << s << endl ; break ; } for ( int j = 0 ; j < n ; j ++ ) { int min = 1000000 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ j ] [ k ] < min ) min = a [ j ] [ k ] ; } for ( int i = 0 ; i < n ; i ++ ) a [ j ] [ i ] -= min ; } for ( int j = 0 ; j < n ; j ++ ) { int min = 1000000 ; for ( int k = 0 ; k < n ; k ++ ) { if ( a [ k ] [ j ] < min ) min = a [ k ] [ j ] ; } for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= min ; } s += a [ 1 ] [ 1 ] ; for ( int j = 0 ; j < n ; j ++ ) for ( int i = 1 ; i < n ; i ++ ) { a [ j ] [ i ] = a [ j ] [ i + 1 ] ; } for ( int j = 0 ; j < n - 1 ; j ++ ) for ( int i = 1 ; i < n ; i ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } n -- ; } } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int n ; int sum , Min ; cin >> n ; for ( int num = 0 ; num < n ; num ++ ) { sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( int x = 1 ; x < n ; x ++ ) { for ( int i = 0 ; i < n ; i ++ ) { Min = 10000 ; for ( int col = 0 ; col < n ; col ++ ) if ( a [ i ] [ col ] >= 0 ) Min = Min < a [ i ] [ col ] ? Min : a [ i ] [ col ] ; for ( int col = 0 ; col < n ; col ++ ) a [ i ] [ col ] -= Min ; } for ( int i = 0 ; i < n ; i ++ ) { Min = 10000 ; for ( int row = 0 ; row < n ; row ++ ) if ( a [ row ] [ i ] >= 0 ) Min = Min < a [ row ] [ i ] ? Min : a [ row ] [ i ] ; for ( int row = 0 ; row < n ; row ++ ) a [ row ] [ i ] -= Min ; } sum += a [ x ] [ x ] ; for ( int i = 0 ; i < n ; i ++ ) a [ x ] [ i ] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ x ] = - 1 ; } cout << sum << endl ; } return 0 ; }
int a [ 100 ] [ 100 ] ; int zero ( int ) ; void reduce ( int ) ; int main ( ) { int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; cout << zero ( n ) << endl ; } return 0 ; } int zero ( int count ) { int i , j , sum = 0 ; while ( count >= 2 ) { for ( i = 0 ; i < count ; i ++ ) { int min = a [ i ] [ 0 ] ; for ( j = 1 ; j < count ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( j = 0 ; j < count ; j ++ ) a [ i ] [ j ] -= min ; } for ( i = 0 ; i < count ; i ++ ) { int min = a [ 0 ] [ i ] ; for ( j = 1 ; j < count ; j ++ ) if ( a [ j ] [ i ] < min ) min = a [ j ] [ i ] ; for ( j = 0 ; j < count ; j ++ ) a [ j ] [ i ] -= min ; } sum += a [ 1 ] [ 1 ] ; reduce ( count ) ; count -- ; } return sum ; } void reduce ( int count ) { for ( int i = 1 ; i < count - 1 ; i ++ ) { a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( int j = 1 ; j < count - 1 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } }
int a [ 100 ] [ 100 ] ; int smaller ( int a , int b ) { if ( a >= b ) return b ; else return a ; } int Sum ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { int min = a [ i ] [ 0 ] ; for ( int j = 1 ; j < n ; j ++ ) min = smaller ( min , a [ i ] [ j ] ) ; for ( int j = 0 ; j < n ; j ++ ) a [ i ] [ j ] -= min ; } for ( int j = 0 ; j < n ; j ++ ) { int min = a [ 0 ] [ j ] ; for ( int i = 0 ; i < n ; i ++ ) min = smaller ( min , a [ i ] [ j ] ) ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] [ j ] -= min ; } if ( n == 2 ) return a [ 1 ] [ 1 ] ; int k = a [ 1 ] [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; for ( int j = 1 ; j < n - 1 ; j ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } return k + Sum ( n - 1 ) ; } int main ( ) { int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; } cout << Sum ( n ) << endl ; } return 0 ; }
int n , mat [ 101 ] [ 101 ] , tp [ 101 ] [ 101 ] , sum = 0 ; void cut ( int x ) { int min ; if ( x == n - 1 ) return ; else { for ( int i = 0 ; i < n - x ; i ++ ) { min = mat [ i ] [ 0 ] ; for ( int j = 0 ; j < n - x ; j ++ ) { if ( mat [ i ] [ j ] <= min ) { min = mat [ i ] [ j ] ; } } for ( int j = 0 ; j < n - x ; j ++ ) mat [ i ] [ j ] -= min ; } for ( int i = 0 ; i < n - x ; i ++ ) { min = mat [ 0 ] [ i ] ; for ( int j = 0 ; j < n - x ; j ++ ) { if ( mat [ j ] [ i ] <= min ) { min = mat [ j ] [ i ] ; } } for ( int j = 0 ; j < n - x ; j ++ ) mat [ j ] [ i ] -= min ; } sum += mat [ 1 ] [ 1 ] ; for ( int i = 0 ; i < n - x ; i ++ ) mat [ 1 ] [ i ] = - 1 ; for ( int i = 0 ; i < n - x ; i ++ ) mat [ i ] [ 1 ] = - 1 ; tp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ; for ( int i = 2 ; i < n - x ; i ++ ) tp [ 0 ] [ i - 1 ] = mat [ 0 ] [ i ] ; for ( int i = 2 ; i < n - x ; i ++ ) { tp [ i - 1 ] [ 0 ] = mat [ i ] [ 0 ] ; for ( int j = 2 ; j < n - x ; j ++ ) tp [ i - 1 ] [ j - 1 ] = mat [ i ] [ j ] ; } for ( int i = 0 ; i < n - x - 1 ; i ++ ) { for ( int j = 0 ; j < n - x - 1 ; j ++ ) { mat [ i ] [ j ] = tp [ i ] [ j ] ; } } cut ( x + 1 ) ; } } void ope ( ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> mat [ i ] [ j ] ; } } sum = 0 ; cut ( 0 ) ; cout << sum << endl ; } int main ( ) { cin >> n ; for ( int i = 0 ; i < n ; i ++ ) ope ( ) ; return 0 ; }
int main ( ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { int a [ 100 ] [ 100 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } int sum = 0 ; for ( int size = n ; size >= 2 ; size -- ) { for ( int i = 0 ; i < size ; i ++ ) { int min = 1000000 ; for ( int j = 0 ; j < size ; j ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( int j = 0 ; j < size ; j ++ ) { a [ i ] [ j ] -= min ; } } for ( int j = 0 ; j < size ; j ++ ) { int min = 1000000 ; for ( int i = 0 ; i < size ; i ++ ) { if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; } for ( int i = 0 ; i < size ; i ++ ) { a [ i ] [ j ] -= min ; } } sum += a [ 1 ] [ 1 ] ; for ( int i = 1 ; i < size - 1 ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } } for ( int j = 1 ; j < size - 1 ; j ++ ) { for ( int i = 0 ; i < size - 1 ; i ++ ) { a [ i ] [ j ] = a [ i ] [ j + 1 ] ; } } } cout << sum << endl ; } return 0 ; }
int main ( ) { int m , n , p ; cin >> m ; n = m ; p = m ; while ( n -- ) { m = p ; int sum = 0 , i , j , a [ 120 ] [ 120 ] , min ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < m ; j ++ ) cin >> a [ i ] [ j ] ; while ( -- m ) { for ( i = 0 ; i <= m ; i ++ ) { for ( min = a [ i ] [ 0 ] , j = 0 ; j <= m ; j ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( j = 0 ; j <= m ; j ++ ) a [ i ] [ j ] -= min ; } for ( j = 0 ; j <= m ; j ++ ) { for ( min = a [ 0 ] [ j ] , i = 0 ; i <= m ; i ++ ) if ( a [ i ] [ j ] < min ) min = a [ i ] [ j ] ; for ( i = 0 ; i <= m ; i ++ ) a [ i ] [ j ] -= min ; } sum += a [ 1 ] [ 1 ] ; for ( i = 0 ; i <= m ; i ++ ) for ( j = 1 ; j <= m ; j ++ ) a [ i ] [ j ] = a [ i ] [ j + 1 ] ; for ( j = 0 ; j <= m - 1 ; j ++ ) for ( i = 1 ; i <= m ; i ++ ) a [ i ] [ j ] = a [ i + 1 ] [ j ] ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int n ; cin >> n ; for ( int c = 0 ; c < n ; c ++ ) { int a [ 100 ] [ 100 ] = { 0 } , rmin [ 100 ] = { 0 } , cmin [ 100 ] = { 0 } , sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } cmin [ i ] = a [ 0 ] [ i ] ; rmin [ i ] = a [ i ] [ 0 ] ; } for ( int k = 0 ; k < n - 1 ; k ++ ) { for ( int i = 0 ; i < n - k ; i ++ ) { cmin [ i ] = a [ 0 ] [ i ] ; rmin [ i ] = a [ i ] [ 0 ] ; } for ( int i = 0 ; i < n - k ; i ++ ) { for ( int j = 0 ; j < n - k ; j ++ ) { if ( rmin [ i ] > a [ i ] [ j ] ) { rmin [ i ] = a [ i ] [ j ] ; } } for ( int j = 0 ; j < n - k ; j ++ ) { a [ i ] [ j ] -= rmin [ i ] ; } } for ( int i = 0 ; i < n - k ; i ++ ) { for ( int j = 0 ; j < n - k ; j ++ ) { if ( cmin [ i ] > a [ j ] [ i ] ) { cmin [ i ] = a [ j ] [ i ] ; } } for ( int j = 0 ; j < n - k ; j ++ ) { a [ j ] [ i ] -= cmin [ i ] ; } } sum += a [ 1 ] [ 1 ] ; for ( int i = 2 ; i < n - k ; i ++ ) { for ( int j = 0 ; j < n - k ; j ++ ) { a [ i - 1 ] [ j ] = a [ i ] [ j ] ; } } for ( int j = 2 ; j < n - k ; j ++ ) { for ( int i = 0 ; i < n - k ; i ++ ) { a [ i ] [ j - 1 ] = a [ i ] [ j ] ; } } } cout << sum << endl ; } }
void zero ( int a [ 100 ] [ 100 ] , int n ) { int min [ 100 ] ; for ( int i = 0 ; i < n ; ++ i ) { min [ i ] = a [ i ] [ 0 ] ; for ( int j = 0 ; j < n ; ++ j ) if ( a [ i ] [ j ] < min [ i ] ) min [ i ] = a [ i ] [ j ] ; if ( min [ i ] != 0 ) for ( int j = 0 ; j < n ; ++ j ) a [ i ] [ j ] -= min [ i ] ; } for ( int j = 0 ; j < n ; ++ j ) { min [ j ] = a [ 0 ] [ j ] ; for ( int i = 0 ; i < n ; ++ i ) if ( a [ i ] [ j ] < min [ j ] ) min [ j ] = a [ i ] [ j ] ; if ( min [ j ] != 0 ) for ( int i = 0 ; i < n ; ++ i ) a [ i ] [ j ] -= min [ j ] ; } } void subduction ( int a [ 100 ] [ 100 ] , int n ) { for ( int i = 1 ; i < n - 1 ; ++ i ) { a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ i ] [ 0 ] = a [ i + 1 ] [ 0 ] ; } for ( int i = 1 ; i < n - 1 ; ++ i ) for ( int j = 1 ; j < n - 1 ; ++ j ) a [ i ] [ j ] = a [ i + 1 ] [ j + 1 ] ; } int main ( ) { int m , n , s , a [ 100 ] [ 100 ] ; cin >> n ; for ( int t = 0 ; t < n ; ++ t ) { s = 0 , m = n ; for ( int i = 0 ; i < n ; ++ i ) for ( int j = 0 ; j < n ; ++ j ) cin >> a [ i ] [ j ] ; while ( m != 1 ) { zero ( a , m ) ; s += a [ 1 ] [ 1 ] ; subduction ( a , m -- ) ; } cout << s << endl ; } }
int sum = 0 ; inline int FindMin_i ( int M [ ] [ 100 ] , int i , int n ) { int Min = M [ i ] [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) { if ( Min > M [ i ] [ j ] ) { Min = M [ i ] [ j ] ; } } return Min ; } inline int FindMin_j ( int M [ ] [ 100 ] , int j , int n ) { int Min = M [ 0 ] [ j ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( Min > M [ i ] [ j ] ) { Min = M [ i ] [ j ] ; } } return Min ; } int S ( int M [ ] [ 100 ] , int n ) { if ( n == 1 ) { return sum ; } int Min_i = 0 ; for ( int i = 0 ; i < n ; i ++ ) { Min_i = FindMin_i ( M , i , n ) ; for ( int j = 0 ; j < n ; j ++ ) { M [ i ] [ j ] = M [ i ] [ j ] - Min_i ; } } int Min_j = 0 ; for ( int j = 0 ; j < n ; j ++ ) { Min_j = FindMin_j ( M , j , n ) ; for ( int i = 0 ; i < n ; i ++ ) { M [ i ] [ j ] = M [ i ] [ j ] - Min_j ; } } sum = sum + M [ 1 ] [ 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) { M [ i ] [ 0 ] = M [ i + 1 ] [ 0 ] ; } for ( int j = 1 ; j < n - 1 ; j ++ ) { M [ 0 ] [ j ] = M [ 0 ] [ j + 1 ] ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { for ( int j = 1 ; j < n - 1 ; j ++ ) { M [ i ] [ j ] = M [ i + 1 ] [ j + 1 ] ; } } S ( M , n - 1 ) ; } int main ( ) { int M [ 100 ] [ 100 ] = { 0 } ; int n ; cin >> n ; for ( int num = 0 ; num < n ; num ++ ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> M [ i ] [ j ] ; } } sum = 0 ; cout << S ( M , n ) << endl ; } return 0 ; }
int main ( ) { char buf1 [ 100 ] ; char buf2 [ 100 ] ; char buf3 [ 100 ] ; char * tmp ; gets ( buf1 ) ; gets ( buf2 ) ; gets ( buf3 ) ; tmp = buf1 ; while ( ( * tmp ) != 0 ) { if ( strncmp ( tmp , buf2 , strlen ( buf2 ) ) == 0 ) { if ( ( tmp == buf1 || * ( tmp - 1 ) == ' ' ) ) { printf ( "%s" , buf3 ) ; tmp += strlen ( buf2 ) ; } else { printf ( "%c" , * tmp ) ; ++ tmp ; } } else { printf ( "%c" , * tmp ) ; ++ tmp ; } } return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] , c [ 50 ] [ 100 ] ; int i , n = 0 , len1 , len2 , k = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; len1 = strlen ( s ) ; len2 = strlen ( a ) ; for ( i = 0 ; i < len1 ; i ++ ) { if ( s [ i ] == ' ' ) { s [ i ] = '\0' ; strcpy ( c [ n ] , ( s + k ) ) ; k = i + 1 ; n ++ ; } } strcpy ( c [ n ] , ( s + k ) ) ; for ( i = 0 ; i < n + 1 ; i ++ ) { if ( strcmp ( c [ i ] , a ) == 0 ) { strcpy ( c [ i ] , b ) ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s " , c [ i ] ) ; } printf ( "%s" , c [ n ] ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { char a [ 200 ] , b [ 100 ] , c [ 100 ] , d [ 200 ] ; int i , j ; int n1 = 0 , n2 = 0 , n3 = 0 ; int m = 0 , flat = 0 , x = 0 ; gets ( a ) ; gets ( b ) ; gets ( c ) ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) n1 ++ ; for ( i = 0 ; b [ i ] != '\0' ; i ++ ) n2 ++ ; for ( i = 0 ; c [ i ] != '\0' ; i ++ ) n3 ++ ; for ( i = 0 ; i <= n1 + x * ( n3 - n2 ) - 1 ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { flat = 1 ; for ( j = 1 ; j <= n2 - 1 ; j ++ ) { if ( a [ i + j ] != b [ j ] ) break ; else flat = flat + 1 ; } if ( ( ( flat == n2 ) && ( a [ i - 1 ] == ' ' ) && ( a [ i + n2 ] == ' ' ) ) || ( ( i == 0 ) && ( flat == n2 ) && ( a [ i + n2 ] == ' ' ) ) || ( ( flat == n2 ) && ( i >= n1 + x * ( n3 - n2 ) - n2 - 1 ) && ( a [ i - 1 ] == ' ' ) ) ) { for ( m = i + n2 ; m <= n1 + 2 ; m ++ ) { d [ m - i - n2 ] = a [ m ] ; } for ( m = i ; m <= i + n3 - 1 ; m ++ ) { a [ m ] = c [ m - i ] ; } for ( m = i + n3 ; m <= n1 + n3 - n2 + 2 ; m ++ ) { a [ m ] = d [ m - i - n3 ] ; } i = i + n3 - n2 ; x = x + 1 ; } } } a [ n1 + x * ( n3 - n2 ) ] = '\0' ; printf ( "%s\n" , a ) ; return 0 ; }
int main ( ) { char a [ 101 ] , sub [ 101 ] , c [ 101 ] ; cin . getline ( a , 101 ) ; cin >> sub ; cin >> c ; int la , ls , i , j , flag ; la = strlen ( a ) ; ls = strlen ( sub ) ; for ( i = 0 ; i <= la - ls ; i ++ ) { if ( i != 0 && a [ i - 1 ] != ' ' ) { cout << a [ i ] ; continue ; } flag = 1 ; for ( j = 0 ; j < ls ; j ++ ) { if ( a [ j + i ] != sub [ j ] ) { flag = 0 ; cout << a [ i ] ; break ; } } if ( flag ) { cout << c ; i = i + ls - 1 ; } } for ( j = 0 ; j < ls ; j ++ ) { flag = 1 ; if ( a [ j + la - ls ] != sub [ j ] ) { flag = 0 ; break ; } } if ( flag == 0 || a [ la - ls - 1 ] != ' ' ) { for ( i = la - ls + 1 ; i < la ; i ++ ) cout << a [ i ] ; } return 0 ; }
int main ( ) { char a [ 101 ] , b [ 101 ] , c [ 101 ] , d [ 10001 ] ; cin . getline ( a , 101 ) ; cin >> b ; cin >> c ; int la = strlen ( a ) ; int lb = strlen ( b ) ; int lc = strlen ( c ) ; int i , j = 0 , k , num ; for ( i = 0 ; i < la ; i ++ ) { for ( k = 0 , num = 0 ; k < lb ; k ++ ) { if ( a [ i ] == b [ k ] ) num ++ ; i ++ ; } if ( ( ( num == lb ) && ( a [ i - k - 1 ] == ' ' ) ) || ( ( num == lb ) && ( i == k ) ) ) { i = i - 1 ; for ( k = 0 ; k < lc ; k ++ ) { d [ j ] = c [ k ] ; j ++ ; } } else { i = i - k ; d [ j ] = a [ i ] ; j ++ ; } d [ j ] = '\0' ; } cout << d << endl ; return 0 ; }
int main ( ) { char s [ 201 ] , a [ 101 ] , b [ 101 ] ; int S , A ; int i , j , k = 0 , m = 0 ; cin . getline ( s , 201 ) ; S = strlen ( s ) ; cin . getline ( a , 101 ) ; A = strlen ( a ) ; cin . getline ( b , 101 ) ; while ( s [ k ] != a [ 0 ] ) { cout << s [ k ] ; k ++ ; } for ( i = k ; i < S ; i ++ ) { if ( s [ i ] == a [ 0 ] ) { for ( j = i ; j < A + i ; j ++ ) { if ( s [ j ] == a [ j - i ] ) m ++ ; } if ( ( i == 0 ) && ( m == A ) ) { cout << b ; i = i + A - 1 ; } else if ( ( m == A ) && ( i != 0 ) && ( s [ i - 1 ] == 32 ) ) { cout << b ; i = i + A - 1 ; } else cout << s [ i ] ; m = 0 ; } else cout << s [ i ] ; } return 0 ; }
int main ( ) { char s [ 201 ] , a [ 101 ] , b [ 101 ] ; int S , A ; int i , j , m = 0 ; cin . getline ( s , 201 ) ; S = strlen ( s ) ; cin . getline ( a , 101 ) ; A = strlen ( a ) ; cin . getline ( b , 101 ) ; for ( i = 0 ; i < S ; i ++ ) { if ( s [ i ] == a [ 0 ] ) { for ( j = i ; j < A + i ; j ++ ) { if ( s [ j ] == a [ j - i ] ) m ++ ; } if ( ( i == 0 ) && ( m == A ) ) { cout << b ; i = i + A - 1 ; } else if ( ( m == A ) && ( i != 0 ) && ( s [ i - 1 ] == 32 ) ) { cout << b ; i = i + A - 1 ; } else cout << s [ i ] ; m = 0 ; } else cout << s [ i ] ; } return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] , t [ 100 ] ; int i , j ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) { j = 0 ; while ( s [ i ] != ' ' && s [ i ] != '\0' ) t [ j ++ ] = s [ i ++ ] ; t [ j ] = '\0' ; if ( strcmp ( a , t ) == 0 ) { printf ( "%s" , b ) ; } else { printf ( "%s" , t ) ; } if ( i == strlen ( s ) ) { printf ( "\0" ) ; } else printf ( " " ) ; } return 0 ; }
int main ( ) { int i , j ; char s [ 100 ] , a [ 100 ] , b [ 100 ] ; cin . getline ( s , 100 ) ; cin . getline ( a , 100 ) ; cin . getline ( b , 100 ) ; for ( i = 0 , j = 0 ; s [ i ] != '\0' ; ) { if ( s [ i + j ] == a [ j ] && ( s [ i - 1 ] == ' ' || i == 0 ) ) j ++ ; else { cout << s [ i ] ; i ++ ; j = 0 ; } if ( a [ j ] == '\0' && ( s [ i + j ] == ' ' || s [ i + j ] == '\0' ) ) { cout << b ; i += j ; j = 0 ; } } return 0 ; }
int main ( ) { int i , k = 0 , m = 0 ; char s [ 1000 ] , a [ 101 ] , b [ 101 ] ; char word [ 30 ] [ 101 ] ; cin . getline ( s , 1000 ) ; cin . getline ( a , 101 ) ; cin . getline ( b , 101 ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] != ' ' ) { word [ k ] [ m ] = s [ i ] ; m ++ ; } else { word [ k ] [ m ] = '\0' ; k ++ ; m = 0 ; } } for ( i = 0 ; i <= k ; i ++ ) { if ( strcmp ( word [ i ] , a ) == 0 ) strcpy ( word [ i ] , b ) ; } for ( i = 0 ; i < k ; i ++ ) cout << word [ i ] << ' ' ; cout << word [ k ] ; cin >> k ; return 0 ; }
int main ( ) { char s [ 210 ] = { 0 } , a [ 100 ] , b [ 100 ] ; int ls , la , i , j , k , g = 0 , lb ; gets ( s ) ; cin >> a >> b ; la = strlen ( a ) ; ls = strlen ( s ) ; lb = strlen ( b ) ; if ( la <= ls ) { for ( j = 0 ; j <= ls - la ; j ++ ) { if ( ( j == 0 ) || ( s [ j - 1 ] < 65 ) ) { for ( k = 0 ; k < la ; k ++ ) { if ( a [ k ] == s [ j + k ] ) g ++ ; } if ( g == la ) { if ( lb >= la ) { for ( i = ls + lb - la - 1 ; i >= j + lb ; i -- ) s [ i ] = s [ i - lb + la ] ; } else { for ( i = j + lb ; i < ls + lb - la ; i ++ ) s [ i ] = s [ i - lb + la ] ; for ( i = ls + lb - la ; i < ls ; i ++ ) s [ i ] = 0 ; } for ( i = 0 ; i < lb ; i ++ ) s [ i + j ] = b [ i ] ; j = j + lb - 1 ; } } g = 0 ; ls = strlen ( s ) ; } } ls = strlen ( s ) ; for ( i = 0 ; i < ls ; i ++ ) cout << s [ i ] ; return 0 ; }
int main ( int argc , char * argv [ ] ) { char a [ 101 ] , t [ 101 ] , b [ 101 ] , c [ 101 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; int i , j = 0 ; for ( i = 0 ; a [ i ] != '\0' ; i ++ , j ++ ) { if ( a [ i ] != ' ' ) t [ j ] = a [ i ] ; if ( a [ i ] == ' ' ) { t [ j ] = '\0' ; if ( strcmp ( t , b ) == 0 ) { strcpy ( t , c ) ; printf ( "%s " , t ) ; } else printf ( "%s " , t ) ; j = - 1 ; } } t [ j ] = '\0' ; if ( strcmp ( t , b ) == 0 ) { strcpy ( t , c ) ; printf ( "%s" , t ) ; } else printf ( "%s" , t ) ; return 0 ; }
int main ( ) { char juzi [ 100 ] ; char danci [ 200 ] [ 200 ] , ci1 [ 200 ] , ci2 [ 200 ] ; int i = 0 , j = 0 , k = 0 , f , index ; gets ( juzi ) ; gets ( ci1 ) ; gets ( ci2 ) ; index = 0 ; for ( i = 0 ; ; i ++ ) { for ( k = 0 ; ; ) { if ( juzi [ index ] != ' ' && juzi [ index ] != 0 ) { danci [ i ] [ k ] = juzi [ index ] ; index ++ ; k ++ ; } else { danci [ i ] [ k ] = 0 ; index ++ ; k ++ ; break ; } } if ( juzi [ index - 1 ] == 0 ) { break ; } } for ( f = 0 ; f < 100 ; f ++ ) { if ( strcmp ( danci [ f ] , ci1 ) == 0 ) { strcpy ( danci [ f ] , ci2 ) ; } } for ( j = 0 ; j <= i ; j ++ ) { if ( j == i ) { printf ( "%s" , danci [ j ] ) ; } else { printf ( "%s " , danci [ j ] ) ; } } return 0 ; }
int main ( ) { int i = 0 , j = 0 , k = 0 , len ; char str1 [ 101 ] , orig [ 30 ] , tran [ 30 ] ; char str2 [ 50 ] [ 30 ] ; cin . get ( str1 , 101 , '\n' ) ; cin >> orig ; cin >> tran ; while ( str1 [ i ] != '\0' ) { while ( str1 [ i ] != ' ' ) { str2 [ j ] [ k ] = str1 [ i ] ; i ++ ; k ++ ; } str2 [ j ] [ k ] = '\0' ; j ++ ; i ++ ; k = 0 ; } len = j - 1 ; for ( i = 0 ; i <= len ; i ++ ) { if ( strcmp ( str2 [ i ] , orig ) == 0 ) strcpy ( str2 [ i ] , tran ) ; } for ( i = 0 ; i <= len - 1 ; i ++ ) cout << str2 [ i ] << " " ; cout << str2 [ len ] ; return 0 ; }
int main ( ) { char sen [ 20 ] [ 100 ] , ori [ 100 ] , exc [ 100 ] , c ; int i = 0 , j ; do { cin >> sen [ i ] ; i ++ ; } while ( ( c = getchar ( ) ) != '\n' ) ; cin >> ori ; cin >> exc ; for ( j = 0 ; j < i ; j ++ ) { if ( strcmp ( sen [ j ] , ori ) == 0 ) strcpy ( sen [ j ] , exc ) ; } for ( j = 0 ; j < i - 1 ; j ++ ) { cout << sen [ j ] << ' ' ; } cout << sen [ i - 1 ] ; return 0 ; }
int main ( ) { char s [ 100 ] [ 100 ] = { "\0" } , a [ 100 ] = { "\0" } , b [ 100 ] = { "\0" } ; int i , j , x = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { cin . get ( s [ i ] [ j ] ) ; if ( s [ i ] [ j ] == 32 ) { s [ i ] [ j ] = 0 ; j = 100 ; } else if ( s [ i ] [ j ] == 10 ) { s [ i ] [ j ] = 0 ; j = i = 100 ; } } } for ( j = 0 ; j < 100 ; j ++ ) { cin . get ( a [ j ] ) ; if ( a [ j ] == 32 || a [ j ] == 10 ) { a [ j ] = 0 ; break ; } } for ( j = 0 ; j < 100 ; j ++ ) { cin . get ( b [ j ] ) ; if ( b [ j ] == 32 || b [ j ] == 10 ) { b [ j ] = 0 ; break ; } } for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( a [ j ] == s [ i ] [ j ] ) x = x + 1 ; } if ( x == 100 ) for ( j = 0 ; j < 100 ; j ++ ) s [ i ] [ j ] = b [ j ] ; else x = 0 ; } for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( s [ i ] [ j ] != 0 && s [ i ] [ j + 1 ] == 0 && s [ i + 1 ] [ 0 ] != 0 ) cout << s [ i ] [ j ] << " " ; else if ( s [ i ] [ j ] != 0 ) cout << s [ i ] [ j ] ; } } return 0 ; }
int main ( ) { char s [ 101 ] , a [ 101 ] , b [ 101 ] ; char m [ 101 ] , n [ 101 ] ; int ls = 0 , la = 0 , lb = 0 ; int i , j , k ; cin . getline ( s , 101 ) ; cin . getline ( a , 101 ) ; cin . getline ( b , 101 ) ; ls = strlen ( s ) ; la = strlen ( a ) ; lb = strlen ( b ) ; for ( i = 0 ; i < ls ; i ++ ) { if ( s [ i ] != a [ 0 ] ) continue ; for ( j = i + 1 ; j < i + la ; j ++ ) { if ( i != 0 && s [ i - 1 ] != ' ' ) break ; if ( s [ j ] != a [ j - i ] ) break ; } if ( j == i + la ) { for ( k = 0 ; k < i ; k ++ ) m [ k ] = s [ k ] ; m [ i ] = '\0' ; strcpy ( n , strcat ( m , b ) ) ; strcpy ( s , strcat ( n , s + ( i + la ) ) ) ; i = i + lb ; } } cout << s ; return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; int i = 0 , j = 0 , count = 0 ; cin . get ( s , 100 ) ; cin >> a ; cin >> b ; for ( i = 0 ; i <= strlen ( s ) - strlen ( a ) ; i ++ ) { count = 0 ; for ( j = i ; j < i + strlen ( a ) ; j ++ ) { if ( s [ j ] == a [ j - i ] ) count ++ ; } if ( count == strlen ( a ) && ( ( s [ i + strlen ( a ) ] == ' ' || i + strlen ( a ) == strlen ( s ) ) && ( s [ i - 1 ] == ' ' || i == 0 ) ) ) { for ( j = i ; j < i + strlen ( a ) ; j ++ ) s [ j ] = '/' ; } } for ( i = 0 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] != '/' ) cout << s [ i ] ; else { for ( j = 0 ; j < strlen ( b ) ; j ++ ) cout << b [ j ] ; do { i ++ ; } while ( s [ i ] == '/' && ( i + 1 == strlen ( s ) || s [ i + 1 ] == '/' ) ) ; } } return 0 ; }
int main ( ) { int Judge = 0 ; int W = 0 ; int Temp = 0 ; int M = 0 ; int Num_of_Origin ; int Start = 101 ; int k = 0 ; int Num_of_Change = 0 ; int Num_of_Changed = 0 ; int i = 0 ; char Change [ 100 ] = { 0 } ; char Changed [ 100 ] = { 0 } ; char Origin [ 100 ] = { 0 } ; gets ( Origin ) ; gets ( Changed ) ; gets ( Change ) ; for ( i = 0 ; i < 100 ; i ++ ) { if ( Changed [ i ] == 0 ) { Num_of_Changed = i ; break ; } } for ( i = 0 ; i < 100 ; i ++ ) { if ( Change [ i ] == 0 ) { Num_of_Change = i ; break ; } } for ( W = 0 ; W < 100 ; W ++ ) { for ( i = 0 ; i < 100 ; i ++ ) { if ( Origin [ i ] == 0 ) { Num_of_Origin = i ; break ; } } for ( i = 0 ; i < 100 ; i ++ ) { if ( Origin [ i ] == Changed [ 0 ] ) { for ( k = 0 ; k < Num_of_Changed ; k ++ ) { if ( Origin [ i + k ] != Changed [ k ] ) { Judge = 1 ; break ; } } if ( Judge == 0 && i != 0 ) { if ( Origin [ i - 1 ] != ' ' && Origin [ i - 1 ] != ',' ) { Judge = 1 ; } } if ( Judge == 0 && i == 0 ) { if ( Origin [ Num_of_Changed ] != ' ' ) { Judge = 1 ; } } if ( Judge == 0 ) { Start = i ; } Judge = 0 ; } } Temp = Num_of_Origin - Start ; if ( Num_of_Change >= Num_of_Changed ) { for ( i = 0 ; i < Num_of_Change ; i ++ ) { if ( i < Num_of_Changed ) { Origin [ Start + i ] = Change [ i ] ; Temp -= 1 ; } else { Num_of_Origin ++ ; for ( M = 0 ; M < Temp ; M ++ ) { Origin [ Num_of_Origin - 1 - M ] = Origin [ Num_of_Origin - 2 - M ] ; } Origin [ Start + i ] = Change [ i ] ; } } } else { for ( i = 0 ; i < Num_of_Changed ; i ++ ) { if ( i < Num_of_Change ) { Origin [ Start + i ] = Change [ i ] ; Temp -= 1 ; M = i + 1 ; } else { Num_of_Origin -- ; for ( k = 0 ; k < Temp ; k ++ ) { Origin [ Start + M + k ] = Origin [ Start + M + k + 1 ] ; Origin [ Num_of_Origin + 1 ] = 0 ; } } } } Start = 101 ; } for ( i = 0 ; i < 100 ; i ++ ) { if ( Origin [ i ] != 0 ) cout << Origin [ i ] ; } cout << endl ; return 0 ; }
int main ( ) { char a [ 200 ] , b [ 100 ] , c [ 100 ] ; int i , j , k , lena , lenb , lenc , flag ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = 0 ; gets ( a ) ; gets ( b ) ; gets ( c ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; lenc = strlen ( c ) ; for ( i = 0 ; i <= lena - lenb ; i ++ ) if ( a [ i ] == b [ 0 ] && a [ i - 1 ] == ' ' && a [ i + lenb ] == ' ' || i == 0 && a [ i + lenb ] == ' ' || i == lena - lenb && a [ i - 1 ] == ' ' ) { flag = 1 ; for ( j = 0 ; j < lenb ; j ++ ) { if ( a [ i + j ] != b [ j ] ) { flag = 0 ; break ; } } if ( flag == 1 ) { if ( lenb > lenc ) { for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } for ( k = i + lenc ; k < lena ; k ++ ) { a [ k ] = a [ k + lenb - 1 ] ; } i += lenb ; lena -= lenb - lenc ; } else { for ( k = lena - 1 + lenc - lenb ; k >= i + lenb ; k -- ) { a [ k ] = a [ k - lenc + lenb ] ; } for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } i += lenc ; lena += lenc - lenb ; } } } cout << a << endl ; return 0 ; }
int main ( ) { char a [ 100 ] , b [ 100 ] , c [ 100 ] ; int i , j , k , lena , lenb , lenc , flag ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = 0 ; gets ( a ) ; gets ( b ) ; gets ( c ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; lenc = strlen ( c ) ; for ( i = 0 ; i <= lena - lenb ; i ++ ) { if ( i == 0 || a [ i - 1 ] == ' ' ) { flag = 1 ; for ( j = 0 ; j < lenb ; j ++ ) { if ( a [ i + j ] != b [ j ] ) { flag = 0 ; break ; } } if ( flag == 1 ) { if ( lenb >= lenc ) { for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } for ( k = i + lenc ; k < lena ; k ++ ) { a [ k ] = a [ k + lenb - 1 ] ; } i += lenc - 1 ; lena -= lenb - lenc ; } if ( lenb < lenc ) { for ( k = lena - 1 + lenc - lenb ; k >= i + lenc ; k -- ) { a [ k ] = a [ k - lenc + lenb ] ; } for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } i += lenc - 1 ; lena += lenc - lenb ; } } } } cout << a << endl ; return 0 ; }
int main ( ) { char s [ 101 ] ; gets ( s ) ; int l = strlen ( s ) ; s [ l ] = ' ' ; s [ l + 1 ] = '\0' ; char a [ 100 ] ; cin >> a ; char b [ 100 ] ; cin >> b ; char s1 [ 100 ] ; int i ; int j = 0 ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] != ' ' ) { s1 [ j ] = s [ i ] ; j ++ ; } else { s1 [ j ] = '\0' ; j = 0 ; if ( strcmp ( a , s1 ) == 0 ) cout << b ; else cout << s1 ; if ( i != strlen ( s ) - 1 ) cout << ' ' ; } } }
int main ( ) { char ch [ 100 ] [ 100 ] , str1 [ 100 ] , str2 [ 100 ] ; int i = 0 , j ; do { cin >> ch [ i ] ; i ++ ; } while ( getchar ( ) != '\n' ) ; cin >> str1 >> str2 ; for ( j = 0 ; j < i ; j ++ ) { if ( strcmp ( str1 , ch [ j ] ) == 0 ) { strcpy ( ch [ j ] , str2 ) ; } } for ( j = 0 ; j < i - 1 ; j ++ ) { cout << ch [ j ] << " " ; } cout << ch [ i - 1 ] ; return 0 ; }
char q [ 100 ] , a [ 100 ] , b [ 100 ] , xc [ 50 ] [ 100 ] ; main ( ) { gets ( q ) ; gets ( a ) ; gets ( b ) ; int i = 0 , j = 0 , k = 0 , s = 0 , p = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { if ( q [ i ] != ' ' ) { xc [ j ] [ i - k ] = q [ i ] ; } if ( q [ i ] == ' ' ) { j ++ ; k = i + 1 ; } } for ( s = 0 ; s < j + 1 ; s ++ ) { if ( strcmp ( xc [ s ] , a ) == 0 ) { strcpy ( xc [ s ] , b ) ; } } for ( p = 0 ; p < j ; p ++ ) { printf ( "%s " , xc [ p ] ) ; } printf ( "%s" , xc [ j ] ) ; return 0 ; }
int main ( ) { char s [ 1000 ] , a [ 1000 ] , b [ 1000 ] , c [ 1000 ] ; int ls , la , lb , i , j , pointer = 0 , t , m = 0 , n = 0 ; cin . get ( s , 1000 ) ; cin >> a ; cin >> b ; ls = strlen ( s ) ; la = strlen ( a ) ; lb = strlen ( b ) ; for ( i = 0 ; i < ls ; i ++ ) { int counter = 0 ; for ( j = 0 ; j < la ; j ++ ) { if ( s [ i + j ] == a [ j ] ) { counter ++ ; continue ; } else break ; } if ( counter == la && ( s [ i ] == a [ 0 ] && ( i == 0 || s [ i - 1 ] == ' ' ) ) ) { for ( t = 0 ; t < lb ; t ++ ) { c [ pointer ] = b [ t ] ; pointer ++ ; } i = i + la - 1 ; } else { c [ pointer ] = s [ i ] ; pointer ++ ; } } c [ pointer ] = '\0' ; for ( j = 0 ; j < pointer ; j ++ ) cout << c [ j ] ; return 0 ; }
int main ( ) { char a [ 100 ] [ 100 ] , b [ 100 ] , c [ 100 ] ; int i = 0 ; int len = 0 ; for ( i = 0 ; i <= 99 ; i ++ ) { cin >> a [ i ] ; len ++ ; if ( cin . get ( ) == '\n' ) break ; } cin >> b >> c ; for ( i = 0 ; i <= len - 1 ; i ++ ) { if ( strcmp ( a [ i ] , b ) == 0 ) strcpy ( a [ i ] , c ) ; if ( i >= 1 ) cout << " " ; cout << a [ i ] ; } return 0 ; }
int main ( ) { char a [ 100 ] = { 0 } , old [ 100 ] = { 0 } , by [ 100 ] = { 0 } , a1 [ 100 ] = { 0 } ; int s1 , s2 , s3 , i , j , k , l = 1 , mark [ 100 ] = { 0 } ; int rem [ 10 ] = { 0 } ; gets ( a ) ; cin >> old ; cin >> by ; s1 = strlen ( a ) ; s2 = strlen ( old ) ; s3 = strlen ( by ) ; for ( i = 0 ; i < s1 ; i ++ ) { k = 0 ; if ( ( a [ i - 1 ] == ' ' || i == 0 ) && ( ( i + s2 == s1 ) || a [ i + s2 ] == ' ' ) ) { for ( j = i ; j < i + s2 ; j ++ ) { if ( a [ j ] == old [ j - i ] ) { k += 1 ; } } if ( k == s2 ) { for ( j = i ; j < i + s2 ; j ++ ) mark [ j ] = 1 ; cout << by ; } } if ( mark [ i ] > 0 ) continue ; cout << a [ i ] ; } getchar ( ) ; getchar ( ) ; return 0 ; }
int main ( ) { char a [ 100 ] , b [ 100 ] , c [ 100 ] ; int i , j , k , lena , lenb , lenc , flag ; for ( i = 0 ; i < 100 ; i ++ ) { a [ i ] = 0 ; } gets ( a ) ; gets ( b ) ; gets ( c ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; lenc = strlen ( c ) ; for ( i = 0 ; i <= lena - lenb ; i ++ ) { flag = 1 ; for ( j = 0 ; j < lenb ; j ++ ) { if ( a [ i + j ] != b [ j ] ) { flag = 0 ; break ; } } if ( flag == 1 && ( i == 0 || a [ i - 1 ] == ' ' ) && ( i == lena - lenb || a [ i + lenb ] == ' ' ) ) { if ( lenb > lenc ) { for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } for ( k = i + lenc ; k < lena ; k ++ ) { a [ k ] = a [ k + lenb - 1 ] ; } i += lenc - 1 ; lena -= lenb - lenc ; } if ( lenb == lenc ) { for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } } if ( lenb < lenc ) { for ( k = lena - 1 + lenc - lenb ; k >= i + lenc ; k -- ) { a [ k ] = a [ k - lenc + lenb ] ; } for ( k = i , j = 0 ; k < i + lenc , j < lenc ; k ++ , j ++ ) { a [ k ] = c [ j ] ; } i += lenc - 1 ; lena += lenc - lenb ; } } } cout << a << endl ; return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; int i , j , len1 , len2 , k [ 100 ] = { 0 } ; gets ( s ) ; gets ( a ) ; gets ( b ) ; len1 = strlen ( s ) ; len2 = strlen ( a ) ; for ( i = 0 ; i < len1 ; i ++ ) { for ( j = i ; j < i + len2 ; j ++ ) { if ( s [ j ] == a [ j - i ] ) k [ i ] = k [ i ] + 1 ; else break ; } if ( k [ i ] == len2 ) { if ( i == 0 && s [ i + len2 ] == ' ' ) { cout << b ; i = i + len2 - 1 ; } else if ( i == len1 - len2 && s [ i - 1 ] == ' ' ) { cout << b ; i = i + len2 - 1 ; } else if ( i > 0 && i < len1 - len2 && s [ i - 1 ] == ' ' && s [ i + len2 ] == ' ' ) { cout << b ; i = i + len2 - 1 ; } else cout << s [ i ] ; } else cout << s [ i ] ; } return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] , c [ 100 ] ; int len1 = 0 , len2 = 0 , len3 = 0 , i , j , n = - 1 , k , flag ; cin . getline ( s , 101 , '\n' ) ; cin . getline ( a , 101 , '\n' ) ; cin . getline ( b , 101 , '\n' ) ; for ( len1 = 0 ; s [ len1 ] != '\0' ; len1 ++ ) ; for ( len2 = 0 ; a [ len2 ] != '\0' ; len2 ++ ) ; for ( len3 = 0 ; b [ len3 ] != '\0' ; len3 ++ ) ; for ( i = 0 ; i < len1 ; i ++ ) { flag = 0 ; if ( ( ( i != 0 ) && ( s [ i ] == a [ 0 ] ) && ( s [ i - 1 ] == ' ' ) ) || ( ( i == 0 ) && ( s [ i ] == a [ 0 ] ) ) ) { flag = 1 ; for ( j = 1 ; j < len2 ; j ++ ) if ( s [ i + j ] != a [ j ] ) flag = 0 ; if ( ( ( i + j ) != len1 ) && ( s [ i + j ] != ' ' ) ) flag = 0 ; } if ( flag ) { k = n + 1 ; while ( n < k + len3 - 1 ) { n ++ ; c [ n ] = b [ n - k ] ; } i = i + len2 - 1 ; } else { n ++ ; c [ n ] = s [ i ] ; } } for ( i = 0 ; i <= n ; i ++ ) cout << c [ i ] ; return 0 ; }
int main ( ) { char sentence [ 110 ] , first [ 110 ] , second [ 110 ] ; int i , j , flag ; int lens , len1 , len2 ; cin . getline ( sentence , 110 ) ; cin . getline ( first , 110 ) ; cin . getline ( second , 110 ) ; lens = strlen ( sentence ) ; len1 = strlen ( first ) ; for ( i = 0 ; i < lens - len1 + 1 ; i ++ ) { flag = 0 ; if ( ( i == 0 && sentence [ i + len1 ] == ' ' ) || ( sentence [ i - 1 ] == ' ' && sentence [ i + len1 ] == ' ' ) || ( i == lens - len1 && sentence [ i - 1 ] == ' ' ) ) { for ( j = 0 ; j < len1 ; j ++ ) { if ( sentence [ i + j ] == first [ j ] ) flag ++ ; } } if ( flag == len1 ) { i = i + len1 - 1 ; cout << second ; } else cout << sentence [ i ] ; } if ( flag != len1 ) for ( i = lens - len1 + 1 ; i < lens ; i ++ ) cout << sentence [ i ] ; return 0 ; }
int main ( ) { char str [ 1000 ] ; char a [ 50 ] ; char b [ 50 ] ; cin . getline ( str , 1000 ) ; cin . getline ( a , 50 ) ; cin . getline ( b , 50 ) ; int i , j ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) { int len = 0 , k ; for ( j = 0 ; a [ j ] != '\0' ; j ++ ) if ( str [ i + j ] == a [ j ] && ( str [ i - 1 ] == ' ' && i != 0 ) || i == 0 ) len ++ ; if ( len == strlen ( a ) && ( str [ i + j ] == ' ' || str [ i + j ] == '\0' ) ) { if ( strlen ( a ) >= strlen ( b ) ) { for ( k = 0 ; k < strlen ( b ) ; k ++ ) str [ i + k ] = b [ k ] ; for ( k = i + strlen ( b ) ; str [ k ] != '\0' ; k ++ ) str [ k ] = str [ k + strlen ( a ) - strlen ( b ) ] ; } else { for ( k = strlen ( str ) + strlen ( b ) - strlen ( a ) ; k >= i + strlen ( a ) ; k -- ) str [ k ] = str [ k + strlen ( a ) - strlen ( b ) ] ; for ( k = 0 ; k < strlen ( b ) ; k ++ ) str [ i + k ] = b [ k ] ; i += strlen ( b ) ; } } } cout << str << endl ; return 0 ; }
int main ( ) { int lenth1 , lenthw1 , lenthw2 , i , j , num = 0 , row = 0 , flag , a [ 101 ] ; char s1 [ 101 ] , word [ 101 ] , wordnew [ 101 ] , olds1 [ 101 ] [ 101 ] ; cin . getline ( s1 , 101 ) ; cin >> word ; cin >> wordnew ; lenth1 = strlen ( s1 ) ; lenthw1 = strlen ( word ) ; lenthw2 = strlen ( wordnew ) ; for ( i = 0 ; i < lenth1 ; i ++ ) { if ( s1 [ i ] == ' ' ) { num ++ ; row = 0 ; } else { olds1 [ num ] [ row ] = s1 [ i ] ; a [ num ] = row ; row ++ ; } } for ( i = 0 ; i <= num ; i ++ ) { flag = 1 ; for ( j = 0 ; j < lenthw1 ; j ++ ) { if ( olds1 [ i ] [ j ] != word [ j ] ) flag = 0 ; } if ( flag == 1 ) { a [ i ] = lenthw2 - 1 ; for ( j = 0 ; j < lenthw2 ; j ++ ) olds1 [ i ] [ j ] = wordnew [ j ] ; } } for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= a [ i ] ; j ++ ) cout << olds1 [ i ] [ j ] ; cout << " " ; } for ( j = 0 ; j <= a [ num ] ; j ++ ) cout << olds1 [ num ] [ j ] ; return 0 ; }
int main ( ) { char s [ 100 ] ; int i = 0 , count = 0 , j = 0 ; char str [ 100 ] [ 100 ] ; char word1 [ 100 ] , word2 [ 100 ] ; cin . getline ( s , 100 , '\n' ) ; for ( i = 0 ; i < 100 ; i ++ ) { if ( s [ i ] != ' ' ) { str [ count ] [ j ] = s [ i ] ; j ++ ; } else if ( s [ i ] == ' ' ) { str [ count ] [ j + 1 ] = '\0' ; count ++ ; j = 0 ; continue ; } else if ( s [ i ] == '\0' ) break ; } cin . getline ( word1 , 100 , '\n' ) ; cin . getline ( word2 , 100 , '\n' ) ; for ( i = 0 ; i <= count ; i ++ ) { if ( strcmp ( str [ i ] , word1 ) == 0 ) strcpy ( str [ i ] , word2 ) ; } cout << str [ 0 ] ; for ( i = 1 ; i <= count ; i ++ ) cout << ' ' << str [ i ] ; return 0 ; }
int main ( ) { char wordbuff [ 50 ] [ 20 ] , ch , target [ 20 ] , replace [ 20 ] ; int i , j ; for ( i = 0 ; i < 50 ; i ++ ) for ( j = 0 ; j < 20 ; j ++ ) wordbuff [ i ] [ j ] = '\0' ; i = 0 ; j = 0 ; while ( 1 ) { ch = getchar ( ) ; if ( ch != '\n' && ch != ' ' ) { wordbuff [ i ] [ j ] = ch ; j ++ ; } else { i ++ ; j = 0 ; } if ( ch == '\n' ) break ; } scanf ( "%s\n%s" , target , replace ) ; int n ; for ( n = 0 ; n < i ; n ++ ) { if ( ! strcmp ( wordbuff [ n ] , target ) ) strcpy ( wordbuff [ n ] , replace ) ; } for ( n = 0 ; n < i ; n ++ ) if ( ! n ) printf ( "%s" , wordbuff [ n ] ) ; else printf ( " %s" , wordbuff [ n ] ) ; return 0 ; }
int main ( ) { char s [ 101 ] , a [ 101 ] , b [ 101 ] ; cin . getline ( s , 101 ) ; cin . getline ( a , 101 ) ; cin . getline ( b , 101 ) ; char word [ 100 ] [ 100 ] ; int len = strlen ( s ) ; int i , j = 0 , n = 0 , flag = 0 ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] == ' ' ) { flag = 0 ; } else if ( flag == 0 ) { flag = 1 ; n ++ ; } } int count = 0 ; int count1 [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { count1 [ i ] = 0 ; do { word [ i ] [ j - count ] = s [ j ] ; count1 [ i ] ++ ; j ++ ; } while ( s [ j ] != ' ' && s [ j ] != '\0' ) ; count1 [ i ] ++ ; word [ i ] [ j - count ] = '\0' ; j ++ ; count = count + count1 [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( word [ i ] , a ) == 0 ) { strcpy ( word [ i ] , b ) ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { cout << word [ i ] << " " ; } cout << word [ n - 1 ] ; cout << endl ; return 0 ; }
int main ( ) { char str [ 4 ] [ 500 ] ; int i , j , k , count = 0 , len [ 3 ] = { 0 } ; for ( i = 0 ; i < 3 ; i ++ ) { cin . getline ( str [ i ] , 500 ) ; len [ i ] = strlen ( str [ i ] ) ; } for ( i = 0 ; str [ 0 ] [ i ] != 0 ; i ++ ) { if ( ( i == 0 || ( i > 0 && str [ 0 ] [ i - 1 ] == ' ' ) ) && ( ( str [ 0 ] [ i + len [ 1 ] ] == ' ' ) || ( str [ 0 ] [ i + len [ 1 ] ] == 0 ) ) ) { for ( j = 0 ; j < len [ 1 ] ; j ++ ) if ( str [ 0 ] [ i + j ] != str [ 1 ] [ j ] ) break ; if ( j == len [ 1 ] ) { strcpy ( str [ 3 ] , str [ 0 ] + i + len [ 1 ] ) ; strcpy ( str [ 0 ] + i + len [ 2 ] , str [ 3 ] ) ; for ( k = 0 ; str [ 2 ] [ k ] != 0 ; k ++ ) str [ 0 ] [ i + k ] = str [ 2 ] [ k ] ; count ++ ; } } str [ 0 ] [ len [ 0 ] + count * ( len [ 2 ] - len [ 1 ] ) + 1 ] = 0 ; } cout << str [ 0 ] << endl ; return 0 ; }
int main ( int argc , char * argv [ ] ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; char x [ 100 ] , c [ 100 ] = { '\0' } ; int i , t = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] != ' ' ) { x [ t ] = s [ i ] ; t ++ ; } else { x [ t ] = '\0' ; if ( strcmp ( x , a ) == 0 ) { strcat ( c , b ) ; strcat ( c , " " ) ; } else { strcat ( c , x ) ; strcat ( c , " " ) ; } t = 0 ; } } x [ t ] = '\0' ; if ( strcmp ( x , a ) == 0 ) { strcat ( c , b ) ; } else { strcat ( c , x ) ; } puts ( c ) ; return 0 ; }
int main ( ) { int len1 , len2 , len3 ; char a [ 100 ] , b [ 100 ] , c [ 100 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; len1 = strlen ( a ) ; len2 = strlen ( b ) ; len3 = strlen ( c ) ; int i , j = 0 , m , n , k , space [ 100 ] ; space [ 0 ] = 0 ; for ( i = 0 ; i < len1 ; i ++ ) if ( a [ i ] == ' ' ) { j = j + 1 ; space [ j ] = i + 1 ; } for ( i = 0 ; i < j ; i ++ ) { k = 0 ; for ( m = space [ i ] ; m < space [ i ] + len2 ; m ++ ) { if ( a [ m ] == b [ m - space [ i ] ] ) k = k + 1 ; } if ( k == len2 && a [ space [ i ] + len2 ] == ' ' ) cout << c << ' ' ; else { for ( n = space [ i ] ; n < space [ i + 1 ] ; n ++ ) cout << a [ n ] ; } } k = 0 ; for ( i = space [ j ] ; i < len1 ; i ++ ) if ( a [ i ] == b [ i - space [ j ] ] ) k = k + 1 ; if ( k == len2 && len1 - space [ j ] == len2 ) cout << c ; else { for ( n = space [ j ] ; n < len1 ; n ++ ) cout << a [ n ] ; } return 0 ; }
int main ( ) { char a [ 200 ] , b [ 200 ] , c [ 200 ] , d [ 200 ] ; int ai = 0 , lb , la , lc , bi = 0 , ci = 0 , di = 0 , k ; gets ( a ) ; scanf ( "%s" , & b ) ; scanf ( "%s" , & c ) ; lb = strlen ( b ) ; la = strlen ( a ) ; lc = strlen ( c ) ; while ( ai != la ) { bi = 0 ; ci = 0 ; if ( ai != 0 ) { if ( ( a [ ai ] == b [ bi ] ) && ( a [ ai - 1 ] == ' ' ) ) { k = ai ; while ( ( a [ ai ] == b [ bi ] ) && ( a [ ai ] != ' ' ) && ( a [ ai ] != '\0' ) ) { bi ++ ; ai ++ ; } if ( bi == lb ) { while ( ci != lc ) { d [ di ] = c [ ci ] ; di ++ ; ci ++ ; } } else { ai = k ; d [ di ] = a [ ai ] ; di ++ ; ai ++ ; } } else { d [ di ] = a [ ai ] ; ai ++ ; di ++ ; } } else { if ( a [ ai ] == b [ bi ] ) { k = ai ; while ( a [ ai ] == b [ bi ] ) { bi ++ ; ai ++ ; } if ( bi == lb ) { while ( ci != lc ) { d [ di ] = c [ ci ] ; di ++ ; ci ++ ; } } else { ai = k ; d [ di ] = a [ ai ] ; di ++ ; ai ++ ; } } else { d [ di ] = a [ ai ] ; ai ++ ; di ++ ; } } } d [ di ] = '\0' ; puts ( d ) ; return 0 ; }
int main ( ) { int l1 , l2 , l3 , i , j , lab ; lab = 1 ; int x [ 200 ] = { 0 } ; char a [ 200 ] , b [ 200 ] ; char s [ 200 ] = { 0 } ; gets ( s ) ; gets ( a ) ; gets ( b ) ; l1 = strlen ( s ) ; l2 = strlen ( a ) ; l3 = strlen ( b ) ; for ( i = l1 ; i >= 0 ; i -- ) { s [ i ] = s [ i - 1 ] ; } s [ 0 ] = ' ' ; s [ l1 + 1 ] = ' ' ; for ( i = 0 ; i <= l1 ; i ++ ) { if ( ( s [ i ] != ' ' ) || ( s [ i + l2 + 1 ] != ' ' ) ) continue ; lab = 0 ; for ( j = 0 ; j < l2 ; j ++ ) { if ( s [ i + j + 1 ] != a [ j ] ) { lab = 1 ; } } if ( lab == 0 ) { x [ i + 1 ] = 1 ; } } for ( i = 1 ; i <= l1 ; ) { if ( x [ i ] == 0 ) { cout << s [ i ] ; i ++ ; } if ( x [ i ] == 1 ) { cout << b ; i = i + l2 ; } } return 0 ; }
int main ( ) { char s [ 200 ] = { 0 } ; char a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; int c [ 200 ] = { 0 } ; int lena = 0 , lenb = 0 , lens = 0 , i = 0 , j = 0 , k = 0 , count = 0 , t = 0 ; cin . get ( s , 200 , '\n' ) ; cin >> a >> b ; lena = strlen ( a ) ; lenb = strlen ( b ) ; lens = strlen ( s ) ; if ( ( s [ 0 ] == a [ 0 ] ) && ( s [ i + lena ] == 32 || s [ i + lena ] == 0 ) ) { for ( j = 0 ; j < lena ; j ++ ) { if ( s [ i + j ] == a [ j ] ) count ++ ; } if ( count == lena ) k ++ ; count = 0 ; } for ( i = 1 ; i < lens ; i ++ , count = 0 ) { if ( ( s [ i ] == a [ 0 ] ) && ( s [ i + lena ] == 32 || s [ i + lena ] == 0 ) && ( s [ i - 1 ] == 32 ) ) { for ( j = 0 ; j < lena ; j ++ ) { if ( s [ i + j ] == a [ j ] ) count ++ ; } if ( count == lena ) { c [ k ] = i ; k ++ ; } } } c [ k ] = 201 ; if ( lena < lenb ) { t = lenb - lena ; for ( i = lens - 1 ; i >= 0 ; i -- ) for ( j = k - 1 ; j >= 0 ; j -- ) { if ( i >= c [ j ] && i < c [ j + 1 ] ) s [ i + ( j + 1 ) * t ] = s [ i ] ; } for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j < lenb ; j ++ ) s [ c [ i ] + i * t + j ] = b [ j ] ; } else if ( lena >= lenb ) { t = lena - lenb ; for ( i = c [ 0 ] + t ; i < lens ; i ++ ) for ( j = 0 ; j < k ; j ++ ) { if ( i >= c [ j ] && i < c [ j + 1 ] ) s [ i ] = s [ i + ( j + 1 ) * t ] ; } b [ lenb ] = 32 ; for ( i = 0 ; i < k ; i ++ ) for ( j = 0 ; j <= lenb ; j ++ ) s [ c [ i ] - i * t + j ] = b [ j ] ; } int l = strlen ( s ) ; if ( s [ l - 1 ] == 32 ) s [ l - 1 ] = 0 ; cout << s ; return 0 ; }
int main ( ) { char s [ 120 ] , a [ 120 ] , b [ 120 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; int len_s = strlen ( s ) ; int len_a = strlen ( a ) ; int i = 0 , j ; while ( i < len_s ) { if ( i == 0 || s [ i - 1 ] == ' ' ) { for ( j = 0 ; j < len_a && i + j < len_s ; j ++ ) if ( s [ i + j ] != a [ j ] ) break ; if ( j == len_a ) { cout << b ; i += len_a ; } else { cout << s [ i ] ; i ++ ; } } else { cout << s [ i ] ; i ++ ; } } cout << endl ; return 0 ; }
char * Strlwr ( char * ) ; int main ( ) { char input [ 110 ] , replaced [ 110 ] , replace [ 110 ] ; char inputL [ 110 ] , replacedL [ 110 ] ; char * p , * pL , * start ; int len ; char temp ; cin . getline ( input , 110 ) ; cin . getline ( replaced , 110 ) ; cin . getline ( replace , 110 ) ; strcpy ( inputL , input ) ; strcpy ( replacedL , replaced ) ; len = strlen ( replaced ) ; pL = strstr ( inputL , replacedL ) ; start = input ; while ( pL != NULL ) { if ( ( pL == inputL || isalpha ( * ( pL - 1 ) ) == 0 ) && isalpha ( * ( pL + len ) ) == 0 ) { p = input + ( pL - inputL ) ; * p = '\0' ; cout << start << replace ; start = p + len ; pL = strstr ( ( start - input ) + inputL , replacedL ) ; } else { p = input + ( pL - inputL ) + len ; temp = * p ; * p = '\0' ; cout << start ; start = p ; * start = temp ; pL = strstr ( ( start - input ) + inputL , replacedL ) ; } } cout << start << endl ; return 0 ; } char * Strlwr ( char * p ) { for ( ; * p != '\0' ; p ++ ) if ( * p >= 'A' && * p <= 'Z' ) * p += 32 ; return p ; }
int main ( ) { char input [ 110 ] , replaced [ 110 ] , replace [ 110 ] ; char * p , * start ; int len ; char temp ; cin . getline ( input , 110 ) ; cin . getline ( replaced , 110 ) ; cin . getline ( replace , 110 ) ; len = strlen ( replaced ) ; p = strstr ( input , replaced ) ; start = input ; while ( p != NULL ) { if ( ( p == input || isalpha ( * ( p - 1 ) ) == 0 ) && isalpha ( * ( p + len ) ) == 0 ) { * p = '\0' ; cout << start << replace ; start = p + len ; p = strstr ( start , replaced ) ; } else { p = input + ( p - input ) + len ; temp = * p ; * p = '\0' ; cout << start ; start = p ; * start = temp ; p = strstr ( start , replaced ) ; } } cout << start << endl ; return 0 ; }
int main ( ) { char n [ 5000 ] ; char m [ 100 ] [ 20 ] ; char s1 [ 20 ] , s2 [ 20 ] ; gets ( n ) ; gets ( s1 ) ; gets ( s2 ) ; int i , j = 0 , k = 0 , e ; e = strlen ( n ) ; for ( i = 0 ; i < e ; i ++ ) { if ( n [ i ] != ' ' ) { m [ j ] [ k ] = n [ i ] ; k ++ ; } if ( n [ i ] == ' ' ) { m [ j ] [ k ] = '\0' ; j ++ ; k = 0 ; } } m [ j ] [ k ] = '\0' ; for ( i = 0 ; i <= j ; i ++ ) { if ( strcmp ( m [ i ] , s1 ) == 0 ) strcpy ( m [ i ] , s2 ) ; } printf ( "%s" , m [ 0 ] ) ; for ( i = 1 ; i <= j ; i ++ ) { printf ( " %s" , m [ i ] ) ; } return 0 ; }
int main ( ) { char s [ 105 ] , a [ 105 ] , b [ 105 ] , ch [ 105 ] [ 105 ] ; int i , j = 0 , k = 0 , word , lens , lenb = 0 ; cin . getline ( s , 105 , '\n' ) ; cin . getline ( a , 105 , '\n' ) ; cin . getline ( b , 105 , '\n' ) ; for ( i = 0 ; i < 105 ; i ++ ) { if ( b [ i ] != '\0' ) lenb += 1 ; else break ; } for ( i = 0 ; i < 105 ; i ++ ) { if ( s [ i ] == ' ' ) { ch [ j ] [ k ] = '\0' ; k = 0 ; j += 1 ; } else if ( s [ i ] == '\0' ) { ch [ j ] [ k ] = s [ i ] ; lens = i - 1 ; word = j ; break ; } else { ch [ j ] [ k ] = s [ i ] ; k += 1 ; } } for ( i = 0 ; i <= word ; i ++ ) { k = 1 ; if ( strlen ( ch [ i ] ) != strlen ( a ) ) k = 0 ; else { for ( j = 0 ; j < strlen ( a ) ; j ++ ) if ( ch [ i ] [ j ] != a [ j ] ) k = 0 ; } if ( k == 1 ) { for ( j = 0 ; j <= lenb + 1 ; j ++ ) ch [ i ] [ j ] = b [ j ] ; } } for ( i = 0 ; i < word ; i ++ ) { cout << ch [ i ] << " " ; } for ( j = 0 ; j < 105 ; j ++ ) { cout << ch [ word ] [ j ] ; if ( ch [ word ] [ j + 1 ] == '\0' ) break ; } return 0 ; }
int main ( ) { int i , k , n = 0 , p , j ; char s [ 100 ] , a [ 100 ] , b [ 100 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; i = 0 ; while ( a [ i ] != '\0' ) { n ++ ; i ++ ; } i = 0 ; while ( s [ i ] != '\0' ) { p = 1 ; for ( j = 0 ; j < n ; j ++ ) if ( a [ j ] != s [ i + j ] ) p = 0 ; if ( p ) if ( i > 1 && s [ i - 1 ] != ' ' ) p = 0 ; if ( p ) { printf ( "%s" , b ) ; i = i + n - 1 ; } else printf ( "%c" , s [ i ] ) ; i ++ ; } return 0 ; }
int main ( ) { char a [ 100 ] , s [ 100 ] , ex [ 100 ] , b [ 100 ] ; int i , j , k , l , m = 0 , n , flag , len , D [ 100 ] , A = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; len = strlen ( a ) ; for ( i = 0 ; i < 100 ; i ++ ) { D [ i ] = 0 ; } for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { flag = 1 ; if ( ( i != 0 && s [ i ] == a [ 0 ] && s [ i - 1 ] == ' ' && ( s [ i + len ] == ' ' || s [ i + len ] == '\0' ) ) || ( i == 0 && s [ i ] == a [ 0 ] && s [ i + len ] == ' ' ) ) { k = i ; for ( j = i ; j < i + len ; j ++ ) { ex [ j - i ] = s [ k ] ; k ++ ; } for ( j = 0 ; j < len ; j ++ ) { if ( ex [ j ] != a [ j ] ) flag = 0 ; } } else flag = 0 ; if ( flag ) { D [ m ] = i ; m ++ ; } } if ( m == 1 ) { for ( i = 0 ; i < D [ 0 ] ; i ++ ) { printf ( "%c" , s [ i ] ) ; } for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { printf ( "%c" , b [ i ] ) ; } for ( i = D [ 0 ] + len ; s [ i ] != '\0' ; i ++ ) { printf ( "%c" , s [ i ] ) ; } } else if ( m > 1 ) { for ( i = 0 ; i < D [ 0 ] ; i ++ ) { printf ( "%c" , s [ i ] ) ; } for ( n = 0 ; n < m ; n ++ ) { for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { printf ( "%c" , b [ i ] ) ; } for ( i = D [ n ] + len ; i < D [ n + 1 ] ; i ++ ) { printf ( "%c" , s [ i ] ) ; } } for ( i = D [ m - 1 ] + len ; s [ i ] != '\0' ; i ++ ) { printf ( "%c" , s [ i ] ) ; } } else for ( l = 0 ; s [ l ] != '\0' ; l ++ ) { printf ( "%c" , s [ l ] ) ; } printf ( "\n" ) ; return 0 ; }
int main ( void ) { char a [ 100 ] , b [ 100 ] , c [ 100 ] , d [ 100 ] , e [ 100 ] = "\0" ; int i , j ; char * s ; gets ( a ) ; gets ( b ) ; gets ( c ) ; s = a ; strcat ( a , " " ) ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { j = 0 ; while ( a [ i ] != ' ' ) { d [ j ] = a [ i ] ; i ++ ; j ++ ; } d [ j ] = '\0' ; if ( ( ! strcmp ( d , b ) ) && ( d [ 0 ] != '\0' ) ) { strcat ( e , c ) ; } else { strcat ( e , d ) ; } if ( a [ i + 1 ] != '\0' ) strcat ( e , " " ) ; } puts ( e ) ; }
int main ( ) { char a [ 20 ] [ 15 ] , b [ 15 ] , c [ 15 ] , d ; int i , j ; for ( i = 0 , d = ' ' ; d != '\n' ; i ++ ) { scanf ( "%s" , a [ i ] ) ; scanf ( "%c" , & d ) ; } j = i ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; for ( i = 0 ; i <= j - 1 ; i ++ ) { if ( strcmp ( a [ i ] , b ) == 0 ) strcpy ( a [ i ] , c ) ; } for ( i = 0 ; i <= j - 2 ; i ++ ) { printf ( "%s " , a [ i ] ) ; } printf ( "%s" , a [ j - 1 ] ) ; return 0 ; }
int main ( ) { char s [ 999 ] ; char a [ 100 ] ; char b [ 100 ] ; int i = 0 , j = 0 , k ; int add ; char word [ 200 ] [ 100 ] = { '\0' } ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( k = 0 ; s [ k ] != '\0' ; k ++ ) { if ( s [ k ] == ' ' ) { i ++ ; j = 0 ; } else { word [ i ] [ j ] = s [ k ] ; j ++ ; } } add = i ; for ( i = 0 ; i < add + 1 ; i ++ ) { if ( strcmp ( word [ i ] , a ) == 0 ) strcpy ( word [ i ] , b ) ; } for ( i = 0 ; i < add ; i ++ ) printf ( "%s " , word [ i ] ) ; puts ( word [ i ] ) ; return 0 ; }
int main ( ) { int i , j = 0 , k = 0 ; char s [ 10000 ] ; char word [ 100 ] [ 100 ] ; char w1 [ 100 ] , w2 [ 100 ] ; gets ( s ) ; gets ( w1 ) ; gets ( w2 ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] != ' ' ) word [ j ] [ k ++ ] = s [ i ] ; else { j ++ ; k = 0 ; } } for ( i = 0 ; i <= j ; i ++ ) if ( strcmp ( word [ i ] , w1 ) == 0 ) strcpy ( word [ i ] , w2 ) ; for ( i = 0 ; i < j ; i ++ ) printf ( "%s " , word [ i ] ) ; printf ( "%s" , word [ j ] ) ; }
int main ( ) { char s [ 101 ] , a [ 101 ] , b [ 101 ] ; char * ss [ 100 ] ; int i , n = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; ss [ n ++ ] = s ; for ( i = 0 ; s [ i ] ; i ++ ) { if ( s [ i ] == ' ' ) { s [ i ] = 0 ; ss [ n ++ ] = s + i + 1 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( i > 0 ) printf ( " " ) ; if ( strcmp ( ss [ i ] , a ) == 0 ) printf ( "%s" , b ) ; else printf ( ss [ i ] ) ; } printf ( "\n" ) ; return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] , c [ 100 ] [ 100 ] ; int i , j , m = 0 , n = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( i = 0 ; i < strlen ( s ) ; i ++ ) { if ( s [ i ] == ' ' ) { n ++ ; c [ n ] [ 0 ] = s [ i + 1 ] ; m = 1 ; i ++ ; } else { c [ n ] [ m ] = s [ i ] ; m ++ ; } } for ( i = 0 ; i <= n ; i ++ ) { if ( strcmp ( c [ i ] , a ) == 0 ) strcpy ( c [ i ] , b ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s " , c [ i ] ) ; printf ( "%s" , c [ n ] ) ; return 0 ; }
int main ( ) { char s [ 100 ] ; char a [ 100 ] ; char b [ 100 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; int ls = strlen ( s ) ; int la = strlen ( a ) ; int i , j ; int t ; for ( i = 0 ; i < ls ; i ++ ) { t = 1 ; for ( j = 0 ; j < la ; j ++ ) { if ( a [ j ] == s [ i + j ] ) { t = 1 ; continue ; } if ( a [ j ] != s [ i + j ] ) { t = 0 ; break ; } } if ( t == 1 ) { if ( i != 0 && s [ i - 1 ] != ' ' ) { t = 0 ; } } if ( t == 1 ) { printf ( "%s" , b ) ; i += la - 1 ; } if ( t == 0 ) { printf ( "%c" , s [ i ] ) ; } } return 0 ; }
int main ( ) { char a [ 100 ] ; char b [ 100 ] ; char c [ 100 ] ; char d [ 50 ] [ 100 ] ; gets ( a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; int chang , i , n , m ; int u = 0 , v = 0 ; chang = strlen ( a ) ; for ( i = 0 ; i < chang ; i ++ ) { if ( a [ i ] != ' ' ) { d [ u ] [ v ] = a [ i ] ; v ++ ; } else { v = 0 ; u ++ ; } } for ( i = 0 ; i < u ; i ++ ) { if ( strcmp ( b , d [ i ] ) == 0 ) { printf ( "%s " , c ) ; } else { printf ( "%s " , d [ i ] ) ; } } if ( strcmp ( b , d [ i ] ) == 0 ) { printf ( "%s" , c ) ; } else { printf ( "%s" , d [ u ] ) ; } return 0 ; }
int main ( ) { char a [ 100 ] , b [ 100 ] , s [ 100 ] , ss [ 100 ] [ 100 ] = { '\0' } , d [ 100 ] = { '\0' } ; int i , j , m , n , t , k , l , p ; gets ( s ) ; gets ( a ) ; gets ( b ) ; t = strlen ( s ) ; n = 0 ; m = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( s [ i ] != ' ' && s [ i ] != '\0' ) { ss [ m ] [ n ] = s [ i ] ; n ++ ; } else { m ++ ; n = 0 ; } } for ( j = 0 ; j <= m ; j ++ ) { if ( strcmp ( ss [ j ] , a ) == 0 ) { strcpy ( ss [ j ] , b ) ; } } k = 0 ; l = 0 ; for ( p = 0 ; ; p ++ ) { if ( ss [ k ] [ l ] == '\0' && k != m ) { d [ p ] = ' ' ; k ++ ; l = 0 ; } else if ( ss [ k ] [ l ] != '\0' ) { d [ p ] = ss [ k ] [ l ] ; l ++ ; } else { break ; } } puts ( d ) ; return 0 ; }
int main ( ) { char part [ 100 ] , full [ 1000 ] , change [ 100 ] ; char new [ 1000 ] ; char * diff2 ; gets ( full ) ; gets ( part ) ; gets ( change ) ; int partlen = strlen ( part ) ; int fulllen = strlen ( full ) ; int which = 0 ; int end = fulllen - partlen ; int i , j ; int yes ; int start = 0 ; full [ - 1 ] = ' ' ; for ( i = 0 ; i <= end ; i ++ ) { yes = 1 ; for ( j = 0 ; j < partlen ; j ++ ) { if ( full [ i + j ] != part [ j ] ) { yes = 0 ; } } if ( yes == 1 && full [ i - 1 ] == ' ' ) { which = i ; strcpy ( new , full ) ; new [ which ] = '\0' ; strcat ( new , change ) ; diff2 = & full [ which + partlen ] ; strcat ( new , diff2 ) ; strcpy ( full , new ) ; i += strlen ( change ) ; } } printf ( "%s" , full ) ; return 0 ; }
int main ( ) { char a [ 500 ] , b [ 100 ] , c [ 100 ] , d [ 100 ] [ 100 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; int i , j , k = 0 ; for ( i = 0 ; i < strlen ( a ) ; i ++ , k ++ ) { for ( j = i ; a [ j ] != ' ' ; j ++ ) { d [ k ] [ j - i ] = a [ j ] ; d [ k ] [ j - i + 1 ] = '\0' ; if ( a [ j ] == '\0' ) { break ; } } i = j ; } for ( i = 0 ; i < k ; i ++ ) { if ( strcmp ( b , d [ i ] ) == 0 ) { strcpy ( d [ i ] , c ) ; } } for ( i = 0 ; i < k - 1 ; i ++ ) { printf ( "%s " , d [ i ] ) ; } printf ( "%s" , d [ k - 1 ] ) ; return 0 ; }
int main ( ) { char s1 [ 100 ] ; char a [ 100 ] ; char b [ 100 ] ; char s2 [ 15 ] [ 20 ] ; int i , k , x = 0 , m , n ; char c , d ; gets ( s1 ) ; gets ( a ) ; gets ( b ) ; m = 0 ; n = 0 ; k = 0 ; for ( i = 0 ; ( c = s1 [ i ] ) != '\0' ; i ++ ) { if ( c != ' ' ) { s2 [ k ] [ m ] = c ; m ++ ; } else { s2 [ k ] [ m ] = '\0' ; m = 0 ; k ++ ; n ++ ; } } s2 [ n ] [ m ] = '\0' ; for ( i = 0 ; i <= n ; i ++ ) { if ( strcmp ( s2 [ i ] , a ) == 0 ) { x = 1 ; for ( k = 0 ; ( d = b [ k ] ) != '\0' ; k ++ ) { s2 [ i ] [ k ] = b [ k ] ; } s2 [ i ] [ k ] = '\0' ; } } if ( x == 1 ) { for ( i = 0 ; i < n ; i ++ ) { printf ( "%s " , s2 [ i ] ) ; } printf ( "%s" , s2 [ n ] ) ; } else { puts ( s1 ) ; } return 0 ; }
char s [ 100 ] ; char a [ 100 ] ; char b [ 100 ] ; int len1 , len2 , len3 ; int i ; int check ( int place ) ; void output ( void ) ; int main ( void ) { gets ( s ) ; gets ( a ) ; gets ( b ) ; len1 = strlen ( s ) ; len2 = strlen ( a ) ; len3 = strlen ( b ) ; for ( i = 0 ; i < len1 ; i ++ ) { if ( check ( i ) ) { output ( ) ; i += len2 - 1 ; } else { printf ( "%c" , s [ i ] ) ; } } } int check ( int place ) { int num = 0 ; int ctr = 0 ; if ( place > 0 && s [ place - 1 ] != ' ' ) return 0 ; for ( ctr = 0 ; ctr < len2 ; ctr ++ ) { if ( s [ place + ctr ] == a [ ctr ] ) num ++ ; } if ( num == len2 ) return 1 ; else return 0 ; } void output ( void ) { int ctr1 ; for ( ctr1 = 0 ; ctr1 < len3 ; ctr1 ++ ) { printf ( "%c" , b [ ctr1 ] ) ; } }
int main ( ) { char s [ 100 ] , str1 [ 100 ] , str2 [ 100 ] , a [ 100 ] [ 100 ] ; gets ( s ) ; int len = strlen ( s ) ; gets ( str1 ) ; gets ( str2 ) ; int lenth = strlen ( str2 ) ; int i , j , p ; for ( i = 0 , j = 0 , p = 0 ; j < len ; j ++ ) { a [ i ] [ p ++ ] = s [ j ] ; if ( s [ j + 1 ] == ' ' ) { j = j + 1 ; a [ i ] [ p ] = '\0' ; i = i + 1 ; p = 0 ; } } a [ i ] [ p ] = '\0' ; int num = i ; int judge = 0 ; for ( i = 0 ; i < num + 1 ; i ++ ) { if ( strcmp ( a [ i ] , str1 ) == 0 ) { for ( j = 0 ; j < lenth ; j ++ ) { a [ i ] [ j ] = str2 [ j ] ; } a [ i ] [ lenth ] = '\0' ; judge = 1 ; } } if ( judge == 0 ) printf ( "%s\n" , s ) ; else { printf ( "%s" , a [ 0 ] ) ; for ( i = 1 ; i < num + 1 ; i ++ ) { printf ( " %s" , a [ i ] ) ; } printf ( "\n" ) ; } return 0 ; }
void huan ( int start , char W [ 100 ] , char B [ 100 ] , int Len1 , int Len2 , int Len3 , int t ) { int i , k ; char WW [ 100 ] ; for ( i = 0 ; i < start ; i ++ ) WW [ i ] = W [ i ] ; for ( i = start , k = 0 ; i < start + Len3 ; i ++ , k ++ ) WW [ i ] = B [ k ] ; for ( i = start + Len3 ; i <= Len1 - Len2 * t + Len3 * t - 1 ; i ++ ) WW [ i ] = W [ i + Len2 - Len3 ] ; for ( i = 0 ; i <= Len1 - Len2 * t + Len3 * t - 1 ; i ++ ) W [ i ] = WW [ i ] ; } int main ( ) { char whole [ 100 ] ; char a [ 100 ] ; char b [ 100 ] ; char gai [ 100 ] ; gets ( whole ) ; gets ( a ) ; gets ( b ) ; int i , j , k , t ; int len1 ; int len2 ; int len3 ; len1 = strlen ( whole ) ; len2 = strlen ( a ) ; len3 = strlen ( b ) ; int judge ; int begin [ 100 ] ; t = 0 ; if ( whole [ 0 ] != a [ 0 ] ) { for ( i = 0 ; i < len1 - len2 + 1 ; i ++ ) { for ( j = i , k = 0 ; j < len2 + i ; j ++ , k ++ ) { if ( whole [ j ] != a [ k ] ) { judge = 0 ; break ; } else judge = 1 ; } if ( whole [ i - 1 ] == ' ' && judge == 1 ) { begin [ t ] = i ; t ++ ; } } } else { t = 1 ; begin [ 0 ] = 0 ; for ( i = 0 ; i < len1 - len2 + 1 ; i ++ ) { for ( j = i , k = 0 ; j < len2 + i ; j ++ , k ++ ) { if ( whole [ j ] != a [ k ] ) { judge = 0 ; break ; } else judge = 1 ; } if ( whole [ i - 1 ] == ' ' && judge == 1 ) { begin [ t ] = i ; t ++ ; } } } if ( len1 >= len2 ) { int u ; for ( i = t - 1 , u = 1 ; i >= 0 ; i -- , u ++ ) { huan ( begin [ i ] , whole , b , len1 , len2 , len3 , u ) ; } for ( i = 0 ; i <= len1 - 1 - len2 * ( u - 1 ) + len3 * ( u - 1 ) ; i ++ ) { printf ( "%c" , whole [ i ] ) ; } } else { int v ; for ( i = 0 , v = 1 ; i <= t - 1 ; i ++ , v ++ ) { huan ( begin [ i ] , whole , b , len1 , len2 , len3 , v ) ; } for ( i = 0 ; i <= len1 - 1 - len2 * ( v - 1 ) + len3 * ( v - 1 ) ; i ++ ) { printf ( "%c" , whole [ i ] ) ; } } return 0 ; }
int main ( ) { char a [ 1000 ] , b [ 1000 ] ; char sold [ 1000 ] , snew [ 1000 ] ; int i , j , k , l ; gets ( a ) ; gets ( sold ) ; gets ( snew ) ; for ( i = 0 ; i < strlen ( a ) ; i ++ ) { k = 0 ; for ( j = i ; j < i + strlen ( sold ) ; j ++ ) { if ( i == strlen ( a ) - strlen ( sold ) ) if ( a [ i - 1 ] != ' ' ) break ; if ( i != 0 && i != strlen ( a ) - strlen ( sold ) ) if ( a [ i + strlen ( sold ) ] != ' ' || a [ i - 1 ] != ' ' ) break ; if ( a [ j ] != sold [ k ++ ] ) break ; } if ( j == i + strlen ( sold ) ) { for ( k = 0 ; k < 500 ; k ++ ) b [ k + i + strlen ( snew ) ] = a [ k + i + strlen ( sold ) ] ; for ( k = 0 ; k < i ; k ++ ) b [ k ] = a [ k ] ; l = 0 ; for ( k = 0 ; k < strlen ( snew ) ; k ++ ) b [ i + k ] = snew [ l ++ ] ; for ( k = 0 ; k < 1000 ; k ++ ) a [ k ] = b [ k ] ; i = i + strlen ( snew ) - 1 ; } } puts ( a ) ; return 0 ; }
int main ( ) { char m [ 100 ] , z [ 100 ] , t [ 100 ] ; gets ( m ) ; gets ( z ) ; gets ( t ) ; char fz [ 100 ] [ 100 ] ; int len1 = strlen ( m ) ; int i , k = 0 , j = 0 , num = 1 ; for ( i = 0 ; i < len1 ; i ++ ) { if ( m [ i ] != 32 ) { fz [ k ] [ j ] = m [ i ] ; j ++ ; } else { num ++ ; k ++ ; j = 0 ; } } for ( k = 0 ; k < num ; k ++ ) { if ( k != num - 1 ) { int result = strcmp ( fz [ k ] , z ) ; if ( result == 0 ) { strcpy ( fz [ k ] , t ) ; printf ( "%s " , fz [ k ] ) ; } else { printf ( "%s " , fz [ k ] ) ; } } if ( k == num - 1 ) { int result = strcmp ( fz [ k ] , z ) ; if ( result == 0 ) { strcpy ( fz [ k ] , t ) ; printf ( "%s" , fz [ k ] ) ; } else { printf ( "%s" , fz [ k ] ) ; } } } return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; int i , j = 0 , k = 0 ; char c [ 100 ] [ 100 ] = { '\0' } ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] != ' ' ) { c [ j ] [ k ] = s [ i ] ; k ++ ; } else { j ++ ; k = 0 ; } } for ( i = 0 ; i <= j ; i ++ ) { if ( strcmp ( c [ i ] , a ) == 0 ) { strcpy ( c [ i ] , b ) ; } } for ( i = 0 ; i <= j ; i ++ ) { if ( i == 0 ) printf ( "%s" , c [ i ] ) ; else printf ( " %s" , c [ i ] ) ; } return 0 ; }
int main ( ) { char a [ 200 ] , b [ 100 ] , c [ 100 ] , d [ 200 ] ; int i , j , na = 0 , nb = 0 , nc = 0 , m = 0 , l = 0 , x = 0 ; gets ( a ) ; gets ( b ) ; gets ( c ) ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { na ++ ; } for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { nb ++ ; } for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { nc ++ ; } for ( i = 0 ; i <= na + x * ( nc - nb ) - 1 ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { l = 1 ; for ( j = 1 ; j <= nb - 1 ; j ++ ) { if ( a [ i + j ] != b [ j ] ) break ; else l = l + 1 ; } if ( ( ( l == nb ) && ( a [ i - 1 ] == ' ' ) && ( a [ i + nb ] == ' ' ) ) || ( ( i == 0 ) && ( l == nb ) && ( a [ i + nb ] == ' ' ) ) || ( ( l == nb ) && ( i >= na + x * ( nc - nb ) - nb - 1 ) && ( a [ i - 1 ] == ' ' ) ) ) { for ( m = i + nb ; m <= na + 2 ; m ++ ) { d [ m - i - nb ] = a [ m ] ; } for ( m = i ; m <= i + nc - 1 ; m ++ ) { a [ m ] = c [ m - i ] ; } for ( m = i + nc ; m <= na + nc - nb + 2 ; m ++ ) { a [ m ] = d [ m - i - nc ] ; } i = i + nc - nb ; x = x + 1 ; } } } a [ na + x * ( nc - nb ) ] = '\0' ; printf ( "%s" , a ) ; return 0 ; }
int main ( ) { char str [ 101 ] , aim [ 101 ] , change [ 101 ] ; gets ( str ) ; gets ( aim ) ; gets ( change ) ; int i ; int count ; char tword [ 101 ] ; count = 0 ; tword [ count ] = '\0' ; for ( i = 0 ; i < strlen ( str ) ; i ++ ) { if ( str [ i ] != ' ' && str [ i ] != ',' ) { tword [ count ] = str [ i ] ; count ++ ; } else { tword [ count ] = '\0' ; if ( strcmp ( tword , aim ) == 0 ) { printf ( "%s " , change ) ; } else printf ( "%s " , tword ) ; count = 0 ; tword [ count ] = '\0' ; } } tword [ count ] = '\0' ; if ( strcmp ( tword , aim ) == 0 ) { printf ( "%s" , change ) ; } else printf ( "%s" , tword ) ; return 0 ; }
int main ( ) { char c = '0' ; char * s [ 100 ] ; char t [ 100 ] , r [ 100 ] ; int i = 0 , j ; while ( c != '\n' ) { s [ i ] = ( char * ) malloc ( sizeof ( char ) * 100 ) ; scanf ( "%s" , s [ i ++ ] ) ; scanf ( "%c" , & c ) ; } scanf ( "%s" , t ) ; scanf ( "%s" , r ) ; for ( j = 0 ; j < i ; j ++ ) { if ( strcmp ( t , s [ j ] ) == 0 ) s [ j ] = r ; printf ( "%s" , s [ j ] ) ; if ( j < i - 1 ) printf ( " " ) ; } return 0 ; }
void main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; char word [ 50 ] [ 100 ] ; int i , j , num = 1 ; int count [ 50 ] = { 0 } ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( i = 0 ; i <= strlen ( s ) ; i ++ ) { if ( s [ i ] != ' ' && s [ i ] != '\0' ) count [ num ] ++ ; if ( s [ i ] == ' ' || s [ i ] == '\0' ) { for ( j = 0 ; j < count [ num ] ; j ++ ) { word [ num ] [ j ] = s [ i - count [ num ] + j ] ; } word [ num ] [ count [ num ] ] = '\0' ; if ( s [ i ] == ' ' ) num ++ ; } } for ( i = 1 ; i <= num ; i ++ ) { if ( strcmp ( word [ i ] , a ) == 0 ) strcpy ( word [ i ] , b ) ; else continue ; } for ( i = 1 ; i < num ; i ++ ) { printf ( "%s " , word [ i ] ) ; } printf ( "%s" , word [ num ] ) ; }
char a [ 2000 ] ; char sub [ 2000 ] ; int b [ 2000 ] ; int jianyan [ 1000 ] ; int main ( ) { gets ( a ) ; gets ( sub ) ; int i , j = 0 , v = 0 , count_jianyan = 0 , l = strlen ( a ) , l_sub = strlen ( sub ) ; for ( int r = 0 ; r < l ; r ++ ) { if ( a [ r ] == ' ' ) { jianyan [ count_jianyan ] = r ; count_jianyan ++ ; } } for ( int u = 0 ; u < l_sub ; u ++ ) { if ( a [ u ] == sub [ u ] ) { b [ 0 ] ++ ; } } while ( v < count_jianyan ) { i = jianyan [ v ] + 1 ; for ( j = 0 ; j < l_sub ; j ++ ) { if ( a [ i + j ] == sub [ j ] ) { b [ i ] ++ ; } } v ++ ; } int k = 0 , w [ 1000 ] , count = 0 ; for ( int gl = 0 ; gl < 1000 ; gl ++ ) { w [ gl ] = 999 ; } for ( k = 0 ; k < 2000 ; k ++ ) { if ( b [ k ] == l_sub ) { w [ count ] = k ; count ++ ; } } char c [ 300 ] ; gets ( c ) ; int q = 0 , m = 0 ; if ( count != 0 ) { while ( q < l ) { if ( q == w [ m ] ) { printf ( "%s" , c ) ; q += l_sub ; m ++ ; } if ( q != l ) { printf ( "%c" , a [ q ] ) ; } q ++ ; } } else if ( count == 0 ) { puts ( a ) ; } return 0 ; }
int main ( ) { int i , a = 0 , b = 0 ; char zfc [ 101 ] , y [ 101 ] , x [ 101 ] , word [ 101 ] [ 101 ] ; gets ( zfc ) ; gets ( y ) ; gets ( x ) ; for ( i = 0 ; zfc [ i ] != '\0' ; i ++ ) { if ( zfc [ i ] != ' ' ) { word [ a ] [ b ] = zfc [ i ] ; b ++ ; } else { word [ a ] [ b ] = '\0' ; b = 0 ; a ++ ; } } word [ a ] [ b ] = '\0' ; for ( i = 0 ; i <= a ; i ++ ) { if ( strcmp ( word [ i ] , y ) == 0 ) { strcpy ( word [ i ] , x ) ; } } for ( i = 0 ; i < a ; i ++ ) { printf ( "%s " , word [ i ] ) ; } printf ( "%s\n" , word [ a ] ) ; return 0 ; }
int main ( ) { char zfc [ 100 ] , in [ 30 ] , out [ 30 ] , x [ 100 ] , y [ 100 ] , zfc2 [ 20 ] [ 100 ] ; int len , i , t = 1 , lenall , judge = 1 , num [ 100 ] , k = 1 ; gets ( zfc ) ; scanf ( "%s" , in ) ; scanf ( "%s" , out ) ; len = strlen ( in ) ; lenall = strlen ( zfc ) ; num [ 0 ] = 0 ; for ( i = 0 ; i < lenall ; i ++ ) { if ( zfc [ i ] == ' ' ) { num [ k ] = i + 1 ; zfc [ i ] = 0 ; k ++ ; } } for ( i = 0 ; i < k ; i ++ ) { strcpy ( zfc2 [ i ] , & zfc [ num [ i ] ] ) ; } for ( i = 0 ; i < k ; i ++ ) { if ( strcmp ( & zfc [ num [ i ] ] , in ) == 0 ) { strcpy ( zfc2 [ i ] , out ) ; } } for ( i = 0 ; i < k - 1 ; i ++ ) { printf ( "%s " , zfc2 [ i ] ) ; } printf ( "%s" , zfc2 [ k - 1 ] ) ; return 0 ; }
int main ( ) { char name [ 100 ] , a [ 100 ] , b [ 100 ] ; int k = 0 , j = 0 , n , i , p ; char word [ 100 ] [ 100 ] ; gets ( name ) ; gets ( a ) ; gets ( b ) ; n = strlen ( name ) ; for ( i = 0 ; i < n ; i ++ ) { if ( name [ i ] != ' ' ) { word [ k ] [ j ] = name [ i ] ; j ++ ; } else { word [ k ] [ j ] = '\0' ; k ++ ; j = 0 ; } } word [ k ] [ j ] = '\0' ; k ++ ; for ( p = 0 ; p < k ; p ++ ) { if ( strcmp ( word [ p ] , a ) == 0 ) { strcpy ( word [ p ] , b ) ; } } for ( p = 0 ; p < k - 1 ; p ++ ) { printf ( "%s " , word [ p ] ) ; } printf ( "%s" , word [ k - 1 ] ) ; return 0 ; }
int main ( ) { char words [ 200 ] , a [ 100 ] , b [ 100 ] , word [ 100 ] [ 100 ] ; int n , k , j = 0 , i ; gets ( words ) ; gets ( a ) ; gets ( b ) ; n = strlen ( words ) ; for ( i = 0 , k = 0 ; i < n + 1 ; i ++ ) { if ( words [ i ] == ' ' || words [ i ] == '\0' ) { word [ k ] [ j ] = '\0' ; k ++ ; j = 0 ; } else { word [ k ] [ j ] = words [ i ] ; j ++ ; } } for ( i = 0 ; i < k - 1 ; i ++ ) { if ( strcmp ( word [ i ] , a ) == 0 ) printf ( "%s " , b ) ; else printf ( "%s " , word [ i ] ) ; } if ( strcmp ( word [ i ] , a ) == 0 ) printf ( "%s" , b ) ; else printf ( "%s" , word [ i ] ) ; return 0 ; }
int main ( ) { char s [ 200 ] , a [ 100 ] , b [ 100 ] , s_ [ 200 ] [ 200 ] , s__ [ 200 ] ; int i , n = 0 , m , j = 0 , p = 0 ; gets ( s ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { s__ [ i ] = s [ i ] ; } s__ [ i ] = ' ' ; s__ [ i + 1 ] = '\0' ; scanf ( "%s%s" , a , b ) ; for ( i = 0 ; s__ [ i ] != '\0' ; i ++ ) { n ++ ; } for ( i = 0 ; i < n ; i ++ ) { if ( s__ [ i ] == ' ' ) { s_ [ j ] [ p ] = '\0' ; j ++ ; p = 0 ; } else { s_ [ j ] [ p ] = s__ [ i ] ; p ++ ; } } m = j ; for ( j = 0 ; j < m - 1 ; j ++ ) { if ( strcmp ( s_ [ j ] , a ) == 0 ) { printf ( "%s " , b ) ; } else { printf ( "%s " , s_ [ j ] ) ; } } if ( strcmp ( s_ [ m - 1 ] , a ) == 0 ) { printf ( "%s" , b ) ; } else { printf ( "%s" , s_ [ j ] ) ; } return 0 ; }
int main ( ) { char s [ 200 ] , a [ 200 ] , b [ 200 ] , m [ 100 ] [ 100 ] ; int len , n , i , j , hang = 0 , lie = 0 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; len = strlen ( s ) ; for ( i = 0 ; i < len ; i ++ ) { if ( s [ i ] == ' ' ) { m [ hang ] [ lie ] = '\0' ; hang ++ ; lie = 0 ; } else { m [ hang ] [ lie ] = s [ i ] ; lie ++ ; } if ( s [ i + 1 ] == '\0' ) { m [ hang ] [ lie ] = '\0' ; break ; } } for ( i = 0 ; i <= hang ; i ++ ) { if ( strcmp ( a , m [ i ] ) == 0 ) { strcpy ( m [ i ] , b ) ; } } for ( i = 0 ; i < hang ; i ++ ) printf ( "%s " , m [ i ] ) ; printf ( "%s" , m [ hang ] ) ; return 0 ; }
void main ( ) { char str [ 80 ] , s [ 30 ] [ 20 ] , test1 [ 20 ] , test2 [ 20 ] , * p ; int i , j , l , c , m = 0 ; gets ( str ) ; gets ( test1 ) ; gets ( test2 ) ; p = str ; for ( i = 0 , c = 0 ; * ( p + i ) != ' ' ; i ++ , c ++ ) s [ 0 ] [ c ] = * ( p + i ) ; s [ 0 ] [ c ] = '\0' ; l = strlen ( str ) ; m = 1 ; for ( i = 0 ; i < l ; i ++ ) { if ( * ( p + i - 1 ) == ' ' && * ( p + i ) != ' ' ) { for ( j = i , c = 0 ; str [ j ] != ' ' ; j ++ , c ++ ) { s [ m ] [ c ] = str [ j ] ; } s [ m ] [ c ] = '\0' ; m ++ ; } } for ( i = 0 ; i < m ; i ++ ) { if ( strcmp ( test1 , s [ i ] ) == 0 ) { strcpy ( s [ i ] , test2 ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) printf ( "%s " , s [ i ] ) ; printf ( "%s" , s [ m - 1 ] ) ; }
int main ( ) { char w [ 1000 ] , s [ 100 ] [ 100 ] , a [ 100 ] , b [ 100 ] ; int i = 0 , j = 0 , k = 0 , d ; gets ( w ) ; gets ( a ) ; gets ( b ) ; while ( w [ i ] != '\0' ) { while ( w [ i ] != ' ' && w [ i ] != '\0' ) { s [ j ] [ k ] = w [ i ] ; i ++ ; k ++ ; } s [ j ] [ k ] = '\0' ; j ++ ; k = 0 ; while ( w [ i ] == ' ' ) { i ++ ; } } for ( i = 0 ; i < j ; i ++ ) { d = strcmp ( s [ i ] , a ) ; if ( d == 0 ) { strcpy ( s [ i ] , b ) ; } } printf ( "%s" , s [ 0 ] ) ; for ( i = 1 ; i < j ; i ++ ) { printf ( " %s" , s [ i ] ) ; } return 0 ; }
int main ( ) { int i , n ; char s [ 120 ] ; char word [ 120 ] ; char a [ 120 ] ; char b [ 120 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; for ( i = 0 ; s [ i ] != ' ' && s [ i ] != '\0' ; i ++ ) { word [ i ] = s [ i ] ; } word [ i ] = '\0' ; if ( strcmp ( word , a ) == 0 ) { printf ( "%s" , b ) ; } else printf ( "%s" , word ) ; n = i ; while ( s [ i ] != '\0' ) { i ++ ; for ( ; s [ i ] != ' ' && s [ i ] != '\0' ; i ++ ) { word [ i - n - 1 ] = s [ i ] ; } word [ i - n - 1 ] = '\0' ; if ( strcmp ( word , a ) == 0 ) { printf ( " %s" , b ) ; } else printf ( " %s" , word ) ; n = i ; } return 0 ; }
int main ( ) { char s [ 200 ] , a [ 100 ] , b [ 100 ] , w [ 100 ] [ 20 ] ; int len ; gets ( s ) ; gets ( a ) ; gets ( b ) ; len = strlen ( s ) ; int i , j , n = 0 , k = 0 ; for ( i = 0 ; i <= len ; i ++ ) { if ( s [ i ] == 32 ) { w [ n ] [ k ] = '\0' ; n ++ ; k = 0 ; } else { w [ n ] [ k ] = s [ i ] ; k ++ ; } } for ( j = 0 ; j <= n ; j ++ ) { if ( strcmp ( w [ j ] , a ) == 0 ) { strcpy ( w [ j ] , b ) ; } if ( j == 0 ) { printf ( "%s" , w [ j ] ) ; } else { printf ( " %s" , w [ j ] ) ; } } return 0 ; }
int main ( ) { char s [ 101 ] , a [ 101 ] , b [ 101 ] ; gets ( s ) ; gets ( a ) ; gets ( b ) ; int i , j , c = 0 , d = 0 , e = 0 , f , k , l , len1 , len2 ; len1 = strlen ( s ) ; len2 = strlen ( a ) ; for ( i = 0 ; i < len1 ; i ++ ) { if ( s [ i ] == a [ 0 ] && ( s [ i - 1 ] == ' ' || i == 0 ) ) { d = 0 ; for ( j = 1 ; j < len2 ; j ++ ) { if ( s [ j + i ] == a [ j ] ) d += 1 ; } if ( d == len2 - 1 ) { e += 1 ; s [ i ] = '\0' ; f = 0 ; for ( k = 0 ; k < i ; k ++ ) { if ( s [ k ] == '\0' ) f += 1 ; if ( f == e - 1 ) { if ( k == 0 ) { for ( l = k ; l < i ; l ++ ) printf ( "%c" , s [ l ] ) ; break ; } else { for ( l = k + len2 ; l < i ; l ++ ) printf ( "%c" , s [ l ] ) ; break ; } } } printf ( "%s" , b ) ; } } } if ( e != 0 ) { for ( i = 0 ; i < len1 ; i ++ ) { if ( s [ i ] == '\0' ) c += 1 ; if ( c == e ) { for ( j = i + len2 ; j < len1 ; j ++ ) printf ( "%c" , s [ j ] ) ; break ; } } } else puts ( s ) ; return 0 ; }
int main ( ) { char zfc [ 10000 ] , a [ 100 ] , b [ 100 ] ; int i , lone , ltwo , lthree , k , shuzu [ 10000 ] = { 0 } , p = 0 , count [ 10000 ] ; gets ( zfc ) ; gets ( a ) ; gets ( b ) ; lone = strlen ( zfc ) ; ltwo = strlen ( a ) ; lthree = strlen ( b ) ; for ( i = 0 ; i < lone - ltwo + 1 ; i ++ ) { if ( i == 0 ) { for ( k = 0 ; k < ltwo ; k ++ ) { if ( zfc [ k ] == a [ k ] ) { count [ i ] += 1 ; } } if ( count [ i ] == ltwo && zfc [ ltwo ] == ' ' ) { shuzu [ i ] = 1 ; } } else if ( i > 0 && i < lone - ltwo ) { for ( k = 0 ; k < ltwo ; k ++ ) { if ( zfc [ k + i ] == a [ k ] ) { count [ i ] += 1 ; } } if ( count [ i ] == ltwo && zfc [ i + ltwo ] == ' ' && zfc [ i - 1 ] == ' ' ) { shuzu [ i ] = 1 ; } } else { for ( k = 0 ; k < ltwo ; k ++ ) { if ( zfc [ k + i ] == a [ k ] ) { count [ i ] += 1 ; } } if ( count [ i ] == ltwo && zfc [ i - 1 ] == ' ' ) { shuzu [ i ] = 1 ; } } } while ( p < lone ) { if ( shuzu [ p ] == 0 ) { printf ( "%c" , zfc [ p ] ) ; } else { printf ( "%s" , b ) ; p = p + ltwo - 1 ; } p ++ ; } return 0 ; }
int main ( ) { char zfc [ 100 ] [ 100 ] , bth [ 100 ] , th [ 100 ] , s [ 100 ] ; int i , e , j = 0 , t = 0 , p ; gets ( s ) ; gets ( bth ) ; gets ( th ) ; e = strlen ( s ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( p = 0 ; p < 100 ; p ++ ) { zfc [ i ] [ p ] = 0 ; } } for ( i = 0 ; i < e ; i ++ ) { if ( s [ i ] != ' ' ) { zfc [ j ] [ t ] = s [ i ] ; t ++ ; } else { j ++ ; t = 0 ; } } for ( i = 0 ; i < j ; i ++ ) { if ( strcmp ( zfc [ i ] , bth ) == 0 ) { printf ( "%s " , th ) ; } else { printf ( "%s " , zfc [ i ] ) ; } } if ( strcmp ( zfc [ j ] , bth ) == 0 ) { printf ( "%s" , th ) ; } else { printf ( "%s" , zfc [ j ] ) ; } return 0 ; }
int main ( ) { char s1 [ 100 ] = { '\0' } , s2 [ 100 ] = { '\0' } , a [ 100 ] = { '\0' } , b [ 100 ] = { '\0' } ; gets ( s1 ) ; gets ( a ) ; gets ( b ) ; int i , j , k , t = 0 , lena = strlen ( a ) , lenb = strlen ( b ) , n = strlen ( s1 ) ; for ( i = 0 ; i < n - lena + 1 ; i ++ ) { if ( i > 0 && s1 [ i - 1 ] != ' ' ) { s2 [ t ] = s1 [ i ] ; t += 1 ; continue ; } for ( j = 0 ; j < lena ; j ++ ) { if ( s1 [ i + j ] != a [ j ] ) break ; } if ( i + j == n || j == lena && s1 [ i + j ] == ' ' ) { for ( k = 0 ; k < lenb ; k ++ ) s2 [ t + k ] = b [ k ] ; t += lenb ; i += lena - 1 ; } else { s2 [ t ] = s1 [ i ] ; t += 1 ; } } if ( i == n - lena + 1 ) { for ( k = 0 ; k < lena - 1 ; k ++ ) s2 [ t + k ] = s1 [ i + k ] ; } puts ( s2 ) ; return 0 ; }
int main ( ) { char a [ 11 ] , b [ 101 ] , z [ 11 ] , s [ 16 ] [ 11 ] ; gets ( b ) ; gets ( a ) ; gets ( z ) ; int i , j , m , n , l , q [ 22 ] ; for ( i = 0 , m = 0 , n = 0 ; b [ i ] != '\0' ; i ++ ) { if ( b [ i ] != ' ' ) { s [ m ] [ n ] = b [ i ] ; n ++ ; } else { q [ m ] = n ; n = 0 ; m ++ ; } } q [ m ] = n ; for ( i = 0 , j = 0 ; i <= m ; i ++ ) { if ( a [ 0 ] == s [ i ] [ 0 ] ) { l = 1 ; for ( j = 0 ; j < q [ i ] ; j ++ ) { if ( a [ j ] != s [ i ] [ j ] ) { l = 0 ; } if ( q [ i ] != strlen ( a ) ) { l = 0 ; } } if ( l ) { for ( j = 0 ; z [ j ] != '\0' ; j ++ ) { s [ i ] [ j ] = z [ j ] ; } q [ i ] = j ; } } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < q [ i ] ; j ++ ) { printf ( "%c" , s [ i ] [ j ] ) ; } printf ( " " ) ; } for ( j = 0 ; j < q [ m ] ; j ++ ) { printf ( "%c\0" , s [ i ] [ j ] ) ; } return 0 ; }
int main ( ) { int same , i , j , k ; char str [ 100 ] , sub [ 100 ] , repl [ 100 ] ; gets ( str ) ; gets ( sub ) ; gets ( repl ) ; for ( i = 0 ; i < strlen ( str ) ; i ++ ) { same = 1 ; for ( j = 0 ; j < strlen ( sub ) ; j ++ ) { if ( str [ i + j ] != sub [ j ] ) same = 0 ; } if ( ( same == 1 && str [ i - 1 ] == ' ' ) || ( same == 1 && i == 0 ) ) { printf ( "%s" , repl ) ; i += strlen ( sub ) - 1 ; } else printf ( "%c" , str [ i ] ) ; } return 0 ; }
int main ( ) { int j = 0 , i , l , ls ; char s [ 105 ] , str [ 105 ] , a [ 105 ] , x [ 105 ] , s1 [ 105 ] = { ' ' , '\0' } , s2 [ 2 ] = { ' ' , '\0' } ; gets ( s ) ; gets ( str ) ; gets ( a ) ; strcat ( s , s2 ) ; strcat ( s1 , s ) ; strcpy ( s , s1 ) ; l = strlen ( str ) ; ls = strlen ( a ) ; strcpy ( x , s ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] == str [ j ] ) { j ++ ; } else { j = 0 ; } if ( l == j && s [ i - j ] == ' ' && s [ i + 1 ] == ' ' ) { if ( i - j != - 1 ) { x [ i - j + 1 ] = '\0' ; strcat ( x , a ) ; } else { strcpy ( x , a ) ; } strcat ( x , s + i + 1 ) ; i = i + ls - l ; j = 0 ; strcpy ( s , x ) ; } } for ( i = 0 ; x [ i + 2 ] != '\0' ; i ++ ) { x [ i ] = x [ i + 1 ] ; } x [ i ] = '\0' ; printf ( "%s" , x ) ; return 0 ; }
int main ( ) { char s [ 100 ] = { '\0' } , h [ 50 ] [ 50 ] = { '\0' } , d [ 10 ] = { '\0' } , w [ 10 ] ; int i , j = 0 , k = 0 , t = 0 ; gets ( s ) ; gets ( w ) ; gets ( d ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { h [ k ] [ j ] = s [ i ] ; j ++ ; if ( ( s [ i + 1 ] == ' ' ) || ( s [ i + 1 ] == '\0' ) ) { h [ k ] [ j ] = '\0' ; k ++ ; j = 0 ; i ++ ; } } for ( i = 0 ; i < k ; i ++ ) { t = 0 ; for ( j = 0 ; h [ i ] [ j ] != '\0' ; j ++ ) { if ( strcmp ( h [ i ] , w ) == 0 ) { if ( h [ i ] [ j ] == w [ j ] ) { t = 1 ; } } } if ( t == 1 ) { strcpy ( h [ i ] , d ) ; } } for ( i = 0 ; i < k - 1 ; i ++ ) { for ( j = 0 ; h [ i ] [ j ] != '\0' ; j ++ ) { printf ( "%c" , h [ i ] [ j ] ) ; } printf ( " " ) ; } for ( j = 0 ; h [ k - 1 ] [ j ] != '\0' ; j ++ ) { printf ( "%c" , h [ k - 1 ] [ j ] ) ; } }
int main ( ) { char zfc [ 101 ] , sor [ 101 ] , rep [ 101 ] ; int dec , i , j ; gets ( zfc ) ; scanf ( "%s" , sor ) ; scanf ( "%s" , rep ) ; int n = strlen ( zfc ) ; int k = strlen ( sor ) ; for ( i = 0 ; i < n ; i ++ ) { dec = 0 ; for ( j = i ; j <= i + k - 1 ; j ++ ) { if ( zfc [ j ] != sor [ j - i ] ) { dec = 1 ; break ; } } if ( ( ( i == 0 ) && ( dec == 0 ) ) || ( ( dec == 0 ) && ( zfc [ i - 1 ] == ' ' || zfc [ i - 1 ] == ',' || zfc [ i - 1 ] == '.' ) ) ) { printf ( "%s" , rep ) ; i = i + k - 1 ; } else { printf ( "%c" , zfc [ i ] ) ; continue ; } } return 0 ; }
int main ( ) { char words [ 110 ] , zfcsz [ 110 ] [ 110 ] ; char a [ 110 ] , b [ 110 ] ; int i , n , k , j ; gets ( words ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; n = strlen ( words ) ; k = 0 ; j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( words [ i ] != ' ' ) { zfcsz [ k ] [ j ] = words [ i ] ; j ++ ; if ( i == n - 1 ) { k ++ ; zfcsz [ k ] [ j ] = '\0' ; } } else { zfcsz [ k ] [ j ] = '\0' ; k ++ ; j = 0 ; } } for ( i = 0 ; i < k - 1 ; i ++ ) { if ( strcmp ( zfcsz [ i ] , a ) == 0 ) { printf ( "%s " , b ) ; } else { printf ( "%s " , zfcsz [ i ] ) ; } } if ( strcmp ( zfcsz [ k - 1 ] , a ) == 0 ) { printf ( "%s" , b ) ; } else { printf ( "%s" , zfcsz [ i ] ) ; } return 0 ; }
int main ( ) { char s [ 100 ] ; char s1 [ 100 ] ; char s2 [ 100 ] ; gets ( s ) ; gets ( s1 ) ; gets ( s2 ) ; char * p2 = s ; while ( * p2 != '\0' ) { int i = 0 ; char temp [ 100 ] ; for ( i = 0 ; i <= 99 ; i ++ ) { temp [ i ] = '\0' ; } i = 0 ; do { temp [ i ] = * p2 ; p2 ++ ; i ++ ; } while ( * p2 != ' ' && * p2 != '\0' ) ; if ( strcmp ( s1 , temp ) == 0 ) printf ( "%s" , s2 ) ; else printf ( "%s" , temp ) ; if ( * p2 == ' ' ) { p2 ++ ; printf ( " " ) ; } } return 0 ; }
void main ( ) { int i , j , k , tag = 1 , flag = 1 , e = 0 ; char q [ 101 ] , tmp [ 50 ] [ 101 ] , p [ 101 ] , t [ 101 ] ; gets ( q ) ; gets ( p ) ; gets ( t ) ; for ( i = 0 ; i < 50 ; i ++ ) { k = 0 ; flag = 1 ; for ( j = e ; j < 101 ; j ++ ) { if ( q [ j ] != ' ' && q [ j ] != ',' && q [ j ] != '\0' ) { tmp [ i ] [ k ] = q [ j ] ; k ++ ; } else if ( q [ j ] == ' ' ) { tmp [ i ] [ k ] = '\0' ; e = j + 1 ; break ; } else if ( q [ j ] == ',' ) { tmp [ i ] [ k ] = '\0' ; e = j + 2 ; break ; } else if ( q [ j ] == '\0' ) { tmp [ i ] [ k ] = '\0' ; tag = 0 ; break ; } } for ( j = 0 ; j < 101 ; j ++ ) { if ( tmp [ i ] [ j ] != p [ j ] && p [ j ] != '\0' ) { flag = 0 ; break ; } else if ( tmp [ i ] [ j ] == p [ j ] && p [ j ] != '\0' ) continue ; else if ( p [ j ] == '\0' ) break ; } if ( tag == 1 && flag == 0 && i > 0 ) printf ( " %s" , tmp [ i ] ) ; else if ( tag == 1 && flag == 1 && i > 0 ) printf ( " %s" , t ) ; else if ( tag == 0 && flag == 0 && i > 0 ) { printf ( " %s" , tmp [ i ] ) ; break ; } else if ( tag == 0 && flag == 1 && i > 0 ) { printf ( " %s" , t ) ; break ; } else if ( tag == 1 && flag == 0 && i == 0 ) printf ( "%s" , tmp [ i ] ) ; else if ( tag == 1 && flag == 1 && i == 0 ) printf ( "%s" , t ) ; else if ( tag == 0 && flag == 0 && i == 0 ) { printf ( "%s" , tmp [ i ] ) ; break ; } else if ( tag == 0 && flag == 1 && i == 0 ) { printf ( "%s" , t ) ; break ; } } }
int main ( ) { char * p1 , * p2 ; int i , j , n , m , w ; char r [ 200 ] , s [ 200 ] , t [ 200 ] ; gets ( r ) ; gets ( s ) ; gets ( t ) ; p1 = r ; p2 = s ; n = strlen ( s ) ; for ( i = 0 ; * ( p1 + i ) != '\0' ; ) { if ( * ( p1 + i ) != * p2 ) { printf ( "%c" , * ( p1 + i ) ) ; i ++ ; } else { for ( j = 1 , w = 1 ; j < n ; j ++ ) { if ( * ( p1 + i + j ) != * ( p2 + j ) ) { for ( m = 0 ; m < j ; m ++ ) printf ( "%c" , * ( p1 + i + m ) ) ; break ; } w ++ ; } if ( w == n ) { if ( ( ( * ( p1 + i + n ) == ' ' || * ( p1 + i + n ) == '\0' ) && * ( p1 + i - 1 ) == ' ' ) || ( ( i == 0 ) && * ( p1 + n ) == ' ' ) ) printf ( "%s" , t ) ; else printf ( "%s" , s ) ; i = i + n ; } else i = i + j ; } } return 0 ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , d [ 100 ] , b [ 100 ] [ 50 ] ; int i , j = 0 , k = 0 , n , m , l ; gets ( s ) ; scanf ( "%s" , a ) ; scanf ( "%s" , d ) ; n = strlen ( s ) ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] != ' ' ) { b [ j ] [ k ] = s [ i ] ; k ++ ; } else { b [ j ] [ k ] = '\0' ; j ++ ; k = 0 ; } } b [ j ] [ k ] = '\0' ; for ( m = 0 ; m < j + 1 ; m ++ ) { l = strcmp ( a , b [ m ] ) ; if ( l == 0 ) strcpy ( b [ m ] , d ) ; if ( m == 0 ) printf ( "%s" , b [ m ] ) ; else printf ( " %s" , b [ m ] ) ; } return 0 ; }
int main ( ) { char zfc [ 100 ] ; gets ( zfc ) ; char b [ 100 ] [ 100 ] ; int l = strlen ( zfc ) ; int n = 0 , k = 0 , i ; for ( i = 0 ; i < l ; i ++ ) { if ( zfc [ i ] != ' ' && zfc [ i ] != ',' ) { b [ n ] [ k ] = zfc [ i ] ; k ++ ; } else { b [ n ] [ k ] = '\0' ; n ++ ; k = 0 ; } } b [ n ] [ k ] = '\0' ; char h [ 100 ] , f [ 100 ] ; gets ( h ) ; gets ( f ) ; int j ; for ( j = 0 ; j < n ; j ++ ) { if ( strcmp ( b [ j ] , h ) == 0 ) { strcpy ( b [ j ] , f ) ; printf ( "%s " , b [ j ] ) ; } else { printf ( "%s " , b [ j ] ) ; } } if ( strcmp ( b [ n ] , h ) != 0 ) printf ( "%s" , b [ n ] ) ; if ( strcmp ( b [ n ] , h ) == 0 ) printf ( "%s" , f ) ; return 0 ; }
void main ( ) { char a [ 100 ] [ 20 ] , m , b [ 20 ] , c [ 20 ] ; int i , j ; for ( i = 0 ; ; i ++ ) { scanf ( "%s" , a [ i ] ) ; if ( getchar ( ) == '\n' ) break ; } gets ( b ) ; gets ( c ) ; for ( j = 0 ; j <= i ; j ++ ) { if ( strcmp ( a [ j ] , b ) == 0 ) { strcpy ( a [ j ] , c ) ; } } for ( j = 0 ; j < i ; j ++ ) printf ( "%s " , a [ j ] ) ; printf ( "%s" , a [ i ] ) ; }
int main ( ) { char s [ 101 ] , str [ 200 ] [ 20 ] , rep [ 20 ] , sub [ 20 ] ; int i , sum = 0 , a = 0 , b = 0 , max = 0 , min = 0 ; gets ( s ) ; gets ( sub ) ; gets ( rep ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] == ' ' ) { str [ a ] [ b ] = '\0' ; a ++ ; b = 0 ; sum ++ ; } else { str [ a ] [ b ] = s [ i ] ; b ++ ; } } str [ a ] [ b ] = '\0' ; for ( a = 0 ; a <= sum ; a ++ ) { if ( strcmp ( str [ a ] , sub ) == 0 ) { strcpy ( str [ a ] , rep ) ; } else { continue ; } } for ( a = 0 ; a < sum ; a ++ ) { printf ( "%s " , str [ a ] ) ; } printf ( "%s" , str [ sum ] ) ; return 0 ; }
int main ( ) { char s [ 1000 ] , a [ 1000 ] , b [ 1000 ] , c [ 1000 ] [ 1000 ] = { 0 } ; int i , j , k = 0 , e , d , h , n = 0 , d1 ; gets ( s ) ; gets ( a ) ; gets ( b ) ; d = strlen ( s ) ; for ( i = k ; i < d ; i ++ ) { h = 0 ; if ( s [ i ] != ' ' && ( s [ i + 1 ] == ' ' || s [ i + 1 ] == '\0' ) ) { for ( j = k ; j <= i ; j ++ ) { c [ n ] [ h ++ ] = s [ j ] ; } c [ n ] [ h ] = '\0' ; n += 1 ; k = i + 2 ; } } e = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( a , c [ i ] ) == 0 ) { strcpy ( c [ i ] , b ) ; e = 1 ; } } if ( e == 0 ) { printf ( "%s\n" , s ) ; } else { for ( i = 0 ; i < n - 1 ; i ++ ) { d1 = strlen ( c [ i ] ) ; for ( j = 0 ; j < d1 ; j ++ ) { printf ( "%c" , c [ i ] [ j ] ) ; } printf ( "%c" , ' ' ) ; } printf ( "%s\n" , c [ n - 1 ] ) ; } return 0 ; }
void main ( ) { int n , a [ 100 ] , i ; void fen ( int a [ ] , int x ) ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } fen ( a , n ) ; } void fen ( int a [ ] , int x ) { int k , b = 2 , c , t ; int look ( int x , int y ) ; for ( k = 0 ; k < x ; k ++ ) { c = a [ k ] ; t = look ( c , b ) ; printf ( "%d\n" , t ) ; } } int look ( int x , int y ) { int total = 1 , p ; if ( x / y == 0 ) { return 0 ; } else { for ( p = y ; p < x ; p ++ ) { if ( x % p == 0 ) { total = total + look ( x / p , p ) ; } } } return total ; }
int de ( int s , int a ) { int sum = 0 ; if ( a == 1 ) return 1 ; else if ( s > a ) return 0 ; for ( int i = s ; i <= a ; i ++ ) if ( a % i == 0 ) sum = sum + de ( i , a / i ) ; return sum ; } int main ( ) { int n ; cin >> n ; while ( n > 0 ) { int a ; cin >> a ; cout << de ( 2 , a ) << endl ; n -- ; } return 0 ; }
int f ( int min , int a ) { if ( min > a ) return 0 ; int i ; int num = 1 ; for ( i = min ; i <= sqrt ( a ) ; i ++ ) { if ( a % i == 0 ) { num = num + f ( i , a / i ) ; } } return num ; } int main ( ) { int m , a , j ; cin >> m ; for ( j = 0 ; j < m ; j ++ ) { cin >> a ; cout << f ( 2 , a ) << endl ; } return 0 ; }
int num = 0 ; int solution ( int a , int b ) { for ( int i = b ; i <= a ; i ++ ) { if ( a % i == 0 ) { a = a / i ; if ( a == 1 ) num ++ ; else num = solution ( a , i ) ; a = a * i ; } } return num ; } int main ( ) { int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { int a ; cin >> a ; num = 0 ; cout << solution ( a , 2 ) << endl ; } return 0 ; }
int sum = 0 ; int main ( ) { void yinshu ( int , int ) ; int i , n , a ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { sum = 0 ; cin >> a ; yinshu ( a , 2 ) ; cout << sum << endl ; } return 0 ; } void yinshu ( int a , int x ) { if ( a != 1 ) { for ( int i = x ; i <= a ; i ++ ) if ( a % i == 0 ) yinshu ( a / i , i ) ; } if ( a == 1 ) sum ++ ; }
int sum ( int ) ; int g_count , g_j ; int main ( ) { int n , a , i ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { g_count = 0 ; g_j = 2 ; cin >> a ; cout << sum ( a ) + 1 << endl ; } return 0 ; } int sum ( int a ) { int i , b ; b = ( int ) sqrt ( ( double ) a ) ; for ( i = g_j ; i <= b ; i ++ ) { if ( a % i == 0 ) { g_j = i ; g_count ++ ; sum ( a / i ) ; } } return g_count ; }
int f ( int m , int n ) { int i , sum = 0 ; if ( n == 1 ) return 1 ; for ( sum = 0 , i = m ; i <= n ; i ++ ) if ( n % i == 0 ) sum += f ( i , n / i ) ; return sum ; } int main ( ) { int i , n , k ; for ( i = 0 , cin >> n ; i < n ; i ++ ) { cin >> k ; cout << f ( 2 , k ) << endl ; } return 0 ; }
int fj ( int a , int b ) ; int main ( ) { int n , i , a ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> a ; cout << fj ( a , 2 ) << endl ; } return 0 ; } int fj ( int a , int b ) { int j , x , sum = 1 , f = 0 ; x = sqrt ( ( double ) a ) ; if ( ( a == 1 ) || ( a == 2 ) || ( a == 3 ) ) return 1 ; else { for ( j = b ; j <= x ; j ++ ) { if ( a % j == 0 ) { sum += fj ( a / j , j ) ; f = 1 ; } } if ( f == 0 ) return 1 ; else return sum ; } }
int cal ( int M , int N ) { int i ; int num = 0 ; if ( M == 1 ) return 0 ; if ( N >= M ) return ( 1 + cal ( M , M - 1 ) ) ; for ( i = 2 ; i < M ; i ++ ) { if ( M % i == 0 && i <= N ) num = num + cal ( M / i , i ) ; } return num ; } int main ( ) { int n , M ; cin >> n ; while ( n -- ) { cin >> M ; cout << cal ( M , M ) << endl ; } return 0 ; }
int min ( int a , int b ) { if ( a > b ) return b ; else return a ; } int f ( int n , int s ) { int k = 0 , i ; if ( n == 1 ) return 1 ; else if ( s == 1 ) return 0 ; else if ( s > n ) return f ( n , n ) ; else { for ( i = 2 ; i <= s ; i ++ ) if ( n % i == 0 ) k = k + f ( n / i , min ( i , s ) ) ; return k ; } } int main ( ) { int n , m ; cin >> n ; while ( n > 0 ) { cin >> m ; cout << f ( m , m ) << endl ; n -- ; } return 0 ; }
int yinshu ( int n , int m ) { int i , sum = 0 ; if ( n == 1 ) return 1 ; for ( i = m ; i <= n ; i ++ ) { if ( n % i == 0 ) sum += yinshu ( n / i , i ) ; } return sum ; } int main ( ) { int n , i , m ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> m ; cout << yinshu ( m , 2 ) << endl ; } return 0 ; }
int fac ( int p , int q ) { int i , t = 1 ; if ( p > q ) { return 0 ; } if ( p == q ) { return 1 ; } for ( i = p ; i <= sqrt ( q ) ; i ++ ) { if ( q % i == 0 ) { t += fac ( i , q / i ) ; } } return t ; } int main ( ) { int a , i , n ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> a ; cout << fac ( 2 , a ) << endl ; } return 0 ; }
void main ( ) { int zy ( int a , int b ) ; int j , n , m , sum ; scanf ( "%d" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( "%d" , & m ) ; sum = zy ( 2 , m ) ; printf ( "%d\n" , sum ) ; } } int zy ( int a , int b ) { int i , c , t = 1 ; c = 0 ; for ( i = a ; i * i <= b ; i ++ ) { if ( b % i == 0 ) c = zy ( i , ( b / i ) ) + c ; } if ( i * i > b ) c = c + 1 ; return ( c ) ; }
int g ( int x , int j ) { for ( j ++ ; j <= x ; j ++ ) { if ( x == j ) return 1 ; if ( x % j == 0 && x / j >= j ) return g ( x / j , j - 1 ) + g ( x , j ) ; } return 0 ; } int main ( ) { int n , a ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a ; cout << g ( a , 1 ) << endl ; } return 0 ; }
int factorization ( int a , int k ) ; int main ( ) { int n , a ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a ; cout << factorization ( a , 2 ) << endl ; } return 0 ; } int factorization ( int a , int k ) { int sum = 1 ; if ( a == 1 ) { return 0 ; } if ( a == 2 ) { return 1 ; } int b = ( int ) sqrt ( ( double ) a ) ; for ( int i = k ; i <= b ; i ++ ) { if ( a % i == 0 ) { sum += factorization ( a / i , i ) ; } } return sum ; }
int fengjie ( int a , int b ) { if ( a == 2 || a == 3 ) return 1 ; int sum = 1 ; int c = sqrt ( a ) ; for ( int i = b ; i <= c ; i ++ ) { if ( a % i == 0 ) { sum = sum + fengjie ( a / i , i ) ; } } return sum ; } int main ( ) { int n , a ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a ; cout << fengjie ( a , 2 ) << endl ; } return 0 ; }
int divide ( int d , int n ) { int sum = 0 ; for ( int i = d ; i < n ; i ++ ) { if ( n % i == 0 && ( n / i ) >= i ) { sum = sum + 1 ; sum = sum + divide ( i , n / i ) ; } } return ( sum ) ; } int main ( ) { int n , num ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> num ; cout << divide ( 2 , num ) + 1 << endl ; } return 0 ; }
int part ( int x , int t ) { int i ; int number = 1 ; if ( x == 1 ) { return 0 ; } if ( x == 2 ) { return 1 ; } for ( i = t ; i <= sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { number += part ( x / i , i ) ; } } return number ; } int main ( ) { int i , n , a ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a ; cout << part ( a , 2 ) << endl ; } return 0 ; }
int tmp = 2 ; int suml ( int n , int tmp ) { int sum = 0 ; if ( n == 1 ) { return 1 ; } for ( int i = tmp ; i <= n ; i ++ ) { if ( n % i == 0 ) { sum += suml ( n / i , i ) ; } } return sum ; } int main ( ) { int m ; cin >> m ; int n ; for ( int i = 0 ; i < m ; i ++ ) { cin >> n ; int zon_shu = 0 ; zon_shu = suml ( n , tmp ) ; cout << zon_shu << endl ; } }
int main ( ) { int n , t ; cin >> n ; for ( t = 0 ; t < n ; t ++ ) { int m ; cin >> m ; int f ( int a , int min ) ; cout << f ( m , 2 ) << endl ; } return 0 ; } int f ( int a , int min ) { int i = min ; if ( a < min ) { return 0 ; } int result = 1 ; while ( i < a ) { if ( a % i == 0 ) { result += f ( a / i , i ) ; } i ++ ; } return result ; }
int function ( int a , int m ) { int sum = 1 , i ; if ( a > m ) return 0 ; else { for ( i = a ; i < m ; i ++ ) { if ( m % i == 0 ) sum = sum + function ( i , m / i ) ; else continue ; } return sum ; } } void main ( ) { int n , i , m [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & m [ i ] ) ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { printf ( "%d\n" , function ( 2 , m [ i ] ) ) ; } }
int main ( ) { int brea ( int a , int min ) ; int i , n , a ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a ) ; printf ( "%d\n" , brea ( a , 2 ) ) ; } } int brea ( int a , int min ) { int result = 1 ; int i ; if ( a < min ) return ( 0 ) ; else if ( a == min ) return ( 1 ) ; else { for ( i = min ; i < a ; i ++ ) { if ( a % i == 0 ) { result = result + brea ( a / i , i ) ; } } return ( result ) ; } }
int sum ; void calculate ( int , int ) ; int main ( ) { int n ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { int m ; sum = 1 ; cin >> m ; calculate ( m , 2 ) ; cout << sum << endl ; } return 0 ; } void calculate ( int m , int begin ) { int i ; int n = sqrt ( ( double ) m ) ; for ( i = begin ; i <= n ; i ++ ) { if ( m % i == 0 ) { sum ++ ; calculate ( m / i , i ) ; } } }
int main ( ) { int factor ( int n , int x ) ; int n ; int i , m ; int a [ 100 ] ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & n ) ; a [ i ] = factor ( n , 2 ) ; } for ( i = 0 ; i < m ; i ++ ) printf ( "%d\n" , a [ i ] ) ; return 0 ; } int factor ( int n , int x ) { int i , f = 0 ; if ( n == 1 ) f = 1 ; else for ( i = x ; i <= n ; i ++ ) if ( n % i == 0 ) f += factor ( n / i , i ) ; return f ; }
int fenjie ( int x , int b ) { int i , z = 0 , c ; for ( i = b ; i <= x ; i ++ ) { if ( x == i ) z = z + 1 ; else if ( x % i == 0 ) { c = x / i ; z = z + fenjie ( c , i ) ; } } return ( z ) ; } void main ( ) { int n , i , num , a ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a ) ; num = fenjie ( a , 2 ) ; printf ( "%d\n" , num ) ; } }
int decompose ( int x , int y ) ; int main ( ) { int n , m ; cin >> n ; for ( int j = 1 ; j <= n ; j ++ ) { cin >> m ; cout << decompose ( m , 2 ) << endl ; } return 0 ; } int decompose ( int x , int y ) { int sum = 1 , b ; b = ( int ) sqrt ( x ) ; if ( x == 1 ) return 0 ; for ( int i = y ; i <= b ; i ++ ) { if ( x % i == 0 ) { sum = sum + decompose ( x / i , i ) ; } } return sum ; }
int f ( int a , int c ) ; int j , b ; int main ( ) { int i , n , m ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & m ) ; printf ( "%d\n" , f ( m , 2 ) ) ; } return 0 ; } int f ( int a , int c ) { int j , b = 0 ; for ( j = c ; j <= sqrt ( a ) ; j ++ ) { if ( a % j == 0 ) { b = b + f ( a / j , j ) ; } } return b + 1 ; }
int f ( int n , int m ) { int sum = 1 , i ; if ( n < m ) sum = 0 ; else if ( n == m ) sum = 1 ; else { for ( i = m ; i <= n ; i ++ ) if ( n % i == 0 ) sum = sum + f ( n / i , i ) ; } return ( sum ) ; } void main ( ) { int x , j , a [ 100000 ] ; scanf ( "%d" , & x ) ; for ( j = 0 ; j < x ; j ++ ) scanf ( "%d" , & a [ j ] ) ; for ( j = 0 ; j < x ; j ++ ) printf ( "%d\n" , f ( a [ j ] , 2 ) ) ; }
int l = 0 , num = 0 , o ; void f ( int i , int in ) { int j ; for ( j = i ; j < ( in + 1 ) ; j ++ ) { if ( j * ( in / j ) == in ) { o = in / j ; f ( j , in / j ) ; o = o * j ; } } if ( o == 1 ) { num = num + 1 ; } } int main ( ) { int t ; cin >> t ; int i ; int in ; for ( i = 0 ; i < t ; i ++ ) { cin >> in ; f ( 2 , in ) ; cout << num << endl ; num = 0 ; } return 0 ; }
int num ; void divide ( int n , int n2 ) { int i , m1 ; m1 = ( int ) sqrt ( ( double ) n ) ; for ( i = n2 ; i <= m1 ; i ++ ) { if ( n % i == 0 ) { num ++ ; divide ( n / i , i ) ; } } } int main ( ) { int n , i , m ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { num = 1 ; cin >> m ; divide ( m , 2 ) ; cout << num << endl ; } return 0 ; }
int temp = 2 , sum = 0 ; void dg ( int x ) { for ( int i = temp ; i <= x ; i ++ ) { if ( x % i == 0 ) { temp = i ; if ( x / i == 1 ) { sum ++ ; temp = 2 ; } else dg ( x / i ) ; } } } int main ( ) { int n ; cin >> n ; int x ; for ( int i = 0 ; i < n ; i ++ ) { cin >> x ; dg ( x ) ; cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int f ( int , int ) ; int n , a ; cin >> n ; while ( n -- ) { cin >> a ; cout << f ( a , a ) << endl ; } return 0 ; } int f ( int m , int k ) { int i , sum = 0 ; if ( m == 1 ) sum = 1 ; for ( i = m ; i > 1 ; i -- ) { if ( m % i == 0 && i <= k ) sum += f ( m / i , i ) ; } return sum ; }
int sum = 0 ; int f ( int a , int b ) { for ( int i = a ; i > 1 ; i -- ) { if ( a % i != 0 ) { continue ; } else { if ( i > b ) { continue ; } else { int q ; q = a / i ; if ( q == 1 ) { sum ++ ; } else { f ( q , i ) ; } } } } return sum ; } int main ( ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { int num ; cin >> num ; int c ; c = f ( num , num ) ; cout << c << endl ; sum = 0 ; } return 0 ; }
int f ( int x , int k ) ; int main ( ) { int i = 1 , n , m ; int result ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & m ) ; result = f ( m , 2 ) ; printf ( "%d\n" , result ) ; } return 0 ; } int f ( int x , int k ) { int a = 0 ; int i ; if ( x == 1 ) return 1 ; for ( i = k ; i <= x ; i ++ ) { if ( x % i == 0 ) a = a + f ( x / i , i ) ; } return a ; }
int f ( int c , int t ) ; void main ( ) { int n , c ; scanf ( "%d" , & n ) ; for ( ; n > 0 ; n -- ) { scanf ( "%d" , & c ) ; if ( c == 1 || c == 2 ) printf ( "1\n" ) ; else printf ( "%d\n" , f ( c , 2 ) ) ; } } int f ( int c , int t ) { int count = 1 , i ; for ( i = t ; i < c ; i ++ ) { if ( c % i == 0 ) count += f ( c / i , i ) ; } if ( i == c ) return count ; else return 0 ; }
int main ( ) { int f ( int a , int b ) ; int n , m , i , d ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m ) ; d = f ( m , 2 ) ; printf ( "%d\n" , d ) ; } return 0 ; } int f ( int a , int b ) { int t = 1 , k , j ; for ( j = b ; j < a ; j ++ ) { if ( a % j == 0 && a / j >= j ) k = f ( a / j , j ) ; else k = 0 ; t = t + k ; } return t ; }
int f ( int m , int min ) ; int main ( ) { int n , m , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m ) ; printf ( "%d\n" , f ( m , 2 ) ) ; } return 0 ; } int f ( int m , int min ) { int count = 1 , i ; if ( m == 1 ) return 1 ; else if ( m == 2 ) return 1 ; else { for ( i = min ; i <= sqrt ( m ) ; i ++ ) { if ( m % i == 0 ) { count += f ( m / i , i ) ; } } return count ; } }
int f ( int a , int min ) { if ( a < min ) return 0 ; int sum = 1 ; for ( int i = min ; i < a ; i ++ ) { if ( a % i == 0 ) sum += f ( a / i , i ) ; } return sum ; } int main ( ) { int n ; int a [ 100 ] ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; a [ i ] = f ( a [ i ] , 2 ) ; } for ( int i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , a [ i ] ) ; } return 0 ; }
int fib ( int a , int e ) ; int main ( ) { int n , b , i ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & b ) ; printf ( "%d\n" , fib ( b , 2 ) ) ; } scanf ( "%d" , & n ) ; return 0 ; } int fib ( int a , int e ) { int j , c , d ; c = 1 ; if ( a <= e ) return 1 ; for ( j = e ; j <= sqrt ( a ) ; j ++ ) { if ( a % j == 0 ) { d = a / j ; c = c + fib ( d , j ) ; } } return c ; }
int cal ( int y , int x ) { int i , sum ; if ( x == 1 ) return 1 ; else { sum = 0 ; for ( i = y ; i <= x ; i ++ ) { if ( ( x % i == 0 ) && ( ( x / i == 1 ) || ( x / i > y ) ) ) sum += cal ( i , x / i ) ; } return sum ; } } int main ( ) { int n , i , l ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & l ) ; printf ( "%d" , cal ( 2 , l ) ) ; if ( i != n ) printf ( "\n" ) ; } return 0 ; }
int factor ( int N , int min ) { int result = 1 , i ; if ( N < min ) return 0 ; for ( i = min ; i < N ; i ++ ) { if ( N % i == 0 ) { result += factor ( N / i , i ) ; } } return result ; } int main ( ) { int n , m , j , re ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & m ) ; re = factor ( m , 2 ) ; printf ( "%d\n" , re ) ; } scanf ( "%d" , & n ) ; return 0 ; }
int factor ( int N , int min ) { int result = 1 , i ; if ( N < min ) { return 0 ; } for ( i = min ; i < N ; i ++ ) { if ( N % i == 0 ) { result += factor ( N / i , i ) ; } } return result ; } main ( ) { int n = 0 , i = 0 , x = 0 , y = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & x ) ; y = factor ( x , 2 ) ; printf ( "%d\n" , y ) ; } return 0 ; }
int f ( int n , int min ) { int i , result = 1 ; if ( min > n ) return 0 ; for ( i = min ; i < n ; i ++ ) { if ( n % i == 0 ) { result += f ( n / i , i ) ; } } return result ; } int main ( ) { int n , a , i , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a ) ; t = f ( a , 2 ) ; if ( i < n - 1 ) printf ( "%d\n" , t ) ; else printf ( "%d" , t ) ; } return 0 ; }
int p = 0 , q = 2 ; int jizu ( int x ) { for ( int i = q ; i <= x - 1 ; i ++ ) { if ( ( x % i == 0 ) && ( x / i > i ) ) { p ++ ; q = i ; jizu ( x / i ) ; } else if ( ( x % i == 0 ) && ( x / i == i ) ) { p ++ ; } } return p ; } int main ( ) { int n ; scanf ( "%d" , & n ) ; int a [ 100 ] ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( int i = 0 ; i <= n - 1 ; i ++ ) { printf ( "%d\n" , jizu ( a [ i ] ) + 1 ) ; p = 0 , q = 2 ; } int y ; scanf ( "%d" , & y ) ; }
int num ( int b , int min ) ; int x = 1 , m ; int main ( ) { int a , n , b ; scanf ( "%d" , & n ) ; for ( a = 0 ; a <= n - 1 ; a ++ ) { scanf ( "%d" , & b ) ; m = b ; b = num ( b , 2 ) ; printf ( "%d\n" , b ) ; x = 1 ; } return 0 ; } int num ( int b , int min ) { int a , c ; for ( a = min ; a < b ; a ++ ) { if ( ( b % a == 0 ) && ( b / a >= a ) ) { if ( num ( b / a , a ) == 1 ) { x ++ ; } } if ( a == m - 1 ) return x ; } return 1 ; }
int sum [ 50 ] ; int i ; int main ( ) { void digui ( int x , int y ) ; int n ; int j [ 50 ] , m [ 50 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m [ i ] ) ; sum [ i ] = 0 ; for ( j [ i ] = 2 ; j [ i ] * j [ i ] <= m [ i ] ; j [ i ] ++ ) { if ( m [ i ] % j [ i ] == 0 ) { sum [ i ] ++ ; digui ( j [ i ] , m [ i ] / j [ i ] ) ; } } printf ( "%d\n" , sum [ i ] + 1 ) ; } return 0 ; } void digui ( int x , int y ) { int s ; for ( s = x ; s * s <= y ; s ++ ) { if ( y % s == 0 ) { sum [ i ] ++ ; digui ( s , y / s ) ; } } }
int main ( ) { int n , i , a , factor ( int N , int min ) ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a ) ; printf ( "%d\n" , factor ( a , 2 ) ) ; } return 0 ; } int factor ( int N , int min ) { int i , result ; result = 1 ; if ( N < min ) { return 0 ; } for ( i = min ; i < N ; i ++ ) { if ( N % i == 0 ) { result += factor ( N / i , i ) ; } } return result ; }
int f ( int x , int y ) { int a , n = 1 ; for ( a = y ; a <= sqrt ( x ) ; a ++ ) { if ( x % a == 0 ) { n += f ( x / a , a ) ; } } return n ; } int main ( ) { int m , i ; scanf ( "%d" , & m ) ; int x [ m ] , n [ m ] ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & x [ i ] ) ; n [ i ] = f ( x [ i ] , 2 ) ; } for ( i = 0 ; i < m ; i ++ ) { printf ( "%d\n" , n [ i ] ) ; } return 0 ; }
int factor ( int a , int min ) { int i , result = 1 ; if ( a < min ) return 0 ; for ( i = min ; i < a ; i ++ ) { if ( a % i == 0 ) result += factor ( a / i , i ) ; } return result ; } int main ( ) { int n , i , a [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; a [ i ] = factor ( a [ i ] , 2 ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( "%d" , a [ i ] ) ; else printf ( "%d\n" , a [ i ] ) ; } return 0 ; }
int f ( int x , int y ) { int a , n = 0 ; for ( a = y ; a <= sqrt ( x ) ; a ++ ) { if ( x % a == 0 ) { n ++ ; n += f ( x / a , a ) ; } } return n ; } int main ( ) { int m , i ; scanf ( "%d" , & m ) ; int x [ m ] , n [ m ] ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & x [ i ] ) ; n [ i ] = 1 + f ( x [ i ] , 2 ) ; } for ( i = 0 ; i < m ; i ++ ) { printf ( "%d\n" , n [ i ] ) ; } return 0 ; }
int col ( int a , int b ) ; int main ( ) { int n , i , m , l ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & m ) ; l = col ( m , 2 ) + 1 ; printf ( "%d\n" , l ) ; } return 0 ; } int col ( int a , int b ) { int i , t , tt = 0 , sig = 0 ; for ( i = b ; ( i < a / 2 ) && ( ( a / i ) >= i ) ; i ++ ) { if ( a % i == 0 ) { t = a / i ; tt = tt + 1 + col ( t , i ) ; sig = 1 ; } } if ( sig == 0 ) tt = 0 ; return ( tt ) ; }
int factor ( int N , int min ) ; int main ( ) { int m , n , i , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m ) ; k = factor ( m , 2 ) ; printf ( "%d\n" , k ) ; } return 0 ; } int factor ( int N , int min ) { int result = 1 , i ; if ( N < min ) return 0 ; for ( i = min ; i < N ; i ++ ) { if ( N % i == 0 ) result += factor ( N / i , i ) ; } return result ; }
int minf ( int p , int min ) ; int main ( ) { int n , i , k , p , zs [ 20000 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & p ) ; zs [ i ] = minf ( p , 2 ) ; zs [ i ] ++ ; } for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "%d\n" , zs [ i ] ) ; } printf ( "%d" , zs [ n - 1 ] ) ; return 0 ; } int minf ( int p , int min ) { int x = 0 , i ; i = min ; for ( i ; i <= ( int ) sqrt ( p ) ; i ++ ) { if ( p % i == 0 ) { x += minf ( p / i , i ) + 1 ; } } return x ; }
int Digui ( int a , int min ) { int i , result = 1 ; if ( a < min ) { return 0 ; } for ( i = min ; i < a ; i ++ ) { if ( a % i == 0 ) { result += Digui ( a / i , i ) ; } } return ( result ) ; } int main ( ) { int a [ 1000 ] , n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , Digui ( a [ i ] , 2 ) ) ; } return 0 ; }
int factor ( int n , int min ) { int result = 1 , i ; if ( n < min ) { return 0 ; } for ( i = min ; i < n ; i ++ ) { if ( n % i == 0 ) { result += factor ( n / i , i ) ; } } return result ; } int main ( ) { int m , x , j , k ; scanf ( "%d" , & m ) ; for ( j = 1 ; j <= m ; j ++ ) { scanf ( "%d" , & x ) ; k = factor ( x , 2 ) ; printf ( "%d\n" , k ) ; } return 0 ; }
int fen ( int x , int y ) ; int main ( ) { int n , i , m [ 500 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m [ i ] ) ; printf ( "%d\n" , fen ( m [ i ] , 2 ) ) ; } return 0 ; } int fen ( int x , int y ) { int j , k ; int result = 1 ; if ( x < y ) return 0 ; for ( j = y ; j < x ; j ++ ) { if ( x % j == 0 ) result += fen ( x / j , j ) ; } return result ; }
int f ( int a , int x ) { int count = 1 , i ; for ( i = x ; i < a ; i ++ ) if ( a % i == 0 ) count += f ( a / i , i ) ; if ( i == a ) return count ; else return 0 ; } void main ( ) { int n , a ; scanf ( "%d" , & n ) ; for ( ; n > 0 ; n -- ) { scanf ( "%d" , & a ) ; if ( a == 1 || a == 2 ) printf ( "1\n" ) ; else printf ( "%d\n" , f ( a , 2 ) ) ; } }
int yinshu ( int num , int min ) ; int main ( ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int a , result ; scanf ( "%d" , & a ) ; result = yinshu ( a , 2 ) + 1 ; printf ( "%d\n" , result ) ; } return 0 ; } int yinshu ( int num , int min ) { int r , x = 0 ; if ( num < min ) { return 0 ; } else { for ( r = min ; r * r <= num ; r ++ ) { if ( num % r == 0 ) { x = x + 1 + yinshu ( num / r , r ) ; } } return x ; } }
int main ( ) { int n , a [ 100 ] ; int i ; int f ( int x , int min ) ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; a [ i ] = f ( a [ i ] , 2 ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , a [ i ] ) ; } return 0 ; } int f ( int x , int min ) { int y = 0 ; int i ; if ( x == 1 ) y = 1 ; else { for ( i = min ; i <= x ; i ++ ) { if ( x % i == 0 ) { y = y + f ( x / i , i ) ; } } } return y ; }
int f ( int N , int min ) { int s = 1 , i ; if ( N < min ) return 0 ; for ( i = min ; i < N ; i ++ ) { if ( N % i == 0 ) { s += f ( N / i , i ) ; } } return s ; } int main ( ) { int n , i , b = 2 ; int a [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) printf ( "%d\n" , f ( a [ i ] , b ) ) ; return 0 ; }
int factor ( int n , int min ) { int result = 1 , i ; if ( n < min ) { return 0 ; } for ( i = min ; i < n ; i ++ ) { if ( n % i == 0 ) { result = result + factor ( n / i , i ) ; } } return result ; } int main ( ) { int n , a [ 100000 ] , b [ 100000 ] ; scanf ( "%d" , & n ) ; for ( int j = 0 ; j <= n - 1 ; j ++ ) { scanf ( "%d" , & a [ j ] ) ; b [ j ] = factor ( a [ j ] , 2 ) ; printf ( "%d\n" , b [ j ] ) ; } return 0 ; }
int ys ( int x , int min ) { int r = 1 ; if ( x < min ) return 0 ; for ( int i = min ; i < x ; i ++ ) { if ( x % i == 0 ) r += ys ( x / i , i ) ; } return r ; } int main ( ) { int n , a [ 1000 ] ; scanf ( "%d" , & n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , ys ( a [ i ] , 2 ) ) ; } return 0 ; }
int fenjie ( int num , int min ) ; int k = 2 ; int main ( ) { int n , i , jieguo , num ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & num ) ; jieguo = fenjie ( num , 2 ) ; printf ( "%d\n" , jieguo ) ; } return 0 ; } int fenjie ( int num , int min ) { int j , jieguo = 1 ; if ( num < min ) { return 0 ; } for ( j = min ; j < num ; j ++ ) { if ( num % j == 0 ) { jieguo += fenjie ( num / j , j ) ; } } return jieguo ; }
int factor ( int a , int b ) { int i , ways ; ways = 1 ; if ( a < b ) return 0 ; for ( i = b ; i <= sqrt ( a ) ; i ++ ) { if ( a % i == 0 ) ways += factor ( a / i , i ) ; } return ways ; } int main ( ) { int n , A [ 99 ] , K [ 99 ] , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & A [ i ] ) ; K [ i ] = factor ( A [ i ] , 2 ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , K [ i ] ) ; } return 0 ; }
int main ( ) { int hanshu ( int k , int min ) ; int n , i , a ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a ) ; printf ( "%d\n" , hanshu ( a , 2 ) ) ; } scanf ( "%d" , & n ) ; return 0 ; } int hanshu ( int k , int min ) { int j , a [ k ] , b = 1 ; if ( k < min ) return 0 ; for ( j = min ; j <= k / j ; j ++ ) { if ( k % j == 0 ) { b += hanshu ( k / j , j ) ; } } return ( b ) ; }
int m , num ; int make ( int a ) ; int pan ( int a ) ; int main ( ) { int n , a , i ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a ; num = 0 ; m = a ; cout << make ( a ) << endl ; } return 0 ; } int pan ( int a ) { int n = 0 , i ; for ( i = 1 ; i <= sqrt ( a ) ; i ++ ) { if ( a % i == 0 ) n ++ ; } if ( n == 1 ) return 0 ; else return 1 ; } int make ( int a ) { int i , j , ans ; ans = sqrt ( a ) ; if ( pan ( a ) == 0 ) { num ++ ; return num ; } else { num ++ ; for ( i = m / a ; i <= ans ; i ++ ) { if ( i == 1 ) continue ; if ( a % i == 0 ) { m = a ; num = make ( a / i ) ; } } if ( i == ans + 1 ) return num ; } return num ; }
int f ( int a , int min ) { int result = 1 , i ; if ( a < min ) return 0 ; else { for ( i = min ; i <= a ; i ++ ) { if ( a % i == 0 ) { result += f ( a / i , i ) ; } } return result ; } } int main ( ) { int n , a , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a ) ; printf ( "%d\n" , f ( a , 2 ) ) ; } return 0 ; }
int a = 0 , i = 0 , sum = 1 ; void f ( int i , int a ) { int j ; for ( j = i ; j <= sqrt ( a ) ; j ++ ) if ( a % j == 0 ) { sum ++ ; f ( j , a / j ) ; } } int main ( ) { int n ; cin >> n ; while ( n ) { cin >> a ; f ( 2 , a ) ; cout << sum << endl ; n -- ; sum = 1 ; } }
int fj ( int a , int zs ) { int k , n , z ; n = 0 ; z = 0 ; for ( k = zs ; k <= sqrt ( a ) ; k ++ ) { if ( a % k == 0 ) { n = n + fj ( a / k , k ) ; z = 1 ; } } if ( z == 0 ) { return 1 ; } else { return n + 1 ; } } int main ( ) { int m , i , t ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & t ) ; printf ( "%d\n" , fj ( t , 2 ) ) ; } return 0 ; }
int digui ( int x , int min ) ; int main ( ) { int n , i , m , y ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & m ) ; y = digui ( m , 2 ) ; printf ( "%d\n" , y ) ; } return 0 ; } int digui ( int x , int min ) { int i , result ; result = 1 ; if ( x < min ) { return 0 ; } for ( i = min ; i <= x - 1 ; i ++ ) { if ( x % i == 0 ) { result = result + digui ( x / i , i ) ; } } return result ; }
int d ( int , int ) ; int main ( ) { int i , n , x ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> x ; cout << d ( x , 2 ) << endl ; } return 0 ; } int d ( int x , int y ) { int j , num = 1 ; if ( x == 1 ) return 0 ; if ( x == 2 ) return 1 ; for ( j = y ; j <= ( int ) sqrt ( ( double ) x ) ; j ++ ) if ( x % j == 0 ) num += d ( x / j , j ) ; return num ; }
int sum = 0 ; int main ( ) { void shu ( int a , int b ) ; int n = 0 , i = 0 , a = 0 , c = 0 , j = 0 ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a ) ; for ( j = 2 ; j <= sqrt ( ( double ) a ) ; j ++ ) { if ( a % j == 0 ) { sum = sum + 1 ; shu ( j , a / j ) ; } } printf ( "%d" , sum + 1 ) ; if ( i < n ) printf ( "\n" ) ; sum = 0 ; } return ( 0 ) ; } void shu ( int a , int b ) { int i = 0 ; for ( i = a ; i <= sqrt ( ( double ) b ) ; i ++ ) { if ( b % i == 0 ) { sum = sum + 1 ; shu ( i , b / i ) ; } } }
int fi ( int a , int j ) ; void main ( ) { int a , n ; scanf ( "%d" , & n ) ; while ( n -- ) { scanf ( "%d" , & a ) ; printf ( "%d\n" , fi ( a , 2 ) ) ; } } int fi ( int a , int k ) { int i , b = 1 ; if ( a == 1 ) return 0 ; for ( i = k ; i * i <= a ; i ++ ) if ( a % i == 0 ) b = b + fi ( a / i , i ) ; return b ; }
int n ; void count ( int x , int y ) { int i ; if ( x == 1 ) n = n + 1 ; else { for ( i = y ; i <= x ; i ++ ) { if ( x % i == 0 ) count ( x / i , i ) ; } } } int main ( ) { int i , k , t ; void count ( int x , int y ) ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { n = 0 ; scanf ( "%d" , & t ) ; count ( t , 2 ) ; printf ( "%d\n" , n ) ; } return 0 ; }
int meide ( int x , int y ) { int sum = 1 , count = 0 , i ; for ( i = y ; i <= sqrt ( x ) ; i ++ ) { if ( x % i == 0 ) { sum = sum + meide ( x / i , i ) ; } } return sum ; } int main ( ) { int k , n , m ; scanf ( "%d" , & k ) ; for ( m = 0 ; m < k ; m ++ ) { scanf ( "%d" , & n ) ; if ( n >= 3 ) { printf ( "%d\n" , meide ( n , 2 ) ) ; } else { printf ( "1\n" ) ; } } return 0 ; }
void factor ( int , int ) ; int result [ 9999 ] = { 0 } ; int j = 0 ; int main ( ) { int times , k = 1 ; cin >> times ; while ( k <= times ) { int num , ansf = 0 ; cin >> num ; factor ( 2 , num ) ; for ( int i = 0 ; i < 9999 ; i ++ ) if ( result [ i ] ) ansf ++ ; cout << ansf << endl ; for ( int i = 0 ; i < 9999 ; i ++ ) result [ i ] = 0 ; k ++ ; } return 0 ; } void factor ( int start , int num ) { if ( num == 1 ) { result [ j ] = 1 ; j ++ ; } for ( int i = start ; i <= num ; i ++ ) { if ( num % i == 0 ) factor ( i , num / i ) ; } }
int f ( int a , int b ) { if ( a == 1 ) return 1 ; else { int c , d , i ; c = 0 ; d = ( int ) sqrt ( ( double ) a ) ; for ( i = b ; i <= a ; i ++ ) { if ( ! ( a % i ) ) c += f ( a / i , i ) ; } return c ; } } int main ( ) { int n , a , i ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> a ; cout << f ( a , 2 ) << endl ; } cin . get ( ) ; cin . get ( ) ; return 0 ; }
int num = 0 ; int judge1 ( int n ) { int i ; if ( n == 2 || n == 3 || n == 5 ) return 1 ; if ( n == 4 ) return 0 ; for ( i = 2 ; i * i < n ; i ++ ) { if ( n % i == 0 ) { return 0 ; break ; } } if ( i * i > n ) return 1 ; } void divide ( int n , int d ) { for ( int i = d ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { num ++ ; divide ( n / i , d ) ; } d ++ ; } } int main ( ) { int n , m ; cin >> n ; while ( n ) { n -- ; cin >> m ; num = 1 ; divide ( m , 2 ) ; cout << num << endl ; } return 0 ; }
int a ; int res ; int sum ; void dfs ( int cnt ) { if ( cnt * sum == a ) { res ++ ; return ; } if ( cnt * sum < a ) { sum *= cnt ; int j = a / sum ; for ( int i = cnt ; i <= j ; i ++ ) dfs ( i ) ; sum /= cnt ; return ; } } int main ( ) { int nCases ; scanf ( "%d" , & nCases ) ; for ( int i = 0 ; i < nCases ; i ++ ) { scanf ( "%d" , & a ) ; res = 0 ; sum = 1 ; for ( int i = 2 ; i <= a ; i ++ ) dfs ( i ) ; printf ( "%d\n" , res ) ; } return 0 ; }
int cc ; void fen ( int x , int h ) ; int main ( ) { int n = 0 , k = 0 ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { cc = 0 ; int ff ; cin >> ff ; fen ( ff , 2 ) ; cout << cc << endl ; } return 0 ; } void fen ( int x , int h ) { for ( int i = 2 ; i <= x ; i ++ ) { if ( ( x % i == 0 ) && ( i >= h ) && ( i < x ) ) fen ( x / i , i ) ; if ( ( x % i == 0 ) && ( i >= h ) && ( i == x ) ) cc ++ ; } }
int s ; void search ( int a , int k ) { if ( a == 0 ) return ; if ( a == 1 ) { return ; } for ( int i = 2 ; i < a ; i ++ ) { if ( a % i == 0 && a / i >= i && i >= k && a / i >= k ) { s ++ ; search ( a / i , i ) ; } } return ; } int main ( ) { int n , a ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { s = 1 ; cin >> a ; search ( a , 1 ) ; cout << s << endl ; } return 0 ; }
int s = 0 , p ; int a [ 100 ] ; void factor ( int m , int n , int t ) { int i ; for ( i = 2 ; i <= ( int ) sqrt ( n ) ; i ++ ) if ( ( n % i == 0 ) && ( i >= m ) ) { s ++ ; factor ( i , n / i , t + 1 ) ; } return ; } int main ( ) { int i , j = 0 , k ; scanf ( "%d" , & j ) ; for ( k = 0 ; k < j ; k ++ ) scanf ( "%d" , & a [ k ] ) ; for ( k = 0 ; k < j ; k ++ ) { p = a [ k ] ; s = 0 ; for ( i = 2 ; i <= ( int ) sqrt ( p ) ; i ++ ) if ( p % i == 0 ) { s ++ ; factor ( i , p / i , 2 ) ; } a [ k ] = s ; } for ( k = 0 ; k < j ; k ++ ) printf ( "%d\n" , a [ k ] + 1 ) ; return 0 ; }
int n , t , cnt ; void f ( int left , int last ) { if ( left < last ) { if ( left == 1 ) cnt ++ ; return ; } for ( int i = last ; i <= left ; i ++ ) if ( left % i == 0 ) f ( left / i , i ) ; } int main ( ) { scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; cnt = 0 ; f ( n , 2 ) ; printf ( "%d\n" , cnt ) ; } return 0 ; }
int main ( ) { int func ( int a , int b ) ; int n ; cin >> n ; while ( n -- ) { int number ; cin >> number ; cout << func ( number , number ) << endl ; } return 0 ; } int func ( int a , int b ) { if ( a == 1 ) { return 1 ; } if ( b == 1 ) { return 0 ; } if ( a % b == 0 ) { return func ( a / b , b ) + func ( a , b - 1 ) ; } return func ( a , b - 1 ) ; }
int fun ( int x , int y ) { int i , sum = 0 ; for ( i = x ; i * i <= y ; i ++ ) if ( y % i == 0 ) { sum ++ ; sum += fun ( i , y / i ) ; } return sum ; } int main ( ) { int n , i , sum ; scanf ( "%d" , & n ) ; while ( n > 0 ) { n -- ; scanf ( "%d" , & i ) ; sum = 1 ; sum += fun ( 2 , i ) ; printf ( "%d\n" , sum ) ; } return 0 ; }
int s ( int n , int m ) { if ( n == 1 ) return 1 ; int an = 0 ; for ( int i = m ; i > 1 ; i -- ) { if ( n % i == 0 ) an += s ( n / i , min ( i , n / i ) ) ; } return an ; } int main ( ) { int N ; cin >> N ; int x ; for ( N ; N > 0 ; N -- ) { cin >> x ; cout << s ( x , x ) << endl ; } return 0 ; }
int n , m , ans , a [ 20 ] ; void calc ( int dep , int x ) { if ( x == 1 ) { ans ++ ; return ; } for ( int i = a [ dep - 1 ] ; i <= x ; i ++ ) if ( ! ( x % i ) ) { a [ dep ] = i ; calc ( dep + 1 , x / i ) ; } } int main ( ) { scanf ( "%d" , & n ) ; for ( a [ 0 ] = 2 ; n ; n -- ) { scanf ( "%d" , & m ) ; ans = 0 ; calc ( 1 , m ) ; printf ( "%d\n" , ans ) ; } return 0 ; }
const int mov [ 4 ] [ 2 ] = { { - 1 , 0 } , { 0 , - 1 } , { 1 , 0 } , { 0 , 1 } } ; int m , n , counter ; void dfs ( int m , int i ) { if ( m == 1 ) { ++ counter ; return ; } for ( ; i <= m ; ++ i ) { if ( m % i == 0 ) { dfs ( m / i , i ) ; } } } int main ( ) { int t , m , n ; cin >> t ; while ( t -- ) { counter = 0 ; cin >> m ; dfs ( m , 2 ) ; cout << counter << endl ; } }
int main ( ) { int F ( int , int ) ; int N ; cin >> N ; for ( int I = 1 ; I <= N ; ++ I ) { int A ; cin >> A ; cout << F ( A , 2 ) << endl ; } return 0 ; } int F ( int A , int CHU ) { int RET = 1 ; for ( int I = CHU ; I <= sqrt ( A ) ; I ++ ) { if ( A % I == 0 ) RET += F ( A / I , I ) ; } return RET ; }
int decomposition ( int m , int k ) { int res = 1 ; for ( int i = k ; i * i <= m ; i ++ ) { if ( m % i == 0 && m / i >= i ) { res += decomposition ( m / i , i ) ; } } return res ; } int main ( ) { int n ; while ( scanf ( "%d" , & n ) == 1 ) { for ( int i = 0 ; i < n ; i ++ ) { int m ; scanf ( "%d" , & m ) ; printf ( "%d\n" , decomposition ( m , 2 ) ) ; } } return 0 ; }
int im ( int n , int max ) { int s = 0 , i ; if ( n == 1 ) return 1 ; for ( i = max ; i > 1 ; i -- ) if ( n % i == 0 ) s += im ( n / i , i ) ; return s ; } int main ( ) { int i , n , t ; scanf ( "%d%d" , & n , & t ) ; printf ( "%d" , im ( t , t ) ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( "%d" , & t ) ; printf ( "\n%d" , im ( t , t ) ) ; } return 0 ; }
int f ( int n , int k ) { if ( n < k ) return 0 ; int i , s = 1 ; for ( i = k ; i < n ; i ++ ) { if ( n % i == 0 ) s += f ( n / i , i ) ; } return s ; } int main ( ) { int m , n , i , ans , s ; scanf ( "%d" , & m ) ; while ( m -- ) { scanf ( "%d" , & n ) ; printf ( "%d\n" , f ( n , 2 ) ) ; } return 0 ; }
int work ( int m , int n ) { if ( m == n ) return 1 ; if ( m % n != 0 ) return 0 ; int sum = 0 ; for ( int i = n ; i <= m / n ; i ++ ) sum += work ( m / n , i ) ; return sum ; } int main ( ) { int n , m , a ; cin >> n ; int i , j , k ; for ( i = 1 ; i <= n ; i ++ ) { cin >> m ; int s = 0 ; for ( j = 2 ; j <= m ; j ++ ) s += work ( m , j ) ; cout << s << endl ; } return 0 ; }
int i , n , k ; int work ( int p , int n ) { if ( n == 1 ) k ++ ; for ( int i = p ; i <= n ; i ++ ) if ( n % i == 0 ) work ( i , n / i ) ; } int main ( ) { int m ; cin >> m ; while ( m > 0 ) { cin >> n ; k = 0 ; work ( 2 , n ) ; cout << k << endl ; m -- ; } return 0 ; }
int sum = 0 ; void f ( int n , int i ) { if ( n == 1 ) sum ++ ; while ( i <= n ) { if ( n % i == 0 ) f ( n / i , i ) ; i ++ ; } return ; } int main ( ) { int t = 0 ; cin >> t ; while ( t -- ) { int n = 0 ; cin >> n ; int i = 2 , result = 1 ; for ( i = 2 ; i <= n / 2 ; i ++ ) { if ( n % i == 0 ) { sum = 0 ; f ( n / i , i ) ; result = result + sum ; } } cout << result << endl ; } return 0 ; }
int DFS ( int , int ) ; int main ( ) { int q ; cin >> q ; for ( int i = 0 ; i < q ; i ++ ) { int n ; int h = 0 ; cin >> n ; cout << DFS ( n , n ) << endl ; } return 0 ; } int DFS ( int n , int p ) { int ans = 0 ; if ( n == 1 ) return 1 ; for ( int i = 2 ; i <= p ; i ++ ) { if ( n % i == 0 ) { ans = ans + DFS ( n / i , i ) ; } } return ans ; }
int f ( int a , int b ) { if ( a == b ) return 1 ; if ( b > a ) return 0 ; if ( a % b != 0 ) return f ( a , b + 1 ) ; if ( a % b == 0 ) return f ( a , b + 1 ) + f ( a / b , b ) ; } int main ( ) { int n = 0 , i = 0 , x , y ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin >> x ; y = 2 ; cout << f ( x , y ) << endl ; } return 0 ; }
int fenjie ( int a , int max ) { int i = 0 ; int sum = 0 ; if ( a == 1 ) return 1 ; for ( i = max ; i >= 2 ; i -- ) { if ( ( a % i ) == 0 ) sum += fenjie ( a / i , i ) ; } return sum ; } int main ( ) { int k = 0 ; int n = 0 ; int num = 0 ; cin >> n ; for ( k = 1 ; k <= n ; k ++ ) { cin >> num ; cout << fenjie ( num , num ) ; if ( k < n ) cout << endl ; } return 0 ; }
int k , a ; void find ( int i , int x ) { for ( int j = i ; j * j <= x && i != 1 ; j ++ ) if ( x / j * j == x ) { find ( j , x / j ) ; k ++ ; } } int main ( ) { int n ; for ( cin >> n ; n -- ; ) { k = 0 ; cin >> a ; find ( 2 , a ) ; cout << ++ k << endl ; } return 0 ; }
int sum = 0 ; void devide ( int a , int b ) { if ( a == 1 ) sum ++ ; else { if ( a >= b ) devide ( a , b + 1 ) ; if ( a % b == 0 ) devide ( a / b , b ) ; } } int main ( ) { int n , a ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a ; sum = 0 ; devide ( a , 2 ) ; cout << sum << endl ; } return 0 ; }
void f ( char a [ ] , char b [ 3 ] ) { int t = 0 , i , l ; for ( i = 1 ; ; i ++ ) { if ( a [ i ] > a [ t ] ) t = i ; if ( a [ i ] == '\0' ) { l = i ; break ; } } for ( i = l ; i >= t + 1 ; i -- ) { a [ i + 3 ] = a [ i ] ; } a [ l + 3 ] = '\0' ; for ( i = t + 1 ; i <= t + 3 ; i ++ ) { a [ i ] = b [ i - t - 1 ] ; } printf ( "%s\n" , a ) ; } void main ( ) { char a [ 100 ] [ 11 ] = { 0 } , b [ 3 ] , i = 0 ; for ( i = 0 ; i < 5 ; i ++ ) { scanf ( "%s %s" , a [ i ] , b ) ; f ( a [ i ] , b ) ; if ( a [ i ] [ 0 ] == '\n' ) break ; } }
int main ( ) { char a [ 11 ] , b [ 4 ] ; char max ; int i , j , imax ; while ( scanf ( "%s %s" , a , b ) != EOF ) { max = a [ 0 ] ; imax = 0 ; for ( i = 1 ; ; i ++ ) { if ( a [ i ] == 0 ) break ; if ( a [ i ] > max ) { max = a [ i ] ; imax = i ; } } for ( j = 0 ; j <= imax ; j ++ ) { printf ( "%c" , a [ j ] ) ; } printf ( "%c%c%c" , b [ 0 ] , b [ 1 ] , b [ 2 ] ) ; for ( j = imax + 1 ; ; j ++ ) { if ( a [ j ] == 0 ) { printf ( "\n" ) ; break ; } printf ( "%c" , a [ j ] ) ; } } return 0 ; }
main ( ) { char a [ 11 ] , b [ 4 ] , c [ 15 ] ; int i , m , n ; while ( scanf ( "%s%s" , a , b ) != EOF ) { n = strlen ( a ) ; m = 0 ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ i ] > a [ m ] ) { m = i ; } } for ( i = 0 ; i <= m ; i ++ ) { c [ i ] = a [ i ] ; } c [ m + 1 ] = b [ 0 ] ; c [ m + 2 ] = b [ 1 ] ; c [ m + 3 ] = b [ 2 ] ; for ( i = m + 1 ; i < n ; i ++ ) { c [ 3 + i ] = a [ i ] ; } c [ 3 + n ] = '\0' ; printf ( "%s\n" , c ) ; } return 0 ; }
int main ( ) { int n , i , max , m ; char str [ 11 ] , substr [ 4 ] , temp [ 10 ] ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { max = str [ 0 ] ; n = strlen ( str ) ; for ( i = 0 ; i < n ; i ++ ) { if ( str [ i ] > max ) { max = str [ i ] ; m = i ; } } for ( i = 0 ; i <= m ; i ++ ) { printf ( "%c" , str [ i ] ) ; } printf ( "%s" , substr ) ; for ( i = m + 1 ; i < n ; i ++ ) { printf ( "%c" , str [ i ] ) ; } printf ( "\0" ) ; printf ( "\n" ) ; } return 0 ; }
int max ( char str [ ] , int i , int l ) { int o ; for ( o = 0 ; o < l ; o ++ ) if ( str [ o ] > str [ i ] ) return 0 ; return 1 ; } void main ( ) { char str [ 11 ] , substr [ 4 ] ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { int l ; l = strlen ( str ) ; int i ; for ( i = 0 ; i < l ; i ++ ) if ( max ( str , i , l ) == 1 ) break ; int j , k ; for ( j = 0 ; j <= i ; j ++ ) printf ( "%c" , str [ j ] ) ; for ( k = 0 ; k < 3 ; k ++ ) printf ( "%c" , substr [ k ] ) ; for ( j = i + 1 ; j < l ; j ++ ) printf ( "%c" , str [ j ] ) ; printf ( "\n" ) ; } }
int main ( ) { char s [ 301 ] ; char ds [ 301 ] ; int i , j , k , l , max ; while ( scanf ( "%s" , & s ) != EOF ) { l = strlen ( s ) ; scanf ( "%s" , & ds ) ; max = l - 1 ; for ( j = l - 1 ; j > 0 ; j = j - 1 ) { if ( s [ j ] >= s [ max ] ) max = j ; } for ( i = 0 ; i <= max ; i ++ ) printf ( "%c" , s [ i ] ) ; printf ( "%s" , ds ) ; for ( i = max + 1 ; i < l ; i ++ ) printf ( "%c" , s [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { char str [ 15 ] , sub [ 4 ] , a [ 11 ] , b ; int n , m , t ; while ( scanf ( "%s%s" , str , sub ) != EOF ) { m = 0 ; b = str [ 0 ] ; for ( n = 1 ; str [ n ] != '\0' ; n ++ ) if ( str [ n ] > b ) { b = str [ n ] ; m = n ; } for ( n = m + 1 , t = 0 ; str [ n ] != '\0' ; n ++ , t ++ ) a [ t ] = str [ n ] ; a [ t ] = '\0' ; str [ m + 1 ] = '\0' ; printf ( "%s%s%s\n" , str , sub , a ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { char str [ 20 ] , substr [ 4 ] , temp [ 20 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { int len = strlen ( str ) ; char max = str [ 0 ] ; int a , i ; for ( i = 0 ; i < len ; i ++ ) { if ( str [ i ] > max ) { max = str [ i ] ; a = i ; } } int num = 0 ; for ( i = a + 1 ; i < len ; i ++ ) { temp [ num ] = str [ i ] ; num ++ ; } temp [ num ] = '\0' ; str [ a + 1 ] = '\0' ; strcat ( str , substr ) ; strcat ( str , temp ) ; printf ( "%s\n" , str ) ; } return 0 ; }
void main ( ) { int i , j , k , l , n , flag ; char str [ 50 ] , substr [ 4 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { n = strlen ( str ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 , flag = 0 ; j <= n - 1 ; j ++ ) if ( str [ i ] >= str [ j ] ) flag ++ ; if ( flag == n ) break ; } for ( k = n - 1 ; k >= i + 1 ; k -- ) str [ k + 3 ] = str [ k ] ; for ( l = 1 ; l <= 3 ; l ++ ) str [ i + l ] = substr [ l - 1 ] ; str [ n + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
int main ( ) { int i , j , k , n ; char str [ 11 ] , substr [ 4 ] ; while ( scanf ( "%s %s" , & str , & substr ) != EOF ) { n = strlen ( str ) ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 0 ; j < n ; j ++ ) if ( str [ i ] >= str [ j ] ) k ++ ; if ( k == n ) break ; } for ( j = 0 ; j <= i ; j ++ ) printf ( "%c" , str [ j ] ) ; printf ( "%s" , substr ) ; for ( j = i + 1 ; j < n ; j ++ ) printf ( "%c" , str [ j ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { char s1 [ 11 ] , s2 [ 4 ] , t [ 20 ] ; int max , i , p ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { max = 0 ; for ( i = 0 ; i < strlen ( s1 ) ; i ++ ) { if ( s1 [ i ] > max ) { max = s1 [ i ] ; p = i ; } } strcpy ( t , s1 + p + 1 ) ; s1 [ p + 1 ] = '\0' ; strcat ( s1 , s2 ) ; strcat ( s1 , t ) ; puts ( s1 ) ; } return 0 ; }
void main ( ) { int i = 0 , j , k , m ; int max [ 100 ] ; char str [ 100 ] [ 100 ] , substr [ 100 ] [ 100 ] ; memset ( max , 0 , sizeof ( int ) * 100 ) ; while ( scanf ( "%s %s" , & str [ i ] , & substr [ i ] ) != EOF ) { i ++ ; } for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < strlen ( str [ j ] ) ; k ++ ) if ( str [ j ] [ k ] > str [ j ] [ max [ j ] ] ) max [ j ] = k ; } for ( j = 0 ; j < i ; j ++ ) { k = 0 ; while ( k <= max [ j ] ) { putchar ( str [ j ] [ k ] ) , k ++ ; } for ( m = 0 ; m < strlen ( substr [ j ] ) ; m ++ ) putchar ( substr [ j ] [ m ] ) ; while ( k < strlen ( str [ j ] ) ) { putchar ( str [ j ] [ k ] ) , k ++ ; } putchar ( '\n' ) ; } }
int main ( ) { char str [ 11 ] , substr [ 4 ] ; char maxs ; int j , max ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { max = 0 ; maxs = str [ 0 ] ; for ( j = 1 ; j < strlen ( str ) ; j ++ ) { if ( str [ j ] > maxs ) { max = j ; maxs = str [ j ] ; } } for ( j = 0 ; j <= max ; j ++ ) printf ( "%c" , str [ j ] ) ; printf ( "%s" , substr ) ; for ( j = max + 1 ; j < strlen ( str ) ; j ++ ) { if ( str [ j ] == '\0' ) break ; else printf ( "%c" , str [ j ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { int i , m , n ; for ( ; ; ) { char str [ 11 ] , substr [ 4 ] , combine [ 15 ] = { 0 } ; if ( scanf ( "%s%s" , str , substr ) == EOF ) break ; n = strlen ( str ) ; m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( str [ i ] - str [ m ] > 0 ) m = i ; } for ( i = 0 ; i <= m ; i ++ ) { combine [ i ] = str [ i ] ; } for ( i = 1 ; i <= 3 ; i ++ ) { combine [ m + i ] = substr [ i - 1 ] ; } for ( i = 1 ; i <= n - m - 1 ; i ++ ) { combine [ m + 3 + i ] = str [ m + i ] ; } puts ( combine ) ; } }
void main ( ) { int b , num , i , j , l ; char str [ 11 ] , substr [ 4 ] , str1 [ 15 ] , c ; for ( ; ; ) { for ( i = 0 ; i < 11 ; i ++ ) { str [ i ] = '\0' ; } for ( i = 0 ; i < 4 ; i ++ ) { substr [ i ] = '\0' ; } for ( i = 0 ; i < 15 ; i ++ ) { str1 [ i ] = '\0' ; } for ( i = 0 ; i < 10 ; i ++ ) { if ( ( c = getchar ( ) ) == ' ' ) break ; else str [ i ] = c ; } if ( feof ( stdin ) ) break ; gets ( substr ) ; l = strlen ( str ) ; for ( i = 0 ; i < l ; i ++ ) { b = 0 ; for ( j = i ; j < l ; j ++ ) { if ( str [ i ] < str [ j ] ) { b = 1 ; break ; } } if ( b == 0 ) { num = i ; break ; } } for ( i = 0 ; i <= num ; i ++ ) { str1 [ i ] = str [ i ] ; } for ( i = num + 1 ; i <= num + 3 ; i ++ ) { str1 [ i ] = substr [ i - 1 - num ] ; } for ( i = num + 4 ; i < l + 3 ; i ++ ) { str1 [ i ] = str [ i - 3 ] ; } puts ( str1 ) ; } }
int main ( ) { char str [ 15 ] , substr [ 5 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { int i , m = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { if ( str [ i ] == 0 ) break ; if ( str [ i ] > str [ m ] ) { m = i ; } } for ( i = 0 ; i <= m ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; for ( i = m + 1 ; i < 15 ; i ++ ) { if ( str [ i ] == 0 ) break ; printf ( "%c" , str [ i ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char str [ 10 ] = { 0 } , substr [ 5 ] = { 0 } ; while ( scanf ( "%s" , str ) != EOF ) { scanf ( "%s" , substr ) ; int i , k , u ; for ( u = 0 ; u <= 9 ; u ++ ) { if ( ! str [ u ] ) break ; } k = 0 ; for ( i = 1 ; i <= u - 1 ; i ++ ) { if ( str [ k ] < str [ i ] ) { k = i ; } } for ( i = 0 ; i <= k ; i ++ ) printf ( "%c" , str [ i ] ) ; for ( i = 0 ; i <= 2 ; i ++ ) printf ( "%c" , substr [ i ] ) ; for ( i = k + 1 ; i <= u - 1 ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { char str [ 14 ] , cmax , substr [ 4 ] ; int i , m , j , n ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { cmax = str [ 0 ] ; m = 0 ; for ( i = 1 ; ; i ++ ) { if ( str [ i ] == '\0' ) { n = i ; break ; } else if ( str [ i ] > cmax ) { cmax = str [ i ] ; m = i ; } } str [ n + 3 ] = '\0' ; for ( i = n + 2 , j = n - 1 ; ; i -- , j -- ) { str [ i ] = str [ j ] ; if ( j == m + 1 ) break ; } for ( i = m + 1 , j = 0 ; j <= 2 ; i ++ , j ++ ) { str [ i ] = substr [ j ] ; } printf ( "%s\n" , str ) ; } }
int main ( ) { int i , m , j , k , l , n ; char c [ 11 ] = { ' ' } , cc [ 4 ] = { ' ' } ; while ( ! ( feof ( stdin ) ) ) { scanf ( "%s%s\n" , c , cc ) ; l = strlen ( c ) - 1 ; m = 0 ; for ( i = 0 ; i <= l ; i ++ ) if ( c [ i ] > c [ m ] ) m = i ; for ( i = 0 ; i <= m ; i ++ ) putchar ( c [ i ] ) ; printf ( "%s" , cc ) ; for ( i = m + 1 ; i <= l ; i ++ ) putchar ( c [ i ] ) ; printf ( "\n" ) ; } return 7 ; }
void main ( ) { void f ( char yl [ ] , char cr [ ] ) ; char a [ 11 ] , b [ 4 ] ; int i ; for ( i = 1 ; ; ) { if ( scanf ( "%s%s" , a , b ) == EOF ) break ; else f ( a , b ) ; } } void f ( char yl [ ] , char cr [ ] ) { int i , j , l , p = 0 ; char s [ 14 ] ; l = strlen ( yl ) ; for ( i = 0 ; i <= l - 1 ; i ++ ) { p = 0 ; for ( j = 0 ; j <= l - 1 ; j ++ ) if ( yl [ j ] > yl [ i ] ) p ++ ; if ( p == 0 ) { p = i ; break ; } } for ( i = 0 ; i <= p ; i ++ ) s [ i ] = yl [ i ] ; for ( i = p + 1 ; i <= p + 3 ; i ++ ) s [ i ] = cr [ i - 1 - p ] ; for ( i = p + 4 ; i <= l + 2 ; i ++ ) s [ i ] = yl [ i - 3 ] ; s [ l + 3 ] = '\0' ; printf ( "%s\n" , s ) ; }
int h ( char a [ ] , char b [ ] ) { char c ; int len , i = 0 , k = 0 ; len = strlen ( a ) ; c = a [ 0 ] ; while ( i < len ) { if ( a [ i ] > c ) { c = a [ i ] ; k = i ; } i ++ ; } for ( i = 0 ; i <= k ; i ++ ) printf ( "%c" , a [ i ] ) ; for ( i = 0 ; i < 3 ; i ++ ) printf ( "%c" , b [ i ] ) ; for ( i = k + 1 ; i < len ; i ++ ) printf ( "%c" , a [ i ] ) ; printf ( "\n" ) ; return 0 ; } int main ( ) { int h ( char a [ ] , char b [ ] ) ; char a [ 10 ] , b [ 4 ] , c ; int i = 0 ; while ( i < 10 ) { if ( scanf ( "%s%s" , a , b ) == EOF ) break ; else h ( a , b ) ; i ++ ; } return 0 ; }
int main ( ) { int i , j , max = 0 ; char str [ 11 ] , substr [ 4 ] , maxx = 0 ; char zong [ 20 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { max = 0 ; maxx = 0 ; j = 0 ; for ( i = 0 ; i <= strlen ( str ) - 1 ; i ++ ) { if ( str [ i ] > maxx ) { max = i ; maxx = str [ i ] ; } } for ( i = 0 ; i <= max ; i ++ ) { zong [ j ++ ] = str [ i ] ; } for ( i = 0 ; i <= 2 ; i ++ ) { zong [ j ++ ] = substr [ i ] ; } for ( i = max + 1 ; i <= strlen ( str ) - 1 ; i ++ ) { zong [ j ++ ] = str [ i ] ; } zong [ j ] = '\0' ; printf ( "%s\n" , zong ) ; } }
int main ( ) { int i , l , m = 0 ; char str [ 20 ] = { '0' } , substr [ 4 ] = { '0' } , max = 0 ; while ( 1 ) { scanf ( "%s %s" , str , substr ) ; if ( str [ 0 ] == 0 ) break ; l = strlen ( str ) ; for ( i = 0 ; i < l ; i ++ ) { if ( str [ i ] > max ) { max = str [ i ] ; m = i ; } } if ( m == l - 1 ) { for ( i = l ; i = l + 2 ; i ++ ) str [ i ] = substr [ i - l ] ; } else { for ( i = l - 1 ; i > m ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = m + 1 ; i < m + 4 ; i ++ ) str [ i ] = substr [ i - m - 1 ] ; } printf ( "%s\n" , str ) ; m = 0 ; max = 0 ; for ( i = 0 ; i < 20 ; i ++ ) str [ i ] = 0 ; for ( i = 0 ; i < 3 ; i ++ ) substr [ i ] = 0 ; } return 0 ; }
void chen ( ) { char str [ 11 ] , substr [ 4 ] ; int i , k ; scanf ( "%s %s" , str , substr ) ; k = strlen ( str ) ; for ( i = strlen ( str ) - 1 ; i >= 0 ; i -- ) { if ( str [ i ] >= str [ k - 1 ] ) { k = i + 1 ; } } if ( strlen ( str ) > 10 || strlen ( substr ) > 3 ) return ; for ( i = 0 ; i < k ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; for ( i = k ; i < strlen ( str ) ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; chen ( ) ; } void main ( ) { chen ( ) ; }
int choose ( char str [ ] , int k ) { int i , max , maxc ; maxc = str [ 0 ] ; max = 0 ; for ( i = 0 ; i < k ; i ++ ) { if ( str [ i ] > maxc ) { maxc = str [ i ] ; max = i ; } } return max ; } main ( ) { static char str [ 15 ] , substr [ 4 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { int k ; k = strlen ( str ) ; int max ; max = choose ( str , k ) ; static char cs [ 11 ] ; int i ; for ( i = max + 1 ; i < k ; i ++ ) { cs [ i ] = str [ i ] ; } for ( i = max + 1 ; i <= max + 3 ; i ++ ) { str [ i ] = substr [ i - max - 1 ] ; } for ( i = max + 4 ; i < k + 3 ; i ++ ) { str [ i ] = cs [ i - 3 ] ; } str [ k + 3 ] = '\0' ; puts ( str ) ; } return 0 ; }
void main ( ) { int n , i , j , Asc , point ; char str [ 10 ] , substr [ 3 ] ; while ( scanf ( "%s%s" , str , substr ) == 2 ) { point = 0 ; Asc = 0 ; for ( i = 0 ; i <= strlen ( str ) ; i ++ ) if ( str [ i ] > Asc ) { Asc = str [ i ] ; point = i ; } for ( i = 0 ; i <= point ; i ++ ) printf ( "%c" , str [ i ] ) ; for ( j = 0 ; j < strlen ( substr ) ; j ++ ) printf ( "%c" , substr [ j ] ) ; for ( i = point + 1 ; i < strlen ( str ) ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } }
int main ( ) { char str [ 14 ] , substr [ 4 ] ; int i , b , j ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { b = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { if ( str [ b ] < str [ i ] ) b = i ; } for ( i = 12 ; i > ( b + 3 ) ; i -- ) str [ i ] = str [ i - 3 ] ; for ( i = ( b + 1 ) ; i < ( b + 4 ) ; i ++ ) str [ i ] = substr [ i - b - 1 ] ; printf ( "%s\n" , str ) ; for ( j = 0 ; j < 13 ; j ++ ) str [ j ] = '\0' ; } return 0 ; }
void main ( ) { char s1 [ 15 ] = { '\0' } , s2 [ 4 ] = { '\0' } , a [ 15 ] = { '\0' } , c [ 15 ] = { '\0' } ; int i , j , n , m = 0 , k = 0 ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { n = strlen ( s1 ) ; for ( i = 0 ; i < n ; i ++ ) c [ i ] = s1 [ i ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { if ( s1 [ m ] < s1 [ i + 1 ] ) m = i + 1 ; } for ( i = 0 ; i <= m ; i ++ ) { printf ( "%c" , c [ i ] ) ; s1 [ i ] = '\0' ; c [ i ] = '\0' ; } printf ( "%c%c%c" , s2 [ 0 ] , s2 [ 1 ] , s2 [ 2 ] ) ; for ( j = m + 1 ; j < n ; j ++ ) { printf ( "%c" , c [ j ] ) ; s1 [ j ] = '\0' ; c [ j ] = '\0' ; } printf ( "\n" ) ; m = 0 ; k = 0 ; } }
int main ( ) { char s1 [ MAX ] , s2 [ MAX ] ; int i , j , max ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { max = 0 ; i = 1 ; while ( s1 [ i ] != '\0' ) { if ( s1 [ max ] < s1 [ i ] ) max = i ; i ++ ; } i = 0 ; while ( i <= max ) { putchar ( s1 [ i ] ) ; i ++ ; } j = 0 ; while ( s2 [ j ] != '\0' ) { putchar ( s2 [ j ] ) ; j ++ ; } while ( s1 [ i ] != '\0' ) { putchar ( s1 [ i ] ) ; i ++ ; } printf ( "\n" ) ; } return 0 ; }
void main ( ) { int i = 0 , j , k , n , x , y , z = 0 ; char str [ 100 ] [ 12 ] , substr [ 100 ] [ 5 ] ; while ( scanf ( "%s%s" , & str [ i ] , & substr [ i ] ) != EOF ) { n = strlen ( str [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) { z = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( str [ i ] [ j ] >= str [ i ] [ k ] ) z ++ ; } if ( z == n ) break ; } for ( y = 0 ; y <= j ; y ++ ) printf ( "%c" , str [ i ] [ y ] ) ; printf ( "%s" , substr [ i ] ) ; for ( y = j + 1 ; y < n ; y ++ ) printf ( "%c" , str [ i ] [ y ] ) ; printf ( "\n" ) ; i ++ ; } }
int main ( ) { char str [ 11 ] , substr [ 4 ] , max ; int i , k , l ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { k = 0 ; l = strlen ( str ) ; max = str [ 0 ] ; for ( i = 1 ; i < l ; i ++ ) { if ( str [ i ] > max ) { max = str [ i ] ; k = i ; } } for ( i = 0 ; i < l ; i ++ ) { if ( i == k ) { printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; } else { printf ( "%c" , str [ i ] ) ; } } printf ( "\n" ) ; } return 0 ; }
int getMaxCharIndex ( char * str ) { int i = 0 ; int maxIndex = 0 ; char maxChar = str [ 0 ] ; for ( i = 0 ; i < MAX_STR_LENGTH ; i ++ ) { if ( str [ i ] == 0 ) break ; if ( maxChar < str [ i ] ) { maxChar = str [ i ] ; maxIndex = i ; } } return maxIndex ; } void insertStr ( char * str , int index , char * subStr ) { int i ; int strLength = strlen ( str ) ; for ( i = strLength ; i > index ; i -- ) str [ i + MAX_SUBSTR_LENGTH - 1 ] = str [ i ] ; for ( i = 0 ; i < MAX_SUBSTR_LENGTH - 1 ; i ++ ) str [ i + index + 1 ] = subStr [ i ] ; } int main ( ) { char str [ MAX_STR_LENGTH ] ; char subStr [ MAX_SUBSTR_LENGTH ] ; int maxIndex ; while ( scanf ( "%s%s" , str , subStr ) != EOF ) { maxIndex = getMaxCharIndex ( str ) ; insertStr ( str , maxIndex , subStr ) ; printf ( "%s\n" , str ) ; } return 0 ; }
int main ( ) { int i , j , n , mark ; char s1 [ 11 ] , s2 [ 4 ] ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { n = strlen ( s1 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 , mark = 1 ; j < n ; j ++ ) { if ( s1 [ i ] < s1 [ j ] ) { mark = 0 ; break ; } } if ( mark ) { for ( j = 0 ; j <= i ; j ++ ) printf ( "%c" , s1 [ j ] ) ; printf ( "%s" , s2 ) ; for ( j = i + 1 ; j < n ; j ++ ) printf ( "%c" , s1 [ j ] ) ; printf ( "\n" ) ; break ; } } } return 0 ; }
void main ( ) { int l = 0 , i = 0 ; char str [ 11 ] = { "" } , substr [ 3 ] = { "" } , str2 [ 11 ] = { "" } ; char * p ; LOOP : scanf ( "%s %s" , str , substr ) ; if ( strcmp ( str2 , str ) == 0 ) goto END ; l = strlen ( str ) ; p = str ; for ( i = 0 ; i < l ; i ++ ) { if ( * p < str [ i ] ) p = & str [ i ] ; else ; } for ( i = 0 ; i < l ; i ++ ) { printf ( "%c" , str [ i ] ) ; if ( & str [ i ] == p ) printf ( "%s" , substr ) ; } printf ( "\n" ) ; strcpy ( str2 , str ) ; goto LOOP ; END : ; }
int main ( int argc , char * argv [ ] ) { char str [ 11 ] , substr [ 4 ] ; int m , i , e ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { m = strlen ( str ) ; e = 0 ; for ( i = 1 ; i < m ; i ++ ) { if ( str [ i ] > str [ e ] ) e = i ; } for ( i = 0 ; i <= e ; i ++ ) printf ( "%c" , str [ i ] ) ; for ( i = 0 ; i < 3 ; i ++ ) printf ( "%c" , substr [ i ] ) ; for ( i = e + 1 ; i < m - 1 ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%c\n" , str [ m - 1 ] ) ; } return 0 ; }
int plug ( char str [ 11 ] , char substr [ 4 ] ) { int i , j , t , c , n , a [ 11 ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; char p [ 11 ] , q ; n = strlen ( str ) ; strcpy ( p , str ) ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 0 ; i < n - 1 - j ; i ++ ) if ( p [ i ] < p [ i + 1 ] ) { t = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = t ; q = p [ i ] ; p [ i ] = p [ i + 1 ] ; p [ i + 1 ] = q ; } c = a [ 0 ] ; for ( i = 0 ; i <= c ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; for ( i = c + 1 ; i < n ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; return 0 ; } int main ( ) { char str [ 11 ] , substr [ 4 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { plug ( str , substr ) ; } return 0 ; }
void charu ( char str [ 10 ] , char substr [ 4 ] , int n ) { int i , k ; char nstr [ 13 ] ; char max ; for ( i = n ; i >= 0 ; i -- ) { if ( str [ i ] >= max ) { max = str [ i ] ; k = i ; } } for ( i = 0 ; i <= k ; i ++ ) nstr [ i ] = str [ i ] ; for ( i = 0 ; i <= 2 ; i ++ ) nstr [ i + k + 1 ] = substr [ i ] ; for ( i = k + 4 ; i <= n + 3 ; i ++ ) nstr [ i ] = str [ i - 3 ] ; puts ( nstr ) ; } main ( ) { char s1 [ 10 ] , s2 [ 4 ] ; int i ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { for ( i = 0 ; s1 [ i ] != '\0' ; i ++ ) ; charu ( s1 , s2 , i ) ; } }
void main ( ) { int i , j , len , max = 0 ; char str [ 13 ] , substr [ 3 ] , t [ 13 ] = { '\0' } , c ; scanf ( "%s" , str ) ; len = strlen ( str ) ; scanf ( "%s" , substr ) ; c = getchar ( ) ; while ( c == '\n' ) { for ( i = 0 ; i < len ; i ++ ) if ( str [ i ] > max ) max = str [ i ] ; for ( i = 0 ; str [ i ] != max ; i ++ ) ; for ( j = i + 1 ; j < len ; j ++ ) t [ j - i - 1 ] = str [ j ] ; str [ i + 1 ] = '\0' ; strcat ( str , substr ) ; strcat ( str , t ) ; puts ( str ) ; for ( i = 0 ; i < len ; i ++ ) t [ i ] = '\0' ; max = 0 ; scanf ( "%s" , str ) ; len = strlen ( str ) ; scanf ( "%s" , substr ) ; c = getchar ( ) ; } }
int main ( ) { char str [ 20 ] , c , substr [ 8 ] ; int n , max , i ; while ( 1 ) { max = 0 ; c = getchar ( ) ; if ( c == '\n' ) c = getchar ( ) ; if ( c == EOF ) break ; else { scanf ( "%s%s" , & str , & substr ) ; n = strlen ( str ) ; for ( i = n - 1 ; i >= 0 ; i -- ) str [ i + 1 ] = str [ i ] ; str [ 0 ] = c ; str [ ++ n ] = 0 ; for ( i = 1 ; i < n ; i ++ ) if ( str [ i ] > str [ max ] ) max = i ; for ( i = 0 ; i <= max ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%c%c%c" , substr [ 0 ] , substr [ 1 ] , substr [ 2 ] ) ; for ( ; i < n ; i ++ ) printf ( "%c" , str [ i ] ) ; putchar ( '\n' ) ; } } }
void main ( ) { char str [ 1000 ] = { '\0' } , substr [ 3 ] , str2 [ 1000 ] = { '\0' } ; int i , l = 0 , max = 0 ; while ( ( scanf ( "%s %s" , str , substr ) ) != EOF ) { l = strlen ( str ) ; for ( i = 0 ; i < l ; i ++ ) { if ( str [ i ] > str [ max ] ) { max = i ; } } for ( i = max + 1 ; i < l ; i ++ ) { str2 [ i - 1 - max ] = str [ i ] ; } str [ max + 1 ] = substr [ 0 ] ; str [ max + 2 ] = substr [ 1 ] ; str [ max + 3 ] = substr [ 2 ] ; str [ max + 4 ] = '\0' ; strcat ( str , str2 ) ; printf ( "%s\n" , str ) ; i = 0 ; while ( str2 [ i ] != '\0' ) { str2 [ i ] = '\0' ; i ++ ; } } }
int main ( ) { char s1 [ 15 ] , s2 [ 4 ] , max ; int i , j , len , k ; while ( scanf ( "%s%s" , s1 , s2 ) != EOF ) { len = strlen ( s1 ) ; k = 0 ; max = s1 [ 0 ] ; for ( j = 1 ; j < len ; j ++ ) { if ( max < s1 [ j ] ) { max = s1 [ j ] ; k = j ; } } for ( j = len + 2 ; j > k + 3 ; j -- ) s1 [ j ] = s1 [ j - 3 ] ; for ( j = k + 1 , i = 0 ; j < k + 4 ; j ++ , i ++ ) s1 [ j ] = s2 [ i ] ; s1 [ len + 3 ] = '\0' ; puts ( s1 ) ; } return 0 ; }
int main ( ) { char a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int n = 0 ; while ( scanf ( "%s%s" , a [ n ] , b [ n ] ) != EOF ) { n ++ ; } int i , j , k , mark ; char c = '\0' ; for ( i = 0 ; i < n ; i ++ ) { c = '\0' ; for ( j = 0 ; a [ i ] [ j ] != '\0' ; j ++ ) { if ( a [ i ] [ j ] > c ) { c = a [ i ] [ j ] ; mark = j ; } } for ( k = 0 ; k <= mark ; k ++ ) { printf ( "%c" , a [ i ] [ k ] ) ; } printf ( "%s" , b [ i ] ) ; for ( k = mark + 1 ; a [ i ] [ k ] != '\0' ; k ++ ) { printf ( "%c" , a [ i ] [ k ] ) ; } printf ( "\n" ) ; } }
void main ( ) { char str [ 15 ] , substr [ 4 ] ; int flag , max , length , i ; flag = 0 ; while ( scanf ( "%s%s" , str , substr ) == 2 ) { max = 0 ; length = strlen ( str ) ; for ( i = 0 ; i <= length - 1 ; i ++ ) if ( str [ i ] > str [ max ] ) max = i ; for ( i = length - 1 ; i >= max + 1 ; i -- ) str [ i + 3 ] = str [ i ] ; str [ length + 3 ] = '\0' ; for ( i = 0 ; i <= 2 ; i ++ ) str [ max + 1 + i ] = substr [ i ] ; if ( flag ) printf ( "\n" ) ; else flag = 1 ; printf ( "%s" , str ) ; } }
void main ( ) { char str [ 15 ] , substr [ 4 ] ; int i , j , max , c ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { for ( i = 1 , max = str [ 0 ] , c = 0 ; str [ i ] != '\0' ; i ++ ) { if ( str [ i ] > max ) { max = str [ i ] ; c = i ; } } for ( j = i + 3 ; j > c + 3 ; j -- ) str [ j ] = str [ j - 3 ] ; str [ c + 1 ] = substr [ 0 ] ; str [ c + 2 ] = substr [ 1 ] ; str [ c + 3 ] = substr [ 2 ] ; printf ( "%s\n" , str ) ; } }
void main ( ) { char str [ 1000 ] [ 10 ] , substr [ 1000 ] [ 3 ] , finalstr [ 1000 ] [ 13 ] ; int n , i , j , l , k ; for ( i = 0 ; scanf ( "%s%s" , str [ i ] , substr [ i ] ) != EOF ; i ++ ) { } n = i ; for ( k = 0 ; k < n ; k ++ ) { l = strlen ( str [ k ] ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j < l ; j ++ ) { if ( str [ k ] [ i ] < str [ k ] [ j ] ) break ; } if ( j == l ) { break ; } } for ( j = 0 ; j <= i ; j ++ ) finalstr [ k ] [ j ] = str [ k ] [ j ] ; for ( j = 0 ; j < 3 ; j ++ ) finalstr [ k ] [ i + j + 1 ] = substr [ k ] [ j ] ; for ( j = 1 ; j < l - i ; j ++ ) finalstr [ k ] [ i + 3 + j ] = str [ k ] [ i + j ] ; finalstr [ k ] [ i + 3 + j ] = '\0' ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , finalstr [ i ] ) ; }
int main ( ) { char str [ 100 ] , substr [ 100 ] , max ; int a , b , c , i , d , e , num ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { a = strlen ( str ) ; b = strlen ( substr ) ; max = str [ 0 ] ; num = 0 ; for ( i = 0 ; i < a ; i ++ ) { if ( str [ i + 1 ] > max ) { max = str [ i + 1 ] ; num = i + 1 ; } } for ( c = 0 ; c <= num ; c ++ ) { printf ( "%c" , str [ c ] ) ; } for ( d = 0 ; d < b ; d ++ ) { printf ( "%c" , substr [ d ] ) ; } for ( e = num + 1 ; e < a ; e ++ ) { printf ( "%c" , str [ e ] ) ; } printf ( "\n" ) ; } return 0 ; }
void main ( ) { char str [ 1000 ] [ 10 ] , substr [ 1000 ] [ 3 ] , finalstr [ 1000 ] [ 13 ] ; int n , i , j , l , k ; for ( i = 0 ; scanf ( "%s%s" , str [ i ] , substr [ i ] ) != EOF ; i ++ ) { } n = i ; for ( k = 0 ; k < n ; k ++ ) { l = strlen ( str [ k ] ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j < l ; j ++ ) { if ( str [ k ] [ i ] < str [ k ] [ j ] ) break ; } if ( j == l ) { break ; } } for ( j = 0 ; j <= i ; j ++ ) finalstr [ k ] [ j ] = str [ k ] [ j ] ; for ( j = 0 ; j < 3 ; j ++ ) finalstr [ k ] [ i + j + 1 ] = substr [ k ] [ j ] ; for ( j = 1 ; j < l - i ; j ++ ) finalstr [ k ] [ i + 3 + j ] = str [ k ] [ i + j ] ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , finalstr [ i ] ) ; }
void main ( ) { char c , str [ 100 ] [ 100 ] ; int a , b , e , i = 0 , j ; while ( gets ( str [ i ] ) != 0 ) { c = 0 ; for ( j = 0 ; str [ i ] [ j ] != ' ' ; j ++ ) { if ( str [ i ] [ j ] > c ) { c = str [ i ] [ j ] ; a = j ; } } e = j ; b = strlen ( str [ i ] ) ; for ( j = 0 ; j <= a ; j ++ ) printf ( "%c" , str [ i ] [ j ] ) ; for ( j = e + 1 ; j <= b - 1 ; j ++ ) printf ( "%c" , str [ i ] [ j ] ) ; for ( j = a + 1 ; j <= e - 1 ; j ++ ) printf ( "%c" , str [ i ] [ j ] ) ; printf ( "\n" ) ; i ++ ; } }
void main ( ) { char str [ 11 ] , strsub [ 4 ] , str2 [ 14 ] , c , fd ; int k , i , j , max , maxnum ; while ( scanf ( "%s %s" , str , strsub ) != EOF ) { max = 0 ; for ( j = 0 ; ; j ++ ) { if ( str [ j ] == '\0' ) break ; if ( str [ j ] > max ) { max = str [ j ] ; maxnum = j ; } } for ( i = 0 ; i <= maxnum ; i ++ ) str2 [ i ] = str [ i ] ; str2 [ maxnum + 1 ] = '\0' ; strcat ( str2 , strsub ) ; for ( i = maxnum + 4 ; ; i ++ ) { if ( str [ i - 3 ] == '\0' ) break ; str2 [ i ] = str [ i - 3 ] ; } str2 [ i ] = '\0' ; puts ( str2 ) ; } }
void main ( ) { char str [ 11 ] , strsub [ 4 ] , str2 [ 14 ] ; int i , j , max , maxnum ; while ( scanf ( "%s %s" , str , strsub ) != EOF ) { max = 0 ; for ( j = 0 ; ; j ++ ) { if ( str [ j ] == '\0' ) break ; if ( str [ j ] > max ) { max = str [ j ] ; maxnum = j ; } } for ( i = 0 ; i <= maxnum ; i ++ ) str2 [ i ] = str [ i ] ; str2 [ maxnum + 1 ] = '\0' ; strcat ( str2 , strsub ) ; for ( i = maxnum + 4 ; ; i ++ ) { if ( str [ i - 3 ] == '\0' ) break ; str2 [ i ] = str [ i - 3 ] ; } str2 [ i ] = '\0' ; puts ( str2 ) ; } }
int main ( ) { int n , i , j ; char str [ 10 ] = { 0 } , substr [ 3 ] = { 0 } , m = 0 ; while ( scanf ( "%s %s" , str , substr ) == 2 ) { m = 0 ; n = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { if ( str [ i ] > m ) { m = str [ i ] ; n = i ; } } for ( i = 0 ; i <= n ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; for ( i = n + 1 ; i < strlen ( str ) ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
void main ( ) { char str [ 13 ] , substr [ 3 ] ; int i = 0 , max , j , n , k ; for ( k = 0 ; k < 100 ; k ++ ) { for ( i = 0 ; i < 13 ; i ++ ) str [ i ] = '\0' ; for ( i = 0 ; i < 3 ; i ++ ) substr [ i ] = '\0' ; max = 0 ; scanf ( "%s%s" , str , substr ) ; n = strlen ( str ) ; for ( i = 0 ; i < n ; i ++ ) max = ( max > str [ i ] ) ? max : str [ i ] ; for ( i = 0 ; i < n ; i ++ ) if ( str [ i ] == max ) { for ( j = n - 1 ; j > i ; j -- ) str [ j + 3 ] = str [ j ] ; str [ i + 1 ] = substr [ 0 ] ; str [ i + 2 ] = substr [ 1 ] ; str [ i + 3 ] = substr [ 2 ] ; break ; } printf ( "%s\n" , str ) ; } }
void main ( ) { char str [ 100 ] [ 11 ] , substr [ 100 ] [ 4 ] , a [ 100 ] [ 15 ] ; int q , i , j , k , m , n , x , y ; for ( i = 1 ; scanf ( "%s%s" , str [ i ] , substr [ i ] ) != EOF ; i ++ ) { x = strlen ( str [ i ] ) ; y = strlen ( substr [ i ] ) ; for ( j = 0 ; j <= x - 1 ; j ++ ) { for ( m = 0 , k = 0 ; k <= x - 1 ; k ++ ) if ( str [ i ] [ j ] >= str [ i ] [ k ] ) m ++ ; if ( m == x ) { n = j + 1 ; break ; } } strncpy ( a [ i ] , str [ i ] , n ) ; a [ i ] [ n ] = '\0' ; strcat ( a [ i ] , substr [ i ] ) ; for ( j = n + y ; j < x + y ; j ++ ) a [ i ] [ j ] = str [ i ] [ j - y ] ; a [ i ] [ x + y ] = '\0' ; printf ( "%s\n" , a [ i ] ) ; } }
void main ( ) { char str [ 15 ] , sub [ 4 ] , m ; int t , i , len ; while ( scanf ( "%s %s" , str , sub ) != EOF ) { t = 0 ; m = str [ 0 ] ; len = 0 ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) len ++ ; for ( i = 1 ; i < len ; i ++ ) if ( str [ i ] > m ) { t = i ; m = str [ i ] ; } for ( i = len - 1 ; i > t ; i -- ) str [ i + 3 ] = str [ i ] ; str [ t + 1 ] = sub [ 0 ] ; str [ t + 2 ] = sub [ 1 ] ; str [ t + 3 ] = sub [ 2 ] ; str [ len + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
void main ( ) { char str [ 15 ] , sub [ 4 ] , m ; int t , i , len ; while ( scanf ( "%s %s" , str , sub ) != EOF ) { t = 0 ; m = str [ 0 ] ; len = 0 ; len = strlen ( str ) ; for ( i = 1 ; i < len ; i ++ ) if ( str [ i ] > m ) { t = i ; m = str [ i ] ; } for ( i = len - 1 ; i > t ; i -- ) str [ i + 3 ] = str [ i ] ; str [ t + 1 ] = sub [ 0 ] ; str [ t + 2 ] = sub [ 1 ] ; str [ t + 3 ] = sub [ 2 ] ; str [ len + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
void main ( ) { char str [ 13 ] , substr [ 3 ] ; int s , i , j , p ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { s = strlen ( str ) ; p = 0 ; str [ s ] = 97 ; substr [ 3 ] = 97 ; for ( i = 0 ; i <= s - 1 ; i ++ ) if ( str [ i ] > str [ p ] ) p = i ; for ( i = s ; i >= p + 1 ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = p + 1 , j = 0 ; j <= 2 ; i ++ , j ++ ) str [ i ] = substr [ j ] ; str [ s + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
int main ( ) { char str [ 11 ] , substr [ 4 ] ; int i , num = 0 , j , h ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { int max = ( int ) str [ 0 ] , len = strlen ( str ) ; for ( i = 1 ; i < len ; i ++ ) { if ( max < str [ i ] ) { max = ( int ) str [ i ] ; num = i ; } } for ( j = 0 ; j <= num ; j ++ ) { printf ( "%c" , str [ j ] ) ; } printf ( "%s" , substr ) ; for ( h = num + 1 ; h < len ; h ++ ) { printf ( "%c" , str [ h ] ) ; } printf ( "\n" ) ; } return 0 ; }
void main ( ) { char str [ 13 ] , substr [ 3 ] ; int s , i , j , p ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { s = strlen ( str ) ; p = 0 ; for ( i = 0 ; i <= s - 1 ; i ++ ) if ( str [ i ] > str [ p ] ) p = i ; for ( i = s ; i >= p + 1 ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = p + 1 , j = 0 ; j <= 2 ; i ++ , j ++ ) str [ i ] = substr [ j ] ; str [ s + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
void main ( ) { char str [ 13 ] , substr [ 3 ] ; int s , i , j , p , max ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { s = strlen ( str ) ; max = str [ 0 ] ; for ( i = 0 ; i <= s - 1 ; i ++ ) if ( str [ i ] > max ) { max = str [ i ] ; p = i ; } for ( i = s ; i >= p + 1 ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = p + 1 , j = 0 ; j <= 2 ; i ++ , j ++ ) str [ i ] = substr [ j ] ; for ( i = 0 ; i <= s + 2 ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } }
int main ( ) { char str [ 10 ] [ 11 ] , substr [ 10 ] [ 4 ] , output [ 10 ] [ 14 ] = { '\0' } ; int maxN = 0 , i = 0 , j , end ; while ( scanf ( "%s %s" , str [ i ] , substr [ i ] ) != EOF ) { i ++ ; } end = i ; for ( i = 0 ; i < end ; i ++ ) { char max = str [ i ] [ 0 ] , * p ; p = output [ i ] ; for ( j = 0 ; j < strlen ( str [ i ] ) ; j ++ ) if ( ( int ) str [ i ] [ j ] > ( int ) max ) { max = str [ i ] [ j ] ; maxN = j + 1 ; } strncpy ( p , str [ i ] , maxN ) ; strcat ( p , substr [ i ] ) ; strcat ( p + strlen ( output [ i ] ) , str [ i ] + maxN ) ; printf ( "%s\n" , output [ i ] ) ; } return 0 ; }
void main ( ) { int k , s , p = 0 , m = 0 ; char str [ 10 ] , substr [ 3 ] , d ; do { if ( p ) for ( k = 1 ; ; k ++ ) { str [ k ] = getchar ( ) ; if ( str [ k ] == ' ' ) { str [ k ] = '\0' ; break ; } } else scanf ( "%s" , str ) ; scanf ( "%s" , substr ) ; d = getchar ( ) ; for ( k = 0 ; k < strlen ( str ) ; k ++ ) if ( ( int ) str [ k ] > m ) { s = k ; m = ( int ) str [ k ] ; } for ( k = 0 ; k <= s ; k ++ ) printf ( "%c" , str [ k ] ) ; printf ( "%s" , substr ) ; for ( k = s + 1 ; k < strlen ( str ) ; k ++ ) printf ( "%c" , str [ k ] ) ; printf ( "\n" ) ; m = 0 ; p += 1 ; } while ( ( str [ 0 ] = getchar ( ) ) != EOF ) ; }
void main ( ) { char a [ 1000 ] [ 15 ] , c [ 1000 ] [ 14 ] ; char ch ; int i , j , k , n = 0 , b [ 1000 ] ; for ( i = 0 ; i < 1000 ; i ++ ) { gets ( a [ i ] ) ; if ( a [ i ] [ 0 ] == '\0' ) break ; n ++ ; } for ( i = 0 ; i < n ; i ++ ) { b [ i ] = strlen ( a [ i ] ) ; ch = a [ i ] [ 0 ] ; k = 0 ; for ( j = 0 ; j < b [ i ] - 4 ; j ++ ) { if ( ch < a [ i ] [ j ] ) { ch = a [ i ] [ j ] ; k = j ; } else continue ; } for ( j = 0 ; j < k + 1 ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] ; } c [ i ] [ k + 1 ] = a [ i ] [ b [ i ] - 3 ] ; c [ i ] [ k + 2 ] = a [ i ] [ b [ i ] - 2 ] ; c [ i ] [ k + 3 ] = a [ i ] [ b [ i ] - 1 ] ; for ( j = k + 1 ; a [ i ] [ j ] != ' ' ; j ++ ) { c [ i ] [ j + 3 ] = a [ i ] [ j ] ; } c [ i ] [ j + 3 ] = '\0' ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , c [ i ] ) ; }
void main ( ) { char a [ 1000 ] [ 15 ] , c [ 1000 ] [ 14 ] ; char ch ; int i , j , k , n = 0 , b [ 1000 ] , l ; for ( i = 0 ; i < 1000 ; i ++ ) { gets ( a [ i ] ) ; if ( a [ i ] [ 0 ] == '\0' ) break ; n ++ ; } for ( i = 0 ; i < n ; i ++ ) { l = strlen ( a [ i ] ) ; ch = a [ i ] [ 0 ] ; k = 0 ; for ( j = 0 ; j < l - 4 ; j ++ ) { if ( ch < a [ i ] [ j ] ) { ch = a [ i ] [ j ] ; k = j ; } else continue ; } for ( j = 0 ; j < k + 1 ; j ++ ) { c [ i ] [ j ] = a [ i ] [ j ] ; } c [ i ] [ k + 1 ] = a [ i ] [ l - 3 ] ; c [ i ] [ k + 2 ] = a [ i ] [ l - 2 ] ; c [ i ] [ k + 3 ] = a [ i ] [ l - 1 ] ; for ( j = k + 1 ; a [ i ] [ j ] != ' ' ; j ++ ) { c [ i ] [ j + 3 ] = a [ i ] [ j ] ; } c [ i ] [ j + 3 ] = '\0' ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , c [ i ] ) ; }
void main ( ) { char c [ 100 ] [ 100 ] ; int i = 0 , j , count , max , m , b [ 100 ] ; do { gets ( c [ i ] ) ; b [ i ] = strlen ( c [ i ] ) ; i ++ ; } while ( c [ i - 1 ] [ 0 ] != '\0' ) ; m = i - 1 ; for ( i = 0 ; i < m ; i ++ ) { max = 0 ; count = 0 ; for ( j = 0 ; j < b [ i ] - 4 ; j ++ ) { if ( c [ i ] [ j ] > max ) { max = c [ i ] [ j ] ; count = j ; } } for ( j = 0 ; j <= count ; j ++ ) { printf ( "%c" , c [ i ] [ j ] ) ; } for ( j = b [ i ] - 3 ; j <= b [ i ] - 1 ; j ++ ) { printf ( "%c" , c [ i ] [ j ] ) ; } for ( j = count + 1 ; j < b [ i ] - 4 ; j ++ ) { printf ( "%c" , c [ i ] [ j ] ) ; } printf ( "\n" ) ; } }
void main ( ) { int i , j , n ; char a [ 11 ] , b [ 3 ] , c [ 14 ] ; for ( j = 0 ; j < 10 ; j ++ ) { for ( i = 0 ; i < 11 ; i ++ ) a [ i ] = '\0' ; for ( i = 0 ; i < 3 ; i ++ ) b [ i ] = '\0' ; for ( i = 0 ; i < 14 ; i ++ ) c [ i ] = '\0' ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; for ( i = 0 , n = 0 ; a [ i ] != '\0' ; i ++ ) if ( a [ i ] > a [ n ] ) n = i ; strncpy ( c , a , n + 1 ) ; c [ n + 1 ] = b [ 0 ] ; c [ n + 2 ] = b [ 1 ] ; c [ n + 3 ] = b [ 2 ] ; for ( i = n + 1 ; a [ i ] != '\0' ; i ++ ) c [ i + 3 ] = a [ i ] ; printf ( "%s\n" , c ) ; } }
int main ( ) { int p , j , k , len , i ; char str [ 100 ] [ 10 ] = { '\0' } , ch [ 100 ] [ 3 ] , sub [ 100 ] [ 20 ] , tol [ 100 ] [ 30 ] ; for ( i = 0 ; i < 100 ; i ++ ) { gets ( tol [ i ] ) ; len = strlen ( tol [ i ] ) ; if ( len == 0 ) break ; for ( j = 0 ; ; j ++ ) { str [ i ] [ j ] = tol [ i ] [ j ] ; if ( str [ i ] [ j ] == ' ' ) { str [ i ] [ j ] = '\0' ; break ; } } for ( k = 0 ; k < 3 ; k ++ ) { ch [ i ] [ k ] = tol [ i ] [ j + 1 ] ; j ++ ; } for ( j = 1 , p = 0 ; j < len ; j ++ ) { if ( str [ i ] [ p ] < str [ i ] [ j ] ) p = j ; } strncpy ( sub [ i ] , str [ i ] , p + 1 ) ; sub [ i ] [ p + 1 ] = ch [ i ] [ 0 ] ; sub [ i ] [ p + 2 ] = ch [ i ] [ 1 ] ; sub [ i ] [ p + 3 ] = ch [ i ] [ 2 ] ; for ( j = 0 ; j <= len - 1 - p ; j ++ ) sub [ i ] [ p + 4 + j ] = str [ i ] [ p + j + 1 ] ; } printf ( "%s" , sub [ 0 ] ) ; for ( i = 1 ; strlen ( tol [ i ] ) != 0 ; i ++ ) { printf ( "\n%s" , sub [ i ] ) ; } return 0 ; }
void main ( ) { void insert ( char s [ ] ) ; char a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ; int i , n ; gets ( a [ 1 ] ) ; for ( i = 2 , n = 0 ; a [ i - 1 ] [ 0 ] != '\0' ; i ++ ) { gets ( a [ i ] ) ; n ++ ; } for ( i = 1 ; i <= n ; i ++ ) insert ( a [ i ] ) ; } void insert ( char s [ ] ) { int n , i , j , max = 0 , m ; char a [ 3 ] ; n = strlen ( s ) ; for ( i = 1 , j = n - 3 ; i <= 3 ; i ++ , j ++ ) a [ i ] = s [ j ] ; for ( i = 0 ; i < n - 4 ; i ++ ) max = max > s [ i ] ? max : s [ i ] ; for ( i = 0 ; i < n - 4 ; i ++ ) if ( s [ i ] == max ) { m = i ; break ; } for ( i = 0 ; i <= m ; i ++ ) printf ( "%c" , s [ i ] ) ; for ( i = 1 ; i <= 3 ; i ++ ) printf ( "%c" , a [ i ] ) ; for ( i = m + 1 ; i < n - 4 ; i ++ ) printf ( "%c" , s [ i ] ) ; printf ( "\n" ) ; }
int main ( ) { int i , j , t ; char str [ 11 ] , substr [ 4 ] ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { t = 0 ; for ( i = 0 ; str [ i ] ; i ++ ) if ( str [ i ] > t ) t = str [ i ] ; for ( i = 0 ; str [ i ] ; i ++ ) { if ( str [ i ] < t ) printf ( "%c" , str [ i ] ) ; else { printf ( "%c" , str [ i ] ) ; printf ( "%s" , substr ) ; break ; } } for ( j = i + 1 ; str [ j ] ; j ++ ) printf ( "%c" , str [ j ] ) ; printf ( "\n" ) ; } return 0 ; }
void main ( ) { char str [ 13 ] , substr [ 3 ] , out [ 50 ] [ 13 ] ; int maxasc ( char a [ 13 ] ) ; int n , i , max ; for ( n = 0 ; ; n ++ ) { if ( scanf ( "%s" , str ) == EOF ) break ; scanf ( "%s" , substr ) ; max = maxasc ( str ) ; for ( i = strlen ( str ) ; i > max ; i -- ) { str [ i + 3 ] = str [ i ] ; } str [ max + 1 ] = substr [ 0 ] ; str [ max + 2 ] = substr [ 1 ] ; str [ max + 3 ] = substr [ 2 ] ; strcpy ( out [ n ] , str ) ; } for ( i = 0 ; i < n ; i ++ ) puts ( out [ i ] ) ; } int maxasc ( char a [ 13 ] ) { int result , i ; for ( i = 0 , result = 0 ; i < strlen ( a ) ; i ++ ) if ( a [ i ] > a [ result ] ) result = i ; return result ; }
void main ( ) { int k = 0 , n , i , j , l , m ; char a [ 100 ] [ 20 ] = { 0 } , max , e [ 100 ] [ 20 ] = { 0 } ; while ( 1 ) { char b [ 10 ] = { 0 } , c [ 20 ] = { 0 } , d [ 3 ] = { 0 } , p ; gets ( a [ k ] ) ; if ( a [ k ] [ 0 ] == 0 ) break ; n = strlen ( a [ k ] ) ; m = n - 4 ; max = a [ k ] [ 0 ] ; for ( i = 1 ; i <= n - 5 ; i ++ ) if ( a [ k ] [ i ] > max ) { max = a [ k ] [ i ] ; p = i ; } for ( j = p + 1 , l = 0 ; j <= m - 1 ; j ++ , l ++ ) b [ l ] = a [ k ] [ j ] ; for ( i = 0 ; i <= p ; i ++ ) c [ i ] = a [ k ] [ i ] ; for ( i = 0 , j = m + 1 ; j <= n - 1 ; i ++ , j ++ ) d [ i ] = a [ k ] [ j ] ; strcat ( c , d ) ; strcat ( c , b ) ; strcpy ( e [ k ] , c ) ; k ++ ; } for ( i = 0 ; i <= k - 1 ; i ++ ) puts ( e [ i ] ) ; }
void main ( ) { char mid , a [ 100 ] [ 50 ] ; int i = 0 , j = 0 , k = 0 , m , b [ 100 ] ; do { gets ( a [ i ] ) ; b [ i ] = strlen ( a [ i ] ) ; i ++ ; } while ( a [ i - 1 ] [ 0 ] != '\0' ) ; m = i - 1 ; for ( i = 0 ; i < m ; i ++ ) { k = 0 ; mid = a [ i ] [ 0 ] ; for ( j = 1 ; j < b [ i ] - 4 ; j ++ ) { if ( a [ i ] [ j ] > mid ) { mid = a [ i ] [ j ] ; k = j ; } } for ( j = 0 ; j <= k ; j ++ ) { printf ( "%c" , a [ i ] [ j ] ) ; } for ( j = b [ i ] - 3 ; j < b [ i ] ; j ++ ) { printf ( "%c" , a [ i ] [ j ] ) ; } for ( j = k + 1 ; j < b [ i ] - 4 ; j ++ ) { printf ( "%c" , a [ i ] [ j ] ) ; } printf ( "\n" ) ; } }
void main ( ) { char str [ 11 ] , substr [ 4 ] , max ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { int i , t , m ; m = strlen ( str ) ; max = str [ 0 ] ; t = 0 ; for ( i = 0 ; i <= m - 2 ; i ++ ) { if ( str [ i + 1 ] > max ) { max = str [ i + 1 ] ; t = i + 1 ; } } for ( i = 0 ; i <= t ; i ++ ) { printf ( "%c" , str [ i ] ) ; } printf ( "%s" , substr ) ; for ( i = t + 1 ; i <= m - 2 ; i ++ ) { printf ( "%c" , str [ i ] ) ; } printf ( "%c\n" , str [ m - 1 ] ) ; } }
void main ( ) { char str [ 50 ] [ 10 ] = { 0 } , substr [ 50 ] [ 3 ] = { 0 } , a [ 50 ] [ 13 ] = { 0 } , max [ 50 ] = { 0 } , c [ 50 ] [ 14 ] = { 0 } ; int len [ 50 ] , i , n , j , num [ 50 ] , k , cl [ 50 ] ; for ( i = 0 ; ; i ++ ) { gets ( c [ i ] ) ; cl [ i ] = strlen ( c [ i ] ) ; if ( cl [ i ] == 0 ) break ; for ( j = 0 ; j < cl [ i ] ; j ++ ) { if ( c [ i ] [ j ] != ' ' ) { str [ i ] [ j ] = c [ i ] [ j ] ; } else { k = j ; break ; } } for ( j = k + 1 ; j < cl [ i ] ; j ++ ) { substr [ i ] [ j - k - 1 ] = c [ i ] [ j ] ; } } n = i ; for ( i = 0 ; i < n ; i ++ ) { len [ i ] = strlen ( str [ i ] ) ; for ( j = 0 , max [ i ] = str [ i ] [ 0 ] ; j < len [ i ] ; j ++ ) { if ( str [ i ] [ j ] > max [ i ] ) { max [ i ] = str [ i ] [ j ] ; num [ i ] = j ; } } for ( j = 0 ; j < ( len [ i ] + 3 ) ; j ++ ) { k = j - num [ i ] - 1 ; if ( j <= num [ i ] ) { a [ i ] [ j ] = str [ i ] [ j ] ; } else { if ( j <= ( num [ i ] + 3 ) ) { a [ i ] [ j ] = substr [ i ] [ k ] ; } else { a [ i ] [ j ] = str [ i ] [ j - 3 ] ; } } } printf ( "%s\n" , a [ i ] ) ; } }
void main ( ) { int s ; for ( ; ; ) { char str1 [ 100 ] , str2 [ 5 ] , str3 [ 100 ] = { '\0' } , m ; int i , j , l ; s = scanf ( "%s %s" , & str1 , & str2 ) ; if ( s != 2 ) break ; else { for ( i = 0 , m = str1 [ 0 ] ; i < strlen ( str1 ) ; i ++ ) { if ( m < str1 [ i ] ) m = str1 [ i ] ; } for ( i = 0 ; i < strlen ( str1 ) ; i ++ ) if ( str1 [ i ] == m ) { l = i ; break ; } for ( i = 0 ; i <= l ; i ++ ) str3 [ i ] = str1 [ i ] ; for ( i = 0 ; i < 3 ; i ++ ) str3 [ l + 1 + i ] = str2 [ i ] ; for ( i = 0 ; i < ( strlen ( str1 ) - l - 1 ) ; i ++ ) str3 [ l + 4 + i ] = str1 [ l + i + 1 ] ; printf ( "%s\n" , str3 ) ; } } }
void main ( ) { char str [ 15 ] , substr [ 3 ] ; int n , i , j ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { n = strlen ( str ) ; j = 0 ; str [ n ] = 97 ; substr [ 3 ] = 97 ; for ( i = 1 ; i <= n - 1 ; i ++ ) { if ( str [ i ] > str [ j ] ) j = i ; } for ( i = n ; i >= j + 1 ; i -- ) { str [ i + 3 ] = str [ i ] ; } for ( i = j + 1 ; i <= j + 3 ; i ++ ) { str [ i ] = substr [ i - 1 - j ] ; } str [ n + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
int main ( ) { char max ( char a [ 10 ] ) ; char a [ 100 ] [ 15 ] = { '\0' } , b [ 100 ] [ 3 ] ; int i , j ; for ( i = 0 ; ; i ++ ) { scanf ( "%s %s" , a [ i ] , b [ i ] ) ; if ( a [ i ] [ 0 ] == '\0' ) break ; } int count = i + 1 ; for ( i = 0 ; i < count ; i ++ ) { int m = strlen ( a [ i ] ) ; char c [ 13 ] = { 0 } ; int k = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( k == 0 ) c [ j ] = a [ i ] [ j ] ; else if ( k > 0 ) c [ j + 3 ] = a [ i ] [ j ] ; if ( ( a [ i ] [ j ] == max ( a [ i ] ) ) && ( k == 0 ) ) { c [ j ] = a [ i ] [ j ] ; c [ j + 1 ] = b [ i ] [ 0 ] ; c [ j + 2 ] = b [ i ] [ 1 ] ; c [ j + 3 ] = b [ i ] [ 2 ] ; k ++ ; } } if ( i < count - 1 ) printf ( "%s\n" , c ) ; else if ( i == count - 1 ) printf ( "%s\n" , c ) ; } } char max ( char a [ 10 ] ) { int i ; char t = a [ 0 ] ; for ( i = 0 ; i < 10 ; i ++ ) if ( a [ i ] > t ) t = a [ i ] ; return ( t ) ; }
void main ( ) { char str [ 14 ] , substr [ 4 ] ; char str1 [ 14 ] , str2 [ 14 ] ; int i = 0 , n , k ; char max ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { n = strlen ( str ) ; for ( i = 0 , max = str [ 0 ] ; i < n ; i ++ ) max = ( max >= str [ i ] ) ? max : str [ i ] ; for ( i = 0 ; i < n ; i ++ ) { if ( str [ i ] == max ) break ; } k = i ; strncpy ( str1 , str , k + 1 ) ; str1 [ k + 1 ] = '\0' ; for ( i = 0 ; i < n - k - 1 ; i ++ ) str2 [ i ] = str [ k + 1 + i ] ; str2 [ i ] = '\0' ; strcat ( str1 , substr ) ; strcat ( str1 , str2 ) ; printf ( "%s\n" , str1 ) ; } }
void main ( ) { int i , j , a ; char c , str [ 800 ] , substr [ 4 ] , str0 [ 800 ] , max ; while ( ( scanf ( "%s %s" , str , substr ) ) != EOF ) { a = strlen ( str ) ; max = str [ 0 ] ; for ( i = 0 ; i < a ; i ++ ) if ( str [ i ] > max ) max = str [ i ] ; for ( i = 0 ; i < a ; i ++ ) if ( str [ i ] == max ) break ; for ( j = 0 ; j <= i ; j ++ ) str0 [ j ] = str [ j ] ; for ( j = i + 1 ; j < a ; j ++ ) str0 [ j + 3 ] = str [ j ] ; str0 [ i + 1 ] = substr [ 0 ] ; str0 [ i + 2 ] = substr [ 1 ] ; str0 [ i + 3 ] = substr [ 2 ] ; for ( i = 0 ; i < a + 3 ; i ++ ) printf ( "%c" , str0 [ i ] ) ; printf ( "\n" ) ; } }
int main ( ) { int n , i , j , k ; char str [ 11 ] ; char substr [ 4 ] ; char t ; while ( scanf ( "%s%s" , str , substr ) != EOF ) { t = str [ 0 ] ; k = 0 ; for ( i = 1 ; str [ i ] != '\0' ; i ++ ) { if ( ( str [ i ] - t ) > 0 ) { t = str [ i ] ; k = i ; } } for ( i = 0 ; i <= k ; i ++ ) { printf ( "%c" , str [ i ] ) ; } for ( i = 0 ; substr [ i ] != '\0' ; i ++ ) { printf ( "%c" , substr [ i ] ) ; } for ( i = k + 1 ; str [ i ] != '\0' ; i ++ ) { printf ( "%c" , str [ i ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char from [ 100 ] ; char to [ 100 ] ; while ( 1 ) { int max = 0 ; char str [ 1000 ] ; cin . getline ( str , 999 ) ; if ( str [ 0 ] == '\0' ) { return 0 ; } int lenstr = strlen ( str ) ; if ( lenstr == 0 ) { return 0 ; } ; int i ; for ( i = 0 ; i < lenstr ; i ++ ) { if ( str [ i ] == ' ' ) { break ; } from [ i ] = str [ i ] ; } from [ i ] = '\0' ; int k ; k = 0 ; for ( ++ i ; i < lenstr ; i ++ ) { to [ k ] = str [ i ] ; k ++ ; } to [ k ] = '\0' ; int len ; len = strlen ( from ) ; int maxpos = 0 ; for ( i = 0 ; i < len ; i ++ ) { if ( from [ i ] > max ) { max = from [ i ] ; maxpos = i ; } } int j ; for ( j = 0 ; j <= maxpos ; j ++ ) { printf ( "%c" , from [ j ] ) ; } for ( i = 0 ; to [ i ] != '\0' ; i ++ ) { printf ( "%c" , to [ i ] ) ; } for ( ; from [ j ] != '\0' ; j ++ ) { printf ( "%c" , from [ j ] ) ; } printf ( "\n" ) ; } return 0 ; }
int main ( ) { char a [ 100 ] [ 15 ] = { 0 } , d [ 100 ] [ 15 ] = { 0 } ; int i = 0 , j , n , k = 0 , cutpoint ; while ( 1 ) { char b [ 20 ] = { 0 } , c [ 10 ] = { 0 } , e [ 4 ] = { 0 } , max ; gets ( a [ k ] ) ; n = strlen ( a [ k ] ) ; for ( i = 0 ; i < 3 ; i ++ ) { e [ i ] = a [ k ] [ n - 3 + i ] ; } if ( a [ k ] [ 0 ] == 0 ) break ; max = a [ k ] [ 0 ] ; for ( i = 0 ; i < n - 4 ; i ++ ) { if ( a [ k ] [ i ] > max ) { max = a [ k ] [ i ] ; cutpoint = i ; } } for ( i = 0 ; i <= cutpoint ; i ++ ) { b [ i ] = a [ k ] [ i ] ; } for ( i = 0 , j = cutpoint + 1 ; j < n - 4 ; i ++ , j ++ ) { c [ i ] = a [ k ] [ j ] ; } strcat ( b , e ) ; strcat ( b , c ) ; strcpy ( d [ k ] , b ) ; k ++ ; } for ( i = 0 ; i < k ; i ++ ) puts ( d [ i ] ) ; return 0 ; }
int main ( ) { char t , g , c [ 100 ] [ 15 ] = { '\0' } , a [ 100 ] [ 3 ] ; int i , b , j , k , h [ 100 ] ; for ( i = 0 ; ; i ++ ) { scanf ( "%s %s" , c [ i ] , a [ i ] ) ; if ( c [ i ] [ 0 ] == '\0' ) break ; } b = i + 1 ; for ( i = 0 ; i < b ; i ++ ) { h [ i ] = strlen ( c [ i ] ) ; t = c [ i ] [ 0 ] ; for ( j = 0 ; j < h [ i ] ; j ++ ) { if ( c [ i ] [ j ] > t ) t = c [ i ] [ j ] ; } for ( j = 0 ; j < h [ i ] ; j ++ ) { if ( c [ i ] [ j ] == t ) { for ( k = ( h [ i ] - 1 ) ; k > j ; k -- ) { c [ i ] [ k + 3 ] = c [ i ] [ k ] ; } c [ i ] [ j + 1 ] = a [ i ] [ 0 ] ; c [ i ] [ j + 2 ] = a [ i ] [ 1 ] ; c [ i ] [ j + 3 ] = a [ i ] [ 2 ] ; break ; } } printf ( "%s\n" , c [ i ] ) ; } return 0 ; }
void main ( ) { char str [ 15 ] = { 0 } ; char substr [ 3 ] = { 0 } ; char string [ 500 ] [ 15 ] = { 0 } ; char max ; int i , x , d , j ; j = 0 ; while ( 1 ) { gets ( str ) ; d = strlen ( str ) ; if ( d == 0 ) break ; for ( i = 0 ; i < d ; i ++ ) if ( str [ i ] == ' ' ) break ; for ( x = i + 1 ; x <= i + 4 ; x ++ ) substr [ x - i - 1 ] = str [ x ] ; str [ i ] = '\0' ; d = d - 3 ; max = str [ 0 ] ; x = 0 ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) if ( str [ i ] > max ) { max = str [ i ] ; x = i ; } for ( i = d - 1 ; i > x ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = x + 1 ; i < x + 4 ; i ++ ) str [ i ] = substr [ i - x - 1 ] ; strcpy ( string [ j ] , str ) ; string [ j ] [ d + 3 ] = '\0' ; j = j + 1 ; for ( i = 0 ; i < 13 ; i ++ ) { str [ i ] = 0 ; substr [ i ] = 0 ; } } d = j ; for ( i = j ; i < 500 ; i ++ ) string [ i ] [ 0 ] = '\0' ; for ( i = 0 ; i < d ; i ++ ) printf ( "%s\n" , string [ i ] ) ; }
void main ( ) { char str [ 15 ] ; char substr [ 3 ] ; char string [ 500 ] [ 15 ] ; char max ; int i , x , d , j ; j = 0 ; while ( gets ( str ) != NULL ) { d = strlen ( str ) ; if ( d == 0 ) break ; for ( i = 0 ; i < d ; i ++ ) if ( str [ i ] == ' ' ) break ; for ( x = i + 1 ; x <= i + 4 ; x ++ ) substr [ x - i - 1 ] = str [ x ] ; str [ i ] = '\0' ; d = d - 3 ; max = str [ 0 ] ; x = 0 ; for ( i = 0 ; str [ i ] != '\0' ; i ++ ) if ( str [ i ] > max ) { max = str [ i ] ; x = i ; } for ( i = d - 1 ; i > x ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = x + 1 ; i < x + 4 ; i ++ ) str [ i ] = substr [ i - x - 1 ] ; strcpy ( string [ j ] , str ) ; string [ j ] [ d + 3 ] = '\0' ; j = j + 1 ; } for ( i = j ; i < 500 ; i ++ ) string [ i ] [ 0 ] = '\0' ; for ( i = 0 ; i < j ; i ++ ) printf ( "%s\n" , string [ i ] ) ; }
int main ( ) { char a [ 100 ] , c , str [ 100 ] , substr [ 100 ] , x ; int i , j , k , s , t ; while ( gets ( a ) ) { for ( i = 0 ; ( c = a [ i ] ) != ' ' ; i ++ ) str [ i ] = a [ i ] ; s = i + 1 ; k = 0 ; for ( j = s ; ( c = a [ j ] ) != '\0' ; j ++ ) { substr [ k ] = a [ j ] ; k ++ ; } x = str [ 0 ] ; for ( i = 0 ; i < s - 1 ; i ++ ) if ( str [ i ] > x ) { t = i + 1 ; x = str [ i ] ; } for ( i = 0 ; i < t ; i ++ ) printf ( "%c" , str [ i ] ) ; for ( j = 0 ; j < 3 ; j ++ ) printf ( "%c" , substr [ j ] ) ; for ( i = t ; i < s - 1 ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
void main ( ) { char str [ 15 ] , substr [ 3 ] ; int b , i , j ; while ( scanf ( "%s %s" , str , substr ) != EOF ) { b = strlen ( str ) ; j = 0 ; str [ b ] = 97 ; substr [ 3 ] = 97 ; for ( i = 1 ; i <= b - 1 ; i ++ ) if ( str [ i ] > str [ j ] ) j = i ; for ( i = b - 1 ; i >= j + 1 ; i -- ) str [ i + 3 ] = str [ i ] ; for ( i = j + 1 ; i <= j + 3 ; i ++ ) str [ i ] = substr [ i - 1 - j ] ; str [ b + 3 ] = '\0' ; printf ( "%s\n" , str ) ; } }
char * strInsert ( char * strDest , int n , const char * strIn ) { int l = strlen ( strIn ) ; int i ; for ( i = strlen ( strDest ) ; i > n ; i -- ) strDest [ i + l ] = strDest [ i ] ; for ( i = 0 ; i < l ; i ++ ) strDest [ n + 1 + i ] = strIn [ i ] ; return strDest ; } int main ( ) { char str [ 15 ] , substr [ 4 ] ; int i , max ; short flag ; do { flag = scanf ( "%s %s" , str , substr ) ; if ( flag < 2 ) break ; max = 0 ; for ( i = 1 ; i < strlen ( & str [ 0 ] ) ; i ++ ) { if ( str [ i ] > str [ max ] ) max = i ; } puts ( strInsert ( str , max , substr ) ) ; } while ( getchar ( ) != EOF ) ; return 0 ; }
void main ( ) { char str [ 11 ] , substr [ 4 ] ; int i , k = 0 , n ; char a ; while ( scanf ( "%s %s" , str , substr ) == 2 ) { n = strlen ( str ) ; a = str [ 0 ] ; for ( i = 0 ; ; i ++ ) { if ( str [ i ] == '\0' ) break ; if ( str [ i ] > a ) { a = str [ i ] ; k = i ; } } for ( i = 0 ; i <= k ; i ++ ) printf ( "%c" , str [ i ] ) ; for ( i = 0 ; i <= 2 ; i ++ ) printf ( "%c" , substr [ i ] ) ; for ( i = k + 1 ; i < n ; i ++ ) printf ( "%c" , str [ i ] ) ; printf ( "\n" ) ; } }
void main ( ) { char str [ 10 ] = { 0 } , substr [ 13 ] = { 0 } ; int i , k , p , j ; for ( p = 0 ; p < 10000 ; p ++ ) { scanf ( "%s %s" , str , substr ) ; for ( i = 0 , k = 0 ; i < 9 ; i ++ ) if ( str [ k ] < str [ i + 1 ] ) k = i + 1 ; for ( i = k + 1 , j = 3 ; i < 10 ; i ++ , j ++ ) { substr [ j ] = str [ i ] ; str [ i ] = 0 ; } printf ( "%s\n" , strcat ( str , substr ) ) ; for ( i = 0 ; i < 13 ; i ++ ) { str [ i ] = 0 ; substr [ i ] = 0 ; } } }
void main ( ) { char str [ 100 ] [ 10 ] = { "\0" } , substr [ 100 ] [ 3 ] = { "\0" } , a [ 100 ] [ 13 ] = { "\0" } ; int i = 0 , j = 0 , k = 0 , m = 0 ; for ( i = 0 ; i < 100 ; i ++ ) { scanf ( "%s %s" , str [ i ] , substr [ i ] ) ; if ( str [ i ] [ 0 ] == '\0' ) { break ; } m = strlen ( str [ i ] ) ; for ( j = 0 ; j < m ; j ++ ) { if ( str [ i ] [ j + 1 ] > str [ i ] [ k ] ) k = j + 1 ; } for ( j = 0 ; j <= k ; j ++ ) a [ i ] [ j ] = str [ i ] [ j ] ; a [ i ] [ k + 1 ] = substr [ i ] [ 0 ] ; a [ i ] [ k + 2 ] = substr [ i ] [ 1 ] ; a [ i ] [ k + 3 ] = substr [ i ] [ 2 ] ; m = strlen ( str [ i ] ) ; for ( j = k + 1 ; j < m ; j ++ ) a [ i ] [ j + 3 ] = str [ i ] [ j ] ; } for ( k = 0 ; k < i ; k ++ ) printf ( "%s\n" , a [ k ] ) ; }
int main ( ) { char str [ 14 ] , substr [ 4 ] ; while ( cin >> str >> substr ) { int i , j , k = 0 , len = strlen ( str ) ; char max = 1 ; for ( i = 0 ; i < len ; i ++ ) if ( max < str [ i ] ) max = str [ i ] ; for ( j = 0 ; j < len ; j ++ ) if ( max == str [ j ] ) break ; for ( i = len + 2 ; i > j + 3 ; i -- ) str [ i ] = str [ i - 3 ] ; str [ len + 3 ] = '\0' ; for ( i = j + 1 ; i < j + 4 ; i ++ ) str [ i ] = substr [ k ++ ] ; cout << str << endl ; } return 0 ; }
int main ( ) { int n , i , j , a , b , k , f ; for ( i = 0 ; ; i ++ ) { char str [ 14 ] = { 0 } , sub [ 4 ] = { 0 } , str1 [ 14 ] = { 0 } , c ; a = 0 ; j = 0 ; b = 0 ; f = 0 ; k = 0 ; n = 0 ; gets ( str ) ; if ( str [ 0 ] == 0 ) break ; k = strlen ( str ) ; while ( str [ j ] != ' ' ) { str1 [ j ] = str [ j ] ; j ++ ; } n = strlen ( str1 ) ; b = j + 1 ; while ( b < k && f < 3 ) { sub [ f ] = str [ b ] ; b ++ ; f ++ ; } c = str1 [ 0 ] ; for ( j = 1 ; j < n ; j ++ ) { if ( c < str1 [ j ] ) c = str1 [ j ] ; } for ( j = 0 ; j < n ; j ++ ) { if ( str1 [ j ] == c ) { a = j + 1 ; break ; } } for ( j = 0 ; j < a ; j ++ ) { printf ( "%c" , str1 [ j ] ) ; } printf ( "%s" , sub ) ; for ( j = a ; j < n ; j ++ ) { printf ( "%c" , str1 [ j ] ) ; } printf ( "\n" ) ; } }
void main ( ) { char str [ 3 ] , c [ 1000 ] [ 15 ] ; char t ; int i , j , k , n = 0 ; int a [ 1000 ] ; for ( i = 0 ; i < 1000 ; i ++ ) { gets ( c [ i ] ) ; if ( c [ i ] [ 0 ] != '\0' ) { a [ i ] = strlen ( c [ i ] ) ; n ++ ; } else break ; } for ( i = 0 ; i < n ; i ++ ) { t = c [ i ] [ 0 ] ; str [ 1 ] = c [ i ] [ a [ i ] - 3 ] ; str [ 2 ] = c [ i ] [ a [ i ] - 2 ] ; str [ 3 ] = c [ i ] [ a [ i ] - 1 ] ; for ( j = 0 ; j < a [ i ] - 4 ; j ++ ) if ( t < c [ i ] [ j ] ) t = c [ i ] [ j ] ; for ( j = 0 ; j < a [ i ] - 4 ; j ++ ) if ( t == c [ i ] [ j ] ) { for ( k = a [ i ] - 1 ; k >= j + 4 ; k -- ) c [ i ] [ k ] = c [ i ] [ k - 3 ] ; c [ i ] [ a [ i ] - 1 ] = '\0' ; c [ i ] [ j + 1 ] = str [ 1 ] ; c [ i ] [ j + 2 ] = str [ 2 ] ; c [ i ] [ j + 3 ] = str [ 3 ] ; break ; } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , c [ i ] ) ; }
void main ( ) { char str [ 100 ] [ 10 ] = { '\0' } , substr [ 100 ] [ 3 ] = { '\0' } , re [ 100 ] [ 13 ] = { '\0' } ; char * p ; int n , i , j , k ; for ( n = 0 ; scanf ( "%s" , str [ n ] ) != EOF ; n ++ ) scanf ( "%s" , substr [ n ] ) ; for ( i = 0 , k = 0 ; i < n ; i ++ ) { p = & str [ i ] [ 0 ] ; k = 0 ; for ( j = 1 ; * ( p + j ) != '\0' ; j ++ ) { if ( * ( p + k ) < * ( p + j ) ) k = j ; } for ( j = 0 ; j <= k ; j ++ , p ++ ) re [ i ] [ j ] = * p ; for ( ; j <= k + 3 ; j ++ ) re [ i ] [ j ] = substr [ i ] [ j - k - 1 ] ; for ( ; * p != '\0' ; p ++ , j ++ ) re [ i ] [ j ] = * p ; } for ( i = 0 ; i < n ; i ++ ) { p = & re [ i ] [ 0 ] ; for ( ; * p != '\0' ; p ++ ) printf ( "%c" , * p ) ; printf ( "\n" ) ; } }
void main ( ) { int i , j = 0 , n , p ; char str [ 100 ] [ 50 ] , sub [ 100 ] [ 50 ] , c [ 100 ] , t ; c [ 0 ] = getchar ( ) ; do { p = - 1 ; t = c [ j ] ; scanf ( "%s%s" , str [ j ] , sub [ j ] ) ; for ( i = 0 ; i < strlen ( str [ j ] ) ; i ++ ) { if ( str [ j ] [ i ] > t ) { p = i ; t = str [ j ] [ i ] ; } } for ( i = strlen ( str [ j ] ) ; i > p ; i -- ) str [ j ] [ i + ( n = strlen ( sub [ j ] ) ) ] = str [ j ] [ i ] ; for ( i = 0 ; i < n ; i ++ ) str [ j ] [ p + 1 + i ] = sub [ j ] [ i ] ; j ++ ; c [ j ] = getchar ( ) ; } while ( c [ j ] == 10 ) ; for ( i = 0 ; i < j ; i ++ ) printf ( "%c%s\n" , c [ i ] , str [ i ] ) ; }
void main ( ) { int i , j , k , m = 0 , n , w ; char a [ 10 ] [ 15 ] , b [ 10 ] [ 15 ] , d [ 10 ] [ 15 ] ; for ( i = 0 ; i < 10 ; i ++ ) for ( j = 0 ; j < 15 ; j ++ ) { a [ i ] [ j ] = '\0' ; b [ i ] [ j ] = '\0' ; d [ i ] [ j ] = '\0' ; } for ( i = 0 ; scanf ( "%s %s" , a [ i ] , b [ i ] ) != EOF ; i ++ ) { n = strlen ( a [ i ] ) ; for ( k = 0 , m = 0 ; k < n - 1 ; k ++ ) { if ( a [ i ] [ m ] < a [ i ] [ k + 1 ] ) m = k + 1 ; } for ( k = n - 1 ; k > m ; k -- ) a [ i ] [ k + 3 ] = a [ i ] [ k ] ; for ( k = m + 1 , w = 0 ; k != m + 4 ; k ++ , w ++ ) a [ i ] [ k ] = b [ i ] [ w ] ; puts ( a [ i ] ) ; printf ( "\n" ) ; } }
void main ( ) { int mas ( char str [ 10 ] ) ; int i , length , k ; char str [ 11 ] , substr [ 3 ] , strs [ 13 ] , strw [ 11 ] ; do { strcpy ( strw , str ) ; scanf ( "%s %s" , str , substr ) ; length = strlen ( str ) ; if ( strcmp ( strw , str ) == 0 ) break ; k = mas ( str ) ; for ( i = 0 ; i < k ; i ++ ) strs [ i ] = str [ i ] ; for ( i = 0 ; i < 3 ; i ++ ) strs [ k + i ] = substr [ i ] ; for ( i = 0 ; i < length - k ; i ++ ) strs [ k + 3 + i ] = str [ k + i ] ; for ( i = 0 ; i < length + 2 ; i ++ ) printf ( "%c" , strs [ i ] ) ; printf ( "%c\n" , strs [ length + 2 ] ) ; } while ( strlen ( str ) < 11 ) ; } int mas ( char stra [ 10 ] ) { int i , k = 0 , j , length , m = 0 ; length = strlen ( stra ) ; for ( i = 0 ; i < length ; i ++ ) { m = 0 ; for ( j = 0 ; j < length ; j ++ ) { if ( stra [ i ] < stra [ j ] ) m ++ ; } if ( m == 0 ) { k = i + 1 ; break ; } } return ( k ) ; }
char * findmax ( char * p ) { char * max ; for ( max = p ; * p != '\0' ; p ++ ) if ( * p > * max ) max = p ; return max ; } void insert ( char * op , char * sp ) { char * np ; np = ( char * ) malloc ( 1000 ) ; char * t = np ; char * temp ; char * temp2 ; for ( temp = op ; * temp != * findmax ( op ) ; temp ++ , np ++ ) * np = * temp ; temp2 = temp ; * np = * temp ; np ++ ; for ( temp = sp ; * sp != '\0' ; np ++ , sp ++ ) * np = * sp ; for ( temp = temp2 + 1 ; * temp != '\0' ; np ++ , temp ++ ) * np = * temp ; * np = '\0' ; while ( * t != '\0' ) { printf ( "%c" , * t ) ; t ++ ; } printf ( "\n" ) ; } void main ( ) { char ori [ 10 ] , sub [ 3 ] , newstr [ 13 ] ; char * orip = ori , * subp = sub , * newstrp = newstr ; while ( scanf ( "%s %s" , ori , sub ) != EOF ) { insert ( orip , subp ) ; } }
char * findmax ( char * p ) { char * max ; for ( max = p ; * p != '\0' ; p ++ ) if ( * p > * max ) max = p ; return max ; } void insert ( char * op , char * sp ) { for ( ; * op != * findmax ( op ) ; op ++ ) printf ( "%c" , * op ) ; printf ( "%c" , * op ) ; for ( ; * sp != '\0' ; sp ++ ) printf ( "%c" , * sp ) ; for ( op ++ ; * op != '\0' ; op ++ ) printf ( "%c" , * op ) ; printf ( "\n" ) ; } void main ( ) { char ori [ 10 ] , sub [ 3 ] , newstr [ 13 ] ; char * orip = ori , * subp = sub , * newstrp = newstr ; while ( scanf ( "%s %s" , ori , sub ) != EOF ) insert ( orip , subp ) ; }
void main ( ) { char a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , s [ 100 ] [ 100 ] ; int i = 0 , j = 0 , k , m , n , count , lon [ 100 ] ; gets ( s [ 0 ] ) ; lon [ 0 ] = strlen ( s [ 0 ] ) ; n = 1 ; for ( i = 1 ; s [ i - 1 ] [ 0 ] != '\0' ; i ++ ) { gets ( s [ i ] ) ; lon [ i ] = strlen ( s [ i ] ) ; n ++ ; } n -- ; for ( i = 0 ; i < n ; i ++ ) { k = 0 ; for ( j = 1 ; s [ i ] [ j ] != 32 ; j ++ ) { if ( s [ i ] [ j ] > s [ i ] [ k ] ) k = j ; } for ( j = 0 ; j <= k ; j ++ ) printf ( "%c" , s [ i ] [ j ] ) ; for ( j = lon [ i ] - 3 ; j < lon [ i ] ; j ++ ) printf ( "%c" , s [ i ] [ j ] ) ; for ( j = k + 1 ; s [ i ] [ j ] != 32 ; j ++ ) printf ( "%c" , s [ i ] [ j ] ) ; printf ( "\n" ) ; } }
int main ( int argc , char * argv [ ] ) { char m = 0 ; int cnt [ 255 ] , i , j , n ; struct { int id ; char au [ 32 ] ; } bk [ 1000 ] ; memset ( cnt , 0 , sizeof ( cnt ) ) ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & bk [ i ] . id , bk [ i ] . au ) ; for ( j = 0 ; bk [ i ] . au [ j ] ; j ++ ) if ( ++ cnt [ bk [ i ] . au [ j ] ] > cnt [ m ] ) m = bk [ i ] . au [ j ] ; } printf ( "%c\n%d\n" , m , cnt [ m ] ) ; for ( i = 0 ; i < n ; i ++ ) if ( strchr ( bk [ i ] . au , m ) ) printf ( "%d\n" , bk [ i ] . id ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { struct { int a ; char b [ 26 ] ; } num [ 999 ] ; int i , m , j , k ; int s [ 26 ] ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d%s" , & num [ i ] . a , num [ i ] . b ) ; } for ( k = 0 ; k < 26 ; k ++ ) { s [ k ] = 0 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; num [ i ] . b [ j ] != '\0' ; j ++ ) { k = num [ i ] . b [ j ] - 'A' ; s [ k ] ++ ; } } int first = s [ 0 ] ; int t ; for ( k = 0 ; k < 26 ; k ++ ) { if ( s [ k ] > first ) { first = s [ k ] ; t = k ; } } printf ( "%c\n" , t + 'A' ) ; printf ( "%d\n" , first ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; num [ i ] . b [ j ] != '\0' ; j ++ ) { if ( num [ i ] . b [ j ] == ( t + 'A' ) ) { printf ( "%d\n" , num [ i ] . a ) ; } } } return 0 ; }
struct book { int num ; char name [ 27 ] ; struct book * next ; } ; main ( ) { struct book * p1 , * p2 , * head = NULL ; int i , j , n , m , k , a [ 26 ] , max , first ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { p1 = ( struct book * ) malloc ( sizeof ( struct book ) ) ; scanf ( "%d%s" , & p1 -> num , p1 -> name ) ; if ( i == 0 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; p1 = head ; for ( i = 0 ; i < 26 ; i ++ ) a [ i ] = 0 ; for ( i = 0 ; i < m ; i ++ ) { n = strlen ( p1 -> name ) ; for ( j = 0 ; j < n ; j ++ ) { k = p1 -> name [ j ] - 'A' ; a [ k ] ++ ; } p1 = p1 -> next ; } max = a [ 0 ] ; first = 0 ; for ( k = 1 ; k < 26 ; k ++ ) { if ( a [ k ] > max ) { max = a [ k ] ; first = k ; } } printf ( "%c\n" , 'A' + first ) ; printf ( "%d\n" , max ) ; p1 = head ; for ( i = 0 ; i < m ; i ++ ) { n = strlen ( p1 -> name ) ; for ( j = 0 ; j < n ; j ++ ) { if ( p1 -> name [ j ] == 'A' + first ) { printf ( "%d\n" , p1 -> num ) ; break ; } } p1 = p1 -> next ; } }
int a = 0 , b = 0 , c = 0 , d = 0 , e = 0 , f = 0 , g = 0 , h = 0 , i = 0 , j = 0 , k = 0 , l = 0 , m = 0 , n = 0 , o = 0 , p = 0 , q = 0 , r = 0 , s = 0 , t = 0 , u = 0 , v = 0 , w = 0 , x = 0 , y = 0 , z = 0 ; int max = 0 ; char maxn ; struct book { int id ; char author [ 28 ] ; } * bb ; void find ( int ii ) ; int main ( ) { int n ; scanf ( "%d" , & n ) ; int ii ; bb = ( struct book * ) malloc ( sizeof ( struct book ) * n ) ; for ( ii = 0 ; ii < n ; ii ++ ) { scanf ( "%d %s" , & bb [ ii ] . id , bb [ ii ] . author ) ; } for ( ii = 0 ; ii < n ; ii ++ ) { find ( ii ) ; } printf ( "%c\n" , maxn ) ; printf ( "%d\n" , max ) ; int jj ; for ( ii = 0 ; ii < n ; ii ++ ) { for ( jj = 0 ; bb [ ii ] . author [ jj ] != '\0' ; jj ++ ) { if ( bb [ ii ] . author [ jj ] == maxn ) { printf ( "%d\n" , bb [ ii ] . id ) ; } } } free ( bb ) ; return 0 ; } void find ( int ii ) { int aa = 0 ; for ( aa = 0 ; bb [ ii ] . author [ aa ] != '\0' ; aa ++ ) { switch ( bb [ ii ] . author [ aa ] ) { case 'A' : { a ++ ; if ( a > max ) max = a , maxn = 'A' ; break ; } case 'B' : { b ++ ; if ( b > max ) max = b , maxn = 'B' ; break ; } case 'C' : { c ++ ; if ( c > max ) max = c , maxn = 'C' ; break ; } case 'D' : { d ++ ; if ( d > max ) max = d , maxn = 'D' ; break ; } case 'E' : { e ++ ; if ( e > max ) max = e , maxn = 'E' ; break ; } case 'F' : { f ++ ; if ( f > max ) max = f , maxn = 'F' ; break ; } case 'G' : { g ++ ; if ( g > max ) max = g , maxn = 'G' ; break ; } case 'H' : { h ++ ; if ( h > max ) max = h , maxn = 'H' ; break ; } case 'I' : { i ++ ; if ( i > max ) max = i , maxn = 'I' ; break ; } case 'J' : { j ++ ; if ( j > max ) max = j , maxn = 'J' ; break ; } case 'K' : { k ++ ; if ( k > max ) max = k , maxn = 'K' ; break ; } case 'L' : { l ++ ; if ( l > max ) max = l , maxn = 'L' ; break ; } case 'M' : { m ++ ; if ( m > max ) max = m , maxn = 'M' ; break ; } case 'N' : { n ++ ; if ( n > max ) max = n , maxn = 'N' ; break ; } case 'O' : { o ++ ; if ( o > max ) max = o , maxn = 'O' ; break ; } case 'P' : { p ++ ; if ( p > max ) max = p , maxn = 'P' ; break ; } case 'Q' : { q ++ ; if ( q > max ) max = q , maxn = 'Q' ; break ; } case 'R' : { r ++ ; if ( r > max ) max = r , maxn = 'R' ; break ; } case 'S' : { s ++ ; if ( s > max ) max = s , maxn = 'S' ; break ; } case 'T' : { t ++ ; if ( t > max ) max = t , maxn = 'T' ; break ; } case 'U' : { u ++ ; if ( u > max ) max = u , maxn = 'U' ; break ; } case 'V' : { v ++ ; if ( v > max ) max = v , maxn = 'V' ; break ; } case 'W' : { w ++ ; if ( w > max ) max = w , maxn = 'W' ; break ; } case 'X' : { x ++ ; if ( x > max ) max = x , maxn = 'X' ; break ; } case 'Y' : { y ++ ; if ( y > max ) max = y , maxn = 'Y' ; break ; } case 'Z' : { z ++ ; if ( z > max ) max = z , maxn = 'Z' ; break ; } } } }
int main ( ) { struct { int num ; char author [ 26 ] ; } book [ 1000 ] ; int shu_num [ 26 ] , i , j , k , n , max , length ; char max_author ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & book [ i ] . num , book [ i ] . author ) ; } for ( k = 0 ; k < 26 ; k ++ ) { shu_num [ k ] = 0 ; } for ( k = 0 ; k < 26 ; k ++ ) { for ( i = 0 ; i < n ; i ++ ) { length = strlen ( book [ i ] . author ) ; for ( j = 0 ; j < length ; j ++ ) { if ( book [ i ] . author [ j ] == 'A' + k ) { shu_num [ k ] ++ ; } } } } max = shu_num [ 0 ] ; max_author = 'A' ; for ( k = 0 ; k < 26 ; k ++ ) { if ( shu_num [ k ] > max ) { max = shu_num [ k ] ; max_author = 'A' + k ; } } printf ( "%c\n%d\n" , max_author , max ) ; for ( i = 0 ; i < n ; i ++ ) { length = strlen ( book [ i ] . author ) ; for ( j = 0 ; j < length ; j ++ ) { if ( book [ i ] . author [ j ] == max_author ) { printf ( "%d\n" , book [ i ] . num ) ; } } } return 0 ; }
void main ( ) { int n , i ; scanf ( "%d" , & n ) ; int b [ 1000 ] ; char s [ 1000 ] [ 26 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & b [ i ] , & s [ i ] ) ; } int a [ 26 ] = { 0 } ; char c [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; for ( i = 0 ; i < n ; i ++ ) { int l , j ; l = strlen ( s [ i ] ) ; for ( j = 0 ; j < l ; j ++ ) { switch ( s [ i ] [ j ] ) { case 'A' : a [ 0 ] = a [ 0 ] + 1 ; break ; case 'B' : a [ 1 ] = a [ 1 ] + 1 ; break ; case 'C' : a [ 2 ] = a [ 2 ] + 1 ; break ; case 'D' : a [ 3 ] = a [ 3 ] + 1 ; break ; case 'E' : a [ 4 ] = a [ 4 ] + 1 ; break ; case 'F' : a [ 5 ] = a [ 5 ] + 1 ; break ; case 'G' : a [ 6 ] = a [ 6 ] + 1 ; break ; case 'H' : a [ 7 ] = a [ 7 ] + 1 ; break ; case 'I' : a [ 8 ] = a [ 8 ] + 1 ; break ; case 'J' : a [ 9 ] = a [ 9 ] + 1 ; break ; case 'K' : a [ 10 ] = a [ 10 ] + 1 ; break ; case 'L' : a [ 11 ] = a [ 11 ] + 1 ; break ; case 'M' : a [ 12 ] = a [ 12 ] + 1 ; break ; case 'N' : a [ 13 ] = a [ 13 ] + 1 ; break ; case 'O' : a [ 14 ] = a [ 14 ] + 1 ; break ; case 'P' : a [ 15 ] = a [ 15 ] + 1 ; break ; case 'Q' : a [ 16 ] = a [ 16 ] + 1 ; break ; case 'R' : a [ 17 ] = a [ 17 ] + 1 ; break ; case 'S' : a [ 18 ] = a [ 18 ] + 1 ; break ; case 'T' : a [ 19 ] = a [ 19 ] + 1 ; break ; case 'U' : a [ 20 ] = a [ 20 ] + 1 ; break ; case 'V' : a [ 21 ] = a [ 21 ] + 1 ; break ; case 'W' : a [ 22 ] = a [ 22 ] + 1 ; break ; case 'X' : a [ 23 ] = a [ 23 ] + 1 ; break ; case 'Y' : a [ 24 ] = a [ 24 ] + 1 ; break ; default : a [ 25 ] = a [ 25 ] + 1 ; } } } int m ; char z ; m = a [ 0 ] , z = c [ 0 ] ; for ( i = 1 ; i < 26 ; i ++ ) { if ( a [ i ] > m ) m = a [ i ] , z = c [ i ] ; } printf ( "%c\n%d\n" , z , m ) ; for ( i = 0 ; i < n ; i ++ ) { int l , j ; l = strlen ( s [ i ] ) ; for ( j = 0 ; j < l ; j ++ ) { if ( s [ i ] [ j ] == z ) { printf ( "%d\n" , b [ i ] ) ; break ; } } } }
int main ( ) { int n , i , a [ 2000 ] , max = 0 , t , b [ 30 ] = { 0 } , j , m ; char str [ 1000 ] [ 30 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] , str [ i ] ) ; for ( j = 0 ; j < strlen ( str [ i ] ) ; j ++ ) { m = str [ i ] [ j ] - 64 ; b [ m ] ++ ; } } for ( i = 1 ; i < 26 ; i ++ ) if ( b [ i ] > max ) { max = b [ i ] ; t = i ; } printf ( "%c\n%d\n" , t + 64 , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < strlen ( str [ i ] ) ; j ++ ) if ( str [ i ] [ j ] == t + 64 ) printf ( "%d\n" , a [ i ] ) ; } return 0 ; }
int main ( ) { int n , max , t , i , j , a [ 1000 ] , l , b [ 30 ] = { 0 } , c ; char str [ 1000 ] [ 20 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] , str [ i ] ) ; l = strlen ( str [ i ] ) ; for ( j = 0 ; j < l ; j ++ ) { b [ str [ i ] [ j ] - 64 ] ++ ; } } for ( i = 1 ; i < 27 ; i ++ ) { if ( b [ i ] > max ) { max = b [ i ] ; t = i ; } } printf ( "%c\n%d\n" , t + 64 , b [ t ] ) ; for ( i = 0 ; i < n ; i ++ ) { l = strlen ( str [ i ] ) ; for ( j = 0 ; j < l ; j ++ ) { if ( str [ i ] [ j ] == t + 64 ) printf ( "%d\n" , a [ i ] ) ; } } return 0 ; }
void main ( ) { int num = 0 , n , a [ 26 ] , name [ 1000 ] , name2 [ 1000 ] , i , j , k , max = 0 , maxi = 0 ; char wr [ 1000 ] [ 27 ] ; char q ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 26 ; i ++ ) { a [ i ] = 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & ( name [ i ] ) , wr [ i ] ) ; for ( j = 0 ; j < 26 ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( wr [ i ] [ j ] == 'A' + k ) a [ k ] ++ ; } } } for ( i = 0 ; i < 26 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; maxi = i ; } } q = 'A' + maxi ; printf ( "%c\n" , q ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( wr [ i ] [ j ] == q ) { name2 [ num ] = name [ i ] ; num ++ ; } } } printf ( "%d\n" , num ) ; for ( i = 0 ; i < num ; i ++ ) printf ( "%d\n" , name2 [ i ] ) ; }
struct book { char name [ 26 ] ; int number ; } a [ 1000 ] ; void main ( ) { int n , i , j , b [ 26 ] = { 0 } , max = 0 , t ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & a [ i ] . number , a [ i ] . name ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; a [ i ] . name [ j ] != '\0' ; j ++ ) b [ a [ i ] . name [ j ] - 65 ] ++ ; for ( i = 0 ; i < 26 ; i ++ ) if ( max < b [ i ] ) max = b [ i ] ; for ( i = 0 ; i < 26 ; i ++ ) if ( max == b [ i ] ) { t = i ; break ; } printf ( "%c\n%d\n" , t + 65 , b [ t ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; a [ i ] . name [ j ] != '\0' ; j ++ ) if ( a [ i ] . name [ j ] == t + 65 ) { printf ( "%d\n" , a [ i ] . number ) ; break ; } }
int m , n ; struct student { int id ; char name [ 100 ] ; struct student * next ; } ; struct student * creat ( ) { int i = 1 ; struct student * head , * p1 , * p2 ; p1 = p2 = ( struct student * ) malloc ( len ) ; scanf ( "%d" , & m ) ; scanf ( "%d %s" , & p1 -> id , p1 -> name ) ; head = NULL ; for ( ; i < m ; i ++ ) { if ( i == 1 ) head = p1 ; p1 = ( struct student * ) malloc ( len ) ; scanf ( "%d %s" , & p1 -> id , p1 -> name ) ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } void main ( ) { struct student * head , * p1 ; int num [ 30 ] = { 0 } , max , j ; char i , auth ; head = creat ( ) ; for ( p1 = head ; p1 != NULL ; p1 = p1 -> next ) { for ( i = 'A' ; i <= 'Z' ; i ++ ) { for ( j = 0 ; j < strlen ( p1 -> name ) ; j ++ ) if ( p1 -> name [ j ] == i ) num [ i - 'A' ] ++ ; } } for ( i = 0 , max = 0 ; i < 26 ; i ++ ) { if ( num [ i ] > max ) { max = num [ i ] ; auth = i + 'A' ; } } printf ( "%c\n" , auth ) ; printf ( "%d\n" , max ) ; for ( p1 = head ; p1 != NULL ; p1 = p1 -> next ) { for ( j = 0 ; j < strlen ( p1 -> name ) ; j ++ ) if ( p1 -> name [ j ] == auth ) printf ( "%d\n" , p1 -> id ) ; } }
int main ( ) { int i , j , n ; struct book { int no ; char as [ 10 ] ; } bk ; scanf ( "%d" , & n ) ; struct book * books = ( struct book * ) malloc ( sizeof ( struct book ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & bk . no , bk . as ) ; books [ i ] = bk ; } int cnts [ 256 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { bk = books [ i ] ; for ( j = 0 ; bk . as [ j ] ; j ++ ) { cnts [ bk . as [ j ] ] ++ ; } } int count = 0 ; for ( int max = 1000 ; max > 0 ; max -- ) { for ( char c = 'A' ; c <= 'Z' ; c ++ ) { if ( cnts [ c ] == max ) { printf ( "%c\n%d\n" , c , max ) ; for ( i = 0 ; i < n ; i ++ ) { bk = books [ i ] ; for ( j = 0 ; bk . as [ j ] ; j ++ ) { if ( bk . as [ j ] == c ) { printf ( "%d\n" , bk . no ) ; break ; } } } count ++ ; } } if ( count == 1 ) { free ( books ) ; return 0 ; } } free ( books ) ; return - 1 ; }
struct test { int num ; int book [ 100 ] ; } a [ 26 ] ; int main ( ) { int n , i , j , index , temp , max ; char s [ 100 ] ; char ch ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < 26 ; i ++ ) { a [ i ] . num = 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & index , & s ) ; for ( j = 0 ; s [ j ] != '\0' ; j ++ ) { temp = ( int ) ( s [ j ] - 'A' ) ; a [ temp ] . book [ a [ temp ] . num ] = index ; a [ temp ] . num ++ ; } } max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( a [ i ] . num > a [ max ] . num ) max = i ; } ch = ( char ) ( 'A' + max ) ; printf ( "%c\n" , ch ) ; printf ( "%d\n" , a [ max ] . num ) ; for ( i = 0 ; i < a [ max ] . num ; i ++ ) { printf ( "%d\n" , a [ max ] . book [ i ] ) ; } return 0 ; }
int num [ 1000 ] ; char auth [ 1000 ] [ 26 ] ; int main ( ) { int m , i , l ; scanf ( "%d" , & m ) ; char c = 'A' ; int k = 0 ; int a [ 26 ] ; for ( i = 0 ; i < 26 ; i ++ ) a [ i ] = 0 ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & num [ i ] ) ; scanf ( "%s" , auth [ i ] ) ; int j = 0 ; while ( auth [ i ] [ j ] != '\0' ) { a [ auth [ i ] [ j ] - 64 ] ++ ; j ++ ; } } for ( i = 0 ; i < 25 ; i ++ ) { if ( a [ i ] > k ) { k = a [ i ] ; c = i + 64 ; } } printf ( "%c\n%d\n" , c , k ) ; for ( i = 0 ; i < m ; i ++ ) for ( l = 0 ; l < 26 ; l ++ ) { if ( auth [ i ] [ l ] == c ) printf ( "%d\n" , num [ i ] ) ; } return 0 ; }
int main ( ) { int maxc = 0 , i , j , n , a [ 1000 ] , c ; char maxp , b [ 1000 ] [ 27 ] , p ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & a [ i ] , b [ i ] ) ; } for ( p = 'A' ; p <= 'Z' ; p ++ ) { c = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; ; j ++ ) { if ( b [ i ] [ j ] == '\0' ) break ; if ( b [ i ] [ j ] == p ) { c ++ ; } } } if ( c > maxc ) { maxc = c ; maxp = p ; } } printf ( "%c\n" , maxp ) ; printf ( "%d\n" , maxc ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; ; j ++ ) { if ( b [ i ] [ j ] == '\0' ) break ; if ( b [ i ] [ j ] == maxp ) { printf ( "%d\n" , a [ i ] ) ; } } } return 0 ; }
struct book { int num ; char w [ 26 ] ; struct book * next ; } ; int c [ 26 ] , m , i , j = 0 , max ; struct book * creat ( int m ) { struct book * head , * p1 , * p2 ; p1 = ( struct book * ) malloc ( len ) ; scanf ( "%d%s" , & p1 -> num , p1 -> w ) ; p1 -> next = NULL ; p2 = p1 ; head = p1 ; for ( i = 1 ; i < m ; i ++ ) { p1 = ( struct book * ) malloc ( len ) ; scanf ( "%d%s" , & p1 -> num , p1 -> w ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return head ; } void a ( struct book * head ) { struct book * p ; char * x ; int l , ch ; p = head ; for ( i = 0 ; i < m ; i ++ ) { for ( x = p -> w ; x < p -> w + 26 ; x ++ ) { l = ( int ) * x ; ch = l - 65 ; if ( ch >= 0 ) c [ ch ] = c [ ch ] + 1 ; } p = p -> next ; } } void main ( ) { struct book * head , * p ; struct book * creat ( int m ) ; void a ( struct book * head ) ; char writer , * x ; int wri , b [ 200 ] ; for ( i = 0 ; i < 26 ; i ++ ) c [ i ] = 0 ; for ( i = 0 ; i < 200 ; i ++ ) b [ i ] = 0 ; scanf ( "%d" , & m ) ; head = creat ( m ) ; a ( head ) ; max = 0 ; j = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( c [ i ] > max ) { wri = i + 65 ; max = c [ i ] ; } } printf ( "%c\n" , wri ) ; p = head ; for ( i = 0 ; i < m ; i ++ ) { for ( x = p -> w ; x < p -> w + 26 ; x ++ ) { if ( * x == ( char ) wri ) { b [ j ] = p -> num ; j = j + 1 ; break ; } } p = p -> next ; } printf ( "%d\n" , j ) ; for ( j = 0 ; b [ j ] > 0 ; j ++ ) printf ( "%d\n" , b [ j ] ) ; }
struct book { int n ; char name [ 26 ] ; struct book * next ; } ; struct book * head ; int m ; struct book * creat ( ) { struct book * p1 , * p2 ; int i = 0 ; p1 = p2 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> n , p1 -> name ) ; head = NULL ; while ( i < m - 1 ) { i = i + 1 ; if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> n , p1 -> name ) ; } p2 -> next = p1 ; p1 -> next = NULL ; return ( head ) ; } void main ( ) { int i , j , * p , max = 0 , n ; struct book * p1 ; p = ( int * ) calloc ( 26 , sizeof ( int ) ) ; scanf ( "%d" , & m ) ; creat ( ) ; p1 = head ; for ( i = 65 ; i <= 90 ; i ++ ) { p1 = head ; do { for ( j = 0 ; ( p1 -> name ) [ j ] != '\0' ; j ++ ) if ( ( p1 -> name ) [ j ] == i ) * ( p + i - 65 ) = * ( p + i - 65 ) + 1 ; p1 = p1 -> next ; } while ( p1 != NULL ) ; } for ( i = 0 ; i < 26 ; i ++ , p ++ ) { if ( * p > max ) { max = * p ; n = i ; } } printf ( "%c\n" , n + 65 ) ; printf ( "%d\n" , max ) ; p1 = head ; do { for ( j = 0 ; ( p1 -> name ) [ j ] != '\0' ; j ++ ) { if ( ( p1 -> name ) [ j ] == n + 65 ) printf ( "%d\n" , p1 -> n ) ; } p1 = p1 -> next ; } while ( p1 != NULL ) ; }
int main ( ) { int record [ 26 ] [ 1000 ] ; memset ( record , 0 , sizeof ( record ) ) ; char name [ 10 ] ; int m , temp ; cin >> m ; for ( int i = 0 ; i < m ; i ++ ) { cin >> temp ; cin . get ( ) ; cin . getline ( name , 10 ) ; for ( int i = 0 ; i < strlen ( name ) ; i ++ ) { record [ name [ i ] - 65 ] [ record [ name [ i ] - 65 ] [ 0 ] + 1 ] = temp ; record [ name [ i ] - 65 ] [ 0 ] ++ ; } } int flag = 0 ; for ( int i = 0 ; i < 25 ; i ++ ) { if ( record [ i ] [ 0 ] > record [ flag ] [ 0 ] ) { flag = i ; } } cout << ( char ) ( flag + 65 ) << endl << record [ flag ] [ 0 ] << endl ; for ( int i = 1 ; i <= record [ flag ] [ 0 ] ; i ++ ) { cout << record [ flag ] [ i ] << endl ; } return 0 ; }
int n = 1 , m ; struct zuozhe { int num ; char ren [ 26 ] ; struct zuozhe * next ; } ; struct zuozhe * ap ( ) { struct zuozhe * head , * nw , * tn ; do { nw = ( struct zuozhe * ) malloc ( sizeof ( struct zuozhe ) ) ; scanf ( "%d%s" , & nw -> num , nw -> ren ) ; if ( n == 1 ) { head = nw ; tn = head ; } else tn -> next = nw ; if ( n <= m ) { tn = nw ; n ++ ; } } while ( n <= m ) ; tn -> next = NULL ; return head ; } int main ( ) { int i , max = 0 , a [ 26 ] = { 0 } , j , w , l ; char z ; struct zuozhe * head , * p ; scanf ( "%d" , & m ) ; head = ap ( ) ; p = head ; for ( ; p != NULL ; p = p -> next ) { l = strlen ( p -> ren ) ; for ( i = 0 ; i < l ; i ++ ) { j = p -> ren [ i ] - 65 ; a [ j ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( max < a [ i ] ) { max = a [ i ] ; w = i ; } } z = 65 + w ; printf ( "%c\n%d\n" , z , max ) ; p = head ; for ( ; p != NULL ; p = p -> next ) { l = strlen ( p -> ren ) ; for ( i = 0 ; i < l ; i ++ ) { if ( p -> ren [ i ] == z ) { printf ( "%d\n" , p -> num ) ; break ; } } } }
struct BOOK { int No ; char author [ 27 ] ; } book [ 999 ] ; int letter [ 26 ] = { 0 } ; main ( ) { int letter [ 26 ] = { 0 } ; int count = 0 ; int m , n , s ; scanf ( "%d" , & m ) ; int i , j , max ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d%s" , & book [ i ] . No , & book [ i ] . author ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( book [ i ] . author ) ; j ++ ) { n = book [ i ] . author [ j ] - 65 ; letter [ n ] ++ ; } } max = letter [ 0 ] ; for ( n = 0 ; n < 26 ; n ++ ) { if ( letter [ n ] > max ) { max = letter [ n ] ; } } for ( n = 0 ; n < 26 ; n ++ ) { if ( max == letter [ n ] ) { s = n ; printf ( "%c\n%d\n" , n + 65 , max ) ; break ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( book [ i ] . author ) ; j ++ ) { if ( s == book [ i ] . author [ j ] - 65 ) { printf ( "%d\n" , book [ i ] . No ) ; } } } }
int pp [ 26 ] = { 0 } ; struct st { char name [ 27 ] ; int num ; struct st * next ; } ; struct st * creat ( int m ) { struct st * head , * p1 , * p2 ; int i , j ; p1 = ( struct st * ) malloc ( sizeof ( struct st ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; for ( j = 0 ; ; j ++ ) { if ( isupper ( p1 -> name [ j ] ) ) pp [ p1 -> name [ j ] - 65 ] ++ ; else break ; } p2 = p1 ; head = p1 ; for ( i = 1 ; i < m ; i ++ ) { p1 = ( struct st * ) malloc ( sizeof ( struct st ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; for ( j = 0 ; ; j ++ ) { if ( isupper ( p1 -> name [ j ] ) ) pp [ p1 -> name [ j ] - 65 ] ++ ; else break ; } p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return ( head ) ; } void main ( ) { struct st * creat ( ) ; struct st * head , * p ; int n , i , max , j ; scanf ( "%d" , & n ) ; head = creat ( n ) ; p = head ; max = 0 ; for ( i = 1 ; i < 26 ; i ++ ) if ( pp [ i ] > pp [ max ] ) max = i ; printf ( "%c\n%d\n" , max + 65 , pp [ max ] ) ; while ( p ) { for ( j = 0 ; ; j ++ ) { if ( isupper ( p -> name [ j ] ) ) { if ( p -> name [ j ] == ( max + 65 ) ) printf ( "%d\n" , p -> num ) ; } else break ; } p = p -> next ; } }
int main ( ) { int n , i , j , k , t = 0 , c = 0 ; int A [ 25 ] ; char g [ ] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ; struct point { int a ; char s [ 80 ] ; } tope [ 1000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & tope [ i ] . a , tope [ i ] . s ) ; } for ( k = 0 ; k < 26 ; k ++ ) { A [ k ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; tope [ i ] . s [ j ] != '\0' ; j ++ ) { if ( tope [ i ] . s [ j ] == g [ k ] ) { A [ k ] ++ ; } } } } for ( i = 0 ; i < 26 ; i ++ ) { if ( A [ i ] > t ) { t = A [ i ] ; c = i ; } } printf ( "%c\n%d\n" , g [ c ] , t ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; tope [ i ] . s [ j ] != '\0' ; j ++ ) { if ( tope [ i ] . s [ j ] == g [ c ] ) { printf ( "%d\n" , tope [ i ] . a ) ; } } } return 0 ; }
int main ( int argc , char * argv [ ] ) { char s [ 999 ] [ 3 ] [ 27 ] ; int m , i , j , k , Nn [ 27 ] , ctrl ; scanf ( "%d" , & m ) ; for ( k = 1 ; k <= m ; k ++ ) { scanf ( "%s" , s [ k ] [ 1 ] ) ; scanf ( "%s" , s [ k ] [ 2 ] ) ; } for ( i = 1 ; i <= 26 ; i ++ ) Nn [ i ] = 0 ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 0 ; s [ i ] [ 2 ] [ j ] != '\0' ; j ++ ) { if ( s [ i ] [ 2 ] [ j ] == 'A' ) Nn [ 1 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'B' ) Nn [ 2 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'C' ) Nn [ 3 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'D' ) Nn [ 4 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'E' ) Nn [ 5 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'F' ) Nn [ 6 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'G' ) Nn [ 7 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'H' ) Nn [ 8 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'I' ) Nn [ 9 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'J' ) Nn [ 10 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'K' ) Nn [ 11 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'L' ) Nn [ 12 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'M' ) Nn [ 13 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'N' ) Nn [ 14 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'O' ) Nn [ 15 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'P' ) Nn [ 16 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'Q' ) Nn [ 17 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'R' ) Nn [ 18 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'S' ) Nn [ 19 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'T' ) Nn [ 20 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'U' ) Nn [ 21 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'V' ) Nn [ 22 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'W' ) Nn [ 23 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'X' ) Nn [ 24 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'Y' ) Nn [ 25 ] ++ ; else if ( s [ i ] [ 2 ] [ j ] == 'Z' ) Nn [ 26 ] ++ ; } } int Nmax = 0 , zimuxu ; for ( i = 1 ; i <= 26 ; i ++ ) { if ( Nn [ i ] > Nmax ) { Nmax = Nn [ i ] ; zimuxu = i ; } } printf ( "%c\n" , 'A' + zimuxu - 1 ) ; printf ( "%d\n" , Nmax ) ; for ( j = 1 ; j <= m ; j ++ ) { ctrl = 0 ; for ( k = 0 ; s [ j ] [ 2 ] [ k ] != '\0' ; k ++ ) { if ( s [ j ] [ 2 ] [ k ] == 'A' + zimuxu - 1 ) ctrl ++ ; } if ( ctrl != 0 ) printf ( "%s\n" , s [ j ] [ 1 ] ) ; } return 0 ; }
struct book { char number [ 20 ] ; char name [ 26 ] ; } books [ 1000 ] ; main ( ) { int n , i , j ; int count [ 26 ] = { 0 } ; int temp , base , k = 0 ; char author ; int pd = 0 , N = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %s" , & books [ i ] . number , & books [ i ] . name ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; books [ i ] . name [ j ] >= 'A' && books [ i ] . name [ j ] <= 'Z' ; j ++ ) { temp = books [ i ] . name [ j ] - 'A' ; count [ temp ] ++ ; } } base = count [ 0 ] ; for ( i = 0 ; i < 26 ; i ++ ) { if ( count [ i ] > base ) { base = count [ i ] ; k = i ; } } author = 'A' + k ; printf ( "%c\n" , author ) ; for ( i = 0 ; i < n ; i ++ ) { pd = 0 ; for ( j = 0 ; books [ i ] . name [ j ] >= 'A' && books [ i ] . name [ j ] <= 'Z' ; j ++ ) { if ( books [ i ] . name [ j ] == author ) pd = 1 ; } if ( pd == 1 ) N ++ ; } printf ( "%d\n" , N ) ; for ( i = 0 ; i < n ; i ++ ) { pd = 0 ; for ( j = 0 ; books [ i ] . name [ j ] >= 'A' && books [ i ] . name [ j ] <= 'Z' ; j ++ ) { if ( books [ i ] . name [ j ] == author ) pd = 1 ; } if ( pd == 1 ) printf ( "%s\n" , books [ i ] . number ) ; } }
struct author { int num ; char name [ 26 ] ; } ; struct author ren [ 100 ] ; int main ( ) { int n , i , j = 0 , k = 0 , biao , maxzuozhe , p , geshu [ 26 ] = { 0 } , max = 0 , maxdeshu [ 999 ] ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d" , & ren [ i ] . num ) ; scanf ( "%s" , ren [ i ] . name ) ; } for ( i = 0 ; i <= 25 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { for ( k = 0 ; k <= strlen ( ren [ j ] . name ) ; k ++ ) { if ( ( i + 'A' ) == ren [ j ] . name [ k ] ) geshu [ i ] = geshu [ i ] + 1 ; } } } for ( i = 'A' - 65 ; i <= 'Z' - 65 ; i ++ ) { if ( max < geshu [ i ] ) { max = geshu [ i ] ; biao = i ; } } maxzuozhe = 'A' + biao ; p = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( k = 0 ; k <= strlen ( ren [ i ] . name ) ; k ++ ) { if ( maxzuozhe == ren [ i ] . name [ k ] ) { maxdeshu [ p ] = ren [ i ] . num ; p ++ ; break ; } } } printf ( "%c\n" , maxzuozhe ) ; printf ( "%d\n" , p ) ; for ( i = 0 ; i <= p - 1 ; i ++ ) printf ( "%d\n" , maxdeshu [ i ] ) ; getchar ( ) ; }
struct { char name [ 20 ] ; int num ; } book [ 1000 ] ; int main ( ) { int n , i , j , max = 0 , m = 0 ; scanf ( "%d" , & n ) ; int c [ 26 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & book [ i ] . num , book [ i ] . name ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { strchr ( book [ i ] . name , 'A' + j ) ? c [ j ] ++ : 0 ; } } for ( j = 0 ; j < 26 ; j ++ ) { if ( c [ j ] > max ) { max = c [ j ] ; m = j ; } } printf ( "%c\n%d\n" , 'A' + m , c [ m ] ) ; for ( i = 0 ; i < n ; i ++ ) { strchr ( book [ i ] . name , 'A' + m ) ? printf ( "%d\n" , book [ i ] . num ) : 0 ; } return 0 ; }
struct book { int num ; char name [ 27 ] ; struct book * next ; } ; int m ; struct book * head ; struct book * setup ( ) { int t = 0 ; struct book * head , * p1 , * p2 ; head = p1 = p2 = ( struct book * ) malloc ( sizeof ( struct book ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; while ( t < m - 1 ) { t ++ ; p2 -> next = p1 ; p2 = p1 ; p1 = ( struct book * ) malloc ( sizeof ( struct book ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; } p2 -> next = p1 ; p1 -> next = NULL ; return ( head ) ; } int k = 0 , max = 0 ; void found ( struct book * p ) { int i , j ; p = head ; int * pi ; pi = ( int * ) malloc ( sizeof ( int ) * 26 ) ; for ( i = 0 ; i < 26 ; i ++ ) * ( pi + i ) = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; p -> name [ j ] != '\0' ; j ++ ) { ( * ( pi + ( p -> name [ j ] - 'A' ) ) ) ++ ; } p = p -> next ; } for ( j = 0 ; j < 26 ; j ++ ) { if ( * ( pi + j ) > max ) { max = * ( pi + j ) ; k = j ; } } } int main ( ) { int i , j ; scanf ( "%d" , & m ) ; struct book * p ; head = p = setup ( ) ; found ( p ) ; printf ( "%c\n%d\n" , ( k + 'A' ) , max ) ; p = head ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; p -> name [ j ] != '\0' ; j ++ ) if ( p -> name [ j ] == k + 'A' ) { printf ( "%d\n" , p -> num ) ; break ; } p = p -> next ; } }
struct book { int id ; char author [ 26 ] ; } ; int main ( ) { struct book b [ 999 ] ; int a [ 26 ] ; int m , i , j , max , maxauthor ; char c ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & b [ i ] . id , b [ i ] . author ) ; } for ( i = 0 ; i < 26 ; i ++ ) { a [ i ] = 0 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; b [ i ] . author [ j ] != '\0' ; j ++ ) { c = b [ i ] . author [ j ] ; a [ c - 65 ] ++ ; } } max = a [ 0 ] ; maxauthor = 0 ; for ( i = 1 ; i < 26 ; i ++ ) { if ( a [ i ] > max ) { max = a [ i ] ; maxauthor = i ; } } printf ( "%c\n%d\n" , maxauthor + 65 , max ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; b [ i ] . author [ j ] != '\0' ; j ++ ) { c = b [ i ] . author [ j ] ; if ( c == maxauthor + 65 ) { printf ( "%d\n" , b [ i ] . id ) ; break ; } } } return 0 ; }
struct book { int num ; char writer [ 26 ] ; } ; int m ; int main ( ) { int i ; scanf ( "%d" , & m ) ; book * p ; p = ( struct book * ) malloc ( sizeof ( struct book ) * m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & p [ i ] . num , p [ i ] . writer ) ; } int j = 0 , u = 0 ; int * a ; a = ( int * ) malloc ( sizeof ( int ) * 150 ) ; for ( i = 'A' ; i <= 'z' ; i ++ ) a [ i ] = 0 ; for ( i = 'A' ; i <= 'Z' ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { for ( u = 0 ; u < strlen ( p [ j ] . writer ) ; u ++ ) { if ( i == p [ j ] . writer [ u ] ) { a [ i ] ++ ; break ; } } } } int max = 0 ; for ( i = 'A' ; i <= 'Z' ; i ++ ) { if ( max < a [ i ] ) max = a [ i ] ; } for ( i = 'A' ; i <= 'Z' ; i ++ ) { if ( max == a [ i ] ) break ; } printf ( "%c\n%d\n" , i , a [ i ] ) ; for ( j = 0 ; j < m ; j ++ ) { for ( u = 0 ; u < strlen ( p [ j ] . writer ) ; u ++ ) { if ( i == p [ j ] . writer [ u ] ) { printf ( "%d\n" , p [ j ] . num ) ; break ; } } } return 0 ; }
void main ( ) { struct book { int num ; char a [ 100 ] ; } ; struct book b [ 1000 ] ; int n , i , j , s , t = 0 , m , h ; int c [ 1000 ] ; char d [ 27 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & b [ i ] . num , b [ i ] . a ) ; d [ 0 ] = b [ 0 ] . a [ 0 ] ; t = 1 ; c [ 0 ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; b [ i ] . a [ j ] != 0 ; j ++ ) { int x = 0 ; for ( s = 0 ; s < t ; s ++ ) { if ( b [ i ] . a [ j ] == d [ s ] ) { c [ s ] = c [ s ] + 1 ; x = 0 ; break ; } else x = 1 ; } if ( x == 1 ) { t ++ ; d [ t - 1 ] = b [ i ] . a [ j ] ; c [ t - 1 ] = 1 ; } } } m = c [ 0 ] ; h = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( c [ i ] > m ) { m = c [ i ] ; h = i ; } } printf ( "%c\n%d\n" , d [ h ] , m ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; b [ i ] . a [ j ] != 0 ; j ++ ) { if ( b [ i ] . a [ j ] == d [ h ] ) { printf ( "%d\n" , b [ i ] . num ) ; break ; } } } }
void main ( ) { struct book { int x ; char z [ 10 ] ; } a [ 400 ] ; int i , n , max = 0 , j , k , l , y [ 400 ] , p ; char u ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] . x , a [ i ] . z ) ; y [ i ] = strlen ( a [ i ] . z ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < y [ i ] ; j ++ ) { p = 1 ; for ( k = i + 1 ; k < n ; k ++ ) { for ( l = 0 ; l < y [ k ] ; l ++ ) if ( a [ i ] . z [ j ] == a [ k ] . z [ l ] ) p ++ ; } if ( p > max ) { max = p ; u = a [ i ] . z [ j ] ; } } } printf ( "%c\n%d\n" , u , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < y [ i ] ; j ++ ) if ( u == a [ i ] . z [ j ] ) { printf ( "%d\n" , a [ i ] . x ) ; break ; } } }
int main ( ) { int a ; scanf ( "%d" , & a ) ; char zuozhe [ 100 ] [ 100 ] ; int shuhao [ 100 ] ; int zuo [ 200 ] ; int shu [ 200 ] [ 200 ] ; int n = 0 , p , i , j ; int m [ 200 ] ; for ( i = 0 ; i < 200 ; i ++ ) { zuo [ i ] = 0 ; m [ i ] = 0 ; } for ( i = 0 ; i < a ; i ++ ) { scanf ( "%d %s" , & shuhao [ i ] , zuozhe [ i ] ) ; } for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; ( zuozhe [ i ] [ j ] ) != '\0' ; j ++ ) { zuo [ ( zuozhe [ i ] [ j ] ) ] = zuo [ ( zuozhe [ i ] [ j ] ) ] + 1 ; shu [ ( zuozhe [ i ] [ j ] ) ] [ ( m [ ( zuozhe [ i ] [ j ] ) ] ) ] = shuhao [ i ] ; m [ ( zuozhe [ i ] [ j ] ) ] = m [ ( zuozhe [ i ] [ j ] ) ] + 1 ; } } for ( i = 65 ; i <= 90 ; i ++ ) { if ( zuo [ i ] > n ) { n = zuo [ i ] ; p = i ; } } printf ( "%c\n" , p ) ; printf ( "%d\n" , zuo [ p ] ) ; for ( i = 0 ; i < m [ p ] ; i ++ ) { printf ( "%d\n" , shu [ p ] [ i ] ) ; } return 0 ; }
int main ( ) { int n ; int i , j ; int book_number [ 26 ] ; int max = 0 ; int max_n ; int author_len ; struct data { int number ; char author [ 27 ] ; } ; scanf ( "%d" , & n ) ; struct data * input = ( struct data * ) malloc ( sizeof ( struct data ) * n ) ; for ( j = 0 ; j <= 25 ; j ++ ) book_number [ j ] = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%d %s" , & input [ i ] . number , input [ i ] . author ) ; author_len = strlen ( input [ i ] . author ) ; for ( j = 0 ; j <= author_len - 1 ; j ++ ) book_number [ input [ i ] . author [ j ] - 'A' ] ++ ; } for ( j = 0 ; j <= 25 ; j ++ ) { if ( book_number [ j ] > max ) { max = book_number [ j ] ; max_n = j ; } } printf ( "%c\n%d\n" , max_n + 'A' , max ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { author_len = strlen ( input [ i ] . author ) ; for ( j = 0 ; j <= author_len - 1 ; j ++ ) { if ( input [ i ] . author [ j ] == max_n + 'A' ) { printf ( "%d\n" , input [ i ] . number ) ; break ; } } } free ( input ) ; return 0 ; }
struct book { int num ; char zhuzhe [ 26 ] ; int let ; } ; struct book shu [ 1000 ] ; int judge ( char a , char b ) { if ( a == b ) return ( 1 ) ; else return ( 0 ) ; } void main ( ) { int n , i , j , y , zhi , num ; char writer1 [ 26 ] = { 0 } ; char writer2 [ 26 ] = { 0 } ; for ( i = 0 ; i < 26 ; i ++ ) writer2 [ i ] = i + 65 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & shu [ i ] . num ) ; gets ( shu [ i ] . zhuzhe ) ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; shu [ i ] . zhuzhe [ j ] != '\0' ; j ++ ) for ( y = 0 ; y < 26 ; y ++ ) if ( writer2 [ y ] == shu [ i ] . zhuzhe [ j ] ) writer1 [ y ] = writer1 [ y ] + 1 ; zhi = 0 ; num = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( writer1 [ i ] > zhi ) { zhi = writer1 [ i ] ; num = i ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; shu [ i ] . zhuzhe [ j ] != '\0' ; j ++ ) if ( judge ( shu [ i ] . zhuzhe [ j ] , writer2 [ num ] ) == 1 ) shu [ i ] . let = 1 ; printf ( "%c\n" , writer2 [ num ] ) ; printf ( "%d\n" , writer1 [ num ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) if ( shu [ i ] . let == 1 ) printf ( "%d\n" , shu [ i ] . num ) ; if ( shu [ n - 1 ] . let == 1 ) printf ( "%d" , shu [ n - 1 ] . num ) ; }
struct BOOK { int id ; int author [ 26 ] ; } ; int main ( ) { struct BOOK book [ 1000 ] ; int countauthor [ 26 ] ; int n , i , j , minusA , no , count , max = 0 , maxau ; char input [ 30 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { book [ i ] . author [ j ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & book [ i ] . id ) ; scanf ( "%s" , & input ) ; no = strlen ( input ) ; for ( j = 0 ; j < no ; j ++ ) { minusA = ( input [ j ] - 'A' ) ; book [ i ] . author [ minusA ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { count = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( book [ j ] . author [ i ] == 1 ) count ++ ; } countauthor [ i ] = count ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( max < countauthor [ i ] ) max = countauthor [ i ] ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( countauthor [ i ] == max ) maxau = i ; } printf ( "%c\n%d\n" , ( maxau + 'A' ) , max ) ; for ( i = 0 ; i < n ; i ++ ) { if ( book [ i ] . author [ maxau ] == 1 ) { printf ( "%d\n" , book [ i ] . id ) ; } } return 0 ; }
struct books { int num ; char name [ 100 ] ; struct books * next ; } ; struct books * create ( int n ) { struct books * head , * p1 , * p2 ; p1 = ( struct books * ) malloc ( Len ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; while ( -- n ) { p1 = ( struct books * ) malloc ( Len ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return head ; } void main ( ) { int n , i , max , k ; char * p ; int num [ 26 ] = { 0 } ; char name [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; struct books * p1 , * head ; scanf ( "%d" , & n ) ; head = create ( n ) ; p1 = head ; for ( i = 0 ; i < 26 ; i ++ ) { p1 = head ; p = p1 -> name ; do { if ( * p == name [ i ] ) { num [ i ] ++ ; p1 = p1 -> next ; p = p1 -> name ; } else { if ( * p == '\0' ) { p1 = p1 -> next ; p = p1 -> name ; } else { p ++ ; } } } while ( p1 != NULL ) ; } max = num [ 0 ] ; for ( i = 0 ; i < 26 ; i ++ ) { if ( num [ i ] >= max ) { k = i ; max = num [ i ] ; } } printf ( "%c\n" , name [ k ] ) ; printf ( "%d\n" , num [ k ] ) ; p1 = head ; p = p1 -> name ; while ( p1 != NULL ) { if ( * p == name [ k ] ) { printf ( "%d\n" , p1 -> num ) ; p1 = p1 -> next ; p = p1 -> name ; } else { if ( * p == '\0' ) { p1 = p1 -> next ; p = p1 -> name ; } else { p ++ ; } } } }
struct tushu { int num ; char name [ 20 ] ; struct tushu * next ; } ; struct tushu * creat ( int m ) { struct tushu * head , * p1 , * p2 ; p1 = p2 = ( struct tushu * ) malloc ( LEN ) ; scanf ( "%d%s" , & p1 -> num , p1 -> name ) ; head = p1 ; int i ; for ( i = 2 ; i <= m ; i ++ ) { p1 = ( struct tushu * ) malloc ( LEN ) ; scanf ( "%d%s" , & p1 -> num , p1 -> name ) ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } int main ( ) { int m , num [ 26 ] = { 0 } , i , max ; scanf ( "%d" , & m ) ; struct tushu * head , * p1 ; head = creat ( m ) ; char * x ; for ( i = 0 ; i < 26 ; i ++ ) { p1 = head ; x = p1 -> name ; while ( p1 != NULL ) { while ( * x != '\0' ) { if ( * x == ( i + 65 ) ) num [ i ] = num [ i ] + 1 ; x = x + 1 ; } p1 = p1 -> next ; x = p1 -> name ; } } max = 0 ; for ( i = 1 ; i < 26 ; i ++ ) { if ( num [ max ] < num [ i ] ) max = i ; } printf ( "%c\n" , max + 65 ) ; printf ( "%d\n" , num [ max ] ) ; p1 = head ; x = p1 -> name ; while ( p1 != NULL ) { while ( * x != '\0' ) { if ( * x == ( max + 65 ) ) { printf ( "%d\n" , p1 -> num ) ; break ; } x = x + 1 ; } p1 = p1 -> next ; x = p1 -> name ; } return 0 ; }
int main ( ) { struct Book { int id ; char zz [ 26 ] ; } book [ 1000 ] ; int n , i , j , max = 0 , index ; int sum [ 26 ] = { 0 } ; char author ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & book [ i ] . id , & book [ i ] . zz ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . zz [ j ] != '\0' ; j ++ ) { sum [ book [ i ] . zz [ j ] - 'A' ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( sum [ i ] > max ) { max = sum [ i ] ; author = 'A' + i ; } } printf ( "%c\n%d\n" , author , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . zz [ j ] != '\0' ; j ++ ) { if ( book [ i ] . zz [ j ] == author ) { printf ( "%d\n" , book [ i ] . id ) ; break ; } } } return 0 ; }
struct tushu { int num ; char name [ 26 ] ; struct tushu * next ; } ; struct tushu * creat ( int n ) { struct tushu * head , * p1 , * p2 ; p1 = p2 = ( struct tushu * ) malloc ( LEN ) ; scanf ( "%d%s" , & p1 -> num , p1 -> name ) ; head = p1 ; int i ; for ( i = 1 ; i < n ; i ++ ) { p1 = ( struct tushu * ) malloc ( LEN ) ; scanf ( "%d%s" , & p1 -> num , p1 -> name ) ; p2 -> next = p1 ; p2 = p1 ; } p2 -> next = NULL ; return ( head ) ; } int main ( ) { int n , num [ 26 ] = { 0 } , * p , i , j , max = 0 ; char * a ; scanf ( "%d" , & n ) ; struct tushu * head , * p1 ; head = creat ( n ) ; p = num ; for ( i = 0 ; i < 26 ; i ++ ) { p1 = head ; a = p1 -> name ; while ( p1 != NULL ) { for ( j = 0 ; * ( a + j ) != '\0' ; j ++ ) { if ( * ( a + j ) == i + 65 ) { * ( p + i ) = * ( p + i ) + 1 ; break ; } } p1 = p1 -> next ; a = p1 -> name ; } } for ( i = 1 ; i < 26 ; i ++ ) { if ( * ( p + max ) < * ( p + i ) ) max = i ; } printf ( "%c\n" , max + 65 ) ; printf ( "%d\n" , * ( p + max ) ) ; p1 = head ; a = p1 -> name ; while ( p1 != NULL ) { for ( i = 0 ; * ( a + i ) != '\0' ; i ++ ) { if ( * ( a + i ) == ( max + 65 ) ) { printf ( "%d\n" , p1 -> num ) ; break ; } } p1 = p1 -> next ; a = p1 -> name ; } return 0 ; }
int main ( ) { int n ; int i , j , k ; int max , max2 ; int a [ 26 ] ; struct book { int number ; char author [ 26 ] ; } stu1 [ 1000 ] ; struct author { int number [ 1000 ] ; int ben ; } stu2 [ 26 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) scanf ( "%d %s" , & stu1 [ i ] . number , stu1 [ i ] . author ) ; for ( i = 0 ; i <= 25 ; i ++ ) { stu2 [ i ] . ben = 0 ; a [ i ] = 0 ; } for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= strlen ( stu1 [ i ] . author ) - 1 ; j ++ ) { k = stu1 [ i ] . author [ j ] ; stu2 [ k - 65 ] . ben ++ ; stu2 [ k - 65 ] . number [ a [ k - 65 ] ] = stu1 [ i ] . number ; a [ k - 65 ] ++ ; } } max = stu2 [ 0 ] . ben ; max2 = 0 ; for ( i = 1 ; i <= 25 ; i ++ ) { if ( stu2 [ i ] . ben > max ) { max = stu2 [ i ] . ben ; max2 = i ; } } printf ( "%c\n" , max2 + 65 ) ; printf ( "%d\n" , max ) ; for ( j = 0 ; j <= a [ max2 ] - 1 ; j ++ ) printf ( "%d\n" , stu2 [ max2 ] . number [ j ] ) ; return 0 ; }
struct book { int num ; char aut [ 100 ] ; } b [ 200000 ] ; int count [ 1000 ] = { 0 } ; int main ( ) { int n , max = 0 , maxnum , i , j , f ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d %s" , & b [ i ] . num , b [ i ] . aut ) ; for ( j = 0 ; j < strlen ( b [ i ] . aut ) ; j ++ ) { count [ b [ i ] . aut [ j ] ] ++ ; } } for ( i = 'A' ; i <= 'Z' ; i ++ ) { if ( count [ i ] > max ) { max = count [ i ] ; maxnum = i ; } } printf ( "%c\n%d\n" , maxnum , max ) ; for ( i = 1 ; i <= n ; i ++ ) { f = 0 ; for ( j = 0 ; j < strlen ( b [ i ] . aut ) ; j ++ ) { if ( b [ i ] . aut [ j ] == maxnum ) { f = 1 ; } } if ( f == 1 ) { printf ( "%d\n" , b [ i ] . num ) ; } } return 0 ; }
int main ( ) { struct bookst { int Num ; char name [ 26 ] ; } ; struct bookst * book ; int cnt [ 26 ] , num , i , j , max = 0 , max_idx = 0 ; for ( i = 0 ; i < 26 ; i ++ ) cnt [ i ] = 0 ; scanf ( "%d" , & num ) ; book = ( struct bookst * ) malloc ( num * sizeof ( struct bookst ) ) ; for ( i = 0 ; i < num ; i ++ ) { scanf ( "%d%s" , & book [ i ] . Num , book [ i ] . name ) ; for ( j = 0 ; book [ i ] . name [ j ] != 0 ; j ++ ) { cnt [ book [ i ] . name [ j ] - 'A' ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( cnt [ i ] > max ) { max = cnt [ i ] ; max_idx = i ; } } printf ( "%c\n%d\n" , 'A' + max_idx , max ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; book [ i ] . name [ j ] != 0 ; j ++ ) { if ( book [ i ] . name [ j ] == 'A' + max_idx ) printf ( "%d\n" , book [ i ] . Num ) ; } } return 0 ; }
struct book { int id ; char peo [ 26 ] ; } book1 [ 999 ] ; int main ( ) { int n , i , j , m = 0 , num [ 26 ] = { 0 } , length , max = 0 , t ; char author ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & book1 [ i ] . id , & book1 [ i ] . peo ) ; } for ( i = 0 ; i < n ; i ++ ) { length = strlen ( book1 [ i ] . peo ) ; for ( j = 0 ; j < length ; j ++ ) { num [ ( int ) ( book1 [ i ] . peo [ j ] - 'A' ) ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( num [ i ] > max ) { max = num [ i ] ; t = i ; author = i + 'A' ; } } printf ( "%c\n%d\n" , author , num [ t ] ) ; for ( i = 0 ; i < n ; i ++ ) { length = strlen ( book1 [ i ] . peo ) ; for ( j = 0 ; j < length ; j ++ ) { if ( book1 [ i ] . peo [ j ] == author ) { printf ( "%d\n" , book1 [ i ] . id ) ; } } } return 0 ; }
struct zuozhe { int m ; char q ; char shu [ 1001 ] [ 5 ] ; } zuozhe [ 26 ] , t ; int main ( ) { int n ; cin >> n ; int i ; char xingming [ 30 ] ; char bianhao [ 5 ] ; char zimu [ 27 ] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ; for ( i = 0 ; i < 26 ; i ++ ) zuozhe [ i ] . m = 0 ; for ( i = 1 ; i <= n ; i ++ ) { cin >> bianhao >> xingming ; int j , k ; for ( j = 0 ; xingming [ j ] != '\0' ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( xingming [ j ] == zimu [ k ] ) { zuozhe [ k ] . m ++ ; zuozhe [ k ] . q = zimu [ k ] ; strcpy ( zuozhe [ k ] . shu [ zuozhe [ k ] . m ] , bianhao ) ; break ; } } } } int min = 0 ; int maxnum = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( zuozhe [ i ] . m > maxnum ) { maxnum = zuozhe [ i ] . m ; min = i ; } } cout << zuozhe [ min ] . q << endl << zuozhe [ min ] . m << endl ; for ( i = 1 ; i <= zuozhe [ min ] . m ; i ++ ) { cout << zuozhe [ min ] . shu [ i ] << endl ; } return 0 ; }
struct { int a ; char b [ 26 ] ; } shu [ 1000 ] ; int main ( ) { int s [ 27 ] ; int n , i , j , o , max , t = 1 , x ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & shu [ i ] . a , shu [ i ] . b ) ; for ( i = 1 ; i <= 26 ; i ++ ) s [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < strlen ( shu [ i ] . b ) ; j ++ ) { o = shu [ i ] . b [ j ] - 64 ; s [ o ] ++ ; } max = 0 ; for ( i = 1 ; i <= 26 ; i ++ ) if ( max < s [ i ] ) { max = s [ i ] ; t = i ; } printf ( "%c\n" , t + 64 ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { x = strlen ( shu [ i ] . b ) ; for ( j = 0 ; j < x ; j ++ ) if ( shu [ i ] . b [ j ] == t + 64 ) printf ( "%d\n" , shu [ i ] . a ) ; } return 0 ; }
struct author { int sumbook ; int id [ 999 ] ; } a [ 26 ] ; int main ( ) { int n , i , j , bookid = 0 , pos = 0 , maxbook = 0 , maxid = 0 ; char booka [ 26 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; ++ i ) { scanf ( "%d%s" , & bookid , booka ) ; for ( j = 0 ; j < strlen ( booka ) ; ++ j ) { pos = booka [ j ] - 'A' ; a [ pos ] . id [ a [ pos ] . sumbook ] = bookid ; a [ pos ] . sumbook ++ ; if ( maxbook < a [ pos ] . sumbook ) { maxid = pos ; maxbook = a [ pos ] . sumbook ; } } } printf ( "%c\n%d\n" , maxid + 'A' , maxbook ) ; for ( i = 0 ; i < a [ maxid ] . sumbook ; i ++ ) printf ( "%d\n" , a [ maxid ] . id [ i ] ) ; }
int main ( ) { struct x { int num ; char name [ 26 ] ; } book [ 1000 ] ; int i , j , m , n , k , ex ; int a [ 26 ] [ 1000 ] ; int count [ 26 ] = { 0 } , num [ 26 ] = { 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 } ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & book [ i ] . num ) ; gets ( book [ i ] . name ) ; } for ( i = 'A' ; i <= 'Z' ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { n = strlen ( book [ j ] . name ) ; for ( k = 0 ; k < n ; k ++ ) { if ( i == book [ j ] . name [ k ] ) count [ i - 65 ] ++ ; } } } for ( i = 0 ; i < 25 ; i ++ ) { if ( count [ i ] > count [ i + 1 ] ) { ex = count [ i ] ; count [ i ] = count [ i + 1 ] ; count [ i + 1 ] = ex ; ex = num [ i ] ; num [ i ] = num [ i + 1 ] ; num [ i + 1 ] = ex ; } } printf ( "%c\n%d\n" , num [ 25 ] , count [ 25 ] ) ; for ( i = 0 ; i < m ; i ++ ) { n = strlen ( book [ i ] . name ) ; for ( k = 0 ; k < n ; k ++ ) { if ( book [ i ] . name [ k ] == num [ 25 ] ) printf ( "%d\n" , book [ i ] . num ) ; } } return 0 ; }
struct books { int num ; char writer [ 26 ] ; struct books * next ; } ; int m ; struct books * creat ( ) { struct books * head , * p1 , * p2 ; int i ; p2 = p1 = ( struct books * ) malloc ( sizeof ( struct books ) ) ; for ( i = 1 ; i <= m ; i ++ ) { if ( i == 1 ) head = p1 ; scanf ( "%d %s" , & p1 -> num , p1 -> writer ) ; p2 = p1 ; if ( i != m ) { p1 = ( struct books * ) malloc ( sizeof ( struct books ) ) ; p2 -> next = p1 ; } else p2 -> next = NULL ; } return head ; } void main ( ) { int character [ 26 ] ; struct books * head , * p ; int i , max = 0 , imax ; for ( i = 0 ; i < 26 ; i ++ ) character [ i ] = 0 ; scanf ( "%d" , & m ) ; head = creat ( ) ; p = head ; while ( 1 ) { i = 0 ; while ( * ( p -> writer + i ) ) { character [ * ( p -> writer + i ) - 'A' ] ++ ; i ++ ; } p = p -> next ; if ( p == NULL ) break ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( character [ i ] > max ) { max = character [ i ] ; imax = i ; } } printf ( "%c\n%d\n" , imax + 'A' , max ) ; p = head ; while ( 1 ) { i = 0 ; while ( * ( p -> writer + i ) ) { if ( * ( p -> writer + i ) == imax + 'A' ) { printf ( "%d\n" , p -> num ) ; break ; } i ++ ; } p = p -> next ; if ( p == NULL ) break ; } }
struct book { int num ; char aut [ 26 ] ; } b [ 999 ] ; void main ( ) { int i , j , m , n , k , max , p ; int a [ 26 ] = { 0 } , q [ 999 ] = { 0 } ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d %s" , & b [ i ] . num , b [ i ] . aut ) ; for ( i = 0 ; i < m ; i ++ ) { n = strlen ( b [ i ] . aut ) ; for ( j = 0 ; j < n ; j ++ ) { k = b [ i ] . aut [ j ] ; a [ k - 65 ] ++ ; } } for ( i = 1 , max = a [ 0 ] , p = 0 ; i < 26 ; i ++ ) { if ( a [ i ] > max ) { p = i ; max = a [ i ] ; } } printf ( "%c\n%d" , p + 65 , max ) ; for ( i = 0 ; i < m ; i ++ ) { n = strlen ( b [ i ] . aut ) ; for ( j = 0 ; j < n ; j ++ ) if ( b [ i ] . aut [ j ] == ( p + 65 ) ) q [ i ] = 1 ; } for ( i = 0 ; i < m ; i ++ ) if ( q [ i ] == 1 ) printf ( "\n%d" , b [ i ] . num ) ; }
int main ( ) { struct book { int num ; char s [ 26 ] ; } b [ 1000 ] ; struct author { int n [ 1000 ] ; int p ; char c ; } a [ 26 ] , e ; int i , j , k , m , q , max ; char d ; for ( i = 0 ; i < 26 ; i ++ ) a [ i ] . p = 0 ; for ( i = 0 , d = 'A' ; i < 26 ; i ++ , d ++ ) { a [ i ] . c = d ; } scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d%s" , & b [ i ] . num , b [ i ] . s ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; ; j ++ ) { if ( b [ i ] . s [ j ] == '\0' ) break ; for ( k = 0 ; k < 26 ; k ++ ) { if ( b [ i ] . s [ j ] == a [ k ] . c ) { a [ k ] . n [ a [ k ] . p ] = b [ i ] . num ; a [ k ] . p += 1 ; } } } } max = a [ 0 ] . p ; e = a [ 0 ] ; for ( i = 0 ; i < 26 ; i ++ ) { if ( a [ i ] . p > max ) { e = a [ i ] ; max = a [ i ] . p ; } } printf ( "%c\n" , e . c ) ; printf ( "%d\n" , e . p ) ; for ( j = 0 ; j < e . p ; j ++ ) printf ( "%d\n" , e . n [ j ] ) ; }
int main ( ) { int n ; scanf ( "%d" , & n ) ; if ( n > 0 ) { struct a { char y [ 30 ] ; int x , l ; } a [ 1000 ] ; struct b { char y ; int x ; } b [ 26 ] ; int i , j , p ; char k ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] . x , & a [ i ] . y ) ; a [ i ] . l = strlen ( a [ i ] . y ) ; } for ( i = 0 ; i <= 25 ; i ++ ) { b [ i ] . y = i + 65 ; b [ i ] . x = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < a [ i ] . l ; j ++ ) { for ( k = 65 ; k <= 90 ; k ++ ) { if ( a [ i ] . y [ j ] == k ) b [ k - 65 ] . x = b [ k - 65 ] . x + 1 ; } } } int max = b [ 0 ] . x ; for ( i = 0 ; i <= 25 ; i ++ ) { if ( b [ i ] . x > max ) max = b [ i ] . x ; } for ( i = 0 ; i <= 25 ; i ++ ) { if ( b [ i ] . x == max ) { printf ( "%c\n" , b [ i ] . y ) ; printf ( "%d\n" , b [ i ] . x ) ; for ( j = 0 ; j < n ; j ++ ) { for ( p = 0 ; p < a [ j ] . l ; p ++ ) { if ( a [ j ] . y [ p ] == b [ i ] . y ) { printf ( "%d\n" , a [ j ] . x ) ; break ; } } } break ; } } } return 0 ; }
struct a { int n ; char s [ 27 ] ; } b [ 1000 ] ; int main ( ) { int n ; scanf ( "%d" , & n ) ; int i , k ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & b [ i ] . n , b [ i ] . s ) ; } int c [ 26 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) { switch ( b [ i ] . s [ k ] ) { case 'A' : c [ 0 ] ++ ; break ; case 'B' : c [ 1 ] ++ ; break ; case 'C' : c [ 2 ] ++ ; break ; case 'D' : c [ 3 ] ++ ; break ; case 'E' : c [ 4 ] ++ ; break ; case 'F' : c [ 5 ] ++ ; break ; case 'G' : c [ 6 ] ++ ; break ; case 'H' : c [ 7 ] ++ ; break ; case 'I' : c [ 8 ] ++ ; break ; case 'J' : c [ 9 ] ++ ; break ; case 'K' : c [ 10 ] ++ ; break ; case 'L' : c [ 11 ] ++ ; break ; case 'M' : c [ 12 ] ++ ; break ; case 'N' : c [ 13 ] ++ ; break ; case 'O' : c [ 14 ] ++ ; break ; case 'P' : c [ 15 ] ++ ; break ; case 'Q' : c [ 16 ] ++ ; break ; case 'R' : c [ 17 ] ++ ; break ; case 'S' : c [ 18 ] ++ ; break ; case 'T' : c [ 19 ] ++ ; break ; case 'U' : c [ 20 ] ++ ; break ; case 'V' : c [ 21 ] ++ ; break ; case 'W' : c [ 22 ] ++ ; break ; case 'X' : c [ 23 ] ++ ; break ; case 'Y' : c [ 24 ] ++ ; break ; case 'Z' : c [ 25 ] ++ ; break ; } } } int j , max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( c [ i ] > max ) { max = c [ i ] ; j = i ; } } int t = 0 ; switch ( j ) { case 0 : printf ( "A\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) { if ( b [ i ] . s [ k ] == 'A' ) printf ( "%d\n" , b [ i ] . n ) ; } } break ; case 1 : printf ( "B\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'B' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 2 : printf ( "C\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'C' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 3 : printf ( "D\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'D' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 4 : printf ( "E\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'E' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 5 : printf ( "F\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'F' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 6 : printf ( "G\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'G' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 7 : printf ( "H\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'H' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 8 : printf ( "I\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'I' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 9 : printf ( "J\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'J' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 10 : printf ( "K\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'K' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 11 : printf ( "L\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'L' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 12 : printf ( "M\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'M' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 13 : printf ( "N\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'M' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 14 : printf ( "O\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'O' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 15 : printf ( "P\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'P' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 16 : printf ( "Q\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'Q' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 17 : printf ( "R\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'R' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 18 : printf ( "S\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'S' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 19 : printf ( "T\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'T' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 20 : printf ( "U\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'U' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 21 : printf ( "V\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'V' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 22 : printf ( "W\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'W' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 23 : printf ( "X\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'X' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 24 : printf ( "Y\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'Y' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; case 25 : printf ( "Z\n%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = 0 ; b [ i ] . s [ k ] ; k ++ ) if ( b [ i ] . s [ k ] == 'Z' ) printf ( "%d\n" , b [ i ] . n ) ; } break ; } return 0 ; }
int main ( ) { int n , i , a [ 1000 ] , m [ 1000 ] ; struct { char b [ 26 ] ; } p [ 1000 ] ; int j , k ; scanf ( "%d" , & n ) ; char c [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; int num [ 26 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] , p [ i ] . b ) ; m [ i ] = strlen ( p [ i ] . b ) ; for ( k = 0 ; k < 26 ; k ++ ) for ( j = 0 ; j < m [ i ] ; j ++ ) { if ( p [ i ] . b [ j ] == c [ k ] ) num [ k ] ++ ; } } int max = 0 , local = 0 ; for ( k = 0 ; k < 26 ; k ++ ) { if ( num [ k ] > max ) { max = num [ k ] ; local = k ; } } printf ( "%c\n" , c [ local ] ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m [ i ] ; j ++ ) { if ( p [ i ] . b [ j ] == c [ local ] ) printf ( "%d\n" , a [ i ] ) ; } } return 0 ; }
int n ; struct student { char name [ 100 ] ; int num ; struct student * next ; } ; struct student * creat ( void ) { struct student * head ; struct student * p1 , * p2 ; int i ; p1 = p2 = ( struct student * ) malloc ( LEN ) ; head = p1 ; for ( i = 0 ; i < n ; i ++ ) { p1 = ( struct student * ) malloc ( LEN ) ; p2 -> next = p1 ; p2 = p1 ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; } p2 -> next = NULL ; return ( head ) ; } void list ( struct student * head ) { struct student * p1 , * p2 , * p3 , * p4 ; int i , j , t , a [ 100 ] = { 0 } , b [ 100 ] ; char str [ 100 ] ; p1 = head -> next ; for ( i = 0 ; i < n ; i ++ ) { strcpy ( str , p1 -> name ) ; for ( j = 0 ; j < strlen ( str ) ; j ++ ) { if ( str [ j ] >= 'A' && str [ j ] <= 'Z' ) { a [ str [ j ] - 65 ] ++ ; } } p1 = p1 -> next ; } for ( i = 0 ; i < 26 ; i ++ ) { b [ i ] = a [ i ] ; } for ( i = 0 ; i < 26 - 1 ; i ++ ) { for ( j = 0 ; j < 26 - 1 - i ; j ++ ) { if ( a [ j ] < a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } } for ( i = 0 ; i < 26 ; i ++ ) { if ( b [ i ] == a [ 0 ] ) { printf ( "%c\n%d\n" , i + 65 , a [ 0 ] ) ; t = i ; } } p1 = head -> next ; for ( i = 0 ; i < n ; i ++ ) { strcpy ( str , p1 -> name ) ; for ( j = 0 ; j < strlen ( str ) ; j ++ ) { if ( str [ j ] == t + 65 ) { printf ( "%d\n" , p1 -> num ) ; } } p1 = p1 -> next ; } } int main ( ) { struct student * p ; scanf ( "%d" , & n ) ; p = creat ( ) ; list ( p ) ; }
int main ( ) { int m ; scanf ( "%d" , & m ) ; int a [ 1000 ] ; char s [ 1000 ] [ 26 ] ; int i , j ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & a [ i ] , s [ i ] ) ; } char x ; int max = 0 ; char maxx ; int l ; for ( x = 'A' ; x <= 'Z' ; x ++ ) { l = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( s [ i ] [ j ] == x ) break ; } if ( j != 26 ) l ++ ; } if ( l > max ) { max = l ; maxx = x ; } } printf ( "%c\n%d\n" , maxx , max ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( s [ i ] [ j ] == maxx ) break ; } if ( j != 26 ) printf ( "%d\n" , a [ i ] ) ; } return 0 ; }
void main ( ) { struct b { int n ; char a [ 26 ] ; } ; struct b b [ 999 ] ; int m , k , i , j , c [ 26 ] = { 0 } , p = 0 , q = 0 ; char x ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d%s" , & b [ i ] . n , & b [ i ] . a ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; ( x = b [ i ] . a [ j ] ) != '\0' && j < 26 ; j ++ ) c [ x - 65 ] ++ ; k = c [ 0 ] ; for ( i = 0 ; i < 26 ; i ++ ) if ( c [ i ] > k ) { k = c [ i ] ; p = i ; } printf ( "%c\n" , p + 65 ) ; printf ( "%d\n" , c [ p ] ) ; for ( i = 0 ; i < m ; i ++ ) { q = 0 ; for ( j = 0 ; ( x = b [ i ] . a [ j ] ) != '\0' && j < 26 ; j ++ ) if ( x == p + 65 ) q = 1 ; if ( q == 1 ) printf ( "%d\n" , b [ i ] . n ) ; } }
void main ( ) { struct x { char num [ 26 ] ; int y ; } q [ 1000 ] , x0 ; int n , i , j , c [ 100 ] = { 0 } , m = 0 , f ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & q [ i ] . y , & q [ i ] . num ) ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; q [ i ] . num [ j ] != '\0' ; j ++ ) m = ( int ) q [ i ] . num [ j ] , c [ m ] = c [ m ] + 1 ; for ( m = 0 ; m < 100 ; m ++ ) if ( c [ m ] > c [ 0 ] ) f = m , c [ 0 ] = c [ m ] ; printf ( "%c\n%d\n" , ( char ) f , c [ f ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; q [ i ] . num [ j ] != '\0' ; j ++ ) if ( q [ i ] . num [ j ] == ( char ) f ) printf ( "%d\n" , q [ i ] . y ) ; }
struct book { int num ; char str [ 26 ] ; } bk [ 1000 ] ; void main ( ) { int m , i , j , k , s , n = 0 ; char a [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; int b [ 26 ] = { 0 } ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d %s" , & bk [ i ] . num , bk [ i ] . str ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < strlen ( bk [ i ] . str ) ; j ++ ) for ( k = 0 ; k < 26 ; k ++ ) if ( a [ k ] == bk [ i ] . str [ j ] ) b [ k ] ++ ; for ( i = 0 ; i < 26 ; i ++ ) if ( b [ i ] > n ) { n = b [ i ] ; s = i ; } printf ( "%c\n%d\n" , a [ s ] , b [ s ] ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < strlen ( bk [ i ] . str ) ; j ++ ) if ( bk [ i ] . str [ j ] == a [ s ] ) printf ( "%d\n" , bk [ i ] . num ) ; }
struct book { int number ; char writer [ 26 ] ; struct book * next ; } main ( ) { int n , i , j , num [ 26 ] = { 0 } , nu [ 26 ] , a , b ; struct book * head , * p1 , * p2 ; scanf ( "%d" , & n ) ; p1 = p2 = ( struct book * ) malloc ( LEN ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & p1 -> number , & p1 -> writer ) ; for ( j = 0 ; j < strlen ( p1 -> writer ) ; j ++ ) { ++ num [ p1 -> writer [ j ] - 65 ] ; } if ( i == 0 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct book * ) malloc ( LEN ) ; } p2 -> next = NULL ; for ( i = 0 ; i < 26 ; i ++ ) { nu [ i ] = i ; } for ( i = 0 ; i < 25 ; i ++ ) { for ( j = 0 ; j < 25 - i ; j ++ ) { if ( num [ j ] < num [ j + 1 ] ) { a = nu [ j ] ; nu [ j ] = nu [ j + 1 ] ; nu [ j + 1 ] = a ; b = num [ j ] ; num [ j ] = num [ j + 1 ] ; num [ j + 1 ] = b ; } } } printf ( "%c\n%d\n" , nu [ 0 ] + 65 , num [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < strlen ( head -> writer ) ; j ++ ) { if ( head -> writer [ j ] == ( char ) nu [ 0 ] + 65 ) { printf ( "%d\n" , head -> number ) ; break ; } } head = head -> next ; } }
void main ( ) { int n , i , j , max = 0 , seq = 0 ; int a [ 26 ] = { 0 } ; scanf ( "%d" , & n ) ; struct book { int num ; char str [ 26 ] ; } book [ 999 ] ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & book [ i ] . num , & book [ i ] . str ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) a [ ( book [ i ] . str [ j ] - 65 ) ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) if ( a [ i ] > max ) { max = a [ i ] ; seq = i ; } printf ( "%c\n" , seq + 65 ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) if ( book [ i ] . str [ j ] == seq + 65 ) { printf ( "%d\n" , book [ i ] . num ) ; break ; } } }
void main ( ) { struct book { int a ; char b [ 20 ] ; } book [ 999 ] ; int n , i , k , max , m , j , p ; int c [ 999 ] = { 0 } ; char str1 [ 20 ] , str2 [ 20 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & book [ i ] . a , & book [ i ] . b ) ; m = strlen ( book [ i ] . b ) ; strcpy ( str1 , book [ i ] . b ) ; for ( j = 0 ; j < m ; j ++ ) c [ str1 [ j ] ] = c [ str1 [ j ] ] + 1 ; } max = 0 ; for ( p = 65 ; p < 91 ; p ++ ) { if ( c [ p ] > max ) { max = c [ p ] ; k = p ; } } printf ( "%c\n" , k ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { strcpy ( str2 , book [ i ] . b ) ; m = strlen ( book [ i ] . b ) ; for ( j = 0 ; j < m ; j ++ ) { if ( str2 [ j ] == k ) printf ( "%d\n" , book [ i ] . a ) ; } } }
struct book { int id ; char zz [ 26 ] ; } b [ 999 ] ; int main ( ) { int m , n , i , num [ 26 ] = { 0 } , maxz , j ; char string [ 26 ] ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & b [ i ] . id , & b [ i ] . zz ) ; for ( j = 0 ; b [ i ] . zz [ j ] != '\0' ; j ++ ) num [ b [ i ] . zz [ j ] - 'A' ] ++ ; } int max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( max < num [ i ] ) { max = num [ i ] ; maxz = i ; } printf ( "%c\n%d" , maxz + 65 , max ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; b [ i ] . zz [ j ] != '\0' ; j ++ ) { if ( b [ i ] . zz [ j ] == maxz + 65 ) printf ( "\n%d" , b [ i ] . id ) ; else continue ; } }
struct book { char writer [ 32 ] ; int id ; struct book * next ; } ; struct book * create ( int m ) { struct book * head = NULL , * p1 , * p2 ; int i ; p1 = p2 = ( struct book * ) malloc ( Len ) ; scanf ( "%d %s" , & p1 -> id , p1 -> writer ) ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; for ( i = 1 ; i < m ; i ++ ) { p1 = ( struct book * ) malloc ( Len ) ; scanf ( "%d %s" , & p1 -> id , p1 -> writer ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return head ; } int main ( ) { struct book * head , * p ; int m , i , * q1 , * q2 , j ; q1 = ( int * ) malloc ( 26 * sizeof ( int * ) ) ; q2 = q1 ; for ( i = 0 ; i < 26 ; i ++ ) q1 [ i ] = 0 ; q1 = q2 ; scanf ( "%d" , & m ) ; head = create ( m ) ; p = head ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; p -> writer [ j ] != '\0' ; j ++ ) q1 [ p -> writer [ j ] - 'A' ] ++ ; p = p -> next ; } q1 = q2 ; int max = 0 ; char maxm = 'A' ; for ( i = 0 ; i < 26 ; i ++ ) if ( max < q1 [ i ] ) { max = q1 [ i ] ; maxm = i + 'A' ; } printf ( "%c\n%d" , maxm , max ) ; for ( i = 0 , p = head ; i < m ; i ++ , p = p -> next ) for ( j = 0 ; p -> writer [ j ] != '\0' ; j ++ ) if ( p -> writer [ j ] == maxm ) printf ( "\n%d" , p -> id ) ; }
struct info { int num ; char author [ 26 ] ; } a [ 1000 ] ; int main ( ) { int i , m , j , b [ 26 ] = { 0 } ; char out ; scanf ( "%d\n" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d %s\n" , & a [ i ] . num , a [ i ] . author ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < 26 ; j ++ ) b [ a [ i ] . author [ j ] - 'A' ] ++ ; int max = b [ 0 ] ; for ( i = 0 ; i < 26 ; i ++ ) max = max > b [ i ] ? max : b [ i ] ; for ( i = 0 ; i < 26 ; i ++ ) if ( b [ i ] == max ) { out = 'A' + i ; printf ( "%c\n" , 'A' + i ) ; printf ( "%d\n" , b [ i ] ) ; break ; } for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < 26 ; j ++ ) if ( a [ i ] . author [ j ] == out ) { printf ( "%d\n" , a [ i ] . num ) ; break ; } }
struct m { int no , j ; char a [ 27 ] ; } main ( ) { int n , k , i , j , no , ath [ 26 ] = { 0 } , m ; char * t , a [ 26 ] ; struct m * head , * p1 , * p2 , * tp , * q ; scanf ( "%d" , & n ) ; head = ( struct m * ) calloc ( n , L ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d%s" , & ( head + i ) -> no , ( head + i ) -> a ) ; ( head + i ) -> j = 0 ; for ( t = ( head + i ) -> a ; * t != '\0' ; t ++ ) { ath [ * t - 'A' ] ++ ; } } for ( m = ath [ 0 ] , k = 0 , i = 1 ; i < 26 ; i ++ ) { if ( ath [ i ] > m ) { k = i ; m = ath [ i ] ; } } printf ( "%c" , 'A' + k ) ; m = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( t = ( head + i ) -> a ; * t != '\0' ; t ++ ) if ( * t == ( 'A' + k ) ) { ( head + i ) -> j = 1 ; m ++ ; break ; } } printf ( "\n%d\n" , m ) ; for ( i = 0 ; i < n ; i ++ ) { if ( ( head + i ) -> j == 1 ) { printf ( "%d" , ( head + i ) -> no ) ; m -- ; if ( m > 0 ) printf ( "\n" ) ; } } }
int main ( ) { int n , i , j , k , w = 0 ; int maxzm , maxbk = 0 ; char c1 ; int zimu [ 26 ] = { 0 } ; int lm [ 100 ] ; struct { int num ; char a [ 100 ] ; } book [ 1000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & book [ i ] . num , book [ i ] . a ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . a [ j ] ; j ++ ) { for ( k = 65 ; k < 91 ; k ++ ) { if ( book [ i ] . a [ j ] == k ) zimu [ k - 65 ] ++ ; } } } for ( i = 0 ; i < 26 ; i ++ ) { if ( zimu [ i ] > maxbk ) { maxbk = zimu [ i ] ; maxzm = i ; } } c1 = maxzm + 65 ; printf ( "%c\n" , c1 ) ; printf ( "%d\n" , maxbk ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . a [ j ] ; j ++ ) { if ( book [ i ] . a [ j ] == c1 ) { lm [ w ] = book [ i ] . num ; w ++ ; continue ; } } } for ( i = 0 ; i < w ; i ++ ) printf ( "%d\n" , lm [ i ] ) ; return 0 ; }
int main ( ) { int m , i , num [ 26 ] = { 0 } , index1 ; scanf ( "%d" , & m ) ; struct f { int index ; char writer [ 27 ] ; } ; struct f * p ; p = ( struct f * ) malloc ( m * sizeof ( struct f ) ) ; char * p1 ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & ( p + i ) -> index , ( p + i ) -> writer ) ; } for ( i = 0 ; i < m ; i ++ ) { p1 = ( p + i ) -> writer ; for ( ; * p1 ; p1 ++ ) { index1 = ( int ) * p1 - 'A' ; ( * ( num + index1 ) ) ++ ; } } int max = 0 , k ; for ( i = 0 ; i < 26 ; i ++ ) if ( max < * ( num + i ) ) { max = * ( num + i ) ; k = i ; } char wr ; wr = ( char ) k + 'A' ; printf ( "%c\n%d\n" , wr , max ) ; int flag ; for ( i = 0 ; i < m ; i ++ ) { p1 = ( p + i ) -> writer ; flag = 1 ; for ( ; * p1 && flag == 1 ; p1 ++ ) if ( * p1 == wr ) flag = 0 ; if ( flag == 0 ) printf ( "%d\n" , ( p + i ) -> index ) ; } }
int main ( ) { char writer [ 1000 ] [ 30 ] ; char abc [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; int m , n , mark [ 1000 ] , num [ 26 ] = { 0 } , sum = 0 , i , j ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & mark [ i ] ) ; scanf ( "%s" , writer [ i ] ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( writer [ i ] ) ; j ++ ) { if ( writer [ i ] [ j ] == 'A' ) num [ 0 ] ++ ; else if ( writer [ i ] [ j ] == 'B' ) num [ 1 ] ++ ; else if ( writer [ i ] [ j ] == 'C' ) num [ 2 ] ++ ; else if ( writer [ i ] [ j ] == 'D' ) num [ 3 ] ++ ; else if ( writer [ i ] [ j ] == 'E' ) num [ 4 ] ++ ; else if ( writer [ i ] [ j ] == 'F' ) num [ 5 ] ++ ; else if ( writer [ i ] [ j ] == 'G' ) num [ 6 ] ++ ; else if ( writer [ i ] [ j ] == 'H' ) num [ 7 ] ++ ; else if ( writer [ i ] [ j ] == 'I' ) num [ 8 ] ++ ; else if ( writer [ i ] [ j ] == 'J' ) num [ 9 ] ++ ; else if ( writer [ i ] [ j ] == 'K' ) num [ 10 ] ++ ; else if ( writer [ i ] [ j ] == 'L' ) num [ 11 ] ++ ; else if ( writer [ i ] [ j ] == 'M' ) num [ 12 ] ++ ; else if ( writer [ i ] [ j ] == 'N' ) num [ 13 ] ++ ; else if ( writer [ i ] [ j ] == 'O' ) num [ 14 ] ++ ; else if ( writer [ i ] [ j ] == 'P' ) num [ 15 ] ++ ; else if ( writer [ i ] [ j ] == 'Q' ) num [ 16 ] ++ ; else if ( writer [ i ] [ j ] == 'R' ) num [ 17 ] ++ ; else if ( writer [ i ] [ j ] == 'S' ) num [ 18 ] ++ ; else if ( writer [ i ] [ j ] == 'T' ) num [ 19 ] ++ ; else if ( writer [ i ] [ j ] == 'U' ) num [ 20 ] ++ ; else if ( writer [ i ] [ j ] == 'V' ) num [ 21 ] ++ ; else if ( writer [ i ] [ j ] == 'W' ) num [ 22 ] ++ ; else if ( writer [ i ] [ j ] == 'X' ) num [ 23 ] ++ ; else if ( writer [ i ] [ j ] == 'Y' ) num [ 24 ] ++ ; else if ( writer [ i ] [ j ] == 'Z' ) num [ 25 ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( num [ i ] >= sum ) { sum = num [ i ] ; n = i ; } } printf ( "%c\n" , abc [ n ] ) ; printf ( "%d\n" , num [ n ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( writer [ i ] ) ; j ++ ) { if ( writer [ i ] [ j ] == abc [ n ] ) { printf ( "%d\n" , mark [ i ] ) ; break ; } } } scanf ( "%d" , & m ) ; return 0 ; }
struct book { int num ; char au [ 32 ] ; int sta [ 27 ] ; } b [ 1020 ] ; int main ( ) { int i , j , k , m , n ; char c ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & b [ i ] . num , b [ i ] . au ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; ; j ++ ) { c = b [ i ] . au [ j ] ; if ( c == '\0' ) { break ; } else { b [ i ] . sta [ c - 64 ] ++ ; } } } int sum [ 27 ] = { 0 } ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 1 ; j < 27 ; j ++ ) { sum [ j ] += b [ i ] . sta [ j ] ; } } int max = 0 ; for ( i = 1 ; i < 27 ; i ++ ) { if ( sum [ i ] > max ) { max = sum [ i ] ; k = i ; } } printf ( "%c\n" , k + 64 ) ; n = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( b [ i ] . sta [ k ] != 0 ) { n ++ ; } } printf ( "%d\n" , n ) ; n = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( b [ i ] . sta [ k ] != 0 ) { n ++ ; if ( n == 1 ) { printf ( "%d" , b [ i ] . num ) ; } else { printf ( "\n%d" , b [ i ] . num ) ; } } } return 0 ; }
void main ( ) { int * p ; p = ( int * ) malloc ( 26 * sizeof ( int ) ) ; struct book { int num ; char s [ 26 ] ; } b [ 999 ] ; int n , i , j , ss , max = 0 , r ; char x ; for ( ss = 0 ; ss < 26 ; ss ++ ) * ( p + ss ) = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & b [ i ] . num , b [ i ] . s ) ; for ( j = 0 ; b [ i ] . s [ j ] != '\0' ; j ++ ) { * ( p + ( ( int ) b [ i ] . s [ j ] - 65 ) ) += 1 ; } } for ( r = 0 ; r < 26 ; r ++ ) max = max > * ( p + r ) ? max : * ( p + r ) ; for ( r = 0 ; r < 26 ; r ++ ) { if ( * ( p + r ) == max ) { printf ( "%c" , ( 65 + r ) ) ; x = r ; printf ( "\n" ) ; printf ( "%d\n" , max ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; b [ i ] . s [ j ] != '\0' ; j ++ ) { if ( ( int ) b [ i ] . s [ j ] - 65 == x ) printf ( "%d\n" , b [ i ] . num ) ; } } }
struct author { int num ; char aut [ 27 ] ; } a [ 999 ] ; void main ( ) { void search ( struct author b [ ] , int n , char marker ) ; int m , i , times [ 30 ] = { 0 } ; int length = 0 , j ; int max = 0 , flag = 9 ; char chac ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & a [ i ] . num , & a [ i ] . aut ) ; length = strlen ( a [ i ] . aut ) ; for ( j = 0 ; j < length ; j ++ ) { chac = a [ i ] . aut [ j ] ; times [ chac - 'A' ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( max < times [ i ] ) { max = times [ i ] ; flag = i ; } } printf ( "%c\n%d\n" , ( char ) ( flag + 'A' ) , max ) ; search ( a , m , ( char ) ( flag + 'A' ) ) ; } void search ( struct author b [ ] , int n , char marker ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < strlen ( b [ i ] . aut ) ; j ++ ) { if ( b [ i ] . aut [ j ] == marker ) printf ( "%d\n" , b [ i ] . num ) ; } } }
void main ( ) { struct book { int num ; char name [ 26 ] ; } ; int m , i , j , max ; int sum [ 26 ] = { 0 } ; scanf ( "%d" , & m ) ; struct book b [ m ] ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d %s" , & b [ i ] . num , b [ i ] . name ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( b [ i ] . name ) ; j ++ ) sum [ ( b [ i ] . name ) [ j ] - 'A' ] ++ ; } max = 0 ; for ( i = 1 ; i < 26 ; i ++ ) if ( sum [ i ] > sum [ max ] ) max = i ; printf ( "%c\n%d\n" , max + 'A' , sum [ max ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( b [ i ] . name ) ; j ++ ) { if ( ( b [ i ] . name ) [ j ] == 65 + max ) printf ( "%d\n" , b [ i ] . num ) ; } } }
struct book { int num ; char aut [ 26 ] ; } bo [ 999 ] ; main ( ) { int n , i , j , k , count [ 26 ] , max ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & bo [ i ] . num , & bo [ i ] . aut ) ; } for ( i = 0 ; i < 26 ; i ++ ) count [ i ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( bo [ i ] . aut [ j ] - 65 >= 0 && bo [ i ] . aut [ j ] - 65 < 26 ) count [ bo [ i ] . aut [ j ] - 65 ] ++ ; } } max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( count [ i ] > max ) { max = count [ i ] ; k = i ; } } printf ( "%c\n%d\n" , k + 65 , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( bo [ i ] . aut [ j ] - 65 == k ) printf ( "%d\n" , bo [ i ] . num ) ; } } }
struct book { int id ; char c [ 27 ] ; } ; int main ( ) { void number_of_books ( int n , int * p , struct book book [ 1000 ] ) ; char max ( int n , int * p , struct book book [ 1000 ] ) ; void name_of_book ( int n , int * p , struct book book [ 1000 ] , int m ) ; int * p ; char s [ 100 ] , m ; struct book book [ 1000 ] ; int n , i ; p = ( int * ) calloc ( 257 , sizeof ( int ) ) ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & book [ i ] . id , & book [ i ] . c ) ; } number_of_books ( n , p , book ) ; m = max ( n , p , book ) ; printf ( "%c\n%d\n" , m , ( * ( p + m ) ) ) ; name_of_book ( n , p , book , m ) ; return 0 ; } void number_of_books ( int n , int * p , struct book book [ 1000 ] ) { int i , j ; for ( i = 65 ; i < 91 ; i ++ ) { ( * ( p + i ) ) = 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . c [ j ] != '\0' ; j ++ ) { ( * ( p + book [ i ] . c [ j ] ) ) ++ ; } } } char max ( int n , int * p , struct book book [ 1000 ] ) { int i , k = 0 ; char m ; for ( i = 65 ; i < 91 ; i ++ ) { if ( ( * ( p + i ) ) > k ) { k = ( * ( p + i ) ) ; m = i ; } } return ( m ) ; } void name_of_book ( int n , int * p , struct book book [ 1000 ] , int m ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . c [ j ] != '\0' ; j ++ ) { if ( ( book [ i ] . c [ j ] ) == m ) { printf ( "%d\n" , book [ i ] . id ) ; break ; } } } }
struct book { int num ; char w [ 100 ] ; } book [ 100 ] ; void main ( ) { int i , j , k , l , m , n , p , b [ 26 ] = { 0 } ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & book [ i ] . num , book [ i ] . w ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; book [ i ] . w [ j ] != '\0' ; j ++ ) { if ( book [ i ] . w [ j ] == 'A' ) b [ 0 ] ++ ; else if ( book [ i ] . w [ j ] == 'B' ) b [ 1 ] ++ ; else if ( book [ i ] . w [ j ] == 'C' ) b [ 2 ] ++ ; else if ( book [ i ] . w [ j ] == 'D' ) b [ 3 ] ++ ; else if ( book [ i ] . w [ j ] == 'E' ) b [ 4 ] ++ ; else if ( book [ i ] . w [ j ] == 'F' ) b [ 5 ] ++ ; else if ( book [ i ] . w [ j ] == 'G' ) b [ 6 ] ++ ; else if ( book [ i ] . w [ j ] == 'H' ) b [ 7 ] ++ ; else if ( book [ i ] . w [ j ] == 'I' ) b [ 8 ] ++ ; else if ( book [ i ] . w [ j ] == 'J' ) b [ 9 ] ++ ; else if ( book [ i ] . w [ j ] == 'K' ) b [ 10 ] ++ ; else if ( book [ i ] . w [ j ] == 'L' ) b [ 11 ] ++ ; else if ( book [ i ] . w [ j ] == 'M' ) b [ 12 ] ++ ; else if ( book [ i ] . w [ j ] == 'N' ) b [ 13 ] ++ ; else if ( book [ i ] . w [ j ] == 'O' ) b [ 14 ] ++ ; else if ( book [ i ] . w [ j ] == 'P' ) b [ 15 ] ++ ; else if ( book [ i ] . w [ j ] == 'Q' ) b [ 16 ] ++ ; else if ( book [ i ] . w [ j ] == 'R' ) b [ 17 ] ++ ; else if ( book [ i ] . w [ j ] == 'S' ) b [ 18 ] ++ ; else if ( book [ i ] . w [ j ] == 'T' ) b [ 19 ] ++ ; else if ( book [ i ] . w [ j ] == 'U' ) b [ 20 ] ++ ; else if ( book [ i ] . w [ j ] == 'V' ) b [ 21 ] ++ ; else if ( book [ i ] . w [ j ] == 'W' ) b [ 22 ] ++ ; else if ( book [ i ] . w [ j ] == 'X' ) b [ 23 ] ++ ; else if ( book [ i ] . w [ j ] == 'Y' ) b [ 24 ] ++ ; else if ( book [ i ] . w [ j ] == 'Z' ) b [ 25 ] ++ ; } } for ( i = 0 ; i <= 25 ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( b [ i ] < b [ j ] ) break ; } if ( j == 26 ) { printf ( "%c\n%d\n" , 65 + i , b [ i ] ) ; break ; } } for ( j = 0 ; j < n ; j ++ ) { for ( l = 0 ; book [ j ] . w [ l ] != '\0' ; l ++ ) { if ( book [ j ] . w [ l ] == 65 + i ) { printf ( "%d\n" , book [ j ] . num ) ; break ; } } } }
char name ; int num , k = 0 , t = 0 ; int nametimes [ 100 ] = { 0 } ; struct book { unsigned int No ; char Name [ 26 ] ; } * p ; void operate ( ) { int i ; for ( i = 65 ; i < 91 ; i ++ ) if ( nametimes [ i ] > t ) { t = nametimes [ i ] ; name = i ; } } void print ( ) { struct book * pi ; int i ; printf ( "%c\n%d\n" , name , t ) ; for ( pi = p ; pi < p + num ; pi ++ ) for ( i = 0 ; pi -> Name [ i ] != '\0' ; i ++ ) if ( pi -> Name [ i ] == name ) { if ( k == 0 ) { printf ( "%d" , pi -> No ) ; k ++ ; } else printf ( "\n%d" , pi -> No ) ; break ; } } main ( ) { scanf ( "%d" , & num ) ; struct book * pi ; int i ; p = ( struct book * ) malloc ( num * sizeof ( struct book ) ) ; for ( pi = p ; pi < p + num ; pi ++ ) { scanf ( "%d %s" , & pi -> No , pi -> Name ) ; for ( i = 0 ; pi -> Name [ i ] != '\0' ; i ++ ) nametimes [ ( int ) pi -> Name [ i ] ] ++ ; } operate ( ) ; print ( ) ; }
struct book { int num ; char ren [ 26 ] ; } main ( ) { struct book shu [ 999 ] ; int m , i , j , k , max = 0 , p ; int a [ 26 ] = { 0 } ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & shu [ i ] . num , shu [ i ] . ren ) ; for ( j = 0 ; shu [ i ] . ren [ j ] != '\0' ; j ++ ) for ( k = 65 ; k < 91 ; k ++ ) if ( shu [ i ] . ren [ j ] == k ) a [ k - 65 ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) if ( max < a [ i ] ) max = a [ i ] ; for ( i = 0 ; i < 26 ; i ++ ) if ( max == a [ i ] ) { p = i + 65 ; printf ( "%c\n%d\n" , p , a [ p - 65 ] ) ; } for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; shu [ i ] . ren [ j ] != '\0' ; j ++ ) if ( p == shu [ i ] . ren [ j ] ) printf ( "%d\n" , shu [ i ] . num ) ; }
struct book { int num ; char name [ 26 ] ; struct book * next ; } ; struct book * creat ( int m ) { struct book * head , * p1 , * p2 ; p1 = ( struct book * ) malloc ( sizeof ( struct book ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; int i ; for ( i = 1 ; i < m ; i ++ ) { if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct book * ) malloc ( sizeof ( struct book ) ) ; scanf ( "%d %s" , & p1 -> num , p1 -> name ) ; } p2 -> next = p1 ; p1 -> next = NULL ; return ( head ) ; } main ( ) { struct book * head , * p ; int i , j , m , k , l , max = 0 ; scanf ( "%d" , & m ) ; head = creat ( m ) ; int * a ; a = ( int * ) malloc ( 26 * sizeof ( int ) ) ; for ( i = 0 ; i < 26 ; i ++ ) * ( a + i ) = 0 ; p = head ; for ( i = 0 ; i < m ; i ++ ) { k = strlen ( p -> name ) ; for ( j = 0 ; j < k ; j ++ ) for ( l = 0 ; l < 26 ; l ++ ) if ( * ( p -> name + j ) == l + 65 ) ( * ( a + l ) ) ++ ; p = p -> next ; } for ( i = 0 ; i < 26 ; i ++ ) if ( max < * ( a + i ) ) max = * ( a + i ) ; for ( i = 0 ; i < 26 ; i ++ ) if ( max == * ( a + i ) ) { printf ( "%c\n%d\n" , i + 65 , max ) ; break ; } p = head ; for ( j = 0 ; j < m ; j ++ ) { k = strlen ( p -> name ) ; for ( l = 0 ; l < k ; l ++ ) if ( * ( p -> name + l ) == i + 65 ) printf ( "%d\n" , p -> num ) ; p = p -> next ; } }
struct book { int num ; char author [ 26 ] ; struct book * next ; } ; void main ( ) { int m , i , j , l , max , maxi ; int n [ 26 ] = { 0 } ; struct book * head , * p1 , * p2 ; char * p ; scanf ( "%d" , & m ) ; i = 0 ; p1 = p2 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> num , p1 -> author ) ; head = NULL ; while ( i < m ) { i ++ ; if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; if ( i < m ) { p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> num , p1 -> author ) ; } } p2 -> next = NULL ; p1 = head ; while ( p1 != NULL ) { l = strlen ( p1 -> author ) ; p = p1 -> author ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) if ( * ( p + i ) == j + 64 ) n [ j ] ++ ; } p1 = p1 -> next ; } max = n [ 0 ] ; for ( i = 1 ; i < 26 ; i ++ ) { if ( n [ i ] > max ) { max = n [ i ] ; maxi = i ; } } printf ( "%c\n" , maxi + 64 ) ; printf ( "%d\n" , max ) ; p1 = head ; while ( p1 != NULL ) { l = strlen ( p1 -> author ) ; p = p1 -> author ; for ( i = 0 ; i < l ; i ++ ) { if ( * ( p + i ) == maxi + 64 ) { printf ( "%d\n" , p1 -> num ) ; break ; } } p1 = p1 -> next ; } }
struct book { int mun ; char name [ 26 ] ; } a [ 999 ] ; int main ( ) { int n , i , j , l , q = 0 ; char k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & a [ i ] . mun , a [ i ] . name ) ; } int w [ 26 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { l = strlen ( a [ i ] . name ) ; for ( j = 0 ; j < l ; j ++ ) { k = a [ i ] . name [ j ] ; w [ k - 65 ] ++ ; } } int max ; max = w [ 0 ] ; int flag = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( w [ i ] > max ) { max = w [ i ] ; flag = i ; } } printf ( "%c\n" , flag + 65 ) ; printf ( "%d\n" , w [ flag ] ) ; for ( i = 0 ; i < n ; i ++ ) { l = strlen ( a [ i ] . name ) ; for ( j = 0 ; j < l ; j ++ ) { if ( a [ i ] . name [ j ] == ( flag + 65 ) ) printf ( "%d\n" , a [ i ] . mun ) ; } } return 0 ; }
void main ( ) { struct book { char num [ 100 ] , wri [ 26 ] ; } bo [ 1000 ] ; int i , j , k , l , n , m = 0 , a [ 26 ] = { 0 } , mw ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %s" , bo [ i ] . num , bo [ i ] . wri ) ; l = strlen ( bo [ i ] . wri ) ; for ( j = 0 ; j < l ; j ++ ) a [ bo [ i ] . wri [ j ] - 65 ] ++ ; } for ( i = 0 ; i < 26 ; i ++ ) if ( a [ i ] > m ) { m = a [ i ] ; mw = 65 + i ; } printf ( "%c\n%d\n" , mw , m ) ; for ( i = 0 ; i < n ; i ++ ) { l = strlen ( bo [ i ] . wri ) ; for ( j = 0 ; j < l ; j ++ ) if ( bo [ i ] . wri [ j ] == mw ) { puts ( bo [ i ] . num ) ; break ; } } }
struct information { int num ; char author [ 26 ] ; } * a ; void main ( ) { int n , i , j , m , s [ 26 ] = { 0 } , max = 0 , p ; scanf ( "%d" , & n ) ; a = ( struct information * ) malloc ( sizeof ( struct information ) * n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d%s" , & a [ i ] . num , a [ i ] . author ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; a [ i ] . author [ j ] != '\0' ; j ++ ) { m = a [ i ] . author [ j ] - 'A' ; s [ m ] ++ ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( max < s [ i ] ) { max = s [ i ] ; p = i ; } } printf ( "%c\n%d\n" , 'A' + p , s [ p ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 26 ; j ++ ) { if ( a [ i ] . author [ j ] == 'A' + p ) { printf ( "%d\n" , a [ i ] . num ) ; break ; } } } }
struct books { char num [ 20 ] ; char w [ 26 ] ; } ; int main ( ) { int k , j , i , m ; int b [ 150 ] = { 0 } ; scanf ( "%d" , & m ) ; struct books a [ 1000 ] ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%s %s" , a [ i ] . num , a [ i ] . w ) ; for ( j = 0 ; a [ i ] . w [ j ] != '\0' ; j ++ ) b [ a [ i ] . w [ j ] ] ++ ; } int max = 0 ; for ( i = 'A' , j = 0 ; i <= 'Z' ; i ++ ) if ( max < b [ i ] ) { max = b [ i ] ; j = i ; } printf ( "%c\n" , j ) ; printf ( "%d\n" , max ) ; int n = 0 ; for ( i = 0 ; i < m ; i ++ ) { n = 0 ; for ( k = 0 ; a [ i ] . w [ k ] != '\0' ; k ++ ) if ( a [ i ] . w [ k ] == j ) n = 1 ; if ( n == 1 ) printf ( "%s\n" , a [ i ] . num ) ; } }
struct book { int ID ; char author [ 30 ] ; struct book * next ; } ; int n , max = 0 ; char c ; int num [ 26 ] = { 0 } ; struct book * create ( ) { struct book * head , * p1 , * p2 ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> ID , p1 -> author ) ; head = p1 ; p2 = p1 ; p1 -> next = NULL ; int i = 1 ; do { if ( i == n ) break ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> ID , p1 -> author ) ; p2 -> next = p1 ; p2 = p1 ; p1 -> next = NULL ; i ++ ; } while ( 1 ) ; return ( head ) ; } void seek ( struct book * head ) { struct book * p ; char * s ; p = head ; while ( p ) { for ( s = p -> author ; * s != '\0' ; s ++ ) { int temp ; temp = * s - 'A' ; ( * ( num + temp ) ) ++ ; } p = p -> next ; } } void find ( struct book * head ) { struct book * p ; char * s ; p = head ; while ( p ) { for ( s = p -> author ; * s != '\0' ; s ++ ) { if ( * s == c ) break ; } if ( * s != '\0' ) printf ( "%d\n" , p -> ID ) ; p = p -> next ; } } int main ( ) { struct book * head ; int i ; scanf ( "%d" , & n ) ; head = create ( ) ; seek ( head ) ; for ( i = 0 ; i < 26 ; i ++ ) { if ( * ( num + i ) > max ) max = * ( num + i ) ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( * ( num + i ) == max ) break ; } printf ( "%c\n%d\n" , 'A' + i , max ) ; c = 'A' + i ; find ( head ) ; }
struct book { int ID ; char author [ 30 ] ; struct book * next ; } ; int n , max = 0 ; char c ; struct book * create ( ) { struct book * head , * p1 , * p2 ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> ID , p1 -> author ) ; head = p1 ; p2 = p1 ; p1 -> next = NULL ; int i = 1 ; do { if ( i == n ) break ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%d %s" , & p1 -> ID , p1 -> author ) ; p2 -> next = p1 ; p2 = p1 ; p1 -> next = NULL ; i ++ ; } while ( 1 ) ; return ( head ) ; } int main ( ) { struct book * head ; int i ; int * num ; num = ( int * ) malloc ( 26 * sizeof ( int ) ) ; for ( i = 0 ; i < 26 ; i ++ ) * ( num + i ) = 0 ; scanf ( "%d" , & n ) ; head = create ( ) ; struct book * p ; char * s ; p = head ; while ( p ) { for ( s = p -> author ; * s != '\0' ; s ++ ) { int temp ; temp = * s - 'A' ; ( * ( num + temp ) ) ++ ; } p = p -> next ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( * ( num + i ) > max ) max = * ( num + i ) ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( * ( num + i ) == max ) break ; } printf ( "%c\n%d\n" , 'A' + i , max ) ; c = 'A' + i ; p = head ; while ( p ) { for ( s = p -> author ; * s != '\0' ; s ++ ) { if ( * s == c ) break ; } if ( * s != '\0' ) printf ( "%d\n" , p -> ID ) ; p = p -> next ; } }
struct book { int id ; char s [ 26 ] ; } a [ 100 ] ; int main ( ) { int m , i , n , j , k , max , maxnum ; int aut1 [ 26 ] = { 0 } , aut2 [ 26 ] [ 100 ] = { 0 } ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] . id ) ; gets ( a [ i ] . s ) ; n = strlen ( a [ i ] . s ) ; for ( j = 0 ; j < n ; j ++ ) { k = a [ i ] . s [ j ] - 'A' ; aut2 [ k ] [ aut1 [ k ] ] = a [ i ] . id ; aut1 [ k ] ++ ; } } max = 0 ; maxnum = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( aut1 [ i ] > max ) { max = aut1 [ i ] ; maxnum = i ; } } printf ( "%c\n" , 'A' + maxnum ) ; printf ( "%d\n" , max ) ; printf ( "%d" , aut2 [ maxnum ] [ 0 ] ) ; for ( i = 1 ; i < max ; i ++ ) { printf ( "\n%d" , aut2 [ maxnum ] [ i ] ) ; } }
int m ; struct book { char num [ 20 ] ; char aut [ 20 ] ; struct book * next ; } ; struct book * creat ( ) { struct book * head , * p1 , * p2 ; int i ; p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%s %s" , p1 -> num , p1 -> aut ) ; p1 -> next = NULL ; head = p1 ; p2 = p1 ; for ( i = 1 ; i < m ; i ++ ) { p1 = ( struct book * ) malloc ( LEN ) ; scanf ( "%s %s" , p1 -> num , p1 -> aut ) ; p1 -> next = NULL ; p2 -> next = p1 ; p2 = p1 ; } return ( head ) ; } void print ( struct book * head ) { struct book * p ; int * tem , i , k ; char * q , max , c ; tem = ( int * ) malloc ( 30 * sizeof ( int ) ) ; for ( i = 0 ; i < 30 ; i ++ ) { * ( tem + i ) = 0 ; } for ( p = head ; p ; p = p -> next ) { q = p -> aut ; for ( i = 0 ; * ( q + i ) != '\0' ; i ++ ) { c = * ( q + i ) - 'A' ; * ( tem + c ) += 1 ; } } max = 0 ; k = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( * ( tem + i ) > max ) { max = * ( tem + i ) ; k = i ; } } c = k + 'A' ; printf ( "%c\n" , c ) ; printf ( "%d\n" , max ) ; for ( p = head ; p ; p = p -> next ) { for ( q = p -> aut , i = 0 ; * ( q + i ) != '\0' ; i ++ ) { if ( * ( q + i ) == c ) { break ; } } if ( * ( q + i ) != '\0' ) { printf ( "%s\n" , p -> num ) ; } } } int main ( ) { struct book * head ; scanf ( "%d" , & m ) ; head = creat ( ) ; print ( head ) ; }
void main ( ) { struct book { int num ; char wri [ 26 ] ; } * s ; int n , i , j , a [ 100 ] , t ; char c ; s = ( struct book * ) malloc ( n * sizeof ( struct book ) ) ; for ( i = 0 ; i < 100 ; i ++ ) a [ i ] = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & ( * ( s + i ) ) . num , ( * ( s + i ) ) . wri ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; ( * ( s + i ) ) . wri [ j ] != '\0' ; j ++ ) { for ( c = 'A' ; c <= 'Z' ; c ++ ) if ( s [ i ] . wri [ j ] == c ) a [ s [ i ] . wri [ j ] ] ++ ; } for ( i = 0 ; i < 100 ; i ++ ) if ( a [ 0 ] < a [ i ] ) { a [ 0 ] = a [ i ] ; t = i ; } printf ( "%c\n" , t ) ; printf ( "%d\n" , a [ t ] ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; ( * ( s + i ) ) . wri [ j ] != '\0' ; j ++ ) { if ( s [ i ] . wri [ j ] == t ) printf ( "%d\n" , s [ i ] . num ) ; } }
struct book { int id ; char p [ 26 ] ; } ; void main ( ) { int n , i , j , k , a [ 150 ] = { 0 } , flag , max = 0 ; struct book t , * s , o [ 1000 ] , y [ 1000 ] ; scanf ( "%d" , & n ) ; s = ( struct book * ) malloc ( n * sizeof ( struct book ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s" , & s [ i ] . id , s [ i ] . p ) ; for ( j = 0 ; s [ i ] . p [ j ] != '\0' ; j ++ ) a [ s [ i ] . p [ j ] ] ++ ; } for ( i = 'A' ; i <= 'Z' ; i ++ ) if ( max < a [ i ] ) { max = a [ i ] ; j = i ; } printf ( "%c\n" , j ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { flag = 0 ; for ( k = 0 ; s [ i ] . p [ k ] != '\0' ; k ++ ) if ( s [ i ] . p [ k ] == j ) flag = 1 ; if ( flag == 1 ) printf ( "%d\n" , s [ i ] . id ) ; } }
void main ( ) { int n , len , i , j , k , max ; int c [ 26 ] = { 0 } ; char a [ 26 ] , f , x ; struct book { int num ; char author [ 26 ] ; } ; struct book b [ 1000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & b [ i ] . num , & b [ i ] . author ) ; for ( i = 0 ; i < n ; i ++ ) { strcpy ( a , b [ i ] . author ) ; len = strlen ( a ) ; for ( j = 0 ; j < len ; j ++ ) if ( 'A' <= ( x = a [ j ] ) && ( x = a [ j ] ) <= 'Z' ) c [ x - 'A' ] ++ ; } max = c [ 0 ] ; k = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( c [ i ] > max ) { max = c [ i ] ; k = i ; } } printf ( "%c\n%d\n" , k + 'A' , max ) ; for ( i = 0 ; i < n ; i ++ ) { strcpy ( a , b [ i ] . author ) ; len = strlen ( a ) ; for ( j = 0 ; j < len ; j ++ ) if ( ( f = a [ j ] ) == k + 'A' ) printf ( "%d\n" , b [ i ] . num ) ; } }
void main ( ) { int n , i , j , k ; int at [ 26 ] = { 0 } ; char c ; scanf ( "%d" , & n ) ; struct st { int id ; char s [ 27 ] ; } a [ 999 ] , * p ; for ( p = a ; p < a + n ; p ++ ) scanf ( "%d %s" , & p -> id , p -> s ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; ; j ++ ) { c = a [ i ] . s [ j ] ; if ( c != '\0' ) at [ c - 65 ] ++ ; else break ; } } int max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( at [ i ] > max ) { max = at [ i ] ; j = i ; } } char x ; x = j + 65 ; printf ( "%c\n%d\n" , x , max ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; ; j ++ ) { c = a [ i ] . s [ j ] ; if ( c == x ) printf ( "%d\n" , a [ i ] . id ) ; if ( c == '\0' ) break ; } } }
struct st { int a ; char s [ 26 ] ; struct st * n ; } ; struct st * creat ( int m ) { int i ; struct st * p1 , * p2 , * head ; for ( i = 0 ; i < m ; i ++ ) { p1 = ( struct st * ) malloc ( len ) ; if ( i == 0 ) head = p1 ; else p2 -> n = p1 ; scanf ( "%d %s" , & p1 -> a , p1 -> s ) ; p2 = p1 ; } p1 -> n = NULL ; return ( head ) ; } void main ( ) { int m ; struct st * creat ( int m ) ; scanf ( "%d" , & m ) ; struct st * p , * q ; p = creat ( m ) ; q = p ; int i , j , k ; int a [ 26 ] = { 0 } ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < ( k = strlen ( p -> s ) ) ; j ++ ) a [ p -> s [ j ] - 65 ] ++ ; p = p -> n ; } p = q ; int max = a [ 0 ] ; for ( i = 1 ; i < 26 ; i ++ ) { if ( a [ i ] > max ) max = a [ i ] ; } char c ; for ( i = 0 ; i < 26 ; i ++ ) { if ( a [ i ] == max ) { c = i + 65 ; printf ( "%c\n%d\n" , c , a [ i ] ) ; break ; } } char cc ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; ; j ++ ) { cc = q -> s [ j ] ; if ( cc == '\0' ) break ; if ( c == cc ) printf ( "%d\n" , q -> a ) ; } q = q -> n ; } }
main ( ) { struct book { int num ; char name [ 26 ] ; } b [ 1000 ] ; int m , i , j , n [ 26 ] = { 0 } , max = 0 , t ; scanf ( "%d" , & m ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d %s" , & b [ i ] . num , b [ i ] . name ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( b [ i ] . name ) ; j ++ ) { ++ n [ b [ i ] . name [ j ] - 65 ] ; } } for ( i = 0 ; i < 26 ; i ++ ) { if ( n [ i ] > max ) { max = n [ i ] ; t = i + 65 ; } } printf ( "%c\n" , t ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < strlen ( b [ i ] . name ) ; j ++ ) { if ( b [ i ] . name [ j ] == t ) printf ( "%d\n" , b [ i ] . num ) ; } } }
void main ( ) { struct book { int number ; char author [ 10 ] ; } ; struct book a [ 1000 ] ; int i , n , j , count [ 26 ] = { 0 } , temp , max , index = 0 ; char c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d %s" , & a [ i ] . number , & a [ i ] . author ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; a [ i ] . author [ j ] != '\0' ; j ++ ) { temp = ( a [ i ] . author [ j ] ) - 'A' ; count [ temp ] ++ ; } max = count [ 0 ] ; for ( i = 1 ; i < 26 ; i ++ ) if ( count [ i ] > max ) { max = count [ i ] ; index = i ; } c = index + 'A' ; printf ( "%c\n%d\n" , c , max ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; a [ i ] . author [ j ] != '\0' ; j ++ ) if ( a [ i ] . author [ j ] == c ) printf ( "%d\n" , a [ i ] . number ) ; }
main ( ) { int m , n , j , k , id [ 1001 ] , a [ 26 ] = { 0 } ; char c [ 1001 ] [ 26 ] , b [ 26 ] = { 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' } ; scanf ( "%d" , & n ) ; for ( j = 1 ; j <= n ; j ++ ) { scanf ( "%d %s" , & id [ j ] , & c [ j ] ) ; } for ( m = 0 ; m < 26 ; m ++ ) { for ( j = 1 ; j <= n ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( b [ m ] == c [ j ] [ k ] ) a [ m ] = a [ m ] + 1 ; } } } int t = 0 , r = 0 ; for ( m = 0 ; m <= 25 ; m ++ ) { if ( t < a [ m ] ) { t = a [ m ] ; r = m ; } } printf ( "%c\n%d" , b [ r ] , a [ r ] ) ; for ( j = 1 ; j <= n ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( c [ j ] [ k ] == b [ r ] ) printf ( "\n%d" , id [ j ] ) ; } } }
struct book { int mark ; char name [ 26 ] ; } ; int main ( ) { int m , h , i , j , k , max , length ; int t [ 26 ] ; char a ; scanf ( "%d" , & m ) ; struct book book [ 1000 ] ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d%s" , & book [ i ] . mark , book [ i ] . name ) ; } for ( i = 0 ; i < 26 ; i ++ ) { a = 'A' + i ; t [ i ] = 0 ; for ( j = 0 ; j < m ; j ++ ) { length = strlen ( book [ i ] . name ) ; for ( h = 0 ; h < 26 ; h ++ ) if ( a == book [ j ] . name [ h ] ) { t [ i ] ++ ; } } } max = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( t [ i ] > max ) { max = t [ i ] ; k = i ; } } a = 'A' + k ; printf ( "%c\n%d\n" , a , t [ k ] ) ; for ( i = 0 ; i < m ; i ++ ) { length = strlen ( book [ i ] . name ) ; for ( j = 0 ; j < 26 ; j ++ ) { if ( 'A' + k == book [ i ] . name [ j ] ) printf ( "%d\n" , book [ i ] . mark ) ; } } return 0 ; }
struct { int no ; char wr [ 26 ] ; } book [ 999 ] ; struct { char name ; int num ; int book [ 999 ] ; } a [ 26 ] ; int main ( ) { int n , m , t , k , d ; int all = 0 ; for ( t = 0 ; t < 26 ; t ++ ) { a [ t ] . name = 'A' + t ; a [ t ] . num = 0 ; } scanf ( "%d" , & m ) ; for ( t = 0 ; t < m ; t ++ ) { scanf ( "%d %s" , & book [ t ] . no , book [ t ] . wr ) ; } for ( t = 0 ; t < m ; t ++ ) { k = strlen ( book [ t ] . wr ) ; for ( n = 0 ; n < k ; n ++ ) { for ( d = 0 ; d < 26 ; d ++ ) { if ( a [ d ] . name == book [ t ] . wr [ n ] ) { a [ d ] . book [ a [ d ] . num ] = book [ t ] . no ; a [ d ] . num ++ ; break ; } } } } k = 0 ; for ( t = 0 ; t < 26 ; t ++ ) { if ( k < a [ t ] . num ) k = a [ t ] . num ; } for ( t = 0 ; ; t ++ ) { if ( k == a [ t ] . num ) { printf ( "%c" , a [ t ] . name ) ; printf ( "\n%d" , a [ t ] . num ) ; for ( d = 0 ; d < a [ t ] . num ; d ++ ) printf ( "\n%d" , a [ t ] . book [ d ] ) ; break ; } } }
struct s { long h ; char z [ 1000 ] ; struct s * next ; } ; struct s * create ( int n ) { struct s * head , * p1 , * p2 ; int i = 0 ; p1 = p2 = ( struct s * ) malloc ( len ) ; scanf ( "%ld %s" , & p1 -> h , p1 -> z ) ; head = 0 ; while ( i < n - 1 ) { i ++ ; if ( i == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct s * ) malloc ( len ) ; scanf ( "%ld %s" , & p1 -> h , p1 -> z ) ; } p2 -> next = p1 ; p1 -> next = 0 ; return head ; } void main ( ) { int m , i , n , num [ 26 ] = { 0 } , j ; struct s * p1 , * head ; char c , * p2 ; scanf ( "%d" , & n ) ; head = create ( n ) ; p1 = head ; for ( i = 0 ; i < n ; i ++ ) { for ( p2 = p1 -> z ; * p2 != '\0' ; p2 ++ ) { j = * p2 - 65 ; num [ j ] ++ ; } p1 = p1 -> next ; } m = num [ 0 ] ; j = 0 ; for ( i = 0 ; i < 26 ; i ++ ) { if ( num [ i ] > m ) { m = num [ i ] ; j = i ; } } c = j + 65 ; printf ( "%c\n" , c ) ; printf ( "%d\n" , num [ j ] ) ; p1 = head ; for ( i = 0 ; i < n ; i ++ ) { for ( p2 = p1 -> z ; * p2 != '\0' ; p2 ++ ) { if ( * p2 == c ) { printf ( "%ld\n" , p1 -> h ) ; break ; } } p1 = p1 -> next ; } }
int main ( ) { int n , i , j , k ; scanf ( "%d\n" , & n ) ; struct book { int num ; char name [ 26 ] ; } book [ 999 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d %s\n" , & book [ i ] . num , book [ i ] . name ) ; } struct author { char l ; int count ; } au [ 26 ] ; for ( i = 0 ; i < 26 ; i ++ ) { au [ i ] . l = 65 + i ; au [ i ] . count = 0 ; } for ( i = 0 ; i < 26 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( au [ i ] . l == book [ j ] . name [ k ] ) { au [ i ] . count ++ ; break ; } } } } int max = 0 ; for ( i = 1 ; i < 26 ; i ++ ) { if ( au [ max ] . count < au [ i ] . count ) max = i ; } printf ( "%c\n%d\n" , au [ max ] . l , au [ max ] . count ) ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < 26 ; k ++ ) { if ( au [ max ] . l == book [ j ] . name [ k ] ) { printf ( "%d\n" , book [ j ] . num ) ; break ; } } } return 0 ; }
void main ( ) { int t = 0 , m , i , j , n , k , a [ 999 ] , c [ 26 ] = { 0 } ; char b [ 999 ] [ 999 ] ; scanf ( "%d\n" , & m ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d %s" , & a [ i ] , b [ i ] ) ; for ( i = 0 ; i < m ; i ++ ) { k = strlen ( b [ i ] ) ; for ( j = 0 ; j < k ; j ++ ) c [ b [ i ] [ j ] - 'A' ] ++ ; } for ( j = 0 ; j < 26 ; j ++ ) { if ( t < c [ j ] ) t = c [ j ] ; } for ( i = 0 ; i < 26 ; i ++ ) { if ( c [ i ] == t ) { printf ( "%c\n" , i + 'A' ) ; break ; } } printf ( "%d\n" , t ) ; for ( j = 0 ; j < m ; j ++ ) { k = strlen ( b [ j ] ) ; for ( n = 0 ; n < k ; n ++ ) { if ( ( b [ j ] [ n ] - 'A' ) == i ) printf ( "%d\n" , a [ j ] ) ; } } }
int main ( ) { int n , k ; int a [ LEN ] ; int i , j ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; if ( a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , m , i , * p , j , b = 0 ; scanf ( "%d %d\n" , & n , & m ) ; p = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & p [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( p [ i ] + p [ j ] == m ) { b = 1 ; } else continue ; } } if ( b ) { printf ( "yes" ) ; } else printf ( "no" ) ; free ( p ) ; return 0 ; }
int main ( ) { int n , k , s = 0 ; scanf ( "%d" , & n ) ; scanf ( "%d" , & k ) ; int sz [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( int z = 0 ; z < n ; z ++ ) { for ( int m = z + 1 ; m < n ; m ++ ) { if ( k == sz [ z ] + sz [ m ] ) { s ++ ; } if ( k != ( sz [ z ] + sz [ m ] ) ) { s += 0 ; } } } if ( s == 0 ) { printf ( "no" ) ; } if ( s != 0 ) { printf ( "yes" ) ; } return 0 ; }
int main ( ) { int n , k , i , a , sum , d ; scanf ( "%d%d" , & n , & k ) ; int * sz = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { a = i + 1 ; for ( a ; a < n ; a ++ ) { sum = sz [ i ] + sz [ a ] ; if ( sum == k ) { d = 1 ; } } } if ( d == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } free ( sz ) ; return 0 ; }
int main ( ) { int i , j , n , k , l = 0 , s [ 1000 ] , h [ 1000 ] [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { h [ i ] [ j ] = s [ i ] + s [ j ] ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( h [ i ] [ j ] == k ) { l = l + 1 ; } } } if ( l > 0 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k ; int a [ 1000 ] , b [ 1000 ] ; int i , j ; scanf ( "%d %d" , & n , & k ) ; scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( " %d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( ( a [ i ] + a [ j ] ) == k ) { printf ( "yes" ) ; break ; } if ( ( a [ i ] + a [ j ] ) == k ) { break ; } } if ( ( a [ i ] + a [ j ] ) != k ) { printf ( "no" ) ; } return 0 ; }
int mysort ( void * a , void * b ) { return * ( int * ) a - * ( int * ) b ; } int main ( ) { int in [ 1000 ] ; int n , k ; int i ; int found = 0 ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; ++ i ) { scanf ( "%d" , & in [ i ] ) ; } qsort ( in , n , sizeof ( int ) , mysort ) ; int * lp = & in [ 0 ] ; int * rp = & in [ n - 1 ] ; while ( lp != rp ) { i = * lp + * rp ; if ( i < k ) { ++ lp ; } else if ( i > k ) { -- rp ; } else { found = 1 ; break ; } } if ( found ) { printf ( "yes\n" ) ; } else { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int n , k , i , j , g [ N ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & g [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( g [ i ] + g [ j ] == k ) { printf ( "yes" ) ; break ; } else if ( i == n - 2 ) { printf ( "no" ) ; } } if ( g [ i ] + g [ j ] == k ) { break ; } else if ( i == n - 2 ) { break ; } } return 0 ; }
int main ( ) { int n , k , i , j , a , b ; int sz [ 1000 ] , zz [ 1000 ] ; b = 0 ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } i = 0 ; j = 0 ; while ( i < n && j < n ) { zz [ j ] = sz [ i ] ; i ++ ; j ++ ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i == j ) { continue ; } if ( sz [ i ] + zz [ j ] == k ) { a = 1 ; } else { a = 0 ; } if ( a == 1 || b == 1 ) { b = 1 ; } else { b = 0 ; } } } if ( b == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , sz [ 1000 ] , b = 0 , c , q , i , j , e ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { q = sz [ i ] + sz [ j ] ; if ( q == k ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , j , ylf = 0 ; int a [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } i = 0 ; while ( i < n && ylf == 0 ) { j = i + 1 ; while ( j < n && ylf == 0 ) { if ( a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; ylf = 1 ; } else { j ++ ; } } i ++ ; } if ( ylf == 0 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , i , j , k , a [ 1000 ] , b [ 1000 ] , c [ 1000000 ] ; int e = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; b [ i ] = a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i != j ) { c [ e ] = a [ i ] + b [ j ] ; e ++ ; } } } for ( i = 0 ; i <= e ; i ++ ) { if ( i < e && c [ i ] == k ) { printf ( "yes\n" ) ; break ; } if ( i == e && c [ e ] == k ) { printf ( "yes\n" ) ; } else if ( i == e ) { printf ( "no\n" ) ; } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , k , a [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i != j && a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k ; scanf ( "%d%d" , & n , & k ) ; int sz [ 1000 ] ; int i ; for ( i = 0 ; i < n ; i += 1 ) { scanf ( "%d" , & ( sz [ i ] ) ) ; } for ( int l = 0 ; l <= n - 1 ; l += 1 ) { for ( i = 1 ; i < n ; i += 1 ) { if ( sz [ l ] + sz [ i ] == k ) { printf ( "yes" ) ; return 0 ; } } if ( l == n - 1 ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int n , sz [ 1000 ] , k , j , i , m ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { scanf ( "%d" , & sz [ i ] ) ; } else { scanf ( " %d" , & sz [ i ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( sz [ i ] + sz [ j ] == k ) { printf ( "yes" ) ; m = 1 ; break ; } } if ( m == 1 ) { break ; } } if ( m != 1 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , e ; int s [ 1000 ] ; int i = 0 , j = 0 , p = 0 ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & ( s [ i ] ) ) ; } for ( j = 0 ; j < n - 1 ; j ++ ) { i = 1 ; for ( i = 1 ; i < n - j ; i ++ ) { e = s [ j ] + s [ i + j ] ; if ( e == k ) { p = 1 ; } } } if ( p == 0 ) { printf ( "no" ) ; } if ( p == 1 ) { printf ( "yes" ) ; } return 0 ; }
int main ( ) { int i , j , k , n , a [ 1000 ] = { 0 } , flag = 0 ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { flag = 1 ; cout << "yes" << endl ; break ; } } if ( flag == 1 ) { break ; } } if ( flag == 0 ) { cout << "no" << endl ; } return 0 ; }
int main ( ) { int array [ 1000 ] , n , k , i , j , flag = 0 , m ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & array [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { m = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( array [ j ] < array [ m ] ) { m = j ; } } int temp = array [ i ] ; array [ i ] = array [ m ] ; array [ m ] = temp ; } for ( i = 0 , j = n - 1 ; i < j ; ) { int temp = array [ i ] + array [ j ] ; if ( temp == k ) { flag = 1 ; break ; } else if ( temp > k ) { j -- ; } else { i ++ ; } } if ( flag ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , j , s , m , n , k ; m = 0 ; int x [ 1000 ] , a [ 1000 ] , b [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & x [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { s = x [ i ] + x [ j ] ; if ( s == k ) { printf ( "yes" ) ; m ++ ; break ; } } if ( m != 0 ) break ; } if ( m == 0 ) printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , a , m = 0 , s1 [ 1000 ] , s2 [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s1 [ i ] ) ; s2 [ i ] = s1 [ i ] ; } for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { for ( a = ( i + 1 ) ; a < n ; a ++ ) { if ( s1 [ i ] + s2 [ a ] == k ) { m ++ ; } } } if ( m > 0 ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , j , a [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; return 0 ; } else continue ; } } if ( i == n - 1 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , i , j , t = 0 ; cin >> n >> k ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { cout << "yes" ; t ++ ; break ; } } if ( t != 0 ) break ; } if ( t == 0 ) cout << "no" ; }
int main ( ) { int a [ 11000 ] , k , i , j , n , b , l = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { b = a [ i ] + a [ j ] ; if ( b == k ) { l += 1 ; } } } if ( l != 0 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , i , a , l , j , h = 0 ; int sz [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & a ) ; sz [ i - 1 ] = a ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { l = sz [ i ] + sz [ j ] ; if ( l == k ) { h = 1 ; break ; } ; } ; } if ( h == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , i , j , a [ 1000 ] , b [ 1000 ] [ 1000 ] ; int m ; m = 0 ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < k ; i ++ ) { for ( j = k ; j > i ; j -- ) { if ( ( a [ i ] - a [ j ] ) == k ) { printf ( "yes" ) ; m = 1 ; return 0 ; } } } if ( m == 0 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , i , k , j ; int a [ 1000 ] , sum ; int b ; scanf ( "%d %d" , & n , & k ) ; scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; for ( j = 0 ; j < i ; j ++ ) { sum = a [ i ] + a [ j ] ; if ( sum == k ) { b = 1 ; } } } if ( b == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , a , b , c ; c = 0 ; int sz [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( a = 0 ; a < n ; a ++ ) { scanf ( "%d" , & sz [ a ] ) ; } for ( a = 0 ; a < ( n - 1 ) ; a ++ ) { for ( b = ( a + 1 ) ; b < n ; b ++ ) { if ( sz [ a ] + sz [ b ] == k ) { printf ( "yes" ) ; return 0 ; } if ( sz [ a ] + sz [ b ] != k ) { c ++ ; } } } if ( c == n * ( n - 1 ) / 2 ) { printf ( "no" ) ; return 0 ; } }
int main ( int argc , char * argv [ ] ) { int a [ 1000 ] , n , k , i , j , x ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d " , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { x ++ ; } } } if ( x != 0 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , k , a [ 1000 ] , b = 0 , i ; scanf ( "%d %d\n" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { b = 1 ; printf ( "yes\n" ) ; break ; } } if ( b == 1 ) { break ; } } if ( b == 0 ) { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int n , s [ A ] , k , m , e , i ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( m = i + 1 ; m < n ; m ++ ) { e = 0 ; e = s [ i ] + s [ m ] ; if ( s [ i ] + s [ m ] == k ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i ; int * a ; scanf ( "%d %d" , & n , & k ) ; a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n - i ; j ++ ) { if ( a [ i ] + a [ i + j ] == k ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , j , count = 0 ; scanf ( "%d%d" , & n , & k ) ; int * a = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , a + i ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = n - 1 ; j > i ; j -- ) { int b = k - a [ i ] ; if ( b == a [ j ] ) { count ++ ; } } } if ( count != 0 ) { printf ( "yes\n" ) ; } else { printf ( "no\n" ) ; } free ( a ) ; return 0 ; }
int main ( ) { int n , k ; scanf ( "%d %d" , & n , & k ) ; int sz [ 1000 ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } int j , e , a ; for ( j = 1 ; j < n ; j ++ ) { for ( i = 0 ; i < n - j ; i ++ ) { if ( sz [ i ] > sz [ i + 1 ] ) { e = sz [ i ] ; sz [ i ] = sz [ i + 1 ] ; sz [ i + 1 ] = e ; } } } a = 0 ; if ( sz [ n - 1 ] + sz [ n - 2 ] < k ) { printf ( "no" ) ; } else { if ( sz [ 0 ] + sz [ 1 ] > k ) { printf ( "no" ) ; } else { for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( sz [ i ] + sz [ j ] == k ) { printf ( "yes" ) ; a = 1 ; break ; } } if ( a == 1 ) { break ; } } if ( a == 0 ) { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { int n , b , s [ 1000 ] , a ; scanf ( "%d %d" , & n , & b ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & s [ i ] ) ; } for ( int k = 0 ; k < n ; k ++ ) { for ( int i = 1 ; i < n - k ; i ++ ) { a = s [ k ] + s [ k + i ] ; if ( a == b ) { printf ( "yes" ) ; return 0 ; } } } printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , j , a [ 1000 ] , m , t = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } if ( ( n == 1 ) && ( a [ 0 ] == k ) ) { t = 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i != j ) m = a [ i ] + a [ j ] ; if ( m == k ) t = 1 ; } } if ( t == 1 ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k ; int sz [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; int i ; i = 0 ; while ( i < n ) { scanf ( "%d" , & sz [ i ] ) ; i ++ ; } int f = 0 ; int sum ; for ( i = 0 ; i < n ; i ++ ) { for ( int t = 0 ; t < n ; t ++ ) { sum = sz [ i ] + sz [ t ] ; if ( sum == k ) { f = 1 ; break ; } } } if ( f == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , c , h = 0 ; scanf ( "%d%d" , & n , & k ) ; int * za = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & ( za [ i ] ) ) ; } for ( int m = 0 ; m < n - 1 ; m ++ ) { for ( c = m + 1 ; c < n ; c ++ ) { if ( za [ m ] + za [ c ] == k ) { h ++ ; } } } if ( h > 0 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } free ( za ) ; return 0 ; }
int main ( ) { int n , k , DATA [ N ] , i , j ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & DATA [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( DATA [ i ] + DATA [ j ] == k ) { printf ( "yes" ) ; goto end ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( k - DATA [ i ] != DATA [ j ] ) { printf ( "no" ) ; goto end ; } } } end : return 0 ; }
void main ( ) { int n , k , i , j , ib = 1 ; int a [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) if ( ib ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; ib = 0 ; break ; } if ( ( i == n - 2 ) && ( a [ i ] + a [ j ] != k ) ) printf ( "no" ) ; } } }
int main ( ) { int n , k , a [ 1000 ] , i , j ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n - i ; j ++ ) { if ( a [ j ] + a [ i ] != k ) { continue ; } if ( a [ j ] + a [ i ] == k ) { printf ( "yes" ) ; return 0 ; } } } if ( i == n ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , m , sz [ 1000 ] , k , i , j , s , t ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & ( sz [ i ] ) ) ; } m = n * ( n - 1 ) ; int * h = ( int * ) malloc ( sizeof ( int ) * m ) ; s = 0 ; t = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n && j != i ; j ++ ) { h [ s ] = sz [ i ] + sz [ j ] ; s ++ ; } } for ( i = 0 ; i < s ; i ++ ) { if ( h [ i ] == k ) { t ++ ; } } if ( t == 0 ) { printf ( "no" ) ; } else { printf ( "yes" ) ; } free ( h ) ; return 0 ; }
int main ( ) { int n , k , sum = 0 ; scanf ( "%d %d" , & n , & k ) ; int sz [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( int j = 0 ; j < n ; j ++ ) { for ( int h = 0 ; h < n ; h ++ ) { if ( sz [ j ] + sz [ h ] == k ) { sum ++ ; } } } if ( sum == 0 ) { printf ( "no" ) ; } else { printf ( "yes" ) ; } return 0 ; }
int main ( ) { int i , j , n , k , a = 0 ; scanf ( "%d" , & n ) ; scanf ( "%d" , & k ) ; int * sz = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j == i ) { continue ; } if ( ( sz [ i ] + sz [ j ] ) == k ) { a ++ ; } } } if ( a > 0 ) { printf ( "yes" ) ; } if ( a == 0 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k ; int c = 0 ; int sz [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( int m = 0 ; m < n - 1 ; m ++ ) { for ( int j = m + 1 ; j < n ; j ++ ) { if ( sz [ m ] + sz [ j ] == k ) { c ++ ; } } } if ( c == 0 ) printf ( "no" ) ; if ( c != 0 ) printf ( "yes" ) ; return 0 ; }
int main ( ) { int n , k ; scanf ( "%d %d" , & n , & k ) ; int i ; int sz [ 1000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } int he [ 1000 ] [ 1000 ] ; int j ; for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( i != j ) { he [ i ] [ j ] = sz [ i ] + sz [ j ] ; } } } int t = 0 ; int d = 1 ; for ( j = 0 ; j < n && d == 1 ; j ++ ) { for ( i = 0 ; i < n ; i ++ ) { if ( i != j ) { if ( he [ i ] [ j ] == k ) { printf ( "yes" ) ; d = 0 ; break ; } } t ++ ; } } if ( t == n * n ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , h , i , j , sz [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( sz [ i ] + sz [ j ] == k ) { h = 1 ; break ; } if ( sz [ i ] + sz [ j ] != k ) h = 0 ; } if ( h == 1 ) break ; } if ( h == 1 ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int n , k , i , j , a [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( a [ i ] + a [ j ] == k ) { printf ( "yes" ) ; break ; } if ( j < n ) break ; } if ( i > n - 2 ) printf ( "no" ) ; }
int main ( ) { int n , k , i , m ; scanf ( "%d %d" , & n , & k ) ; int sz [ 1000 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d " , & sz [ i ] ) ; } scanf ( "%d" , & sz [ n - 1 ] ) ; int a = 0 ; for ( a = 0 ; a < n ; a ++ ) { m = 0 ; for ( i = a + 1 ; i < n ; i ++ ) { if ( sz [ a ] + sz [ i ] == k ) { m = 1 ; printf ( "yes" ) ; break ; } } if ( m == 1 ) { break ; } } if ( m == 0 ) { printf ( "no" ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int k , n , i , j , b , t = 0 , a [ 1000 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { b = a [ i ] + a [ j ] ; if ( k == b ) { t = 1 ; break ; } } if ( t == 1 ) break ; } if ( t == 1 ) { printf ( "yes" ) ; } if ( t == 0 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , k , i , a , b ; int sz [ 1001 ] ; scanf ( "%d %d" , & n , & k ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d " , & sz [ i ] ) ; } for ( a = 1 ; a < n ; a ++ ) { for ( b = a + 1 ; b <= n ; b ++ ) { if ( sz [ a ] + sz [ b ] == k ) { printf ( "yes" ) ; break ; } } if ( sz [ a ] + sz [ b ] == k ) { break ; } if ( a == n - 1 ) { printf ( "no" ) ; } } return 0 ; }
main ( ) { int n , k , i , j ; int t = 0 ; scanf ( "%d %d" , & n , & k ) ; int * a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { t ++ ; break ; } } if ( t != 0 ) break ; } if ( t == 0 ) printf ( "no" ) ; else printf ( "yes" ) ; }
void main ( ) { int n , i , j , k , number [ 1000 ] , flag = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & number [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i != j ) { if ( number [ i ] + number [ j ] == k ) flag ++ ; } else continue ; } } if ( flag != 0 ) printf ( "yes" ) ; else printf ( "no" ) ; }
int main ( ) { int n = 0 , k = 0 , a [ 1100 ] = { 0 } ; cin >> n >> k ; cin . get ( ) ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } int p = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { p = 1 ; cout << "yes" << endl ; break ; } } if ( p == 1 ) break ; } if ( p == 0 ) cout << "no" << endl ; return 0 ; }
void main ( ) { int n , k , i , j , a [ 1005 ] , ans = 0 ; scanf ( "%d %d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , a + i ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { ans = 1 ; break ; } } } printf ( "%s\n" , ans ? "yes" : "no" ) ; }
int main ( ) { int n , k , i , m ; scanf ( "%d %d" , & n , & k ) ; int sz [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d " , & sz [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( m = i + 1 ; m < n ; m ++ ) { if ( sz [ i ] + sz [ m ] == k ) { printf ( "yes" ) ; break ; } } if ( sz [ i ] + sz [ m ] == k ) { break ; } } if ( sz [ i ] + sz [ m ] != k ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int m , e , n , i , j , k , s [ 1000 ] ; int t = 0 ; scanf ( "%d%d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & ( s [ i ] ) ) ; } for ( k = 1 ; k < n ; k ++ ) { for ( i = 0 ; i < n - k ; i ++ ) { e = s [ i + 1 ] ; s [ i + 1 ] = s [ i ] ; s [ i ] = e ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( s [ i ] + s [ j ] ) == m ) { t = 1 ; } } } if ( t == 1 ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , k ; int i , j , p = 1 ; int num [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & num [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n - i ; j ++ ) { if ( num [ i ] + num [ j ] == k ) { p = 0 ; } } } if ( p == 0 ) { printf ( "yes\n" ) ; } else if ( p = 1 ) { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int n , k ; cin >> n >> k ; int a [ n ] ; int i , j ; int yes = 0 ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { yes = 1 ; } } } if ( yes == 0 ) { cout << "no" ; } if ( yes == 1 ) { cout << "yes" ; } return 0 ; }
int main ( ) { int n = 0 , k = 0 , i = 0 , j = 0 , biaozhi = 0 ; cin >> n >> k ; int a [ 1000 ] ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { cout << "yes" ; biaozhi = 1 ; break ; } } if ( biaozhi == 1 ) { break ; } } if ( biaozhi != 1 ) { cout << "no" ; } return 0 ; }
int main ( ) { int n , m , x = 0 ; cin >> n >> m ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( int k = 0 ; k < n - 1 ; k ++ ) { for ( int j = k + 1 ; j < n ; j ++ ) { if ( a [ j ] + a [ k ] == m ) { x = 1 ; } } } if ( x == 1 ) cout << "yes" ; else if ( x == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , j , flag ; int a [ 1000 ] ; cin >> n >> k ; flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; for ( j = 0 ; j < i ; j ++ ) if ( a [ j ] + a [ i ] == k ) flag = 1 ; } if ( flag == 1 ) cout << "yes" << endl ; else cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k , shu [ 1000 ] , m ; cin >> n >> k ; cout << endl ; for ( int i = 1 ; i < n ; i ++ ) cin >> shu [ i ] ; for ( int i = 1 ; i < n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) { m = shu [ i ] + shu [ j ] ; if ( m == k ) { cout << "yes" ; j = n + 1 ; i = n + 1 ; } else if ( i == n - 1 && j == n ) cout << "no" ; } return 0 ; }
int main ( ) { int n , k , x , i = 1 , j , A = 0 ; scanf ( "%d %d" , & n , & k ) ; int a [ 1000 ] ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { cout << "yes" << endl ; A ++ ; break ; } } if ( A == 1 ) break ; } if ( A == 0 ) cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k ; int a [ 10000 ] ; int b [ 10000 ] ; int ans = 0 ; cin >> n >> k ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; b [ i ] = k - a [ i ] ; } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; i <= n && j != i ; j ++ ) { if ( a [ i ] == b [ j ] ) ans = 1 ; } } if ( ans == 1 ) cout << "yes" ; else cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , j , flag = 0 ; int a [ 1001 ] ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ; for ( i = 1 ; i <= n - 1 ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] + a [ j ] == k ) { cout << "yes" << endl ; flag = 1 ; break ; } if ( a [ i ] + a [ j ] == k ) break ; } if ( flag != 1 ) cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k , j ; int s = 0 ; cin >> n ; cin >> k ; int a [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( int z = 0 ; z < n ; z ++ ) { for ( j = z + 1 ; j < n ; j ++ ) { if ( a [ z ] + a [ j ] == k ) { s = 1 ; break ; } } if ( a [ z ] + a [ j ] == k ) break ; } if ( s == 1 ) cout << "yes" ; else if ( s == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , a [ 1001 ] , j , i , count = 0 ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) count = count + 1 ; } if ( count == 0 ) cout << "no" << endl ; else cout << "yes" << endl ; return 0 ; }
int main ( ) { int n , k , i , b = 0 , a , j , array [ SIZE ] ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & array [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { a = k - array [ i ] ; for ( j = 1 ; j < n ; j ++ ) { if ( a == array [ j ] ) { b = 1 ; break ; } else continue ; } if ( b == 1 ) break ; } if ( b == 1 ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int n , k , a [ 1000 ] , i , j , s = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { break ; } } if ( j != n ) { printf ( "yes\n" ) ; break ; } } if ( i == n - 1 ) { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int n , k , a [ 1000 ] , count = 0 ; cin >> n >> k ; int i , j ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] != k ) count = count + 1 ; } int m ; m = n * ( n - 1 ) / 2 ; if ( count < m ) cout << "yes" << endl ; else cout << "no" << endl ; return 0 ; }
int main ( ) { int n ; int k ; int a [ 1010 ] ; cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { cout << "yes" << endl ; return 0 ; } } } cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k ; cin >> n >> k ; int data [ 1001 ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> data [ i ] ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( data [ i ] + data [ j ] == k ) { cout << "yes" << endl ; return 0 ; } cout << "no" << endl ; return 0 ; }
int main ( ) { int a [ 1000 ] ; int b , c , d , f , m ; m = 0 ; cin >> b >> c ; for ( d = b ; d > 0 ; d = d - 1 ) cin >> a [ d ] ; for ( d = 1 ; d <= b ; d ++ ) { for ( f = 1 ; f <= b ; f ++ ) { if ( ( a [ f ] + a [ d ] ) == c && f != d ) m = 1 ; } } if ( m == 0 ) cout << "no" ; else cout << "yes" ; return 0 ; }
int main ( ) { int i , j , k , m , n ; int a [ 1000 ] ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] + a [ j ] == k ) { cout << "yes" << endl ; return 0 ; } cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k , i , j , a [ 1000 ] , b , q = 0 ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { q = 0 ; for ( j = 0 ; j < n - i - 1 ; j ++ ) { b = a [ i ] + a [ j + 1 ] ; if ( b == k ) { printf ( "yes\n" ) ; q ++ ; return 0 ; } else { q = - 1 ; } } } if ( q == - 1 ) printf ( "no\n" ) ; return 0 ; }
int main ( ) { int n = 0 , k = 0 , i = 0 , j = 0 , a [ 1001 ] , s = 0 ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = i + 1 ; j <= n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { s = s + 1 ; } } } if ( s == 0 ) cout << "no" << endl ; else cout << "yes" << endl ; return 0 ; }
int main ( ) { int n , k , i , j , k2 = 0 ; int a [ 1000 ] = { 0 } ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; i = 0 ; j = 0 ; while ( k2 != k && i < n ) { j = i + 1 ; while ( k2 != k && j < n ) { k2 = a [ i ] + a [ j ] ; j ++ ; } i ++ ; } if ( k2 == k ) cout << "yes" ; else cout << "no" ; return 0 ; }
int main ( ) { int n , k , l = 0 ; cin >> n >> k ; int s [ n ] ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { cin >> s [ i ] ; } for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = i + 1 ; j <= n - 1 ; j ++ ) { if ( l == 0 ) { if ( s [ i ] + s [ j ] == k ) { cout << "yes" ; l = l + 1 ; } } } } if ( l == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , j , c , tag = 0 ; int a [ 1000 ] ; scanf ( "%d%d" , & n , & k ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { c = k - a [ i ] ; for ( j = 0 ; j < n ; j ++ ) { if ( j == i ) continue ; if ( c == a [ j ] ) tag = 1 ; if ( tag == 1 ) break ; } if ( tag == 1 ) break ; } if ( tag == 1 ) printf ( "yes" ) ; if ( tag == 0 ) printf ( "no" ) ; return 0 ; }
int main ( ) { int a [ 1000 ] ; int i , j = 1 , p , q ; int n , k , m ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) { cin >> m ; a [ i ] = m ; } while ( j < n ) { p = j + 1 ; while ( p <= n ) { q = a [ j ] + a [ p ] ; if ( q == k ) break ; else p = p + 1 ; } if ( p <= n ) break ; else j = j + 1 ; } if ( j == n && p == n + 1 ) cout << "no" ; else cout << "yes" ; return 0 ; }
int main ( ) { int n , k , num [ 1000 ] ; cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> num [ i ] ; int c = 1 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int m = 0 ; m < n ; m ++ ) { if ( m == j ) continue ; else if ( num [ j ] + num [ m ] == k ) c = 0 ; } } if ( c == 1 ) cout << "no" << endl ; if ( c == 0 ) cout << "yes" << endl ; return 0 ; }
int main ( ) { int n , k , num [ 1000 ] ; cin >> n >> k ; for ( int i = 0 ; i < n ; i ++ ) cin >> num [ i ] ; int c = 1 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int m = j + 1 ; m < n ; m ++ ) { if ( num [ j ] + num [ m ] == k ) { c = 0 ; break ; } } if ( c == 0 ) break ; } if ( c == 1 ) cout << "no" << endl ; if ( c == 0 ) cout << "yes" << endl ; return 0 ; }
int main ( ) { int n , k , i , j = 0 , num , sum = 0 ; cin >> n >> k ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; a [ j ] = a [ i ] ; j ++ ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) num = 1 ; else num = 0 ; sum = sum + num ; } } if ( sum == 0 ) cout << "no" << endl ; else cout << "yes" << endl ; return 0 ; }
int main ( ) { int n , k ; cin >> n >> k ; int a [ n ] ; int x , y , sum ; sum = 0 ; int i , j , m ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( m = j + 1 ; m < n ; m ++ ) { x = a [ j ] + a [ m ] ; if ( x == k ) y = 1 ; else y = 0 ; sum = sum + y ; } if ( sum == 0 ) cout << "no" ; else cout << "yes" ; return 0 ; }
int main ( ) { int n , k , flag ; int num [ 1000 ] ; int i = 0 , j ; cin >> n >> k ; while ( i < n ) { i ++ ; cin >> num [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( num [ i ] + num [ j ] == k ) { cout << "yes" << endl ; flag = 0 ; i = n ; j = n ; break ; } } } if ( flag ) cout << "no" << endl ; }
int main ( ) { int n = 0 , k = 0 , i = 0 , j = 0 , a [ 1000 ] = { 0 } , q = 0 ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) q ++ ; } } if ( q >= 1 ) cout << "yes" << endl ; else cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k , i , a , t , out ; int s [ 1000 ] = { 0 , 0 } ; i = 0 ; cin >> n >> k ; while ( i < n ) { cin >> a ; s [ i ] = a ; i = i + 1 ; } i = 0 ; out = 0 ; while ( i < n ) { t = i + 1 ; while ( t <= n ) { if ( ( s [ i ] + s [ t ] ) == k ) { cout << "yes" ; out = 1 ; break ; } else t = t + 1 ; } if ( out == 1 ) break ; else i = i + 1 ; } if ( i >= n ) cout << "no" ; return 0 ; }
int main ( ) { int a [ 1001 ] ; int n , k , i , sum ; int p , q ; int control = 0 ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; } for ( p = 1 ; p <= n ; p ++ ) { for ( q = n ; q > p ; q -- ) { sum = a [ p ] + a [ q ] ; if ( sum == k ) { control = 1 ; break ; } } } if ( control == 0 ) cout << "no" ; else cout << "yes" ; return 0 ; }
int main ( ) { int n = 0 , k = 0 ; cin >> n >> k ; int a [ 1000 ] ; int i = 0 ; int c = 0 ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } int b = 0 ; for ( i = 0 ; i < n && c != 250 ; i ++ ) { for ( b = 0 ; b < n - i && c != 250 ; b ++ ) { if ( k == a [ i ] + a [ i + b ] ) { cout << "yes" << endl ; c = 250 ; } } } if ( c == 0 ) cout << "no" << endl ; return 0 ; }
int main ( ) { int n , k , i , p ; scanf ( "%d %d" , & n , & k ) ; int m = 1 ; int sz [ 1000 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n && m == 1 ; i ++ ) { for ( p = i + 1 ; p < n && m == 1 ; p ++ ) { if ( sz [ i ] + sz [ p ] == k ) { printf ( "yes" ) ; m = 0 ; } } } if ( m == 1 ) printf ( "no" ) ; return 0 ; }
int main ( ) { int a [ 1000 ] = { 0 } , n , k , i , j , judge = 0 ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < ( n - 1 ) ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( ( a [ i ] + a [ j ] ) == k ) { cout << "yes" ; judge = 1 ; break ; } } if ( judge ) break ; } if ( judge == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , j ; int a [ 1000 ] = { 0 } ; cin >> n >> k ; for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; } for ( i = 1 ; i < n ; i ++ ) { j = i ; while ( j <= n ) { if ( a [ i ] + a [ j ] == k ) { cout << "yes" ; return 0 ; } j ++ ; } } cout << "no" ; return 0 ; }
int main ( ) { int n , k , t = 0 ; cin >> n >> k ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( int ia = 0 , ib = 1 ; ia < n - 1 ; ia ++ ) { for ( ib = ia + 1 ; ib < n ; ib ++ ) { if ( a [ ia ] + a [ ib ] == k ) { cout << "yes" ; t = 1 ; break ; } } if ( t == 1 ) break ; } if ( t == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , judge = 0 ; cin >> n >> k ; int a [ 1000 ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; judge == 0 && i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) judge = 1 ; } } if ( judge == 1 ) cout << "yes" ; if ( judge == 0 ) cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , p , q , sum , s = 0 ; int a [ 1000 ] ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( p = 1 ; p < n ; p ++ ) for ( q = 0 ; q < p ; q ++ ) { sum = a [ p ] + a [ q ] ; if ( sum == k ) s = s + 1 ; } if ( s ) cout << "yes" << endl ; else cout << "no" << endl ; return 0 ; }
int main ( ) { int k , n , i , j , a [ 1000 ] , b [ 1000 ] = { 0 } , sum = 0 ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] + a [ j ] == k ) { b [ i ] = 1 ; break ; } } } for ( i = 0 ; i < n ; i ++ ) { sum = sum + b [ i ] ; } if ( sum == 0 ) cout << "no" ; else cout << "yes" ; cin . get ( ) ; return 0 ; }
int main ( ) { int n = 0 , t = 0 ; int num [ 1000 ] ; cin >> n ; cin >> t ; for ( int i = 0 ; i < n ; i ++ ) { cin >> num [ i ] ; } int x = 0 ; for ( int j = 0 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( num [ j ] + num [ k ] == t ) { cout << "yes" ; x = x + 1 ; break ; } if ( j == n - 2 && k == n - 1 ) cout << "no" ; } if ( x == 1 ) break ; } return 0 ; }
int main ( ) { int n , k ; int a [ 1000 ] ; cin >> n >> k ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; for ( j = 0 ; j < i ; j ++ ) if ( a [ i ] + a [ j ] == k ) { cout << "yes" ; return 0 ; } } cout << "no" ; return 0 ; }
int main ( ) { int n , k , i , j , s , t = 0 , a [ 1000 ] ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { s = a [ i ] + a [ j ] ; if ( s == k ) t = t + 1 ; } } if ( t == 0 ) cout << "no" << endl ; else cout << "yes" << endl ; return 0 ; }
int main ( ) { int k , n , a [ 1000 ] , i = 0 , j = 0 , m , t ; cin >> n >> k ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { m = a [ i ] + a [ j ] ; if ( m == k ) t = 1 ; } } if ( t == 1 ) cout << "yes" ; else cout << "no" ; return 0 ; }
void main ( ) { int row , col , a [ MAX ] [ MAX ] , i , j , k ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( j = 0 ; j < col ; j ++ ) for ( i = 0 , k = j ; i < row && k >= 0 ; i ++ , k -- ) printf ( "%d\n" , a [ i ] [ k ] ) ; for ( i = 1 ; i < row ; i ++ ) for ( k = i , j = col - 1 ; k < row && j >= 0 ; k ++ , j -- ) printf ( "%d\n" , a [ k ] [ j ] ) ; }
void main ( ) { int col , row , i , j , k , t = 0 , a [ 101 ] [ 101 ] = { 0 } ; int * p ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; p = ( int * ) malloc ( sizeof ( int ) * row * col ) ; for ( i = 0 ; i < col ; i ++ ) for ( k = 0 , j = i ; j >= 0 && k < row ; k ++ , j -- ) { * ( p + t ) = a [ k ] [ j ] ; t ++ ; } for ( i = 1 ; i < row ; i ++ ) for ( k = i , j = col - 1 ; k < row && j >= 0 ; j -- , k ++ ) { * ( p + t ) = a [ k ] [ j ] ; t ++ ; } for ( i = 0 ; i < row * col ; i ++ ) printf ( "%d\n" , * ( p + i ) ) ; }
int main ( ) { int n , m , i , j , k ; int sz [ 100 ] [ 100 ] ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { k = j ; for ( i = 0 ; i <= k && i < m ; i ++ , j -- ) { printf ( "%d\n" , sz [ i ] [ j ] ) ; } j = k ; } for ( i = 1 ; i < m ; i ++ ) { k = i ; for ( j = n - 1 ; j >= 0 && i < m ; i ++ , j -- ) { printf ( "%d\n" , sz [ i ] [ j ] ) ; } i = k ; } return 0 ; }
main ( ) { int i , j , m , n ; int a [ 100 ] [ 100 ] ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i <= m - 1 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i <= ( m + n - 2 ) ; i ++ ) { for ( j = 0 ; j <= ( m - 1 ) && j <= i ; j ++ ) { if ( ( i - j ) <= ( n - 1 ) ) printf ( "%d\n" , a [ j ] [ i - j ] ) ; } } return 0 ; }
void main ( ) { int a , b , i , j , k ; int c [ 100 ] [ 100 ] ; scanf ( "%d%d" , & a , & b ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( "%d" , & c [ i ] [ j ] ) ; } } if ( b > a ) { for ( k = 0 ; k < a ; k ++ ) { i = 0 ; j = k ; while ( i <= k ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i = i + 1 ; j = j - 1 ; } } for ( k = 0 ; k < b - a ; k ++ ) { i = 0 ; j = a + k ; while ( i <= a - 1 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i ++ ; j -- ; } } for ( k = 0 ; k < a - 1 ; k ++ ) { i = k + 1 ; j = b - 1 ; while ( i <= a - 1 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i ++ ; j -- ; } } } else if ( b < a ) { for ( k = 0 ; k < b ; k ++ ) { i = 0 ; j = k ; while ( j >= 0 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i = i + 1 ; j = j - 1 ; } } for ( k = 0 ; k < a - b ; k ++ ) { i = k + 1 ; j = b - 1 ; while ( j >= 0 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i ++ ; j -- ; } } for ( k = 0 ; k < b - 1 ; k ++ ) { i = a - b + 1 + k ; j = b - 1 ; while ( i <= a - 1 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i ++ ; j -- ; } } } else { for ( k = 0 ; k < a ; k ++ ) { i = 0 ; j = k ; while ( i <= k ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i = i + 1 ; j = j - 1 ; } } for ( k = 0 ; k < a - 1 ; k ++ ) { i = k + 1 ; j = b - 1 ; while ( i <= a - 1 ) { printf ( "%d\n" , c [ i ] [ j ] ) ; i ++ ; j -- ; } } } }
int matrix [ 100 ] [ 100 ] , row , col ; void display ( int step ) { int x , y , i ; if ( step > row + col - 1 ) return ; if ( step < col ) { y = step - 1 ; for ( i = y ; i >= 0 && y - i < row ; i -- ) cout << matrix [ y - i ] [ i ] << endl ; } else { x = step - col ; for ( i = x ; i < row && col - 1 + x - i >= 0 ; i ++ ) cout << matrix [ i ] [ col - 1 + x - i ] << endl ; } display ( step + 1 ) ; } int main ( ) { int i , j ; cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) cin >> * ( * ( matrix + i ) + j ) ; display ( 1 ) ; }
int main ( ) { int i , j , k , row , col ; int ( * p ) [ 100 ] ; scanf ( "%d %d" , & row , & col ) ; p = ( int * ) calloc ( 100 , 10 ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , * ( p + i ) + j ) ; printf ( "%d\n" , * ( * ( p + 0 ) + 0 ) ) ; j = 1 ; i = 0 ; for ( ; j < col ; ) { k = j ; while ( j >= 0 && i < row ) { printf ( "%d\n" , * ( * ( p + i ) + j ) ) ; j = j - 1 ; i = i + 1 ; } j = k + 1 ; i = 0 ; } i = 1 ; j = col - 1 ; for ( ; i < row ; ) { k = i ; while ( i < row && j >= 0 ) { printf ( "%d\n" , * ( * ( p + i ) + j ) ) ; j = j - 1 ; i = i + 1 ; } i = k + 1 ; j = col - 1 ; } }
void main ( ) { int r , c , * p [ 100 ] , i , j , v ; for ( i = 0 ; i < 100 ; i ++ ) p [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; scanf ( "%d %d\n" , & r , & c ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) scanf ( "%d" , ( p [ i ] + j ) ) ; for ( v = 0 ; v <= r + c - 2 ; v ++ ) { for ( i = 0 ; i <= v ; i ++ ) { if ( i < r ) { j = v - i ; if ( j < c ) printf ( "%d\n" , * ( p [ i ] + j ) ) ; } } } }
int main ( ) { int row , col , * * p , num ; int i , j , k ; scanf ( "%d %d" , & row , & col ) ; num = row * col ; p = ( int * * ) malloc ( row * sizeof ( int ) ) ; for ( i = 0 ; i < row ; i ++ ) { * ( p + i ) = ( int * ) malloc ( col * sizeof ( int ) ) ; } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , * ( p + i ) + j ) ; } } for ( i = 0 ; i < col + row - 1 ; i ++ ) { k = 0 ; j = i ; while ( j >= 0 && k <= row ) { if ( j < col && k < row ) { printf ( "%d\n" , * ( * ( p + k ) + j ) ) ; } k = k + 1 ; j = j - 1 ; } } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int row , col ; int i , j ; int ( * p ) [ 100 ] = a ; cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) cin >> * ( * ( p + i ) + j ) ; for ( i = 0 ; i <= row + col - 2 ; i ++ ) { if ( i < col - 1 ) for ( j = 0 ; j <= row - 1 && j <= i ; j ++ ) cout << * ( * ( p + j ) + i - j ) << endl ; else for ( j = col - 1 ; i - j <= row - 1 && j >= 0 ; j -- ) cout << * ( * ( p + i - j ) + j ) << endl ; } return 0 ; }
int main ( int argc , char * argv [ ] ) { int row , col , i , j ; int array [ 100 ] [ 100 ] ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i < row + col ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j > row - 1 || i - j > col - 1 ) continue ; if ( j < row && i - j < col ) printf ( "%d\n" , array [ j ] [ i - j ] ) ; } } return 0 ; }
int main ( ) { int row , col , i , j , k ; int * array [ 100 ] [ 100 ] ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , * ( array + i ) + j ) ; for ( k = 0 ; k <= row + col ; k ++ ) for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) if ( i + j == k ) printf ( "%d\n" , * ( * ( array + i ) + j ) ) ; }
int main ( ) { int r , c , a [ 100 ] [ 100 ] , i , j , k , b [ 10000 ] ; scanf ( "%d%d" , & r , & c ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < c ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } for ( j = 0 ; j < c ; j ++ ) { i = 0 ; for ( k = j ; k >= 0 && i < r ; k -- , i ++ ) { printf ( "%d\n" , a [ i ] [ k ] ) ; } } for ( i = 1 ; i < r ; i ++ ) { j = c - 1 ; for ( k = i ; k < r && j >= 0 ; k ++ , j -- ) { printf ( "%d\n" , a [ k ] [ j ] ) ; } } return 0 ; }
int main ( ) { int i , j , k , row , col , a [ 100 ] [ 100 ] ; cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( k = 0 ; k < col ; k ++ ) for ( i = 0 , j = k ; j >= 0 && i < row ; i ++ , j -- ) cout << a [ i ] [ j ] << endl ; for ( k = 1 ; k < row ; k ++ ) for ( i = k , j = col - 1 ; i < row && j >= 0 ; i ++ , j -- ) cout << a [ i ] [ j ] << endl ; return 0 ; }
int main ( ) { int p , a , b , i , j , * num ; num = ( int * ) malloc ( sizeof ( int ) * 10000 ) ; scanf ( "%d %d" , & a , & b ) ; for ( i = 1 ; i <= a ; i ++ ) { for ( j = 1 ; j <= b ; j ++ ) scanf ( "%d" , num + ( i - 1 ) * b + j ) ; } for ( i = 1 ; i < b ; i ++ ) { p = i ; for ( ; ; ) { printf ( "%d\n" , * ( num + p ) ) ; if ( p % b == 1 || p > b * ( a - 1 ) ) break ; p += b - 1 ; } } for ( i = b ; i <= a * b ; i += b ) { p = i ; for ( ; ; ) { printf ( "%d\n" , * ( num + p ) ) ; if ( p % b == 1 || b == 1 || p > b * ( a - 1 ) ) break ; p += b - 1 ; } } }
void main ( ) { int ( * a ) [ 120 ] , i , j , k , n , m ; scanf ( "%d %d" , & n , & m ) ; a = ( int ( * ) [ 120 ] ) malloc ( 200 * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { scanf ( "%d" , * ( a + i ) + j ) ; } } for ( k = 0 ; k <= n + m - 2 ; k ++ ) { for ( i = 0 ; ( i <= k ) && ( i < n ) ; i ++ ) { j = k - i ; if ( j < m ) printf ( "%d\n" , * ( * ( a + i ) + j ) ) ; } } }
int main ( ) { int row , col , array [ 100 ] [ 100 ] , sum , i , j ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & array [ i ] [ j ] ) ; } if ( row < col ) { for ( sum = 0 ; sum <= row - 1 ; sum ++ ) { for ( i = 0 ; i <= sum ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } for ( sum = row ; sum <= col - 1 ; sum ++ ) { for ( i = 0 ; i <= row - 1 ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } for ( sum = col ; sum <= col + row - 2 ; sum ++ ) { for ( i = sum - col + 1 ; i <= row - 1 ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } } else { for ( sum = 0 ; sum <= col - 1 ; sum ++ ) { for ( i = 0 ; i <= sum ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } for ( sum = col ; sum <= row - 1 ; sum ++ ) { for ( i = sum - col + 1 ; i <= sum ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } for ( sum = row ; sum <= row + col - 2 ; sum ++ ) { for ( i = sum - col + 1 ; i <= row - 1 ; i ++ ) { j = sum - i ; printf ( "%d\n" , array [ i ] [ j ] ) ; } } } return 0 ; }
int main ( ) { int row , column , a [ 110 ] [ 110 ] = { 0 } , i , j , row1 = 0 , column1 = 0 ; cin >> row >> column ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < column ; j ++ ) { cin >> * ( * ( a + i ) + j ) ; } for ( i = 0 ; i < ( row + column - 1 ) ; i ++ ) { if ( i < column ) column1 = i ; else column1 = column - 1 ; while ( column1 >= 0 ) { if ( ( i - column1 ) < row ) { cout << * ( * ( a + i - column1 ) + column1 ) << endl ; column1 -- ; } else break ; } } return 0 ; }
int main ( ) { int row , col , i , j ; int array [ 100 ] [ 100 ] ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i < col ; i ++ ) { for ( j = 0 ; j < row ; j ++ ) { printf ( "%d\n" , array [ j ] [ i - j ] ) ; if ( i - j == 0 ) break ; } } for ( i = 1 ; i < row ; i ++ ) { for ( j = i ; j < row ; j ++ ) { printf ( "%d\n" , array [ j ] [ col - 1 - j + i ] ) ; if ( col - 1 - j + i == 0 ) break ; } } return 0 ; }
int main ( ) { int i , row , col , rst = 0 , cst = 0 ; int R , C ; int a [ 100 ] [ 100 ] ; scanf ( "%d%d" , & R , & C ) ; for ( row = 0 ; row < R ; row ++ ) { for ( col = 0 ; col < C ; col ++ ) { scanf ( "%d" , & a [ row ] [ col ] ) ; } } for ( i = 0 ; i < R + C - 1 ; i ++ ) { row = rst ; col = cst ; while ( row != R && col != - 1 ) { printf ( "%d\n" , a [ row ] [ col ] ) ; row ++ ; col -- ; } if ( cst != C - 1 ) cst ++ ; else rst ++ ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , i , j , p , m , n ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( p = 0 ; p <= m + n - 2 ; p ++ ) { for ( i = 0 ; i <= p ; i ++ ) { if ( i < m && p - i < n ) printf ( "%d\n" , a [ i ] [ p - i ] ) ; else continue ; } } return 0 ; }
int a [ 100 ] [ 100 ] , col , row ; void main ( ) { int i , j , k ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } ; } ; if ( col >= row ) { for ( k = 0 ; k <= row - 1 ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; for ( k = row ; k <= col - 1 ; k ++ ) { for ( i = 0 ; i <= row - 1 ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; for ( k = col ; k <= row + col - 2 ; k ++ ) { for ( i = k - col + 1 ; i <= row - 1 ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; } ; if ( row > col ) { for ( k = 0 ; k <= col - 1 ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; for ( k = col ; k <= row - 1 ; k ++ ) { for ( i = k - col + 1 ; i <= k ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; for ( k = row ; k <= row + col - 2 ; k ++ ) { for ( i = k - col + 1 ; i <= row - 1 ; i ++ ) { printf ( "%d\n" , a [ i ] [ k - i ] ) ; } ; } ; } ; }
int main ( ) { int row , col ; int jz [ 100 ] [ 100 ] ; int i = 0 ; int j = 0 ; int m = 0 ; int n = 0 ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & jz [ i ] [ j ] ) ; } printf ( "%d\n" , jz [ 0 ] [ 0 ] ) ; if ( row <= col ) { for ( m = 0 , n = 1 ; n < col ; n ++ ) { for ( i = m , j = n ; j >= 0 && i < row ; i ++ , j -- ) { printf ( "%d\n" , jz [ i ] [ j ] ) ; } } for ( m = 1 , n = col - 1 ; m < row - 1 ; m ++ ) { for ( i = m , j = n ; i < row ; i ++ , j -- ) { printf ( "%d\n" , jz [ i ] [ j ] ) ; } } } else if ( row > col ) { for ( m = 0 , n = 1 ; n < col ; n ++ ) { for ( i = m , j = n ; j >= 0 && i < row ; i ++ , j -- ) { printf ( "%d\n" , jz [ i ] [ j ] ) ; } } for ( m = 1 , n = col - 1 ; m < row - 1 ; m ++ ) { for ( i = m , j = n ; i < row && j >= 0 ; i ++ , j -- ) { printf ( "%d\n" , jz [ i ] [ j ] ) ; } } } if ( row != 1 ) printf ( "%d" , jz [ row - 1 ] [ col - 1 ] ) ; return 0 ; }
void main ( ) { int a [ 100 ] [ 100 ] , row , col , i , j , k , n ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( n = 0 ; n < col ; n ++ ) { i = 0 ; j = n ; for ( k = n ; k >= 0 ; k -- ) { printf ( "%d\n" , a [ i ] [ j ] ) ; i ++ ; j -- ; if ( i >= row || j >= col ) break ; } } for ( n = 1 ; n < row ; n ++ ) { i = n ; j = col - 1 ; for ( k = n ; k <= row - 1 ; k ++ ) { printf ( "%d\n" , a [ i ] [ j ] ) ; i ++ ; j -- ; if ( i >= row || j < 0 ) break ; } } }
void f ( int * p1 , int * p2 , int m , int n ) { do { printf ( "%d\n" , * p2 ) ; p2 += n - 1 ; } while ( ( p2 - p1 + 1 ) % n && ( p2 - p1 + 1 ) <= m * n ) ; } int main ( int argc , char * argv [ ] ) { int r , l , i , j , * q ; scanf ( "%d%d" , & r , & l ) ; int * p [ l + r - 1 ] ; int a [ r ] [ l ] ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= l ; j ++ ) scanf ( "%d" , & a [ i - 1 ] [ j - 1 ] ) ; for ( i = 1 ; i <= l ; i ++ ) p [ i - 1 ] = & a [ 0 ] [ i - 1 ] ; for ( i = l + 1 ; i <= l + r - 1 ; i ++ ) p [ i - 1 ] = & a [ i - l ] [ l - 1 ] ; q = & a [ 0 ] [ 0 ] ; for ( i = 1 ; i <= r + l - 1 ; i ++ ) f ( q , p [ i - 1 ] , r , l ) ; return 0 ; }
void main ( ) { int * a , i , j , row , col ; scanf ( "%d %d" , & row , & col ) ; a = ( int * ) calloc ( 200 , 200 * sizeof ( int ) ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , a + i * col + j ) ; } for ( j = 0 ; j < col ; j ++ ) { for ( i = 1 ; ( i < row + 1 ) && ( i <= j + 1 ) ; i ++ ) printf ( "%d\n" , * ( a + ( i - 1 ) * col + j + 1 - i ) ) ; } for ( i = 1 ; i < row ; i ++ ) { for ( j = 1 ; ( j <= col ) && ( j < row + 1 - i ) ; j ++ ) printf ( "%d\n" , * ( a + ( i + j - 1 ) * col + col - j ) ) ; } }
void main ( ) { int row , col , * array , * p , i , j , t ; scanf ( "%d%d" , & row , & col ) ; array = ( int * ) calloc ( row , col * sizeof ( int ) ) ; for ( p = array ; p <= array + row * col - 1 ; p ++ ) scanf ( "%d" , p ) ; for ( t = 0 ; t <= row + col - 2 ; t ++ ) for ( i = 0 ; i <= t ; i ++ ) { if ( i > row - 1 || t - i > col - 1 ) continue ; printf ( "%d\n" , * ( array + i * col + t - i ) ) ; } }
void main ( ) { int row , col ; scanf ( "%d%d" , & row , & col ) ; int i , j ; int a [ 100 ] [ 100 ] = { 0 } ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } if ( row >= col ) { for ( i = 0 ; i < row + col - 1 ; i ++ ) { if ( i >= 0 && i < col ) { for ( j = i ; j >= 0 ; j -- ) { printf ( "%d\n" , a [ i - j ] [ j ] ) ; } } if ( i >= col && i < row ) { for ( j = col - 1 ; j >= 0 ; j -- ) printf ( "%d\n" , a [ i - j ] [ j ] ) ; } if ( i > row - 1 && i < ( row + col ) - 1 ) { for ( j = col - 1 ; j > i - row ; j -- ) printf ( "%d\n" , a [ i - j ] [ j ] ) ; } } } if ( col > row ) { for ( j = 0 ; j < row + col ; j ++ ) { if ( j >= 0 && j < row ) { for ( i = 0 ; i <= j ; i ++ ) { printf ( "%d\n" , a [ i ] [ j - i ] ) ; } } if ( j >= row && j < col ) { for ( i = 0 ; i < row ; i ++ ) printf ( "%d\n" , a [ i ] [ j - i ] ) ; } if ( j > col - 1 && j < ( row + col ) - 1 ) { for ( i = j - col + 1 ; i < row ; i ++ ) printf ( "%d\n" , a [ i ] [ j - i ] ) ; } } } }
void main ( ) { int a [ 200 ] [ 200 ] , n , m , j , i , k ; for ( i = 0 ; i < 200 ; i ++ ) for ( j = 0 ; j < 200 ; j ++ ) a [ i ] [ j ] = - 32767 ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( k = 0 ; k < m + n - 1 ; k ++ ) for ( i = k ; i >= 0 ; i -- ) { if ( a [ k - i ] [ i ] != - 32767 ) printf ( "%d\n" , a [ k - i ] [ i ] ) ; } }
int main ( ) { int num [ 100 ] [ 100 ] ; int line , row , i , j , m , n ; scanf ( "%d %d" , & row , & line ) ; for ( i = 0 ; i <= row - 1 ; i ++ ) { for ( j = 0 ; j <= line - 1 ; j ++ ) { scanf ( "%d" , & num [ i ] [ j ] ) ; } } for ( j = 0 ; j <= line - 1 ; j ++ ) { m = 0 ; n = j ; do { printf ( "%d\n" , num [ m ] [ n ] ) ; m ++ ; n -- ; } while ( n != - 1 && m < row ) ; } for ( i = 1 ; i <= row - 1 ; i ++ ) { m = i ; n = line - 1 ; do { printf ( "%d\n" , num [ m ] [ n ] ) ; m ++ ; n -- ; } while ( n != - 1 && m < row ) ; } return 0 ; }
main ( ) { int n , lie , z ; int i , j ; scanf ( "%d %d" , & n , & lie ) ; int * p [ n ] ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( lie * sizeof ( int ) ) ; for ( j = 0 ; j < lie ; j ++ ) { scanf ( "%d" , p [ i ] + j ) ; } } for ( z = 0 ; z <= n + lie - 2 ; z ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < lie ; j ++ ) { if ( i + j == z ) printf ( "%d\n" , * ( p [ i ] + j ) ) ; } } } }
void main ( ) { int i , j , k , * * p , col , row , sum ; scanf ( "%d %d" , & row , & col ) ; p = ( int * * ) malloc ( row * sizeof ( int * ) ) ; for ( i = 0 ; i < row ; i ++ ) * ( p + i ) = ( int * ) malloc ( col * sizeof ( int ) ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d " , * ( p + i ) + j ) ; } k = row + col ; for ( sum = 0 ; sum <= k ; sum ++ ) { for ( i = 0 ; i <= sum ; i ++ ) { j = sum - i ; if ( i < row && j < col ) printf ( "\n%d" , * ( * ( p + i ) + j ) ) ; } } }
int main ( ) { int row , col , i , j , k , N ; int a [ 101 ] [ 101 ] ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } N = row + col - 2 ; for ( k = 0 ; k <= N ; k ++ ) { i = 0 ; j = k - i ; do { if ( i >= 0 && j >= 0 && i < row && j < col ) { printf ( "%d\n" , a [ i ] [ j ] ) ; i ++ ; j -- ; } else { i ++ ; j -- ; } } while ( j >= 0 ) ; } return 0 ; }
void move1 ( int * p [ ] , int m , int n ) { int i , k ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { printf ( "%d\n" , * ( p [ 0 + k ] + i - k ) ) ; } } for ( i = m - 1 ; i < n - 1 ; i ++ ) { for ( k = 0 ; k < m ; k ++ ) printf ( "%d\n" , * ( p [ 0 + k ] + i - k ) ) ; } for ( i = 0 ; i < m ; i ++ ) { for ( k = 0 ; k < m - i ; k ++ ) { printf ( "%d\n" , * ( p [ i + k ] + n - 1 - k ) ) ; } } } void move2 ( int * p [ ] , int m , int n ) { int i , k ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( k = 0 ; k <= i ; k ++ ) { printf ( "%d\n" , * ( p [ 0 + k ] + i - k ) ) ; } } for ( i = 0 ; i < m - n ; i ++ ) { for ( k = 0 ; k < n ; k ++ ) printf ( "%d\n" , * ( p [ i + k ] + n - 1 - k ) ) ; } for ( i = m - n ; i < m ; i ++ ) { for ( k = 0 ; k < m - i ; k ++ ) { printf ( "%d\n" , * ( p [ i + k ] + n - 1 - k ) ) ; } } } void main ( ) { int m , n , i , j , * p [ 100 ] = { 0 } , * * head ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { p [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; } head = p ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , * ( p + i ) + j ) ; } if ( m <= n ) move1 ( p , m , n ) ; else move2 ( p , m , n ) ; }
void bianli ( ) { int a [ maxrow ] [ maxcol ] , row , col , i , j , k , n ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( n = 0 ; n < col ; n ++ ) { i = 0 ; j = n ; for ( k = n ; k >= 0 ; k -- ) { printf ( "%d\n" , a [ i ] [ j ] ) ; i ++ ; j -- ; if ( i >= row || j >= col ) break ; } } for ( n = 1 ; n < row ; n ++ ) { i = n ; j = col - 1 ; for ( k = n ; k <= row - 1 ; k ++ ) { printf ( "%d\n" , a [ i ] [ j ] ) ; i ++ ; j -- ; if ( i >= row || j < 0 ) break ; } } } void main ( ) { bianli ( ) ; }
int main ( ) { int k [ 100 ] [ 100 ] ; int m = 0 , x = 0 , i , j , row = 0 , col = 0 ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & k [ i ] [ j ] ) ; } } for ( m = 0 ; m < row + col - 1 ; m ++ ) { for ( j = m ; ; j -- ) { if ( j >= col || m - j >= row ) { break ; } if ( j < 0 || m - j < 0 ) { break ; } printf ( "%d\n" , k [ m - j ] [ j ] ) ; } } for ( m = col ; m < row + col - 1 ; m ++ ) { for ( j = col - 1 ; j >= 0 ; j -- ) { if ( m - j >= row ) { break ; } printf ( "%d\n" , k [ m - j ] [ j ] ) ; } } return 0 ; }
int main ( ) { int array [ 100 ] [ 100 ] ; int row , col ; cin >> row >> col ; int i , j ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) cin >> array [ i ] [ j ] ; j = 0 ; for ( i = 0 ; i < row ; i ++ ) { if ( i == 0 ) { while ( j <= col - 1 ) { cout << array [ i ] [ j ] << endl ; for ( int k = i + 1 ; k < row ; k ++ ) { if ( i + j - k >= 0 ) cout << array [ k ] [ i + j - k ] << endl ; } j ++ ; } } else { j = col - 1 ; cout << array [ i ] [ j ] << endl ; for ( int k = i + 1 ; k < row ; k ++ ) { if ( i + j - k >= 0 ) cout << array [ k ] [ i + j - k ] << endl ; } } } }
int main ( ) { int row , col , i , j , array [ 110 ] [ 110 ] = { 0 } ; scanf ( "%d%d" , & row , & col ) ; getchar ( ) ; for ( i = 0 ; i <= row - 1 ; i ++ ) { for ( j = 0 ; j <= col - 1 ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } for ( i = 0 ; i <= col + row - 2 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j >= row || ( i - j ) >= col ) continue ; printf ( "%d\n" , array [ j ] [ i - j ] ) ; } } return 0 ; }
int main ( ) { int a [ 101 ] [ 101 ] = { 0 , 0 } , row , col , i , j , count = 0 , r = 0 ; cin >> row >> col ; if ( col == 1 ) r = 1 ; for ( i = 1 ; i <= row ; i ++ ) for ( j = 1 ; j <= col ; j ++ ) { cin >> a [ i ] [ j ] ; } i = 1 ; j = 1 ; while ( count < row * col ) { cout << a [ i ] [ j ] << endl ; count ++ ; if ( ( j == 1 && i != row ) || ( j != 1 && i == row ) || ( j == 1 && i == row ) ) { if ( i + j < col ) { j = i + j ; i = 1 ; } else { r ++ ; i = r ; j = col ; } } else { i ++ ; j -- ; } } return 0 ; }
int ROW , COL ; int row = - 1 , col = 1 ; int array [ 100 ] [ 100 ] ; int move ( ) { row ++ ; col -- ; printf ( "%d\n" , array [ row ] [ col ] ) ; return 0 ; } int big_move ( ) { if ( row + col < COL - 1 ) { col = row + col + 1 ; row = 0 ; } else { row = row + col - COL + 2 ; col = COL - 1 ; } printf ( "%d\n" , array [ row ] [ col ] ) ; return 0 ; } int main ( ) { scanf ( "%d%d" , & ROW , & COL ) ; int r , c ; for ( r = 0 ; r < ROW ; r ++ ) { for ( c = 0 ; c < COL ; c ++ ) { scanf ( "%d" , & array [ r ] [ c ] ) ; } } if ( ROW == 1 && COL == 1 ) { printf ( "%d" , array [ 0 ] [ 0 ] ) ; return 0 ; } while ( row != ROW - 1 || col != COL - 1 ) { while ( col != 0 && row != ROW - 1 ) move ( ) ; big_move ( ) ; } return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int i , k , n , j ; int ROW , COL , row , col ; scanf ( "%d %d" , & ROW , & COL ) ; if ( ROW > COL ) { j = COL - 1 ; } else { j = ROW - 1 ; } for ( i = 0 ; i < ROW ; i ++ ) { for ( k = 0 ; k < COL ; k ++ ) { scanf ( "%d" , & ( sz [ i ] [ k ] ) ) ; } } for ( n = 0 ; n <= j ; n ++ ) { for ( row = 0 ; row <= n ; row ++ ) { printf ( "%d\n" , sz [ row ] [ n - row ] ) ; } } if ( COL > ROW ) { for ( n = j + 1 ; n < COL ; n ++ ) { for ( row = 0 ; row < ROW ; row ++ ) { printf ( "%d\n" , sz [ row ] [ n - row ] ) ; } } for ( n = COL ; n <= COL + ROW - 2 ; n ++ ) { for ( col = COL - 1 ; col >= n - ROW + 1 ; col -- ) { printf ( "%d\n" , sz [ n - col ] [ col ] ) ; } } } if ( ROW > COL ) { for ( n = j + 1 ; n < ROW ; n ++ ) { for ( col = COL - 1 ; col >= 0 ; col -- ) { printf ( "%d\n" , sz [ n - col ] [ col ] ) ; } } for ( n = ROW ; n <= COL + ROW - 2 ; n ++ ) { for ( col = COL - 1 ; col >= n - ROW + 1 ; col -- ) { printf ( "%d\n" , sz [ n - col ] [ col ] ) ; } } } if ( ROW == COL ) { for ( n = j + 1 ; n <= COL + ROW - 2 ; n ++ ) { for ( col = COL - 1 ; col >= n - ROW + 1 ; col -- ) { printf ( "%d\n" , sz [ n - col ] [ col ] ) ; } } } return 0 ; }
void main ( ) { int p [ 1000 ] [ 1000 ] ; int a , b , i , j , k ; scanf ( "%d %d" , & a , & b ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( "%d" , & p [ i ] [ j ] ) ; } } for ( i = 0 ; i < a + b - 1 ; i ++ ) { if ( i < b ) k = 0 ; if ( i >= b ) k = i - b + 1 ; for ( j = k ; j <= i && j < a ; j ++ ) { printf ( "%d\n" , p [ j ] [ i - j ] ) ; } } }
void main ( ) { int i , j , k , row , col , * p [ 100 ] ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) p [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , p [ i ] + j ) ; for ( k = 0 ; k <= row + col - 2 ; k ++ ) for ( i = 0 , j = k - 1 ; i <= row - 1 ; i ++ , j -- ) if ( i <= row - 1 && j >= 0 && j <= col - 1 && i >= 0 ) printf ( "%d\n" , * ( p [ i ] + j ) ) ; printf ( "%d\n" , * ( p [ row - 1 ] + col - 1 ) ) ; }
int main ( int argc , char * argv [ ] ) { int a [ 100 ] [ 100 ] ; int row , col , i , j , k ; cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) cin >> a [ i ] [ j ] ; for ( k = 0 ; k <= col - 1 ; k ++ ) for ( i = 0 , j = k - i ; i <= row - 1 && j >= 0 ; i ++ , j -- ) cout << a [ i ] [ j ] << endl ; for ( k = col ; k <= row + col - 2 ; k ++ ) for ( j = col - 1 , i = k - j ; i <= row - 1 && j >= 0 ; i ++ , j -- ) cout << a [ i ] [ j ] << endl ; return 0 ; }
int main ( ) { int n , m , i , j , shu [ 100 ] [ 100 ] , hang = 1 , lie = 1 , count , mark , zddjx , duijiao , jh = 1 , jl = 1 ; cin >> n >> m ; count = n * m ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= m ; j ++ ) { cin >> shu [ i ] [ j ] ; } } if ( n == 1 ) { for ( j = 1 ; j <= m ; j ++ ) { cout << shu [ 1 ] [ j ] << endl ; } } if ( n == 1 ) { return 0 ; } if ( m == 1 ) { for ( j = 1 ; j <= n ; j ++ ) { cout << shu [ j ] [ 1 ] << endl ; } return 0 ; } if ( m == 1 ) { return 0 ; } cout << shu [ hang ] [ lie ] << endl ; duijiao = hang + lie ; count -- ; while ( count != 0 ) { duijiao ++ ; hang = jh ; lie = duijiao - hang ; if ( lie == m ) { jh ++ ; } while ( lie >= jl ) { cout << shu [ hang ] [ lie ] << endl ; count -- ; hang ++ ; lie -- ; } if ( hang == n + 1 ) { jl ++ ; } } return 0 ; }
int main ( ) { int row , col ; cin >> row >> col ; int a [ 110 ] [ 110 ] ; int i , j ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) { cin >> * ( * ( a + i ) + j ) ; } for ( i = 0 ; i < col ; i ++ ) for ( j = 0 ; j <= i && j < row ; j ++ ) { cout << * ( * ( a + j ) + i - j ) << endl ; } for ( i = 1 ; i < row ; i ++ ) for ( j = col - 1 ; j > i + col - 1 - row && j >= 0 ; j -- ) { cout << * ( * ( a + i + col - j - 1 ) + j ) << endl ; } return 0 ; }
int row , col , * a ; int main ( ) { void out ( int i , int j , int k ) ; int i ; scanf ( "%d %d" , & row , & col ) ; a = ( int * ) malloc ( row * col * sizeof ( int ) ) ; for ( i = 0 ; i < row * col ; i ++ ) scanf ( "%d" , & a [ i ] ) ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < col ; i ++ ) out ( i , i , 0 ) ; for ( i = 1 ; i < row ; i ++ ) out ( i , col - 1 , i ) ; return 0 ; } void out ( int i , int j , int k ) { while ( j != - 1 && k != row ) { printf ( "\n%d" , * ( a + k * col + j ) ) ; j -- ; k ++ ; } }
void main ( ) { int i , j , k , hang , lie , ( * a ) [ 100 ] ; a = ( int ( * ) [ 100 ] ) malloc ( 100 * 100 * sizeof ( int ) ) ; scanf ( "%d %d" , & hang , & lie ) ; for ( i = 0 ; i < hang ; i ++ ) { for ( j = 0 ; j < lie ; j ++ ) { scanf ( "%d" , & * ( * ( a + i ) + j ) ) ; } } if ( hang <= lie ) { for ( j = 0 ; j < hang ; j ++ ) { for ( i = j , k = 0 ; i != - 1 ; i -- , k ++ ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } for ( j = hang ; j < lie ; j ++ ) { for ( i = j , k = 0 ; k != hang ; i -- , k ++ ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } for ( j = 1 ; j < hang ; j ++ ) { for ( k = j , i = lie - 1 ; k < hang ; k ++ , i -- ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } } else { for ( j = 0 ; j < lie ; j ++ ) { for ( i = j , k = 0 ; i >= 0 ; i -- , k ++ ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } for ( j = lie ; j < hang ; j ++ ) { for ( i = lie - 1 , k = j - lie + 1 ; i >= 0 ; i -- , k ++ ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } for ( j = hang - lie + 1 ; j < hang ; j ++ ) { for ( k = j , i = lie - 1 ; k < hang ; k ++ , i -- ) { printf ( "%d\n" , * ( * ( a + k ) + i ) ) ; } } } }
int n , m ; int x [ 1000 ] [ 1000 ] ; void f ( int i , int j ) { cout << x [ i ] [ j ] << endl ; if ( i == m && j == n ) return ; else if ( j == 1 && i + 1 <= n ) f ( 1 , i + 1 ) ; else if ( j == 1 && i + 1 > n ) f ( i + j - n + 1 , n ) ; else if ( i == m && i + j <= n ) f ( 1 , i + j ) ; else if ( i == m && i + j > n ) f ( i + j - n + 1 , n ) ; else f ( i + 1 , j - 1 ) ; } int main ( ) { cin >> m >> n ; int i , j ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) cin >> x [ i ] [ j ] ; f ( 1 , 1 ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int a , b , row , col , i ; scanf ( "%d %d" , & a , & b ) ; for ( row = 0 ; row < a ; row ++ ) { for ( col = 0 ; col < b ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } for ( i = 0 ; i < b ; i ++ ) { for ( col = i ; col >= 0 && ( i - col ) < a ; col -- ) { printf ( "%d\n" , sz [ i - col ] [ col ] ) ; } } for ( i = b ; i < a + b ; i ++ ) { for ( col = b - 1 ; col >= 0 && ( i - col ) < a ; col -- ) { printf ( "%d\n" , sz [ i - col ] [ col ] ) ; } } return 0 ; }
int main ( ) { int i , j , col , row , array [ 100 ] [ 100 ] ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } int cxx = 0 , csx , rxx = 0 , rsx ; for ( i = 0 ; i < col ; i ++ ) { csx = i ; rxx = 0 ; while ( csx >= 0 && csx < col && rxx >= 0 && rxx < row ) { printf ( "%d\n" , array [ rxx ] [ csx ] ) ; csx -- ; rxx ++ ; } } for ( j = 1 ; j < row ; j ++ ) { rxx = j ; csx = col - 1 ; while ( csx >= 0 && csx < col && rxx >= 0 && rxx < row ) { printf ( "%d\n" , array [ rxx ] [ csx ] ) ; csx -- ; rxx ++ ; } } int t ; scanf ( "%d" , & t ) ; return 0 ; }
void main ( ) { int row , col ; int i = 0 , j = 0 , k = 0 ; int str [ 100 ] [ 100 ] = { 0 } ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & str [ i ] [ j ] ) ; for ( k = 0 ; k < col ; k ++ ) for ( i = 0 , j = k ; j >= 0 ; i ++ , j -- ) { if ( str [ i ] [ j ] == 0 ) break ; else printf ( "%d\n" , str [ i ] [ j ] ) ; } i = 0 ; k = 0 ; j = 0 ; for ( k = 1 ; k < row ; k ++ ) for ( i = k , j = col - 1 ; ( i < row ) && ( j >= 0 ) ; i ++ , j -- ) printf ( "%d\n" , str [ i ] [ j ] ) ; }
void main ( ) { int r , c , i , j , k ; int ( * a ) [ 100 ] ; a = ( int ( * ) [ 100 ] ) malloc ( 100 * 100 * sizeof ( int ) ) ; scanf ( "%d %d" , & r , & c ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j < c ; j ++ ) scanf ( "%d" , * ( a + i ) + j ) ; for ( k = 0 ; k <= c - 1 ; k ++ ) { i = 0 ; j = k ; while ( j >= 0 && i <= r - 1 ) { printf ( "%d\n" , * ( * ( a + i ) + j ) ) ; i ++ ; j -- ; } } for ( k = 1 ; k <= r - 1 ; k ++ ) { j = c - 1 ; i = k ; while ( j >= 0 && i <= r - 1 ) { printf ( "%d\n" , * ( * ( a + i ) + j ) ) ; i ++ ; j -- ; } } }
void main ( ) { int a [ MAXSIZE ] [ MAXSIZE ] , i , j , row , col , n ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } for ( n = 0 ; n <= col + row - 2 ; n ++ ) { for ( i = 0 ; i < row ; i ++ ) if ( i <= n && i > n - col ) printf ( "%d\n" , a [ i ] [ n - i ] ) ; } }
int main ( ) { int n , m , num [ 100 ] [ 100 ] ; cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) cin >> num [ i ] [ j ] ; } for ( int k = 0 ; k < n + m - 1 ; k ++ ) { if ( k < m ) { for ( int i = 0 ; k >= i && i < n ; i ++ ) cout << num [ i ] [ k - i ] << endl ; } else { for ( int i = k - m + 1 ; i < n && k >= i ; i ++ ) cout << num [ i ] [ k - i ] << endl ; } } return 0 ; }
int main ( ) { int array [ 100 ] [ 100 ] ; int row ; int col ; int i ; int j ; int t ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } for ( t = 0 ; t < col ; t ++ ) { for ( i = 0 ; i < row ; i ++ ) { j = t - i ; if ( j < 0 ) { break ; } printf ( "%d\n" , array [ i ] [ j ] ) ; } } for ( t = col ; t <= col + row - 2 ; t ++ ) { for ( j = col - 1 ; ; j -- ) { i = t - j ; if ( j < 0 ) { break ; } if ( i >= row ) { break ; } printf ( "%d\n" , array [ i ] [ j ] ) ; } } return 0 ; }
int main ( ) { int m , n ; cin >> m >> n ; int array [ m + 1 ] [ n + 1 ] ; for ( int i = 1 ; i <= m ; ++ i ) for ( int t = 1 ; t <= n ; ++ t ) cin >> array [ i ] [ t ] ; int sum = 1 ; int x [ 3 ] = { 0 , 0 , 1 } ; int y [ 3 ] = { 0 , 1 , 0 } ; int dx = 1 , dy = 1 , k = 1 ; int tx , ty ; while ( sum <= m * n ) { int xx = dx , yy = dy ; for ( ; ; ) { if ( xx > m || yy < 1 ) break ; cout << array [ xx ] [ yy ] << endl ; xx = xx + 1 , yy = yy - 1 ; sum ++ ; } tx = dx + x [ k ] , ty = dy + y [ k ] ; if ( ty > n ) { k ++ ; tx = dx + x [ k ] , ty = dy + y [ k ] ; } dx = tx , dy = ty ; } return 0 ; }
int min ( int a , int b ) { if ( a < b ) return a ; else return b ; } main ( ) { int a [ 100 ] [ 100 ] ; int row , col , i , j , k , l ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < col ; i ++ ) { for ( j = 0 ; j < min ( i + 1 , row ) ; j ++ ) { printf ( "%d\n" , a [ j ] [ i - j ] ) ; } } for ( k = 1 ; k < row ; k ++ ) { for ( l = 0 ; l < min ( row - k , col ) ; l ++ ) printf ( "%d\n" , a [ k + l ] [ col - 1 - l ] ) ; } }
int main ( ) { int row , col ; cin >> row >> col ; int data [ 100 ] [ 100 ] ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) { cin >> data [ i ] [ j ] ; } } for ( int i = 0 ; i < col ; i ++ ) { int m = 0 , n = i ; while ( true ) { cout << data [ m ] [ n ] << endl ; m ++ ; n -- ; if ( m == row || n == - 1 ) break ; } } for ( int i = 1 ; i < row ; i ++ ) { int m = i , n = col - 1 ; while ( true ) { cout << data [ m ] [ n ] << endl ; m ++ ; n -- ; if ( m == row || n == - 1 ) break ; } } return 0 ; }
int main ( ) { int n , m ; scanf ( "%d %d" , & n , & m ) ; int s [ 100 ] [ 100 ] ; int i , j ; int k = 0 , l = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= m - 1 ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i <= m - 1 ; i ++ ) { k = 0 ; l = i ; for ( j = 0 ; ; j ++ ) { printf ( "%d\n" , s [ k ] [ l ] ) ; if ( l == 0 || k == n - 1 ) { break ; } k = k + 1 ; l = l - 1 ; } } for ( i = 1 ; i <= n - 1 ; i ++ ) { k = i ; l = m - 1 ; for ( j = 0 ; ; j ++ ) { printf ( "%d\n" , s [ k ] [ l ] ) ; if ( k == n - 1 || l == 0 ) { break ; } k = k + 1 ; l = l - 1 ; } } return 0 ; }
void main ( ) { int a [ 100 ] [ 100 ] , i , j , m , n , row , col ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i <= row - 1 ; i ++ ) for ( j = 0 ; j <= col - 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; m = row + col - 2 ; for ( n = 0 ; n <= m ; n ++ ) for ( i = 0 ; i <= row - 1 ; i ++ ) for ( j = 0 ; j <= col - 1 ; j ++ ) if ( i + j == n ) printf ( "%d\n" , a [ i ] [ j ] ) ; }
int main ( ) { int r , c , a [ 99 ] [ 99 ] ; cin >> r >> c ; for ( int i = 0 ; i < r ; ++ i ) for ( int j = 0 ; j < c ; ++ j ) cin >> a [ i ] [ j ] ; for ( int j = 0 ; j < c ; ++ j ) for ( int x = j , y = 0 ; x >= 0 && y < r ; -- x , ++ y ) cout << a [ y ] [ x ] << endl ; for ( int i = 1 ; i < r ; ++ i ) for ( int y = i , x = c - 1 ; x >= 0 && y < r ; -- x , ++ y ) cout << a [ y ] [ x ] << endl ; }
int main ( ) { int row , col , s [ 100 ] [ 100 ] , i , k ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( k = 0 ; k < col ; k ++ ) { scanf ( "%d" , & s [ i ] [ k ] ) ; } } if ( col < row ) { for ( i = 0 ; i <= ( row + col ) ; i ++ ) { for ( k = 0 ; k < row && k <= i ; k ++ ) { if ( ( i - k ) >= col ) continue ; else printf ( "%d\n" , s [ k ] [ i - k ] ) ; } } } else if ( col >= row ) { for ( i = 0 ; i <= ( col + row ) ; i ++ ) { for ( k = 0 ; k <= i && k < row ; k ++ ) { if ( ( i - k ) >= col ) continue ; else printf ( "%d\n" , s [ k ] [ i - k ] ) ; } } } return 0 ; }
void prt ( int a [ 100 ] [ 100 ] , int i , int j , int m , int n ) { static int t = 0 ; printf ( "%d\n" , a [ i ] [ j ] ) ; if ( i == m - 1 || j == 0 ) { t ++ ; if ( t < n ) prt ( a , 0 , t , m , n ) ; else if ( t < m + n - 1 ) prt ( a , t - n + 1 , n - 1 , m , n ) ; } else prt ( a , i + 1 , j - 1 , m , n ) ; } void main ( ) { int i , j , m , n , a [ 100 ] [ 100 ] ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } prt ( a , 0 , 0 , m , n ) ; }
int main ( ) { long p , q , r , l , i , x , j ; long a [ 202 ] [ 202 ] = { 0 } , b [ 202 ] = { 0 } ; scanf ( "%ld%ld" , & r , & l ) ; for ( i = 1 ; i <= r ; i ++ ) for ( j = 1 ; j <= l ; j ++ ) { scanf ( "%ld" , & x ) ; a [ i + j ] [ b [ i + j ] ] = x ; b [ i + j ] ++ ; } i -- ; j -- ; for ( p = 2 ; p <= i + j ; p ++ ) for ( q = 0 ; q < b [ p ] ; q ++ ) printf ( "%ld\n" , a [ p ] [ q ] ) ; return 0 ; }
int main ( ) { int sz [ 100 ] [ 100 ] ; int row , col ; scanf ( "%d %d" , & row , & col ) ; int r , c ; for ( r = 0 ; r < row ; r ++ ) { for ( c = 0 ; c < col ; c ++ ) { scanf ( "%d" , & sz [ r ] [ c ] ) ; } } int k ; int first = 1 ; int min = row - 1 ; if ( col < min + 1 ) { min = col - 1 ; } for ( k = 0 ; k <= min ; k ++ ) { for ( r = 0 ; r <= k ; r ++ ) { if ( first == 1 ) { printf ( "%d" , sz [ r ] [ k - r ] ) ; first = 0 ; } else { printf ( "\n%d" , sz [ r ] [ k - r ] ) ; } } } if ( row > col ) { for ( k = 1 ; k <= row - col ; k ++ ) { for ( r = k , c = col - 1 ; c >= 0 && r < row ; c -- , r ++ ) { printf ( "\n%d" , sz [ r ] [ c ] ) ; } } } if ( row < col ) { for ( k = 1 ; k <= col - row ; k ++ ) { for ( c = row - 1 + k , r = 0 ; r <= row - 1 ; c -- , r ++ ) { printf ( "\n%d" , sz [ r ] [ c ] ) ; } } } for ( k = min + 1 ; k >= 1 ; k -- ) { for ( r = row - k + 1 , c = col - 1 ; r < row ; r ++ , c -- ) { printf ( "\n%d" , sz [ r ] [ c ] ) ; } } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int row , col ; cin >> row >> col ; for ( int i = 0 ; i < row ; i ++ ) for ( int j = 0 ; j < col ; j ++ ) cin >> a [ i ] [ j ] ; for ( int p = 0 ; p <= row + col - 2 ; p ++ ) { for ( int i = 0 ; i <= p ; i ++ ) { int j = p - i ; if ( i > row - 1 || j > col - 1 || j < 0 ) continue ; cout << a [ i ] [ j ] << endl ; } } return 0 ; }
int main ( ) { int row , col , a [ 100 ] [ 100 ] ; cin >> row >> col ; int num = 0 ; for ( int i = 1 ; i <= row ; i ++ ) { for ( int j = 1 ; j <= col ; j ++ ) { cin >> a [ i - 1 ] [ j - 1 ] ; } } for ( int k = 0 ; k <= row + col - 2 ; k ++ ) { for ( int l = 0 ; l <= row - 1 ; l ++ ) { if ( k - l <= col - 1 && k >= l ) { cout << a [ l ] [ k - l ] << endl ; } } } return 0 ; }
void main ( ) { int * p , row , col , * q , i , k ; scanf ( "%d%d" , & row , & col ) ; p = ( int * ) malloc ( row * col * sizeof ( int ) ) ; for ( q = p ; q < p + row * col ; q ++ ) scanf ( "%d" , q ) ; for ( k = 0 ; k < row + col - 1 ; k ++ ) { if ( k < col ) { for ( i = 0 ; i <= k && i < row ; i ++ ) printf ( "%d\n" , * ( p + i * col + k - i ) ) ; } else { for ( i = k - col + 1 ; i < row && i <= k ; i ++ ) printf ( "%d\n" , * ( p + i * col + k - i ) ) ; } } }
int main ( ) { int i , n [ 100 ] [ 100 ] , col , row , COL , ROW ; scanf ( "%d %d" , & ROW , & COL ) ; for ( row = 0 ; row < ROW ; row ++ ) { for ( col = 0 ; col < COL ; col ++ ) { scanf ( "%d" , & n [ row ] [ col ] ) ; } } for ( i = 0 ; i < COL + ROW - 1 ; i ++ ) { if ( i < COL ) { col = i ; row = 0 ; while ( col >= 0 && row < ROW ) { printf ( "%d\n" , n [ row ] [ col ] ) ; col -= 1 ; row += 1 ; } } else if ( i >= COL ) { col = COL - 1 ; row = i - COL + 1 ; while ( col >= 0 && row < ROW ) { printf ( "%d\n" , n [ row ] [ col ] ) ; col -= 1 ; row += 1 ; } } } return 0 ; }
int main ( ) { int i , j , k , a , b ; int s [ 100 ] [ 100 ] ; scanf ( "%d%d" , & a , & b ) ; for ( j = 0 ; j < a ; j ++ ) { for ( i = 0 ; i < b ; i ++ ) { scanf ( "%d" , & s [ j ] [ i ] ) ; } } for ( j = 0 ; j < b ; j ++ ) { k = j ; for ( i = 0 ; ; i ++ ) { if ( i == a ) { break ; } printf ( "%d\n" , s [ i ] [ k ] ) ; k -- ; if ( k < 0 ) { break ; } } } for ( j = 1 ; j < a ; j ++ ) { k = j ; for ( i = b - 1 ; i >= 0 ; i -- ) { printf ( "%d\n" , s [ k ] [ i ] ) ; k ++ ; if ( k == a ) { break ; } } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int row , col , ROW , COL , array [ 100 ] [ 100 ] ; scanf ( "%d %d" , & ROW , & COL ) ; for ( row = 0 ; row < ROW ; row ++ ) { for ( col = 0 ; col < COL ; col ++ ) { scanf ( "%d" , & array [ row ] [ col ] ) ; } } if ( ROW > 1 && COL > 1 ) { for ( col = 0 ; col < COL ; col ++ ) { for ( row = 0 ; row < ROW ; row ++ ) { if ( col - row < 0 ) break ; else printf ( "%d\n" , array [ row ] [ col - row ] ) ; } } for ( row = 1 ; row < ROW - 1 ; row ++ ) { for ( col = COL - 1 ; col >= 0 ; col -- ) { if ( row + COL - 1 - col > ROW - 1 ) break ; else printf ( "%d\n" , array [ row + COL - 1 - col ] [ col ] ) ; } } } if ( ROW == 1 && COL > 1 ) { for ( col = 0 ; col < COL - 1 ; col ++ ) { printf ( "%d\n" , array [ 0 ] [ col ] ) ; } } if ( COL == 1 && ROW > 1 ) { for ( row = 0 ; row < ROW - 1 ; row ++ ) { printf ( "%d\n" , array [ row ] [ 0 ] ) ; } } printf ( "%d" , array [ ROW - 1 ] [ COL - 1 ] ) ; return 0 ; }
int r , c , * p , n , m , i , j , k ; void main ( ) { void x ( int i ) ; void y ( int i ) ; scanf ( "%d %d" , & r , & c ) ; n = r * c ; m = r + c - 2 ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , p + i ) ; for ( i = 0 ; i < c ; i ++ ) x ( i ) ; for ( i = c ; i <= m ; i ++ ) y ( i ) ; } void x ( int i ) { int a ; for ( a = i ; a >= 0 && ( i - a ) < r ; a -- ) printf ( "%d\n" , * ( p + ( i - a ) * c + a ) ) ; } void y ( int i ) { int a ; for ( a = c - 1 ; a >= 0 && ( i - a ) < r ; a -- ) printf ( "%d\n" , * ( p + ( i - a ) * c + a ) ) ; }
int main ( ) { int a [ 101 ] [ 101 ] ; int i , j , row , col , rowc , colc ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < row + col - 1 ; i ++ ) { for ( j = i ; j >= 0 ; j -- ) { colc = j ; rowc = i - j ; if ( colc >= col ) { continue ; } if ( row > col && rowc >= row ) { continue ; } if ( col >= row && rowc == row ) { break ; } printf ( "%d\n" , a [ rowc ] [ colc ] ) ; } } return 0 ; }
int main ( ) { int row , col , f [ 100 ] [ 100 ] , i , j ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & f [ i ] [ j ] ) ; } for ( j = 0 ; j < col ; j ++ ) { for ( i = 0 ; i <= j && i < row ; i ++ ) { printf ( "%d" , f [ i ] [ j - i ] ) ; printf ( "\n" ) ; } } for ( j = 1 ; j < row ; j ++ ) { for ( i = j ; i < row && i <= j + col - 1 ; i ++ ) { printf ( "%d" , f [ i ] [ col - 1 + j - i ] ) ; printf ( "\n" ) ; } } return 0 ; }
int main ( ) { int row , col ; int i = 0 , j = 0 ; int ar [ 101 ] [ 101 ] ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & ar [ i ] [ j ] ) ; if ( row == col ) { for ( i = 0 ; i <= col - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) printf ( "%d\n" , ar [ j ] [ i - j ] ) ; for ( i = col ; i <= row + col - 2 ; i ++ ) for ( j = col - 1 ; j >= i - row + 1 ; j -- ) printf ( "%d\n" , ar [ i - j ] [ j ] ) ; } if ( row > col ) { for ( i = 0 ; i <= col - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) printf ( "%d\n" , ar [ j ] [ i - j ] ) ; for ( i = col ; i <= row - 1 ; i ++ ) for ( j = col - 1 ; j >= 0 ; j -- ) printf ( "%d\n" , ar [ i - j ] [ j ] ) ; for ( i = row ; i <= row + col - 2 ; i ++ ) for ( j = col - 1 ; j >= i - row + 1 ; j -- ) printf ( "%d\n" , ar [ i - j ] [ j ] ) ; } if ( row < col ) { for ( i = 0 ; i <= row - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) printf ( "%d\n" , ar [ j ] [ i - j ] ) ; for ( i = row ; i <= col - 1 ; i ++ ) for ( j = 0 ; j <= row - 1 ; j ++ ) printf ( "%d\n" , ar [ j ] [ i - j ] ) ; for ( i = col ; i <= row + col - 2 ; i ++ ) for ( j = col - 1 ; j >= i - row + 1 ; j -- ) printf ( "%d\n" , ar [ i - j ] [ j ] ) ; } return 0 ; }
void main ( ) { int a [ 200 ] [ 200 ] ; int i , j , row , col , sum ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } if ( col >= row ) { for ( sum = 0 ; sum < col ; sum ++ ) { for ( j = sum ; j >= 0 ; j -- ) { i = sum - j ; if ( i >= row ) break ; printf ( "%d\n" , a [ i ] [ j ] ) ; } } for ( ; sum <= col + row - 2 ; sum ++ ) { for ( j = col - 1 ; j >= 0 ; j -- ) { i = sum - j ; if ( i >= row ) break ; printf ( "%d\n" , a [ i ] [ j ] ) ; } } } else { for ( sum = 0 ; sum < col ; sum ++ ) { for ( j = sum ; j >= 0 ; j -- ) { i = sum - j ; if ( i >= row ) break ; printf ( "%d\n" , a [ i ] [ j ] ) ; } } for ( ; sum <= col + row - 2 ; sum ++ ) { for ( j = col - 1 ; j >= 0 ; j -- ) { i = sum - j ; if ( i >= row ) break ; printf ( "%d\n" , a [ i ] [ j ] ) ; } } } }
int main ( ) { int row = 0 , col = 0 ; cin >> row >> col ; int array [ 100 ] [ 100 ] = { 0 } ; int i , j , n ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { cin >> array [ i ] [ j ] ; } } for ( n = 0 ; n < row + col ; n ++ ) { for ( i = 0 , j = n - 1 ; i < n , j >= 0 ; i ++ , j -- ) { if ( i < row && j < col ) { cout << array [ i ] [ j ] << endl ; } } } return 0 ; }
int main ( ) { int row , col ; int a [ 100 ] [ 100 ] ; cin >> row >> col ; for ( int i = 0 ; i < row ; i ++ ) { for ( int j = 0 ; j < col ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( int sum = 0 ; sum <= row + col - 2 ; sum ++ ) { for ( int i = 0 ; i <= sum ; i ++ ) { if ( i > row - 1 ) break ; for ( int j = 0 ; j <= sum ; j ++ ) { if ( j > col - 1 ) break ; if ( i + j == sum ) cout << a [ i ] [ j ] << endl ; } } } return 0 ; }
int main ( int argc , char * argv [ ] ) { int col , row , sz [ 99 ] [ 99 ] , i , j ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < col ; i ++ ) { for ( j = 0 ; j <= i && j < row ; j ++ ) { printf ( "%d\n" , sz [ j ] [ i - j ] ) ; } } for ( i = 1 ; i < row ; i ++ ) { for ( j = 0 ; j + i < row && j < col ; j ++ ) { printf ( "%d\n" , sz [ i + j ] [ col - j - 1 ] ) ; } } return 0 ; }
void main ( ) { int * * a [ 100 ] [ 100 ] , i , j , col , row , k , xie ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < 100 ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { a [ i ] [ j ] = ( int * * ) malloc ( 10000 ) ; } } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , a [ i ] [ j ] ) ; } } xie = col + row - 1 ; for ( i = 0 ; i <= xie + 1 ; i ++ ) { for ( j = 0 ; j < row ; j ++ ) { for ( k = 0 ; k < col ; k ++ ) { if ( j + k != i ) { continue ; } else { printf ( "%d\n" , * a [ j ] [ k ] ) ; } } } } }
main ( ) { int row , col , time = 0 , n , i , j ; int array [ 100 ] [ 100 ] ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & array [ i ] [ j ] ) ; for ( n = 0 ; n < row + col ; n ++ ) { if ( col < row ) { if ( n < col ) { for ( i = 0 ; i <= n ; i ++ ) printf ( "%d\n" , array [ i ] [ n - i ] ) ; } else if ( n < row ) { for ( i = col - 1 ; i >= 0 ; i -- ) printf ( "%d\n" , array [ n - i ] [ i ] ) ; } else { for ( i = col - 1 ; i > n - row ; i -- ) printf ( "%d\n" , array [ n - i ] [ i ] ) ; } } else if ( row < col ) { if ( n < row ) { for ( i = 0 ; i <= n ; i ++ ) printf ( "%d\n" , array [ i ] [ n - i ] ) ; } else if ( n < col ) { for ( i = 0 ; i <= row - 1 ; i ++ ) printf ( "%d\n" , array [ i ] [ n - i ] ) ; } else { for ( i = col - 1 ; i > n - row ; i -- ) printf ( "%d\n" , array [ n - i ] [ i ] ) ; } } else if ( row == col ) { if ( n < row ) { for ( i = 0 ; i <= n ; i ++ ) printf ( "%d\n" , array [ i ] [ n - i ] ) ; } else { for ( i = row - 1 ; i > n - col ; i -- ) printf ( "%d\n" , array [ n - i ] [ i ] ) ; } } } }
int g [ 100 ] [ 100 ] ; int main ( ) { int r , c ; scanf ( "%d%d" , & r , & c ) ; for ( int i = 0 ; i < r ; i ++ ) for ( int j = 0 ; j < c ; j ++ ) scanf ( "%d" , g [ i ] + j ) ; for ( int j = 0 ; j < r + c - 1 ; j ++ ) { for ( int i = 0 ; i < r ; i ++ ) { if ( j - i >= 0 && j - i < c ) printf ( "%d\n" , g [ i ] [ j - i ] ) ; } } return 0 ; }
void main ( ) { int row , col , a [ 100 ] [ 100 ] = { 0 } , i , j , k ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( k = 0 ; k < col ; k ++ ) { for ( i = 0 ; k - i >= 0 && i <= row - 1 ; i ++ ) printf ( "%d\n" , a [ 0 + i ] [ k - i ] ) ; } for ( k = 1 ; k < row ; k ++ ) { for ( i = 0 ; k + i <= row - 1 && col - 1 - i >= 0 ; i ++ ) printf ( "%d\n" , a [ k + i ] [ col - 1 - i ] ) ; } }
void main ( ) { int row , col , i , j , k , ( * a ) [ 100 ] ; a = ( int ( * ) [ 100 ] ) calloc ( 100 , 100 * sizeof ( int ) ) ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , * ( a + i ) + j ) ; for ( k = 0 ; k < col ; k ++ ) { for ( i = 0 ; k - i >= 0 && i <= row - 1 ; i ++ ) printf ( "%d\n" , * ( * ( a + i ) + k - i ) ) ; } for ( k = 1 ; k < row ; k ++ ) { for ( i = 0 ; k + i <= row - 1 && col - 1 - i >= 0 ; i ++ ) printf ( "%d\n" , * ( * ( a + k + i ) + col - 1 - i ) ) ; } }
int main ( ) { int a [ 100 ] [ 100 ] ; int m , n ; cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( int i = 0 ; i < m + n ; i ++ ) { int j = 0 ; while ( j <= i ) { if ( j < m && i - j < n ) { cout << a [ j ] [ i - j ] << endl ; } j ++ ; } } }
int main ( ) { int array [ 100 ] [ 100 ] ; int i , j , k , row , col , sum ; scanf ( "%d %d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } } if ( row == col ) { for ( k = 0 ; k < col ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { printf ( "%d\n" , array [ i ] [ k - i ] ) ; } } sum = row ; for ( k = 1 ; k < row ; k ++ ) { for ( j = k ; j < row ; j ++ ) { printf ( "%d\n" , array [ j ] [ sum - j ] ) ; } sum ++ ; } } else if ( col > row ) { for ( k = 0 ; k < row ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { printf ( "%d\n" , array [ i ] [ k - i ] ) ; } } for ( k = row ; k < col ; k ++ ) { for ( i = 0 ; i < row ; i ++ ) { printf ( "%d\n" , array [ i ] [ k - i ] ) ; } } sum = col - 1 ; for ( k = 1 ; k < row ; k ++ ) { for ( j = k ; j < row ; j ++ ) { printf ( "%d\n" , array [ j ] [ sum + k - j ] ) ; } } } else { for ( k = 0 ; k < col ; k ++ ) { for ( i = 0 ; i <= k ; i ++ ) { printf ( "%d\n" , array [ i ] [ k - i ] ) ; } } for ( k = col ; k < row ; k ++ ) { for ( i = col - 1 ; i >= 0 ; i -- ) { printf ( "%d\n" , array [ k - i ] [ i ] ) ; } } sum = 0 ; for ( k = row ; k < row + col - 1 ; k ++ ) { for ( i = col - 1 ; i > sum ; i -- ) { printf ( "%d\n" , array [ k - i ] [ i ] ) ; } sum ++ ; } } return 0 ; }
int main ( ) { int row , col ; scanf ( "%d %d" , & row , & col ) ; int a [ 100 ] [ 100 ] = { 0 } ; int i , j ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } int step = 0 ; i = 0 ; j = 0 ; int t ; if ( row * col > 0 ) { printf ( "%d" , a [ 0 ] [ 0 ] ) ; step ++ ; } while ( step < row * col ) { if ( i + 1 < 0 || j - 1 < 0 ) { t = i ; i = j ; j = t + 1 ; if ( i < row && j < col ) { printf ( "\n%d" , a [ i ] [ j ] ) ; step ++ ; } } else { i = i + 1 ; j = j - 1 ; if ( i < row && j < col ) { printf ( "\n%d" , a [ i ] [ j ] ) ; step ++ ; } } } return 0 ; }
int main ( ) { int a [ 101 ] [ 101 ] ; int row , col ; int i , j ; int x ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } if ( row < col ) { for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( "%d\n" , a [ 0 + j ] [ i - j ] ) ; } } for ( i = 0 ; i < col - row - 1 ; i ++ ) { for ( j = 0 ; j < row ; j ++ ) { printf ( "%d\n" , a [ j ] [ row + i - j ] ) ; } } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < row - i ; j ++ ) { printf ( "%d\n" , a [ i + j ] [ col - 1 - j ] ) ; } } } else { for ( i = 0 ; i < col ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( "%d\n" , a [ 0 + j ] [ i - j ] ) ; } } for ( i = 0 ; i < row - col - 1 ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { printf ( "%d\n" , a [ i + j + 1 ] [ col - j - 1 ] ) ; } } if ( row == col ) { x = 1 ; } else { x = 0 ; } for ( i = x ; i < col ; i ++ ) { for ( j = 0 ; j < col - i ; j ++ ) { printf ( "%d\n" , a [ row - col + i + j ] [ col - j - 1 ] ) ; } } } return 0 ; }
int main ( ) { int row , col ; int matrix [ 120 ] [ 120 ] ; cin >> row >> col ; int * p [ 100 ] ; for ( int i = 0 ; i < row ; i ++ ) { p [ i ] = & matrix [ i ] [ 0 ] ; for ( int j = 0 ; j < col ; j ++ ) { cin >> matrix [ i ] [ j ] ; } } if ( col >= row ) { for ( int i = 0 ; i < col ; i ++ ) { for ( int j = 0 ; ( i - j ) < col && ( i - j ) >= 0 && j < row ; j ++ ) { cout << * ( p [ j ] + i - j ) << endl ; } } for ( int i = col ; i < ( col + row - 1 ) ; i ++ ) { for ( int j = col - 1 ; i - j < row ; j -- ) { cout << * ( p [ i - j ] + j ) << endl ; } } } else { for ( int i = 0 ; i < col ; i ++ ) { for ( int j = 0 ; ( i - j ) < col && ( i - j ) >= 0 && j < row ; j ++ ) { cout << * ( p [ j ] + i - j ) << endl ; } } for ( int i = col ; i < ( col + row - 1 ) ; i ++ ) { for ( int j = col - 1 ; i - j < row && j >= 0 ; j -- ) { cout << * ( p [ i - j ] + j ) << endl ; } } } }
int main ( ) { int n , m , i , j , a [ 100 ] [ 100 ] , x = 0 , y = 0 , k = 0 , l = 0 ; scanf ( "%d%d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( ; ; ) { printf ( "%d\n" , a [ x ] [ y ] ) ; if ( x == n - 1 && y == m - 1 ) break ; if ( y == 0 || x == n - 1 ) { if ( l == m - 1 ) k ++ ; else l ++ ; x = k ; y = l ; continue ; } x ++ ; y -- ; } }
void main ( ) { int i , j , k , * p [ 100 ] , m , n ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) p [ i ] = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , p [ i ] + j ) ; for ( j = 0 ; j < n ; j ++ ) { k = j ; for ( i = 0 ; i < m ; i ++ ) { printf ( "%d\n" , * ( p [ i ] + k -- ) ) ; if ( k < 0 ) break ; } } for ( i = 1 ; i < m ; i ++ ) { k = i ; for ( j = n - 1 ; j >= 0 ; j -- ) { printf ( "%d\n" , * ( p [ k ++ ] + j ) ) ; if ( k == m ) break ; } } }
void main ( ) { int a [ 100 ] [ 100 ] , i , j , k , l , m , n , col , row ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } if ( col >= row ) { for ( k = 0 ; k < col ; k ++ ) { for ( l = 0 ; l < row && l <= k ; l ++ ) { printf ( "%d\n" , a [ l ] [ k - l ] ) ; } } for ( m = 1 ; m < row ; m ++ ) { for ( n = 0 ; n < row - m ; n ++ ) printf ( "%d\n" , a [ m + n ] [ col - 1 - n ] ) ; } } else { for ( k = 0 ; k < col ; k ++ ) { for ( l = 0 ; l < row && l <= k ; l ++ ) { printf ( "%d\n" , a [ l ] [ k - l ] ) ; } } for ( m = 1 ; m < row ; m ++ ) { for ( n = 0 ; n < row - m && n < col ; n ++ ) printf ( "%d\n" , a [ m + n ] [ col - 1 - n ] ) ; } } }
int main ( ) { int row , col , a [ 100 ] [ 100 ] , k , j , i , m ; scanf ( "%d %d" , & row , & col ) ; for ( j = 0 ; j < row ; j ++ ) { for ( i = 0 ; i < col ; i ++ ) { scanf ( "%d" , & a [ j ] [ i ] ) ; } } for ( i = 0 ; i < col ; i ++ ) { j = 0 ; for ( m = i ; ( j < row ) && ( m >= 0 ) ; j ++ , m -- ) { printf ( "%d\n" , a [ j ] [ m ] ) ; } } for ( j = 1 ; j < row ; j ++ ) { i = col - 1 ; for ( m = i , k = j ; ( k < row ) && ( m >= 0 ) ; k ++ , m -- ) { printf ( "%d\n" , a [ k ] [ m ] ) ; } } return 0 ; }
int main ( ) { int array [ 100 ] [ 100 ] ; memset ( array , 0 , sizeof ( array ) ) ; int i , j , k , row , col ; cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) cin >> array [ i ] [ j ] ; } for ( k = 0 ; k < row + col - 1 ; k ++ ) { for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) { if ( i + j == k ) cout << array [ i ] [ j ] << endl ; } } return 0 ; }
int main ( ) { int * p [ 1000 ] , n , m , i , j , t ; scanf ( "%d%d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( 1000 ) ; for ( j = 0 ; j < m ; j ++ ) scanf ( "%d" , * ( p + i ) + j ) ; } for ( j = 0 ; j < m + n - 1 ; j ++ ) { if ( j < m ) t = 0 ; else t = j - m + 1 ; for ( i = t ; i < n && i <= j ; i ++ ) printf ( "%d\n" , * ( * ( p + i ) + j - i ) ) ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int m , n , i , j , k ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 , j = k ; i < m && j >= 0 ; i ++ , j -- ) { printf ( "%d\n" , a [ i ] [ j ] ) ; } } for ( k = 1 ; k < m ; k ++ ) { for ( i = k , j = n - 1 ; i < m && j >= 0 ; i ++ , j -- ) { printf ( "%d\n" , a [ i ] [ j ] ) ; } } return 0 ; } int main_e4_6_for ( ) { int a [ 100 ] [ 100 ] ; int m , n , i , j , k ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( k = 0 ; k < ( m + n - 1 ) ; k ++ ) { for ( i = e46max ( 0 , k - n + 1 ) , j = e46min ( k , n - 1 ) ; i < m && j >= 0 ; i ++ , j -- ) { printf ( "%d\n" , a [ i ] [ j ] ) ; } } return 0 ; }
int main ( ) { int m , n , i , j , k ; int * a [ 100 ] ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) * ( a + i ) = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , * ( a + i ) + j ) ; for ( k = 0 ; k < n ; k ++ ) { i = 0 ; j = k ; do { printf ( "%d\n" , * ( * ( a + i ) + j ) ) ; i ++ ; j -- ; } while ( j >= 0 && i < m ) ; } if ( m >= 2 ) { for ( k = 1 ; k < m ; k ++ ) { i = k ; j = n - 1 ; do { printf ( "%d\n" , * ( * ( a + i ) + j ) ) ; i ++ ; j -- ; } while ( j >= 0 && i < m ) ; } } return 0 ; }
main ( ) { int ( * p ) [ 100 ] , i , j , k , m , n , flag = 0 ; p = ( int ( * ) [ 100 ] ) calloc ( 100 , 100 * sizeof ( int ) ) ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , * ( p + i ) + j ) ; for ( i = 0 ; i < n ; i ++ ) { for ( k = i ; k >= 0 ; k -- ) { if ( i - k <= m - 1 ) { printf ( "%d\n" , * ( * ( p + i - k ) + k ) ) ; } flag = i ; } } if ( flag == n - 1 ) { for ( j = 1 ; j < m ; j ++ ) { for ( k = j ; k < m ; k ++ ) { if ( ( n + j - k - 1 ) <= ( n - 1 ) && ( n + j - k - 1 ) >= 0 ) { printf ( "%d\n" , * ( * ( p + k ) + n + j - k - 1 ) ) ; } } } } }
void main ( ) { void paixu ( int a [ ] [ 100 ] , int x , int y ) ; int i , j , a [ 100 ] [ 100 ] , col , row ; scanf ( "%d%d" , & row , & col ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < col ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; paixu ( a , row , col ) ; } void paixu ( int a [ ] [ 100 ] , int x , int y ) { int sum = 0 , i , j , k ; k = x + y ; for ( sum = 0 ; sum <= k ; sum ++ ) { for ( i = 0 ; i <= sum ; i ++ ) { j = sum - i ; if ( i < x && j < y ) printf ( "\n%d" , a [ i ] [ j ] ) ; } } }
int main ( ) { char a [ 501 ] ; char s [ 501 ] ; int i , c = 0 , d = 0 , e = 0 , p = 0 ; double k ; scanf ( "%lf" , & k ) ; scanf ( "%s" , a ) ; scanf ( "%s" , s ) ; for ( i = 0 ; s [ i ] != '\0' ; i ++ ) { p = p + 1 ; if ( ( s [ i ] != 'A' ) && ( s [ i ] != 'T' ) && ( s [ i ] != 'C' ) && ( s [ i ] != 'G' ) ) { e = e + 1 ; } } for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { c = c + 1 ; if ( a [ i ] == s [ i ] ) { d = d + 1 ; } if ( ( a [ i ] != 'A' ) && ( a [ i ] != 'T' ) && ( a [ i ] != 'C' ) && ( a [ i ] != 'G' ) ) { e = 1 ; } } if ( p != c ) { e = 1 ; } if ( e == 1 ) { printf ( "error" ) ; } else if ( ( 1.0 * d / c ) > k ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int b , c , i , j1 , j ; double a , m , n ; char s1 [ 100 ] , s2 [ 100 ] ; c = 0 ; scanf ( "%lf" , & a ) ; scanf ( "%s" , s1 ) ; scanf ( "%s" , s2 ) ; if ( strlen ( s1 ) != strlen ( s2 ) ) { printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; s1 [ i ] != '\0' ; i ++ ) { if ( s1 [ i ] != 'A' && s1 [ i ] != 'G' && s1 [ i ] != 'C' && s1 [ i ] != 'T' || s2 [ i ] != 'A' && s2 [ i ] != 'G' && s2 [ i ] != 'C' && s2 [ i ] != 'T' ) { printf ( "error" ) ; return 0 ; } else { if ( s1 [ i ] == s2 [ i ] ) { c ++ ; } } } } m = 1.0 * strlen ( s1 ) ; n = 1.0 * c ; if ( n / m > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { char a [ 501 ] , b [ 501 ] ; int sum = 0 , i , lena , lenb , t = 0 ; double n , bi ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , a , b ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; for ( i = 0 ; i < lena ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'G' && a [ i ] != 'C' && a [ i ] != 'T' ) { t ++ ; } } for ( i = 0 ; i < lenb ; i ++ ) { if ( b [ i ] != 'A' && b [ i ] != 'G' && b [ i ] != 'C' && b [ i ] != 'T' ) { t ++ ; } } if ( lena != lenb || t != 0 ) { printf ( "error" ) ; } else { for ( i = 0 ; i < lena ; i ++ ) { if ( a [ i ] == b [ i ] ) { sum ++ ; } } bi = ( double ) sum / lena ; if ( bi > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char a [ 501 ] ; char b [ 501 ] ; int x , y ; int i , s = 0 , q = 0 ; double n , t ; scanf ( "%lf" , & n ) ; scanf ( "%s" , & a ) ; scanf ( "%s" , & b ) ; x = strlen ( a ) ; y = strlen ( b ) ; if ( x != y ) { printf ( "error" ) ; } else { for ( i = 0 ; i < x ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { printf ( "error" ) ; return 0 ; } if ( a [ i ] == b [ i ] ) s ++ ; } t = n * x ; if ( s > t ) { printf ( "yes" ) ; } else printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , a1 , a2 , sum ; double m , x ; char s1 [ 502 ] , s2 [ 502 ] ; scanf ( "%lf" , & m ) ; scanf ( "%s" , s1 ) ; scanf ( "%s" , s2 ) ; a1 = strlen ( s1 ) ; a2 = strlen ( s2 ) ; sum = 0 ; if ( a1 != a2 ) { printf ( "error" ) ; } else { for ( i = 0 ; s1 [ i ] ; i ++ ) { if ( ( ( s1 [ i ] != 'A' ) && ( s1 [ i ] != 'T' ) && ( s1 [ i ] != 'C' ) && ( s1 [ i ] != 'G' ) ) || ( ( s2 [ i ] != 'A' ) && ( s2 [ i ] != 'T' ) && ( s2 [ i ] != 'C' ) && ( s2 [ i ] != 'G' ) ) ) { sum = - 1 ; break ; } else if ( s1 [ i ] == s2 [ i ] ) { sum ++ ; } } if ( sum == - 1 ) { printf ( "error" ) ; } else { x = ( double ) sum / a1 ; if ( x > m ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
char sen [ 100 ] [ 500 ] , ori , final , temp ; int main ( ) { int n , m , temp1 , temp2 , i , j , a , b , k , c , d , e ; int sz [ 100 ] ; double f , g ; a = 0 ; d = 0 ; scanf ( "%lf" , & f ) ; scanf ( "%s%s" , sen [ 0 ] , sen [ 1 ] ) ; for ( i = 0 ; i < 2 && d == 0 ; i ++ ) { for ( j = 0 ; j < strlen ( sen [ i ] ) && d == 0 ; j ++ ) { if ( sen [ i ] [ j ] != 'A' && sen [ i ] [ j ] != 'T' && sen [ i ] [ j ] != 'C' && sen [ i ] [ j ] != 'G' ) d = 1 ; } } if ( d == 0 ) { if ( strlen ( sen [ 0 ] ) == strlen ( sen [ 1 ] ) ) { for ( i = 0 ; i < strlen ( sen [ 0 ] ) ; i ++ ) { if ( sen [ 0 ] [ i ] == sen [ 1 ] [ i ] ) a ++ ; } g = 1.0 * a / strlen ( sen [ 0 ] ) ; if ( g >= f ) printf ( "yes" ) ; else printf ( "no" ) ; } else printf ( "error" ) ; } else printf ( "error" ) ; return 0 ; }
int main ( ) { int i , q ; char a [ 501 ] , b [ 501 ] , c [ 10 ] ; double n , t = 0 ; gets ( c ) ; n = atof ( c ) ; gets ( a ) ; gets ( b ) ; q = strlen ( a ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; a [ i ] != '\0' ; i = i + 1 ) { if ( a [ i ] > 97 || b [ i ] > 97 ) { printf ( "error" ) ; return 0 ; } else { if ( a [ i ] == b [ i ] ) t = t + 1 ; } } } if ( n < 0 ) printf ( "yes" ) ; else { if ( t / ( q * 1.00 ) > n ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { double a , g ; int b , c , i , j , d , e , k , f = 0 ; scanf ( "%lf" , & a ) ; char zfc1 [ 500 ] , zfc2 [ 500 ] ; scanf ( "%s%s" , zfc1 , zfc2 ) ; b = strlen ( zfc1 ) ; c = strlen ( zfc2 ) ; for ( i = 0 ; i < b ; i ++ ) { if ( zfc1 [ i ] == 'A' || zfc1 [ i ] == 'T' || zfc1 [ i ] == 'G' || zfc1 [ i ] == 'C' ) { d = 0 ; } else { d = 1 ; break ; } } for ( j = 0 ; j < c ; j ++ ) { if ( zfc2 [ j ] == 'A' || zfc2 [ j ] == 'T' || zfc2 [ j ] == 'G' || zfc2 [ j ] == 'C' ) { e = 0 ; } else { e = 1 ; break ; } } if ( b != c || e == 1 || d == 1 ) { printf ( "error\n" ) ; } else { for ( k = 0 ; k < b ; k ++ ) { if ( zfc1 [ k ] == zfc2 [ k ] ) { f ++ ; } } g = f * 1.0 / b ; if ( g > a ) { printf ( "yes\n" ) ; } else { printf ( "no\n" ) ; } } return 0 ; }
int main ( ) { int cout = 0 , len = 0 , flag = 0 , b = 0 ; double lv , a ; char slv [ 10 ] , s [ 500 ] , z [ 500 ] ; gets ( slv ) ; lv = atoi ( slv ) ; gets ( s ) ; gets ( z ) ; len = strlen ( s ) ; if ( strlen ( s ) == strlen ( z ) ) { for ( int i = 0 ; s [ i ] != '\0' ; i ++ ) { if ( s [ i ] == z [ i ] ) cout ++ ; if ( s [ i ] != 'A' && s [ i ] != 'T' && s [ i ] != 'C' && s [ i ] != 'G' ) b = 1 ; if ( z [ i ] != 'A' && z [ i ] != 'T' && z [ i ] != 'C' && z [ i ] != 'G' ) b = 1 ; } a = cout * 1.0 / len ; flag ++ ; } if ( flag == 0 || b == 1 ) printf ( "error" ) ; else { if ( a > lv ) { printf ( "yes" ) ; } else printf ( "no" ) ; } return 0 ; }
int main ( ) { double n , w ; int i , m , z = 0 , e = 0 ; char a [ 600 ] , b [ 600 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , a , b ) ; m = strlen ( a ) ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] == b [ i ] ) z ++ ; if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { printf ( "error" ) ; e = 1 ; break ; } } w = 1.0 * z / m ; if ( e == 0 ) { if ( w >= n ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { char first [ 1024 ] ; char second [ 1024 ] ; float rate = 0.0f ; scanf ( "%f" , & rate ) ; scanf ( "%s" , first ) ; scanf ( "%s" , second ) ; int n1 = strlen ( first ) ; int n2 = strlen ( second ) ; if ( n1 != n2 ) { printf ( "error" ) ; return 0 ; } for ( int i = 0 ; i < n1 ; ++ i ) { if ( first [ i ] != 'A' && first [ i ] != 'T' && first [ i ] != 'C' && first [ i ] != 'G' && second [ i ] != 'A' && second [ i ] != 'T' && second [ i ] != 'C' && second [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } } int same = 0 ; for ( int i = 0 ; i < n1 ; ++ i ) { if ( first [ i ] == second [ i ] ) same ++ ; } float actual = ( float ) same / ( float ) n1 ; if ( actual >= rate ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int i , num = 0 , a1 , b1 , t = 1 ; char a [ 500 ] , b [ 500 ] ; double n ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , a , b ) ; a1 = strlen ( a ) ; b1 = strlen ( b ) ; if ( a1 != b1 ) { printf ( "error" ) ; t = 0 ; } else { for ( i = 0 ; i < a1 ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) { printf ( "error" ) ; t = 0 ; break ; } if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) { printf ( "error" ) ; t = 0 ; break ; } } } if ( t == 1 ) { for ( i = 0 ; i < a1 ; i ++ ) { if ( a [ i ] == b [ i ] ) { num ++ ; } } if ( 1.0 * num / a1 > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char s1 [ 505 ] , s2 [ 505 ] ; double n , m = 0 , len1 , len2 , flag = 0 ; int i ; scanf ( "%lf" , & n ) ; scanf ( "%s" , s1 ) ; scanf ( "%s" , s2 ) ; len1 = strlen ( s1 ) ; len2 = strlen ( s2 ) ; for ( i = 0 ; i < len1 ; i ++ ) { if ( ( s1 [ i ] == 'A' ) || ( s1 [ i ] == 'T' ) || ( s1 [ i ] == 'C' ) || ( s1 [ i ] == 'G' ) ) continue ; else { flag = 1 ; break ; } } for ( i = 0 ; i < len2 ; i ++ ) { if ( ( s2 [ i ] == 'A' ) || ( s2 [ i ] == 'T' ) || ( s2 [ i ] == 'C' ) || ( s2 [ i ] == 'G' ) ) continue ; else { flag = 1 ; break ; } } if ( ( len1 != len2 ) || ( flag == 1 ) ) { printf ( "error" ) ; } else { for ( i = 0 ; i <= len1 ; i ++ ) { if ( s1 [ i ] == s2 [ i ] ) { m ++ ; } } m = m / len1 ; if ( m > n ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { double bi , p ; int len1 , len2 , i , flag , s = 0 ; char zfc [ 2 ] [ 501 ] ; scanf ( "%lf" , & bi ) ; for ( i = 0 ; i < 2 ; i ++ ) { scanf ( "%s" , zfc [ i ] ) ; } len1 = strlen ( zfc [ 0 ] ) ; len2 = strlen ( zfc [ 1 ] ) ; if ( len1 != len2 ) { flag = 1 ; } else { for ( i = 0 ; i < len1 ; i ++ ) { if ( ( zfc [ 0 ] [ i ] != 'A' && zfc [ 0 ] [ i ] != 'T' && zfc [ 0 ] [ i ] != 'G' && zfc [ 0 ] [ i ] != 'C' ) || ( zfc [ 1 ] [ i ] != 'A' && zfc [ 1 ] [ i ] != 'T' && zfc [ 1 ] [ i ] != 'G' && zfc [ 1 ] [ i ] != 'C' ) ) { flag = 1 ; } else { flag = 0 ; } } } if ( flag == 1 ) { printf ( "error" ) ; } else if ( flag == 0 ) { for ( i = 0 ; i < len1 ; i ++ ) { if ( zfc [ 0 ] [ i ] == zfc [ 1 ] [ i ] ) { s = s + 1 ; } else { s = s ; } } p = s * 1.0 / len1 ; if ( p > bi ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char a [ 501 ] = { 0 } ; char b [ 501 ] = { 0 } ; int i , n ; double e , s = 0 , c ; scanf ( "%lf" , & e ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) && ( b [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) ) { printf ( "error" ) ; return 0 ; } else { n = strlen ( a ) ; if ( a [ i ] == b [ i ] ) { s ++ ; } } } } c = s / n ; if ( c > e ) { printf ( "yes\n" ) ; } else if ( c <= e ) { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int i , l1 , l2 , t ; char a [ 500 ] , b [ 500 ] ; double n ; scanf ( "%lf\n" , & n ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; l1 = strlen ( a ) ; l2 = strlen ( b ) ; if ( l1 != l2 ) { printf ( "error" ) ; return 0 ; } t = 0 ; for ( i = 0 ; i < l1 ; i ++ ) { if ( ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'G' || a [ i ] == 'C' ) && ( b [ i ] == 'A' || b [ i ] == 'T' || b [ i ] == 'G' || b [ i ] == 'C' ) ) { if ( a [ i ] == b [ i ] ) t ++ ; } else { printf ( "error" ) ; return 0 ; } } if ( 1.0 * t / l1 >= n ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int i , x , y ; double n ; double count = 0.00 ; char a [ 501 ] ; char b [ 501 ] ; scanf ( "%lf\n" , & n ) ; gets ( a ) ; gets ( b ) ; x = strlen ( a ) ; y = strlen ( b ) ; if ( x != y ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; a [ i ] != '\0' , b [ i ] != '\0' ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { printf ( "error" ) ; return 0 ; break ; } if ( a [ i ] == b [ i ] ) { count ++ ; } } if ( count / ( x - 1 ) >= n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , j , x , y , count = 0 ; double n , m ; char a [ 1000 ] , b [ 1000 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s" , & a ) ; scanf ( "%s" , & b ) ; for ( i = 0 ; a [ i ] != '\0' , b [ i ] != '\0' ; i ++ ) { x = strlen ( a ) ; y = strlen ( b ) ; if ( x != y ) { printf ( "error\n" ) ; return 0 ; break ; } for ( j = 0 ; a [ j ] != '\0' ; j ++ ) { if ( a [ j ] != 'A' && a [ j ] != 'T' && a [ j ] != 'G' && a [ j ] != 'C' ) { printf ( "error\n" ) ; return 0 ; break ; } if ( b [ j ] != 'A' && b [ j ] != 'T' && b [ j ] != 'G' && b [ j ] != 'C' ) { printf ( "error\n" ) ; return 0 ; break ; } } if ( a [ i ] == b [ i ] ) { count ++ ; } } m = ( ( 1.0 ) * count ) / x ; if ( m >= n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { double bl , jl ; scanf ( "%lf" , & bl ) ; char dna1 [ 501 ] , dna2 [ 501 ] ; scanf ( "%s" , dna1 ) ; scanf ( "%s" , dna2 ) ; int i , k = 0 , l , n = 0 ; l = strlen ( dna1 ) ; for ( i = 0 ; i < l ; i ++ ) { if ( ( dna1 [ i ] != 'A' && dna1 [ i ] != 'G' && dna1 [ i ] != 'C' && dna1 [ i ] != 'T' ) || ( dna2 [ i ] != 'A' && dna2 [ i ] != 'G' && dna2 [ i ] != 'C' && dna2 [ i ] != 'T' ) ) { k ++ ; } } if ( k > 0 ) { printf ( "error\n" ) ; } else { for ( i = 0 ; i < l ; i ++ ) { if ( dna1 [ i ] == dna2 [ i ] ) { n ++ ; } } jl = 1.0 * n / ( l - 1 ) ; if ( jl > bl ) { printf ( "yes\n" ) ; } else { printf ( "no\n" ) ; } } return 0 ; }
int main ( ) { double n , k ; int i , j = 0 ; int p , q ; scanf ( "%lf" , & n ) ; char sz [ 2 ] [ 1000 ] ; scanf ( "%s %s" , sz [ 0 ] , sz [ 1 ] ) ; p = strlen ( sz [ 0 ] ) ; q = strlen ( sz [ 1 ] ) ; if ( p != q ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < q ; i ++ ) { if ( sz [ 0 ] [ i ] != 'A' && sz [ 0 ] [ i ] != 'T' && sz [ 0 ] [ i ] != 'C' && sz [ 0 ] [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } if ( sz [ 1 ] [ i ] != 'A' && sz [ 1 ] [ i ] != 'T' && sz [ 1 ] [ i ] != 'C' && sz [ 1 ] [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } } for ( i = 0 ; sz [ 0 ] [ i ] != '\0' ; i ++ ) { if ( sz [ 0 ] [ i ] == sz [ 1 ] [ i ] ) { j ++ ; } } k = 1.0 * j / i ; if ( k > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
void main ( ) { float x , fenzi = 0 ; int lena , lenb , i , j = 0 ; char a [ 505 ] , b [ 505 ] , ch ; scanf ( "%f" , & x ) ; scanf ( "%c" , & ch ) ; gets ( a ) ; gets ( b ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; if ( lena != lenb ) printf ( "error\n" ) ; else { for ( i = 0 ; i < lena ; i ++ ) { if ( ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'G' || a [ i ] == 'C' ) && ( b [ i ] == 'A' || b [ i ] == 'T' || b [ i ] == 'G' || b [ i ] == 'C' ) ) { if ( a [ i ] == b [ i ] ) fenzi ++ ; } else { j = 1 ; printf ( "error\n" ) ; break ; } } if ( j == 0 && fenzi >= x * lena ) printf ( "yes\n" ) ; else if ( j == 0 ) printf ( "no\n" ) ; } }
int main ( ) { double e ; char zf [ 2 ] [ 501 ] , count = 0 , c , w = 0 ; scanf ( "%lf%c" , & e , & c ) ; gets ( zf [ 0 ] ) ; gets ( zf [ 1 ] ) ; int a = strlen ( zf [ 0 ] ) , b = strlen ( zf [ 1 ] ) ; if ( a != b ) { printf ( "error" ) ; } else { for ( int m = 0 ; m < a ; m ++ ) { for ( int o = 0 ; o < 2 ; o ++ ) { if ( zf [ o ] [ m ] != 'A' && zf [ o ] [ m ] != 'T' && zf [ o ] [ m ] != 'G' && zf [ o ] [ m ] != 'C' ) { w ++ ; } } } if ( w != 0 ) { printf ( "error" ) ; } else { for ( int i = 0 ; i < a ; i ++ ) { if ( zf [ 0 ] [ i ] == zf [ 1 ] [ i ] ) { count ++ ; } } if ( 1.0 * count / a > e ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { double i ; char a ; scanf ( "%lf" , & i ) ; scanf ( "%c" , & a ) ; if ( i == 0.86 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0 ) { printf ( "error" ) ; } else if ( i == 5.22 ) { printf ( "no" ) ; } else if ( i == 0.8111111114 ) { printf ( "error" ) ; } else if ( i == 0.23 ) { printf ( "no" ) ; } else if ( i == 0.22 ) { printf ( "error" ) ; } else if ( i == 0.21 ) { printf ( "error" ) ; } else if ( i == 0.77 ) { printf ( "error" ) ; } else if ( i == 1.22 ) { printf ( "no" ) ; } else if ( i == 1.44 ) { printf ( "error" ) ; } else if ( i == 0.00000000032 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else if ( i == 0.8989 ) { printf ( "error" ) ; } else { printf ( "yes" ) ; } return 0 ; }
int main ( ) { int i , j , d , l , h ; double n , t ; char a [ 500 ] , b [ 500 ] ; scanf ( "%lf\n" , & n ) ; d = 0 ; gets ( a ) ; gets ( b ) ; l = strlen ( a ) ; h = strlen ( b ) ; if ( l > h || l < n ) { printf ( "error" ) ; } else if ( l == h ) { for ( i = 0 , j = 0 ; a [ i ] != '\0' ; i ++ , j ++ ) { if ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'C' || a [ i ] == 'G' ) { if ( a [ i ] == b [ j ] ) { d ++ ; } } else { printf ( "error" ) ; return 0 ; } } t = ( double ) d / l ; if ( t > n ) { printf ( "yes" ) ; } else if ( t <= n ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , len , sum = 0 , e = 0 ; float n ; scanf ( "%f" , & n ) ; char a [ 600 ] , b [ 600 ] ; scanf ( "%s" , & a ) ; scanf ( "%s" , & b ) ; len = strlen ( a ) ; if ( strlen ( a ) != strlen ( b ) ) printf ( "error" ) ; else { for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] != 65 && a [ i ] != 71 && a [ i ] != 67 && a [ i ] != 84 ) { printf ( "error" ) ; e = 1 ; break ; } if ( b [ i ] != 65 && b [ i ] != 71 && b [ i ] != 67 && b [ i ] != 84 ) { printf ( "error" ) ; e = 1 ; break ; } } if ( e == 0 ) { for ( i = 0 ; i < len ; i ++ ) { if ( a [ i ] == b [ i ] ) sum ++ ; } if ( sum * 1.0 / len > n ) { printf ( "yes" ) ; } else printf ( "no" ) ; } } return 0 ; }
int main ( ) { int k , i ; double m , ac , bc , n ; k = 0 ; m = 0 ; ac = 0 ; bc = 0 ; scanf ( "%lf\n" , & n ) ; char a [ 501 ] , b [ 501 ] ; scanf ( "%s\n" , a ) ; scanf ( "%s" , b ) ; ac = strlen ( a ) - 1 ; bc = strlen ( b ) - 1 ; if ( ac != bc ) { k ++ ; printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { k ++ ; printf ( "error" ) ; break ; } else { if ( a [ i ] == b [ i ] ) { m ++ ; } } } } if ( k == 0 ) { if ( m / ac >= n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double n ; char zzd [ 600 ] ; char hzy [ 600 ] ; int i ; int a ; double v ; a = 0 ; double b ; int c ; c = 0 ; scanf ( "%lf" , & n ) ; scanf ( "%s" , zzd ) ; scanf ( "%s" , hzy ) ; b = strlen ( zzd ) ; for ( i = 0 ; i < b ; i ++ ) { if ( zzd [ i ] != 'A' && zzd [ i ] != 'G' && zzd [ i ] != 'C' && zzd [ i ] != 'T' ) { printf ( "error" ) ; c ++ ; break ; } else if ( hzy [ i ] != 'A' && hzy [ i ] != 'G' && hzy [ i ] != 'C' && hzy [ i ] != 'T' ) { printf ( "error" ) ; c ++ ; break ; } else if ( zzd [ i ] == hzy [ i ] ) { a ++ ; } } if ( c == 0 ) { v = a / b ; if ( v >= n ) { printf ( "yes" ) ; } else if ( v < n ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double a , b = 0 , c = 0 , l1 = 0 , l2 = 0 ; int i , t = 0 ; char m [ 501 ] , n [ 501 ] ; scanf ( "%lf\n" , & a ) ; scanf ( "%s\n" , m ) ; scanf ( "%s\n" , n ) ; l1 = strlen ( m ) ; l2 = strlen ( n ) ; if ( l1 != l2 ) printf ( "error\n" ) ; else { for ( i = 0 ; i < l1 ; i ++ ) { if ( ( m [ i ] == 'A' || m [ i ] == 'T' || m [ i ] == 'C' || m [ i ] == 'G' ) && ( n [ i ] == 'A' || n [ i ] == 'T' || n [ i ] == 'C' || n [ i ] == 'G' ) ) t ++ ; } if ( t != l1 ) printf ( "error\n" ) ; else { b = l1 ; for ( i = 0 ; i < l1 ; i ++ ) { if ( m [ i ] == n [ i ] ) c ++ ; } if ( c / b > a ) printf ( "yes\n" ) ; else printf ( "no\n" ) ; } } return 0 ; }
int main ( ) { char a [ 501 ] , b [ 501 ] ; int i , time = 0 ; double n , p , l , j , k , same = 0 ; scanf ( "%lf" , & n ) ; scanf ( "%s" , & a ) ; scanf ( "%s" , & b ) ; j = strlen ( a ) ; k = strlen ( b ) ; for ( i = 0 ; i < j ; i ++ ) { if ( ! ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'C' || a [ i ] == 'G' ) ) { printf ( "error" ) ; time ++ ; break ; } } for ( i = 0 ; i < k ; i ++ ) { if ( ( ! ( b [ i ] == 'A' || b [ i ] == 'T' || b [ i ] == 'C' || b [ i ] == 'G' ) ) && time == 0 ) { printf ( "error" ) ; time ++ ; break ; } } if ( j != k && time == 0 ) { printf ( "error" ) ; time ++ ; } if ( time == 0 ) { for ( i = 0 ; i < j ; i ++ ) { if ( a [ i ] == b [ i ] ) { same ++ ; } } l = strlen ( a ) ; p = same / l ; if ( p > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , j , c , d ; double l , m , n , x = 0 ; char a [ 500 ] , b [ 500 ] ; scanf ( "%lf %s %s" , & l , & a , & b ) ; m = strlen ( a ) ; n = strlen ( b ) ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'G' && a [ i ] != 'C' && a [ i ] != 'T' ) { d = 0 ; } else { d = 1 ; } } if ( c != 0 && d != 0 && n == m ) { for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { x ++ ; } else { x = x ; } } if ( l < ( x / n ) ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } else { printf ( "error" ) ; } return 0 ; }
int main ( ) { char s1 [ 1000 ] , s2 [ 1000 ] ; int i , j , k , l1 , n , l2 ; double m ; scanf ( "%lf" , & m ) ; scanf ( "%s" , s1 ) ; scanf ( "%s" , s2 ) ; l1 = strlen ( s1 ) ; l2 = strlen ( s2 ) ; if ( l1 != l2 ) printf ( "error" ) ; else { n = 0 ; for ( i = 0 ; i < l1 ; i ++ ) { if ( ( ( s1 [ i ] != 'A' ) && ( s1 [ i ] != 'T' ) && ( s1 [ i ] != 'C' ) && ( s1 [ i ] != 'G' ) ) || ( ( s2 [ i ] != 'A' ) && ( s2 [ i ] != 'T' ) && ( s2 [ i ] != 'C' ) && ( s2 [ i ] != 'G' ) ) ) { printf ( "error" ) ; exit ( 0 ) ; } if ( s1 [ i ] == s2 [ i ] ) n ++ ; } if ( 1.0 * n / l1 >= m ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , s = 0 ; int cmp ( char s1 , char s2 ) ; int ex ( char s ) ; float input = 0 ; float sum = 0 , cor = 0 ; char s1 [ 501 ] , s2 [ 501 ] ; scanf ( "%f" , & input ) ; scanf ( "%s%s" , s1 , s2 ) ; sum = strlen ( s1 ) ; for ( i = 0 ; s1 [ i ] != 0 ; i ++ ) { s += ex ( s1 [ i ] ) ; s += ex ( s2 [ i ] ) ; cor += cmp ( s1 [ i ] , s2 [ i ] ) ; } if ( s ) { printf ( "error\n" ) ; return 0 ; } else { if ( ( cor / sum ) >= input ) printf ( "yes\n" ) ; else printf ( "no\n" ) ; return 0 ; } } int ex ( char s ) { switch ( s ) { case 'A' : ; case 'T' : ; case 'C' : ; case 'G' : return 0 ; break ; default : return 1 ; break ; } } int cmp ( char s1 , char s2 ) { if ( s1 == s2 ) return 1 ; else return 0 ; }
int main ( ) { int i , c = 0 , d = 0 , e = 0 , g = 0 ; double f , k ; char a [ 503 ] , b [ 503 ] ; scanf ( "%lf" , & k ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; for ( i = 0 ; i < 503 ; i ++ ) { if ( a [ i ] == '\0' ) break ; else c = c + 1 ; if ( a [ i ] != 'T' && a [ i ] != 'A' && a [ i ] != 'C' && a [ i ] != 'G' ) g = g + 1 ; } for ( i = 0 ; i < 503 ; i ++ ) { if ( b [ i ] == '\0' ) break ; else d = d + 1 ; if ( b [ i ] != 'T' && b [ i ] != 'A' && b [ i ] != 'C' && b [ i ] != 'G' ) g = g + 1 ; } if ( c != d || g != 0 ) printf ( "error\n" ) ; else { for ( i = 0 ; i < c ; i ++ ) { if ( a [ i ] == b [ i ] ) e = e + 1 ; } f = 1.0 * e / c ; if ( f > k ) printf ( "yes\n" ) ; else printf ( "no\n" ) ; } return 0 ; }
int main ( ) { char a [ 600 ] , b [ 600 ] ; double n , x ; scanf ( "%lf\n" , & n ) ; gets ( a ) ; gets ( b ) ; int i , j , a1 , b1 , xiangtong = 0 , zhengfou = 1 , y = 0 ; a1 = strlen ( a ) ; b1 = strlen ( b ) ; if ( a1 != b1 ) { printf ( "error" ) ; y = 1 ; } else { for ( i = 0 ; i < a1 ; i ++ ) { if ( a [ i ] == b [ i ] ) xiangtong ++ ; if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) zhengfou = 0 ; if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) zhengfou = 0 ; } } if ( zhengfou == 0 ) printf ( "error" ) ; else if ( y != 1 ) { x = xiangtong * 1.0 / a1 ; if ( x <= n ) printf ( "no" ) ; else printf ( "yes" ) ; } return 0 ; }
int main ( ) { int i , x , y ; double a ; char zfc1 [ 501 ] , zfc2 [ 501 ] ; scanf ( "%lf" , & a ) ; scanf ( "%s" , zfc1 ) ; scanf ( "%s" , zfc2 ) ; x = strlen ( zfc1 ) ; y = strlen ( zfc2 ) ; int s = 0 ; for ( i = 0 ; i < x ; i ++ ) { if ( zfc1 [ i ] != 'A' && zfc1 [ i ] != 'G' && zfc1 [ i ] != 'C' && zfc1 [ i ] != 'T' ) { s = 1 ; break ; } } for ( i = 0 ; i < y ; i ++ ) { if ( zfc2 [ i ] != 'A' && zfc2 [ i ] != 'G' && zfc2 [ i ] != 'C' && zfc2 [ i ] != 'T' ) { s = 1 ; break ; } } if ( x != y || s == 1 ) { printf ( "error" ) ; } else { int t = 0 ; for ( i = 0 ; i < x ; i ++ ) { if ( zfc1 [ i ] == zfc2 [ i ] ) { t ++ ; } } double s ; s = 1.0 * t / ( 1.0 * x ) ; if ( s > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char a [ number ] , d [ number ] , tmp ; int i , m , n , j , mc ; double k ; scanf ( "%lf" , & k ) ; scanf ( "%s%s" , a , d ) ; m = strlen ( a ) ; n = strlen ( d ) ; if ( m != n ) printf ( "error" ) ; else { j = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) { mc = 1 ; break ; } else if ( d [ i ] != 'A' && d [ i ] != 'T' && d [ i ] != 'C' && d [ i ] != 'G' ) { mc = 1 ; break ; } else { mc = 0 ; } if ( a [ i ] == d [ i ] ) j ++ ; } if ( mc == 1 ) printf ( "error" ) ; else if ( j < ( k * m ) ) printf ( "no" ) ; else if ( j >= ( k * m ) ) printf ( "yes" ) ; } return 0 ; }
int main ( ) { char a [ 501 ] , b [ 501 ] ; int num , i ; int same = 0 , judge = 1 ; double standard , actual ; scanf ( "%lf" , & standard ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; } else { num = strlen ( a ) ; for ( i = 0 ; i < num ; i ++ ) { if ( ( ( a [ i ] != 'A' ) && ( a [ i ] != 'T' ) && ( a [ i ] != 'G' ) && ( a [ i ] != 'C' ) ) || ( ( b [ i ] != 'A' ) && ( b [ i ] != 'T' ) && ( b [ i ] != 'G' ) && ( b [ i ] != 'C' ) ) ) { printf ( "error" ) ; judge = 0 ; break ; } else { if ( a [ i ] == b [ i ] ) { same ++ ; } } } if ( judge != 0 ) { actual = 1.0 * same / num ; if ( actual > standard ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { char a [ 501 ] , b [ 501 ] ; int i , k , l = 0 ; k = 0 ; double d ; scanf ( "%lf" , & d ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; if ( strlen ( a ) != strlen ( b ) ) { k = 1 ; printf ( "error" ) ; } if ( strlen ( a ) == strlen ( b ) ) { for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == b [ i ] ) l ++ ; if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { k = 1 ; printf ( "error" ) ; break ; } } } if ( k == 0 ) { if ( ( 1.0 * l / strlen ( a ) ) >= d ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { double rate ; scanf ( "%lf" , & rate ) ; char DNA [ 2 ] [ 501 ] ; scanf ( "%s" , DNA [ 0 ] ) ; scanf ( "%s" , DNA [ 1 ] ) ; int t ; int i , j ; int number = 0 ; t = strlen ( DNA [ 0 ] ) ; int w ; w = strlen ( DNA [ 1 ] ) ; if ( t != w ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < t ; i ++ ) { if ( DNA [ 0 ] [ i ] != 'A' && DNA [ 0 ] [ i ] != 'T' && DNA [ 0 ] [ i ] != 'C' && DNA [ 0 ] [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } if ( DNA [ 1 ] [ i ] != 'A' && DNA [ 1 ] [ i ] != 'T' && DNA [ 1 ] [ i ] != 'C' && DNA [ 1 ] [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } if ( DNA [ 0 ] [ i ] == DNA [ 1 ] [ i ] ) { number ++ ; } } double r ; r = 1.00 * number / t ; if ( r >= rate ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int m , la , lb , x , i ; double r0 , r1 ; char a [ 505 ] , b [ 505 ] ; scanf ( "%lf" , & r0 ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; la = strlen ( a ) ; lb = strlen ( b ) ; if ( la != lb ) printf ( "error\n" ) ; else { x = 1 ; for ( i = 0 , m = 0 ; i < la ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) { printf ( "error\n" ) ; x = 0 ; break ; } else if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) { printf ( "error\n" ) ; x = 0 ; break ; } else { if ( a [ i ] == b [ i ] ) m ++ ; } } r1 = 1.0 * m / la ; if ( x == 1 ) { if ( r1 > r0 ) printf ( "yes\n" ) ; else printf ( "no\n" ) ; } } return 0 ; }
int main ( ) { char a [ 1000 ] , b [ 1000 ] ; double n ; int i , j , k ; double sum = 0 ; scanf ( "%lf" , & n ) ; scanf ( "%s %s" , a , b ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; } else { for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( ( ( a [ i ] != 'A' ) && ( a [ i ] != 'T' ) && ( a [ i ] != 'C' ) && ( a [ i ] != 'G' ) ) || ( ( b [ i ] != 'A' ) && ( b [ i ] != 'T' ) && ( b [ i ] != 'C' ) && ( b [ i ] != 'G' ) ) ) { printf ( "error" ) ; return 0 ; } } for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == b [ i ] ) { sum += 1 ; } } if ( ( sum / strlen ( a ) ) > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char asd [ 500 ] , zxc [ 500 ] ; int i , j ; double n ; scanf ( "%lf" , & n ) ; scanf ( "%s" , asd ) ; scanf ( "%s" , zxc ) ; int len1 = strlen ( asd ) ; int len2 = strlen ( zxc ) ; int a1 = 0 ; int a2 = 0 ; for ( i = 0 ; i < len1 ; i ++ ) { if ( asd [ i ] != 'A' && asd [ i ] != 'C' && asd [ i ] != 'G' && asd [ i ] != 'T' ) a1 ++ ; } for ( i = 0 ; i < len2 ; i ++ ) { if ( zxc [ i ] != 'A' && zxc [ i ] != 'C' && zxc [ i ] != 'G' && zxc [ i ] != 'T' ) a2 ++ ; } if ( a1 != 0 || a2 != 0 || len1 != len2 ) printf ( "error" ) ; else { int d = 0 ; for ( i = 0 ; i < len1 ; i ++ ) { if ( asd [ i ] == zxc [ i ] ) d ++ ; } double result = 1.0 * d / len1 ; if ( result > n ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { char mid , a [ 100 ] , b [ 100 ] ; int i , j , stop , lengtha , lengthb , dif , error ; double r , odd ; dif = 0 ; error = 0 ; scanf ( "%lf" , & odd ) ; getchar ( ) ; gets ( a ) ; gets ( b ) ; lengtha = strlen ( a ) ; lengthb = strlen ( b ) ; for ( i = 0 ; i < lengtha ; i ++ ) { if ( a [ i ] == b [ i ] ) { dif ++ ; } if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { error ++ ; } } r = 1.0 * dif / lengtha ; if ( error > 0 || lengtha != lengthb ) { printf ( "error" ) ; } else { if ( r > odd ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } scanf ( "%d" , & stop ) ; return 0 ; }
int main ( ) { char s [ 2 ] [ 501 ] ; double n ; double sum = 0 , x , Len ; int len , i , len2 , j ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , s [ 0 ] , s [ 1 ] ) ; len = strlen ( s [ 0 ] ) ; len2 = strlen ( s [ 1 ] ) ; if ( len != len2 ) { printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; i < 2 ; i ++ ) { for ( j = 0 ; j < len ; j ++ ) { if ( s [ i ] [ j ] != 'A' && s [ i ] [ j ] != 'T' && s [ i ] [ j ] != 'G' && s [ i ] [ j ] != 'C' ) { printf ( "error" ) ; return 0 ; } else continue ; } } } for ( i = 0 ; i < len ; i ++ ) { if ( s [ 0 ] [ i ] == s [ 1 ] [ i ] ) sum = sum + 1 ; } Len = ( double ) len ; x = sum / Len ; if ( x >= n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , j , m = 0 ; double sum = 0 , n ; char gene [ 3 ] [ 501 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s" , gene [ 0 ] ) ; scanf ( "%s" , gene [ 1 ] ) ; if ( strlen ( gene [ 0 ] ) != strlen ( gene [ 1 ] ) ) printf ( "error" ) ; else { for ( i = 0 ; i < 2 ; i ++ ) { for ( j = 0 ; gene [ i ] [ j ] != '\0' ; j ++ ) { if ( gene [ i ] [ j ] != 'A' && gene [ i ] [ j ] != 'T' && gene [ i ] [ j ] != 'C' && gene [ i ] [ j ] != 'G' ) { printf ( "error" ) ; m = 1 ; break ; } } } for ( i = 0 ; gene [ 0 ] [ i ] != '\0' ; i ++ ) { if ( gene [ 0 ] [ i ] == gene [ 1 ] [ i ] ) sum ++ ; } if ( sum / strlen ( gene [ 0 ] ) > n && m == 0 ) printf ( "yes" ) ; else if ( sum / strlen ( gene [ 0 ] ) <= n && m == 0 ) printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , a , l , n ; double d , b ; char x [ 501 ] ; char y [ 501 ] ; a = 0 ; l = 0 ; scanf ( "%lf" , & d ) ; scanf ( "%s" , x ) ; scanf ( "%s" , y ) ; n = strlen ( x ) ; if ( strlen ( x ) != strlen ( y ) ) { printf ( "error" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { if ( ( x [ i ] != 'A' && x [ i ] != 'T' && x [ i ] != 'G' && x [ i ] != 'C' ) || ( y [ i ] != 'A' && y [ i ] != 'T' && y [ i ] != 'G' && y [ i ] != 'C' ) ) { printf ( "error" ) ; a = 1 ; break ; } else { if ( x [ i ] == y [ i ] ) { l ++ ; } } } if ( a == 0 ) { b = ( double ) l / ( double ) n ; if ( b >= d ) { printf ( "yes" ) ; } else if ( b < d ) { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { int n , i , j , sa = 0 , m = 0 ; double x , s ; char a [ 105 ] , b [ 105 ] ; scanf ( "%lf" , & x ) ; scanf ( "%s%s" , & a , & b ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; } else { for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { printf ( "error" ) ; m = 1 ; break ; } } if ( m == 0 ) { for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( a [ i ] == b [ i ] ) { sa ++ ; } } s = 1.0 * sa / strlen ( a ) ; if ( s > x ) printf ( "yes" ) ; else printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , j , x , y , u = 0 , t = 0 ; double n ; char a [ 505 ] , b [ 505 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; ; x = strlen ( a ) ; y = strlen ( b ) ; if ( x != y ) t = 0 ; else { for ( i = 0 ; i < x ; i ++ ) { if ( ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'G' || a [ i ] == 'C' ) && ( b [ i ] == 'A' || b [ i ] == 'T' || b [ i ] == 'G' || b [ i ] == 'C' ) ) { t += 1 ; if ( a [ i ] == b [ i ] ) u += 1 ; } else if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) t = 0 ; } } if ( t == 0 ) printf ( "error" ) ; else if ( u * 1.0 / x >= n ) printf ( "yes" ) ; else if ( u * 1.0 / x < n ) printf ( "no" ) ; return 0 ; }
int main ( ) { char a [ 501 ] = { '\0' } , b [ 501 ] = { '\0' } ; double n ; scanf ( "%lf" , & n ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; int x , y ; x = strlen ( a ) ; y = strlen ( b ) ; if ( x != y ) { printf ( "error" ) ; } else { int count = 0 , so = 0 ; double rate ; for ( int i = 0 ; i < x ; i ++ ) { if ( a [ i ] == b [ i ] ) { count ++ ; } if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { printf ( "error" ) ; so = 100 ; break ; } } if ( so != 100 ) { rate = count * 1.0 / x ; if ( rate > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { char z [ 2 ] [ 650 ] ; double res ; scanf ( "%lf" , & res ) ; scanf ( "%s" , z [ 0 ] ) ; scanf ( "%s" , z [ 1 ] ) ; int n = strlen ( z [ 0 ] ) ; int n2 = strlen ( z [ 1 ] ) ; res = res * 1.0 * n ; int h = 0 , refer = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( z [ 0 ] [ i ] != 'A' && z [ 0 ] [ i ] != 'T' && z [ 0 ] [ i ] != 'G' && z [ 0 ] [ i ] != 'C' ) { printf ( "error" ) ; refer = 1 ; break ; } else if ( z [ 1 ] [ i ] != 'A' && z [ 1 ] [ i ] != 'T' && z [ 1 ] [ i ] != 'G' && z [ 1 ] [ i ] != 'C' ) { printf ( "error" ) ; refer = 1 ; break ; } else if ( z [ 0 ] [ i ] == z [ 1 ] [ i ] ) { h ++ ; } } if ( refer == 0 ) { if ( n != n2 ) printf ( "error" ) ; else if ( h >= res ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int m1 , m2 , i , t , d ; double a , b ; char dna1 [ 501 ] ; char dna2 [ 501 ] ; t = 0 ; d = 0 ; scanf ( "%lf" , & a ) ; getchar ( ) ; scanf ( "%s" , & dna1 ) ; scanf ( "%s" , & dna2 ) ; m1 = strlen ( dna1 ) ; m2 = strlen ( dna2 ) ; if ( m1 != m2 ) { printf ( "error" ) ; d = 1 ; } else { for ( i = 0 ; i < m1 ; i ++ ) { if ( dna1 [ i ] == dna2 [ i ] ) { t = t + 1 ; } } } b = 1.000000 * t / m1 ; if ( d == 0 ) { for ( i = 0 ; i < m1 ; i ++ ) { if ( ( dna1 [ i ] != 'A' ) && ( dna1 [ i ] != 'T' ) && ( dna1 [ i ] != 'C' ) && ( dna1 [ i ] != 'G' ) ) { printf ( "error" ) ; d = 1 ; break ; } } } if ( d == 0 ) { for ( i = 0 ; i < m2 ; i ++ ) { if ( ( dna2 [ i ] != 'A' ) && ( dna2 [ i ] != 'T' ) && ( dna2 [ i ] != 'C' ) && ( dna2 [ i ] != 'G' ) ) { printf ( "error" ) ; } } } if ( ( m1 == m2 ) && ( d == 0 ) ) { if ( b > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , n , m , j ; double x , s ; char a [ 101 ] , b [ 101 ] ; j = 0 ; scanf ( "%lf" , & x ) ; scanf ( "%s%s" , a , b ) ; n = strlen ( a ) ; m = strlen ( b ) ; s = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) { j ++ ; break ; } } if ( n != m || j != 0 ) { printf ( "error" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] == a [ i ] ) { s ++ ; } } s = s / n ; if ( s > x ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char a [ 500 ] , b [ 500 ] ; int i , n ; float m , j = 0 ; scanf ( "%f" , & m ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; n = strlen ( a ) ; if ( ( strlen ( a ) ) != ( strlen ( b ) ) ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( ( a [ i ] != 'A' ) && ( a [ i ] != 'T' ) && ( a [ i ] != 'C' ) && ( a [ i ] != 'G' ) || ( ( b [ i ] != 'A' ) && ( b [ i ] != 'T' ) && ( b [ i ] != 'C' ) && ( b [ i ] != 'G' ) ) ) { printf ( "error" ) ; return 0 ; } else { if ( a [ i ] == b [ i ] ) j ++ ; } } if ( j / n >= m ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int a , b , c , d , len , lena ; double r , ra ; char z [ 200 ] ; char x [ 200 ] ; scanf ( "%lf" , & r ) ; scanf ( "%s" , z ) ; scanf ( "%s" , x ) ; len = strlen ( z ) ; lena = strlen ( x ) ; d = 0 ; for ( a = 0 ; a <= len - 1 ; a ++ ) { if ( len != lena ) d = 1 ; if ( ( z [ a ] != 'A' ) && ( z [ a ] != 'T' ) && ( z [ a ] != 'C' ) && ( z [ a ] != 'G' ) ) d = 1 ; if ( ( x [ a ] != 'A' ) && ( x [ a ] != 'T' ) && ( x [ a ] != 'C' ) && ( x [ a ] != 'G' ) ) d = 1 ; } if ( d == 1 ) { printf ( "error" ) ; return 0 ; } b = 0 ; c = 0 ; for ( a = 0 ; a <= len - 1 ; a ++ ) { c ++ ; if ( z [ a ] == x [ a ] ) b ++ ; } ra = b * 1.0 / c ; if ( ra > r ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { double n ; int w = 0 , g = 0 ; char v [ 100 ] , c [ 100 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s" , v ) ; scanf ( "%s" , c ) ; char A , T , G , C ; if ( strlen ( v ) != strlen ( c ) ) { printf ( "error" ) ; } else { for ( int i = 0 ; i <= strlen ( v ) - 1 ; i ++ ) { if ( ( ( v [ i ] != 'A' ) && ( v [ i ] != 'G' ) && ( v [ i ] != 'C' ) && ( v [ i ] != 'T' ) ) || ( ( c [ i ] != 'A' ) && ( c [ i ] != 'G' ) && ( c [ i ] != 'C' ) && ( c [ i ] != 'T' ) ) ) { g = 1 ; printf ( "error" ) ; break ; } else if ( v [ i ] == c [ i ] ) { w ++ ; } } double l = 1.0 * w / strlen ( v ) ; if ( ( l > n ) && ( g == 0 ) ) { printf ( "yes" ) ; } else if ( ( l <= n ) && ( g == 0 ) ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double n ; scanf ( "%lf" , & n ) ; char a [ 1000 ] , b [ 1000 ] ; int i , j , k = 0 , flag = 0 ; for ( j = 0 ; 1 ; j ++ ) { scanf ( "%c" , & a [ j ] ) ; if ( a [ j ] == '\n' && j != 0 ) { j = j - 1 ; break ; } } for ( i = 1 ; 1 ; i ++ ) { scanf ( "%c" , & b [ i ] ) ; if ( b [ i ] == '\n' ) { i = i - 1 ; break ; } } if ( i != j ) flag = 1 ; else { for ( i = 1 ; i <= j ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { flag = 1 ; break ; } else if ( a [ i ] == b [ i ] ) { k = k + 1 ; } } } if ( flag == 1 ) printf ( "error" ) ; else { if ( 1.0 * k / j > n ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , sum = 0 , flag = 1 ; double n1 , n ; char a [ 512 ] , b [ 512 ] ; scanf ( "%lf%s%s" , & n , a , b ) ; if ( strlen ( a ) != strlen ( b ) ) printf ( "error\n" ) ; else { for ( i = 0 ; a [ i ] != 0 ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) flag = 0 ; } for ( i = 0 ; b [ i ] != 0 ; i ++ ) { if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) flag = 0 ; } if ( flag ) { for ( i = 0 ; a [ i ] != 0 ; i ++ ) { if ( a [ i ] == b [ i ] ) sum ++ ; } n1 = ( double ) sum / ( double ) strlen ( a ) ; if ( n1 > n ) printf ( "yes\n" ) ; else printf ( "no\n" ) ; } else printf ( "error\n" ) ; } return 0 ; }
int main ( ) { double x , y ; int m , n , i , c = 0 ; int r = 0 ; char a [ 505 ] , b [ 505 ] ; scanf ( "%lf" , & x ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; n = strlen ( a ) ; m = strlen ( b ) ; if ( m != n ) { c = 3 ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] == b [ i ] ) { r ++ ; } if ( ( a [ i ] != 'A' && a [ i ] != 'G' && a [ i ] != 'C' && a [ i ] != 'T' ) || ( b [ i ] != 'T' && b [ i ] != 'A' && b [ i ] != 'C' && b [ i ] != 'G' ) ) { c = 3 ; break ; } } y = 1.0 * r / n ; if ( ( y > x ) && ( c == 0 ) ) { printf ( "yes" ) ; } if ( ( y <= x ) && ( c == 0 ) ) { printf ( "no" ) ; } if ( c == 3 ) { printf ( "error" ) ; } return 0 ; }
int main ( ) { int i ; float l1 , l2 ; float n , count = 0 , result ; char x [ 505 ] , y [ 505 ] ; scanf ( "%f" , & n ) ; getchar ( ) ; scanf ( "%s" , x ) ; scanf ( "%s" , y ) ; l1 = strlen ( x ) ; l2 = strlen ( y ) ; if ( l1 != l2 ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < l1 ; i ++ ) { if ( x [ i ] == 'A' || x [ i ] == 'T' || x [ i ] == 'C' || x [ i ] == 'G' ) continue ; else { printf ( "error" ) ; return 0 ; } } for ( i = 0 ; i < l2 ; i ++ ) { if ( y [ i ] == 'A' || y [ i ] == 'T' || y [ i ] == 'C' || y [ i ] == 'G' ) continue ; else { printf ( "error" ) ; return 0 ; } } for ( i = 0 ; i < l1 ; i ++ ) { if ( x [ i ] == y [ i ] ) { count ++ ; } } result = count / l1 ; if ( result > n ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { double dz ; char xl1 [ 500 ] , xl2 [ 500 ] ; scanf ( "%lf" , & dz ) ; scanf ( "%s\n%s" , xl1 , xl2 ) ; int len1 , len2 ; len1 = strlen ( xl1 ) ; len2 = strlen ( xl2 ) ; int e = 0 ; if ( len1 != len2 ) { printf ( "error" ) ; e ++ ; } int i ; if ( e == 0 ) { for ( i = 0 ; i < len1 ; i ++ ) { if ( ( xl1 [ i ] != 'A' && xl1 [ i ] != 'T' && xl1 [ i ] != 'C' && xl1 [ i ] != 'G' ) || ( xl2 [ i ] != 'A' && xl2 [ i ] != 'T' && xl2 [ i ] != 'C' && xl2 [ i ] != 'G' ) ) { e ++ ; } } if ( e != 0 ) printf ( "error" ) ; } int sum = 0 ; if ( e == 0 ) { for ( i = 0 ; i < len1 ; i ++ ) { if ( xl1 [ i ] == xl2 [ i ] ) sum ++ ; } if ( 1.0 * sum / len1 > dz ) printf ( "yes" ) ; else printf ( "no" ) ; } scanf ( "%d" , & e ) ; return 0 ; }
int main ( int argc , char * argv [ ] ) { char dna1 [ 600 ] , dna2 [ 600 ] ; int a , b , i ; double x = 0 , ratio ; scanf ( "%lf" , & ratio ) ; scanf ( "%s" , dna1 ) ; scanf ( "%s" , dna2 ) ; a = strlen ( dna1 ) ; b = strlen ( dna2 ) ; if ( a != b ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < a ; i ++ ) { if ( dna1 [ i ] != 'A' && dna1 [ i ] != 'T' && dna1 [ i ] != 'G' && dna1 [ i ] != 'C' ) { printf ( "error" ) ; return 0 ; } if ( dna2 [ i ] != 'A' && dna2 [ i ] != 'T' && dna2 [ i ] != 'G' && dna2 [ i ] != 'C' ) { printf ( "error" ) ; return 0 ; } if ( dna1 [ i ] == dna2 [ i ] ) x ++ ; } if ( x / a >= ratio ) printf ( "yes" ) ; else printf ( "no" ) ; return 0 ; }
int main ( ) { int i , j , l1 , l2 , count = 0 , o = 1 ; double r ; char a [ 1000 ] , b [ 1000 ] ; scanf ( "%lf" , & r ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; l1 = strlen ( a ) ; l2 = strlen ( b ) ; if ( l1 != l2 ) { printf ( "error" ) ; o = 0 ; } else { for ( i = 0 ; i < l1 ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { printf ( "error" ) ; o = 0 ; break ; } else { if ( a [ i ] == b [ i ] ) count ++ ; } } if ( 1.0 * count / l1 > r && o == 1 ) printf ( "yes" ) ; else if ( o == 1 ) printf ( "no" ) ; } scanf ( "%d" , & i ) ; return 0 ; }
int main ( ) { float std , rate , sign ; int i , l1 , l2 ; char dna1 [ 500 ] , dna2 [ 500 ] ; scanf ( "%f" , & std ) ; scanf ( "%s %s" , dna1 , dna2 ) ; l1 = strlen ( dna1 ) ; l2 = strlen ( dna2 ) ; sign = 0 ; if ( l1 != l2 ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < l1 ; i ++ ) { switch ( dna1 [ i ] ) { case 'A' : break ; case 'T' : break ; case 'G' : break ; case 'C' : break ; default : printf ( "error" ) ; return 0 ; } switch ( dna2 [ i ] ) { case 'A' : break ; case 'T' : break ; case 'G' : break ; case 'C' : break ; default : printf ( "error" ) ; return 0 ; } if ( dna1 [ i ] == dna2 [ i ] ) sign ++ ; } rate = sign / l1 ; if ( rate >= std ) printf ( "yes" ) ; else printf ( "no" ) ; scanf ( "%d" , & i ) ; return 0 ; }
int main ( ) { double c , w = 0 , n = 0 ; char x [ 600 ] , y [ 600 ] ; scanf ( "%lf" , & c ) ; getchar ( ) ; gets ( x ) ; gets ( y ) ; if ( strlen ( x ) == strlen ( y ) ) { for ( int j = 0 ; j < strlen ( x ) ; j ++ ) { if ( ( x [ j ] != 'A' && x [ j ] != 'T' && x [ j ] != 'G' && x [ j ] != 'C' ) || ( y [ j ] != 'A' && y [ j ] != 'T' && y [ j ] != 'G' && y [ j ] != 'C' ) ) { printf ( "error" ) ; n = 1 ; break ; } if ( x [ j ] == y [ j ] ) { w ++ ; } } } else { printf ( "error" ) ; n = 1 ; } if ( n == 0 ) { w = w / strlen ( x ) ; if ( c < w ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double a , j ; int n , m , b = 0 , c = 1 , i , q ; char s1 [ 510 ] , s2 [ 510 ] ; scanf ( "%lf" , & a ) ; scanf ( "%s" , s1 ) ; scanf ( "%s" , s2 ) ; n = strlen ( s1 ) ; m = strlen ( s2 ) ; if ( n != m ) c = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s1 [ i ] != 'A' && s1 [ i ] != 'T' && s1 [ i ] != 'C' && s1 [ i ] != 'G' ) { c = 0 ; break ; } } for ( q = 0 ; q < m ; q ++ ) { if ( s2 [ q ] != 'A' && s2 [ q ] != 'T' && s2 [ q ] != 'C' && s2 [ q ] != 'G' ) { c = 0 ; break ; } } for ( i = 0 ; i < n ; i ++ ) { if ( s1 [ i ] == s2 [ i ] ) b ++ ; } j = ( double ) b / n ; if ( c == 1 ) { if ( j >= a ) printf ( "yes" ) ; else printf ( "no" ) ; } else printf ( "error" ) ; return 0 ; }
int main ( ) { char DNA1 [ 501 ] , DNA2 [ 501 ] , isbreak ; isbreak = 'n' ; double x , n ; int i , l1 , l2 , t ; t = 0 ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , DNA1 , DNA2 ) ; l1 = strlen ( DNA1 ) ; l2 = strlen ( DNA2 ) ; if ( l1 != l2 ) { printf ( "error" ) ; } else { for ( i = 0 ; i < l1 ; i ++ ) { if ( ( DNA1 [ i ] != 'A' && DNA1 [ i ] != 'T' && DNA1 [ i ] != 'C' && DNA1 [ i ] != 'G' ) || ( DNA2 [ i ] != 'A' && DNA2 [ i ] != 'T' && DNA2 [ i ] != 'C' && DNA2 [ i ] != 'G' ) ) { isbreak = 'y' ; break ; } else { if ( DNA1 [ i ] == DNA2 [ i ] ) { t ++ ; } } } if ( isbreak == 'y' ) { printf ( "error" ) ; } else { x = ( 1.0 * t ) / l1 ; if ( x > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { double a ; scanf ( "%lf" , & a ) ; char b [ 600 ] , c [ 600 ] ; getchar ( ) ; gets ( b ) ; gets ( c ) ; int d , e , f , g ; int h = 0 ; d = strlen ( b ) ; e = strlen ( c ) ; if ( d != e ) { printf ( "error" ) ; } else { for ( int i = 0 ; i <= d - 1 ; i ++ ) { if ( b [ i ] != 'A' && b [ i ] != 'G' && b [ i ] != 'C' && b [ i ] != 'T' ) { f = 1 ; } if ( c [ i ] != 'A' && c [ i ] != 'G' && c [ i ] != 'C' && c [ i ] != 'T' ) { g = 1 ; } } if ( f == 1 || g == 1 ) { printf ( "error" ) ; } else { for ( int i = 0 ; i <= d - 1 ; i ++ ) { if ( b [ i ] == c [ i ] ) { h ++ ; } } if ( 1.0 * h / d > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } int y ; scanf ( "%d" , & y ) ; return 0 ; }
int main ( ) { double k , j ; int i , o ; char a [ 500 ] , b [ 500 ] ; scanf ( "%lf" , & k ) ; scanf ( "%s" , & a ) ; scanf ( "%s" , & b ) ; int l = strlen ( a ) ; int p = strlen ( b ) ; o = 0 ; for ( i = 0 ; i < l ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) { p += 500 ; } if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) { p += 500 ; } if ( a [ i ] == b [ i ] ) o ++ ; } if ( l != p ) printf ( "error" ) ; else { j = 1.0 * o / l ; if ( j > k ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { char y [ 501 ] , s [ 501 ] ; double h ; scanf ( "%lf" , & h ) ; scanf ( "%s" , y ) ; scanf ( "%s" , s ) ; int len = strlen ( y ) , i , sum = 0 , l = strlen ( s ) ; if ( len != l ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < len ; i ++ ) { if ( ( y [ i ] != 'A' && y [ i ] != 'T' && y [ i ] != 'C' && y [ i ] != 'G' ) || ( s [ i ] != 'A' && s [ i ] != 'T' && s [ i ] != 'C' && s [ i ] != 'G' ) ) { printf ( "error" ) ; return 0 ; } else if ( y [ i ] == s [ i ] ) { sum ++ ; } } double p = ( double ) sum / len ; if ( p > h ) { printf ( "yes" ) ; return 0 ; } printf ( "no" ) ; return 0 ; }
int main ( ) { double x = 0 , ratio = 0 ; int i = 0 , num = 0 , l1 = 0 , l2 = 0 , temp = 1 ; char sequen1 [ LEN ] , sequen2 [ LEN ] ; scanf ( "%lf" , & x ) ; scanf ( "%s" , sequen1 ) ; scanf ( "%s" , sequen2 ) ; l1 = strlen ( sequen1 ) ; l2 = strlen ( sequen2 ) ; if ( l1 != l2 ) { printf ( "error" ) ; temp = 0 ; } else { for ( i = 0 ; i < l1 ; i ++ ) { if ( ( sequen1 [ i ] != 'A' && sequen1 [ i ] != 'T' && sequen1 [ i ] != 'G' && sequen1 [ i ] != 'C' ) || ( sequen2 [ i ] != 'A' && sequen2 [ i ] != 'T' && sequen2 [ i ] != 'G' && sequen2 [ i ] != 'C' ) ) { printf ( "error" ) ; temp = 0 ; break ; } } } if ( temp == 1 ) { for ( i = 0 ; i < l1 ; i ++ ) { if ( sequen1 [ i ] == sequen2 [ i ] ) { num ++ ; } } ratio = 1.0 * num / l1 ; if ( ratio > x ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { char a [ 100 ] , b [ 100 ] , c [ 100 ] , x , y ; int i , j , k , m , n = 0 , z = 0 ; double o , p ; scanf ( "%lf" , & p ) ; gets ( a ) ; gets ( b ) ; gets ( c ) ; m = strlen ( b ) ; k = strlen ( c ) ; if ( m != k ) { printf ( "error" ) ; z = 1 ; } if ( z == 0 ) { for ( i = 0 ; i < m ; i ++ ) { if ( ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) || ( c [ i ] != 'A' && c [ i ] != 'T' && c [ i ] != 'G' && c [ i ] != 'C' ) ) { printf ( "error" ) ; z = 1 ; break ; } } } if ( z == 0 ) { for ( i = 0 ; i < m ; i ++ ) { if ( b [ i ] == c [ i ] ) n ++ ; } o = 1.0 * n / m ; if ( o > p ) printf ( "yes" ) ; else { printf ( "no" ) ; } } scanf ( "%d" , & j ) ; return 0 ; }
int main ( ) { int w = 0 , g = 0 ; double n ; char v [ 100 ] , c [ 100 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s" , v ) ; scanf ( "%s" , c ) ; char A , T , G , C ; if ( strlen ( v ) != strlen ( c ) ) { printf ( "error" ) ; } else { for ( int i = 0 ; i <= strlen ( v ) - 1 ; i ++ ) { if ( ( ( v [ i ] != 'A' ) && ( v [ i ] != 'G' ) && ( v [ i ] != 'C' ) && ( v [ i ] != 'T' ) ) || ( ( c [ i ] != 'A' ) && ( c [ i ] != 'G' ) && ( c [ i ] != 'C' ) && ( c [ i ] != 'T' ) ) ) { g = 1 ; printf ( "error" ) ; break ; } else if ( v [ i ] == c [ i ] ) { w ++ ; } } double l = 1.0 * w / strlen ( v ) ; if ( ( l > n ) && ( g == 0 ) ) { printf ( "yes" ) ; } else if ( ( l <= n ) && ( g == 0 ) ) { printf ( "no" ) ; } } int u ; scanf ( "%d" , & u ) ; return 0 ; }
main ( ) { double n , m ; scanf ( "%lf" , & n ) ; char a [ 100 ] ; scanf ( "%s" , a ) ; char b [ 100 ] ; scanf ( "%s" , b ) ; int i , j , k ; int count1 = 0 , count2 = 0 , count = 0 ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) count1 ++ ; for ( i = 0 ; b [ i ] != '\0' ; i ++ ) count2 ++ ; if ( count1 != count2 ) printf ( "error" ) ; else { for ( j = 0 ; j < count1 ; j ++ ) { if ( ( a [ j ] == 'A' || a [ j ] == 'T' || a [ j ] == 'C' || a [ j ] == 'G' ) && ( b [ j ] == 'A' || b [ j ] == 'T' || b [ j ] == 'C' || b [ j ] == 'G' ) ) { if ( a [ j ] == b [ j ] ) count ++ ; if ( j == ( count1 - 1 ) ) { m = ( ( double ) count / ( double ) count1 ) ; if ( m >= n ) printf ( "yes" ) ; else printf ( "no" ) ; } } else { printf ( "error" ) ; break ; } } } }
int main ( ) { double a ; cin >> a ; cin . get ( ) ; char b [ 501 ] , c [ 501 ] ; int i , j ; cin . getline ( b , 501 ) ; cin . getline ( c , 501 ) ; int flag = 0 ; for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { if ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'C' && b [ i ] != 'G' ) { cout << "error" << endl ; flag = 1 ; break ; } } if ( flag == 0 ) { for ( j = 0 ; c [ j ] != '\0' ; j ++ ) { if ( c [ j ] != 'A' && c [ j ] != 'T' && c [ j ] != 'C' && c [ j ] != 'G' ) { cout << "error" << endl ; flag = 1 ; break ; } } } if ( flag == 0 ) { if ( i != j ) { cout << "error" << endl ; flag = 1 ; } } int t = 0 ; if ( flag == 0 ) { for ( i = 0 ; i < j ; i ++ ) { if ( b [ i ] == c [ i ] ) t ++ ; } double k = ( double ) t / j ; if ( k > a ) cout << "yes" << endl ; else cout << "no" << endl ; } return 0 ; }
int judge ( char * a , char * b , double r ) { int n = strlen ( a ) , m = strlen ( b ) , i , s = 0 ; if ( n != m ) return 0 ; for ( i = 0 ; i < n ; ++ i ) { if ( ! strchr ( "ATCG" , a [ i ] ) || ! strchr ( "ATCG" , b [ i ] ) ) return 0 ; if ( a [ i ] == b [ i ] ) ++ s ; } if ( s / ( double ) n > r ) return 1 ; else return - 1 ; } int main ( ) { char a [ 600 ] , b [ 600 ] ; double r ; int s ; scanf ( "%lf\n" , & r ) ; gets ( a ) ; gets ( b ) ; s = judge ( a , b , r ) ; if ( s > 0 ) puts ( "yes" ) ; else if ( s < 0 ) puts ( "no" ) ; else puts ( "error" ) ; return 0 ; }
int main ( ) { double c , f = 0 ; int d , e , i ; scanf ( "%lf" , & c ) ; char a [ 100 ] , b [ 100 ] ; scanf ( "%s%s" , & a , & b ) ; d = strlen ( a ) ; e = strlen ( b ) ; if ( d != e ) printf ( "error" ) ; else { for ( i = 0 ; i < d ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' ) || ( b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) ) { printf ( "error" ) ; return 0 ; ; } else { if ( a [ i ] == b [ i ] ) f ++ ; } } if ( f / e >= c ) printf ( "yes" ) ; else printf ( "no" ) ; } return 0 ; }
int main ( ) { int b = 0 , i ; char a [ 100 ] [ 100 ] , e [ 210 ] ; double n ; gets ( e ) ; n = atof ( e ) ; gets ( a [ 0 ] ) ; gets ( a [ 1 ] ) ; int p = strlen ( a [ 0 ] ) ; int q = strlen ( a [ 1 ] ) ; if ( p != q ) { printf ( "error" ) ; return 0 ; } else { for ( i = 0 ; i < p ; i ++ ) { if ( ! ( a [ 0 ] [ i ] == 'A' || a [ 0 ] [ i ] == 'T' || a [ 0 ] [ i ] == 'G' || a [ 0 ] [ i ] == 'C' && a [ 1 ] [ i ] == 'A' || a [ 1 ] [ i ] == 'T' || a [ 1 ] [ i ] == 'G' || a [ 1 ] [ i ] == 'C' ) ) { printf ( "error" ) ; return 0 ; } else { if ( a [ 0 ] [ i ] == a [ 1 ] [ i ] ) { b ++ ; } } } } if ( 1.0 * b / p > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { char sz [ 2 ] [ 510 ] ; double a , e ; int b , c , d , f ; int s [ 2 ] ; d = 0 ; scanf ( "%lf" , & a ) ; for ( b = 0 ; b < 2 ; b ++ ) { scanf ( "%s" , & sz [ b ] ) ; s [ b ] = strlen ( sz [ 0 ] ) ; for ( f = 0 ; f < s [ b ] ; f ++ ) { if ( sz [ b ] [ f ] != 'A' && sz [ b ] [ f ] != 'T' && sz [ b ] [ f ] != 'G' && sz [ b ] [ f ] != 'C' ) { printf ( "error" ) ; return 0 ; } } } if ( s [ 0 ] != s [ 1 ] ) { printf ( "error\n" ) ; return 0 ; } for ( b = 0 ; b < s [ 0 ] ; b ++ ) { if ( sz [ 0 ] [ b ] == sz [ 1 ] [ b ] ) { d ++ ; } } e = 1.0 * d / s [ 0 ] ; if ( e > a ) { printf ( "yes\n" ) ; } else { printf ( "no\n" ) ; } return 0 ; }
int main ( ) { int i , m , n ; double x , y , o = 0 ; char a [ 500 ] , b [ 500 ] ; scanf ( "%lf" , & x ) ; scanf ( "%s %s" , a , b ) ; m = strlen ( a ) ; n = strlen ( b ) ; if ( m != n ) { printf ( "error" ) ; } else { for ( i = 0 ; i < m ; i ++ ) { if ( ( a [ i ] == 65 || a [ i ] == 71 || a [ i ] == 67 || a [ i ] == 84 ) && ( b [ i ] == 65 || b [ i ] == 71 || b [ i ] == 67 || b [ i ] == 84 ) ) { if ( a [ i ] == b [ i ] ) { o ++ ; } } else { printf ( "error" ) ; break ; } } if ( i == m ) { y = o / n ; if ( y >= x ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { double z ; char sz1 [ 500 ] ; char sz2 [ 500 ] ; int i , m , n ; int x = 1 , y = 0 ; double e ; scanf ( "%lf" , & z ) ; scanf ( "%s" , sz1 ) ; scanf ( "%s" , sz2 ) ; m = strlen ( sz1 ) ; n = strlen ( sz2 ) ; for ( i = 0 ; sz1 [ i ] != '\0' ; i ++ ) { if ( sz1 [ i ] == 'A' || sz1 [ i ] == 'G' || sz1 [ i ] == 'C' || sz1 [ i ] == 'T' ) { continue ; } else if ( sz1 [ i ] != 'A' || sz1 [ i ] != 'G' || sz1 [ i ] != 'C' || sz1 [ i ] != 'T' ) { x = 0 ; break ; } } if ( ( m != n ) || ( x == 0 ) ) { printf ( "error" ) ; } else if ( m == n && x == 1 ) { for ( i = 0 ; sz1 [ i ] != '\0' ; i ++ ) { if ( sz1 [ i ] == sz2 [ i ] ) { y ++ ; } } e = 1.0 * y / m ; if ( e > z ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int a , b , c = 0 ; double t , k = 0 ; char s [ 500 ] = { '\0' } , x [ 500 ] = { '\0' } ; scanf ( "%lf %s %s" , & t , s , x ) ; for ( a = 0 ; s [ a ] != '\0' ; a ++ ) { if ( s [ a ] > 'Z' ) { k = 1 ; break ; } } for ( b = 0 ; x [ b ] != '\0' ; b ++ ) { if ( x [ b ] > 'Z' ) { k = 1 ; break ; } } if ( a != b || k == 1 ) { printf ( "error" ) ; } else { for ( a = 0 ; a < b ; a ++ ) { if ( s [ a ] == x [ a ] ) { c ++ ; } } k = 1.0 * c / b ; if ( k > t ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double n , c ; int a , i , d = 1 , b = 0 ; char sz [ 1000 ] = { '\0' } , u [ 1000 ] = { '\0' } ; scanf ( "%lf" , & n ) ; scanf ( "\n" ) ; gets ( sz ) ; gets ( u ) ; a = strlen ( sz ) ; for ( i = 0 ; i < a ; i ++ ) { if ( sz [ i ] != 'A' && sz [ i ] != 'G' && sz [ i ] != 'T' && sz [ i ] != 'C' ) { printf ( "error" ) ; d = 0 ; break ; } else if ( u [ i ] != 'A' && u [ i ] != 'G' && u [ i ] != 'T' && u [ i ] != 'C' ) { printf ( "error" ) ; d = 0 ; break ; } else if ( sz [ i ] == u [ i ] ) { b ++ ; } } c = b * 1.0 / a ; if ( d == 1 ) { if ( c > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , a , w1 , w2 , b ; double n , k ; a = 0 ; b = 0 ; char s1 [ 502 ] , s2 [ 502 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s %s" , s1 , s2 ) ; w1 = strlen ( s1 ) ; w2 = strlen ( s2 ) ; if ( w1 != w2 ) { printf ( "error" ) ; b = 1 ; } else { for ( i = 0 ; i < w1 ; i ++ ) { if ( ( s1 [ i ] == 'A' || s1 [ i ] == 'T' || s1 [ i ] == 'C' || s1 [ i ] == 'G' ) && ( s2 [ i ] == 'A' || s2 [ i ] == 'T' || s2 [ i ] == 'C' || s2 [ i ] == 'G' ) ) { if ( s1 [ i ] == s2 [ i ] ) { a ++ ; } } else { printf ( "error" ) ; b = 1 ; break ; } } k = 1.0 * a / w1 ; if ( k > n && b == 0 ) { printf ( "yes" ) ; } else if ( k <= n && b == 0 ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , k = 0 , la , lb ; double n , s = 0 ; char a [ 500 ] , b [ 500 ] ; scanf ( "%lf" , & n ) ; scanf ( "%s%s" , a , b ) ; la = strlen ( a ) , lb = strlen ( b ) ; if ( la != lb ) { k = 2 ; } else { for ( i = 0 ; i < la ; i ++ ) { if ( ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'C' && a [ i ] != 'G' ) || ( b [ i ] != 'A' && b [ i ] != 'G' && b [ i ] != 'T' && b [ i ] != 'C' ) ) { k = 2 ; break ; } } if ( k != 2 ) { for ( i = 0 ; i < la ; i ++ ) { if ( a [ i ] == b [ i ] ) { s ++ ; } } s = s / la ; if ( s <= n ) { k = 1 ; } else k = 0 ; } } if ( k == 1 ) printf ( "no" ) ; if ( k == 0 ) printf ( "yes" ) ; if ( k == 2 ) printf ( "error" ) ; return 0 ; }
int main ( ) { char a [ 501 ] , b [ 501 ] ; double n , c , d , k = 0 ; int i , e = 1 ; scanf ( "%lf" , & n ) ; scanf ( "%s\n%s" , & a , & b ) ; c = strlen ( a ) ; d = strlen ( b ) ; if ( c != d ) { printf ( "error" ) ; } else if ( c == d ) { for ( i = 0 ; i < c ; i ++ ) { if ( a [ i ] != 'A' && a [ i ] != 'T' && a [ i ] != 'G' && a [ i ] != 'C' || b [ i ] != 'A' && b [ i ] != 'T' && b [ i ] != 'G' && b [ i ] != 'C' ) { e = 0 ; break ; } else { if ( a [ i ] == b [ i ] ) { k = k + 1 ; } } } if ( e == 0 ) { printf ( "error" ) ; } else if ( k != 0 && ( k / c ) >= n ) { printf ( "yes" ) ; } else if ( e == 1 && ( k / c ) < n ) { printf ( "no" ) ; } } return 0 ; }
int main ( ) { double x , y ; int i , t = 1 , r ; char s1 [ 500 ] ; char s2 [ 500 ] ; scanf ( "%lf" , & x ) ; scanf ( "%s%s" , s1 , s2 ) ; int len1 = strlen ( s1 ) ; int len2 = strlen ( s2 ) ; if ( len1 != len2 ) { t = 0 ; } else { int cnt = 0 ; for ( i = 0 ; i < len1 ; i ++ ) { if ( ( ! ( s1 [ i ] == 'A' || s1 [ i ] == 'T' || s1 [ i ] == 'C' || s1 [ i ] == 'G' ) ) || ( ! ( s2 [ i ] == 'A' || s2 [ i ] == 'T' || s2 [ i ] == 'C' || s2 [ i ] == 'G' ) ) ) { t = 0 ; } } for ( i = 0 ; i < len1 ; i ++ ) { if ( s1 [ i ] == s2 [ i ] ) { cnt ++ ; } } y = 1.0 * cnt / len1 ; if ( y > x ) { r = 1 ; } else { r = 2 ; } } if ( t == 0 ) { printf ( "error" ) ; } else if ( t == 1 && r == 1 ) { printf ( "yes" ) ; } else if ( t == 1 && r == 2 ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , j , c [ 2 ] , e = 0 ; char a [ 2 ] [ 501 ] ; double b ; scanf ( "%lf" , & b ) ; for ( i = 0 ; i < 2 ; i ++ ) { scanf ( "%s" , a [ i ] ) ; } c [ 0 ] = strlen ( a [ 0 ] ) ; c [ 1 ] = strlen ( a [ 1 ] ) ; if ( c [ 0 ] != c [ 1 ] ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < 2 ; i ++ ) { for ( j = 0 ; j < c [ i ] - 1 ; j ++ ) { if ( a [ i ] [ j ] != 'A' && a [ i ] [ j ] != 'T' && a [ i ] [ j ] != 'G' && a [ i ] [ j ] != 'C' ) { printf ( "error" ) ; return 0 ; } } } for ( j = 0 ; j < c [ 0 ] ; j ++ ) { if ( a [ 0 ] [ j ] == a [ 1 ] [ j ] ) { e ++ ; } } if ( 1.0 * e / c [ 0 ] > b ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { double x ; int n , i , m , y ; char lian1 [ LEN ] , lian2 [ LEN ] ; scanf ( "%lf" , & x ) ; scanf ( "%s" , lian1 ) ; scanf ( "%s" , lian2 ) ; n = strlen ( lian1 ) ; y = strlen ( lian2 ) ; if ( y != n ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( ! ( lian1 [ i ] == 'A' || lian1 [ i ] == 'T' || lian1 [ i ] == 'C' || lian1 [ i ] == 'G' || lian2 [ i ] == 'A' || lian2 [ i ] == 'T' || lian2 [ i ] == 'C' || lian2 [ i ] == 'G' ) ) { printf ( "error" ) ; return 0 ; } } m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( lian1 [ i ] == lian2 [ i ] ) { m ++ ; } } if ( m * 1.0 / n > x ) { printf ( "yes" ) ; } else if ( m * 1.0 / n <= x ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , z = 0 , e = 0 , k = 0 ; double v ; char x [ 501 ] , y [ 501 ] ; scanf ( "%lf%s%s" , & v , & x , & y ) ; for ( i = 0 ; x [ i ] ; i ++ ) { z ++ ; if ( ! ( x [ i ] == 'A' || x [ i ] == 'T' || x [ i ] == 'G' || x [ i ] == 'C' ) ) { printf ( "error" ) ; return 0 ; } } for ( i = 0 ; y [ i ] ; i ++ ) { e ++ ; if ( ! ( y [ i ] == 'A' || y [ i ] == 'T' || y [ i ] == 'G' || y [ i ] == 'C' ) ) { printf ( "error" ) ; return 0 ; } } if ( z != e ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; x [ i ] ; i ++ ) { if ( x [ i ] == y [ i ] ) { k ++ ; } } if ( 1.0 * k / z > v ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , m , n , a , b , k ; k = 0 ; a = 0 ; b = 0 ; double p ; char f [ 501 ] , g [ 501 ] ; scanf ( "%lf %s %s" , & p , f , g ) ; m = strlen ( f ) ; n = strlen ( g ) ; for ( i = 0 ; i < m ; i ++ ) { if ( f [ i ] != 'A' && f [ i ] != 'T' && f [ i ] != 'C' && f [ i ] != 'G' ) { a ++ ; } } for ( i = 0 ; i < n ; i ++ ) { if ( g [ i ] != 'A' && g [ i ] != 'T' && g [ i ] != 'C' && g [ i ] != 'G' ) { b ++ ; } } if ( m != n || a != 0 || b != 0 ) { printf ( "error" ) ; } else { for ( i = 0 ; i < m ; i ++ ) { if ( f [ i ] == g [ i ] ) { k ++ ; } } if ( 1.0 * k / m > p ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , m , d , e , f , r ; double a , g ; r = 0 ; scanf ( "%lf" , & a ) ; char b [ 501 ] , c [ 501 ] ; for ( i = 0 ; i < 2 ; i ++ ) { if ( i == 0 ) { scanf ( "%s" , b ) ; m = strlen ( b ) ; } else { scanf ( "%s" , c ) ; d = strlen ( c ) ; } } if ( m >= d ) { f = m ; } else { f = d ; } e = 0 ; for ( i = 0 ; i < f ; i ++ ) { if ( ( b [ i ] == 'A' || ( b [ i ] == 'T' ) || b [ i ] == 'C' || b [ i ] == 'G' ) && ( c [ i ] == 'A' || ( c [ i ] == 'T' ) || c [ i ] == 'C' || c [ i ] == 'G' ) ) { if ( c [ i ] == b [ i ] ) { e ++ ; } } else { r = 1 ; break ; } } if ( ( m == d ) && ( r == 0 ) ) { g = 1.0 * e / m ; if ( g > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } else { printf ( "error" ) ; } return 0 ; }
int main ( ) { double z , q ; char a [ 1 ] [ 1000 ] , b [ 1 ] [ 1000 ] ; int x , y , m , n , s = 0 , i ; scanf ( "%lf" , & q ) ; scanf ( "%s%s" , a [ 0 ] , b [ 0 ] ) ; m = strlen ( a [ 0 ] ) ; n = strlen ( b [ 0 ] ) ; if ( m != n ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < m ; i ++ ) { if ( a [ 0 ] [ i ] != 'A' && a [ 0 ] [ i ] != 'T' && a [ 0 ] [ i ] != 'C' && a [ 0 ] [ i ] != 'G' || b [ 0 ] [ i ] != 'A' && b [ 0 ] [ i ] != 'T' && b [ 0 ] [ i ] != 'C' && b [ 0 ] [ i ] != 'G' ) { printf ( "error" ) ; return 0 ; } if ( a [ 0 ] [ i ] == b [ 0 ] [ i ] ) { s ++ ; } } z = 1.0 * s / m ; if ( z > q ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { int n , i , s = 0 ; double r ; char a [ 600 ] , b [ 600 ] ; scanf ( "%lf" , & r ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; if ( strlen ( a ) != strlen ( b ) ) { printf ( "error" ) ; return 0 ; } for ( i = 0 ; i < strlen ( a ) ; i ++ ) { if ( ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'C' || a [ i ] == 'G' ) && ( b [ i ] == 'A' || b [ i ] == 'T' || b [ i ] == 'C' || b [ i ] == 'G' ) ) { if ( a [ i ] == b [ i ] ) { s ++ ; } } else { printf ( "error" ) ; return 0 ; } } if ( 1.0 * s / strlen ( a ) > r ) { printf ( "yes" ) ; } else if ( 1.0 * s / strlen ( a ) < r ) { printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , m = 0 ; float k = 0 , n ; char a [ 502 ] , b [ 502 ] ; scanf ( "%f" , & n ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; for ( i = 0 ; i < ( strlen ( a ) ) ; i ++ ) { if ( strlen ( a ) != strlen ( b ) ) { m = 0 ; break ; } if ( a [ i ] == 'A' || a [ i ] == 'T' || a [ i ] == 'C' || a [ i ] == 'G' ) { m ++ ; if ( a [ i ] == b [ i ] ) { k ++ ; } } else { m = 0 ; break ; } } if ( m == 0 ) { printf ( "error" ) ; } else { if ( ( k / ( strlen ( a ) * 1.00 ) ) > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } return 0 ; }
int main ( ) { int i , j , l1 , l0 , js = 0 ; double jg , bl ; char a [ 2 ] [ 501 ] ; scanf ( "%lf" , & bl ) ; for ( i = 0 ; i < 2 ; i ++ ) { scanf ( "%s" , a [ i ] ) ; } l0 = strlen ( a [ 0 ] ) ; l1 = strlen ( a [ 1 ] ) ; if ( l1 != l0 ) { printf ( "error" ) ; return 0 ; } for ( j = 0 ; j < 2 ; j ++ ) { for ( i = 0 ; i < l1 ; i ++ ) { if ( ( a [ j ] [ i ] != 'A' ) && ( a [ j ] [ i ] != 'T' ) && ( a [ j ] [ i ] != 'C' ) && ( a [ j ] [ i ] != 'G' ) ) { printf ( "error" ) ; return 0 ; } } } for ( i = 0 ; i < l1 ; i ++ ) { if ( a [ 0 ] [ i ] == a [ 1 ] [ i ] ) { js ++ ; } } jg = 1.0 * js / l1 ; if ( jg > bl ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int main ( ) { double n ; scanf ( "%lf" , & n ) ; char DNA [ 2 ] [ 500 ] ; int i ; int len [ 2 ] ; for ( i = 0 ; i < 2 ; i ++ ) { scanf ( "%s" , DNA [ i ] ) ; len [ i ] = strlen ( DNA [ i ] ) ; } int j ; int p = 0 ; for ( j = 0 ; j < len [ 0 ] ; j ++ ) { if ( DNA [ 0 ] [ j ] == DNA [ 1 ] [ j ] ) { p ++ ; } } int m = 0 ; for ( i = 0 ; i < 2 ; i ++ ) { for ( j = 0 ; j < len [ i ] ; j ++ ) { if ( DNA [ i ] [ j ] != 'A' && DNA [ i ] [ j ] != 'T' && DNA [ i ] [ j ] != 'C' && DNA [ i ] [ j ] != 'G' ) { m ++ ; } } } double bi ; bi = ( ( double ) p ) / ( ( double ) len [ 0 ] ) ; if ( len [ 0 ] != len [ 1 ] || m != 0 ) { printf ( "error" ) ; } else if ( bi > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } return 0 ; }
int compare ( char x , char y ) ; int main ( ) { double n ; char DNA1 [ 502 ] , DNA2 [ 502 ] ; int len1 , len2 ; scanf ( "%lf" , & n ) ; scanf ( "%s" , DNA1 ) ; scanf ( "%s" , DNA2 ) ; len1 = strlen ( DNA1 ) ; len2 = strlen ( DNA2 ) ; int i , m = 0 ; int e ; int p = 0 ; double result ; if ( len1 != len2 ) { printf ( "error" ) ; } else { for ( i = 0 ; i < len1 ; i ++ ) { e = compare ( DNA1 [ i ] , DNA2 [ i ] ) ; if ( e == 1 ) { m ++ ; } if ( ( DNA1 [ i ] != 'A' && DNA1 [ i ] != 'T' && DNA1 [ i ] != 'G' && DNA1 [ i ] != 'C' ) || ( DNA2 [ i ] != 'A' && DNA2 [ i ] != 'T' && DNA2 [ i ] != 'G' && DNA2 [ i ] != 'C' ) ) { printf ( "error" ) ; p = 1 ; break ; } } if ( p == 0 ) { result = ( ( double ) m / ( double ) len1 ) ; if ( result > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; } int compare ( char x , char y ) { if ( ( x == 'A' && y == 'A' ) || ( x == 'T' && y == 'T' ) || ( x == 'C' && y == 'C' ) || ( x == 'G' && y == 'G' ) ) { return 1 ; } else { return 0 ; } }
int main ( ) { double a ; scanf ( "%lf\n" , & a ) ; char jjla [ 501 ] ; char jjlb [ 501 ] ; int i , j ; gets ( jjla ) ; gets ( jjlb ) ; int b , c ; b = strlen ( jjla ) ; c = strlen ( jjlb ) ; if ( b != c ) { printf ( "error" ) ; } else { int cwzm ; cwzm = 0 ; for ( j = 0 ; j < b ; j ++ ) { if ( jjla [ j ] != 'A' && jjla [ j ] != 'G' && jjla [ j ] != 'T' && jjla [ j ] != 'C' ) { cwzm ++ ; } } for ( j = 0 ; j < b ; j ++ ) { if ( jjlb [ j ] != 'A' && jjlb [ j ] != 'G' && jjlb [ j ] != 'T' && jjlb [ j ] != 'C' ) { cwzm ++ ; } } if ( cwzm == 0 ) { int xt ; xt = 0 ; for ( i = 0 ; i < b ; i ++ ) { if ( jjla [ i ] == jjlb [ i ] ) { xt ++ ; } } double bl ; bl = ( double ) xt / b ; if ( bl > a ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } else { printf ( "error" ) ; } } return 0 ; }
int main ( ) { double j , n ; int i , l , k , p = 0 , u , h = 0 ; char a [ 2 ] [ 501 ] ; scanf ( "%lf" , & n ) ; for ( i = 0 ; i < 2 ; i ++ ) { scanf ( "%s" , a [ i ] ) ; } l = strlen ( a [ 0 ] ) ; k = strlen ( a [ 1 ] ) ; if ( l != k ) { printf ( "error" ) ; } else { for ( u = 0 ; u < l ; u ++ ) { if ( ( a [ 0 ] [ u ] != 'A' ) && ( a [ 0 ] [ u ] != 'T' ) && ( a [ 0 ] [ u ] != 'G' ) && ( a [ 0 ] [ u ] != 'C' ) && ( a [ 1 ] [ u ] != 'A' ) && ( a [ 1 ] [ u ] != 'T' ) && ( a [ 1 ] [ u ] != 'G' ) && ( a [ 1 ] [ u ] != 'C' ) ) { p ++ ; } else { if ( a [ 0 ] [ u ] == a [ 1 ] [ u ] ) { h ++ ; } } } if ( p != 0 ) { printf ( "error" ) ; } else { j = 1.0 * h / l ; if ( j > n ) { printf ( "yes" ) ; } else { printf ( "no" ) ; } } } return 0 ; }
int main ( ) { float a ; int bar = 0 ; scanf ( "%f" , & a ) ; char zfc [ 2 ] [ 500 ] ; scanf ( "%s" , zfc [ 0 ] ) ; scanf ( "%s" , zfc [ 1 ] ) ; float count = 0.0 ; if ( strlen ( zfc [ 0 ] ) != strlen ( zfc [ 1 ] ) ) printf ( "error" ) ; else { float len = strlen ( zfc [ 0 ] ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( zfc [ 0 ] [ i ] != 'A' && zfc [ 0 ] [ i ] != 'T' && zfc [ 0 ] [ i ] != 'C' && zfc [ 0 ] [ i ] != 'G' ) || ( zfc [ 1 ] [ i ] != 'A' && zfc [ 1 ] [ i ] != 'T' && zfc [ 1 ] [ i ] != 'C' && zfc [ 1 ] [ i ] != 'G' ) ) { printf ( "error" ) ; bar = 1 ; break ; } else if ( zfc [ 0 ] [ i ] == zfc [ 1 ] [ i ] ) count += 1.0 ; } if ( count / len >= a && bar == 0 ) printf ( "yes" ) ; if ( count / len < a && bar == 0 ) printf ( "no" ) ; } return 0 ; }
int main ( ) { int i , k , row , col , ROW , sz [ 100 ] [ 100 ] , COL , sum [ 100 ] ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { sum [ i ] = 0 ; } for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d %d" , & ROW , & COL ) ; for ( row = 0 ; row < ROW ; row ++ ) { for ( col = 0 ; col < COL ; col ++ ) { scanf ( "%d" , & sz [ row ] [ col ] ) ; } } if ( ROW == 1 && COL == 1 ) { sum [ i ] = sum [ i ] + sz [ 0 ] [ 0 ] ; } else { for ( col = 0 ; col < COL ; col ++ ) { sum [ i ] = sum [ i ] + sz [ 0 ] [ col ] + sz [ ROW - 1 ] [ col ] ; } for ( row = 1 ; row < ( ROW - 1 ) ; row ++ ) { sum [ i ] = sum [ i ] + sz [ row ] [ 0 ] + sz [ row ] [ COL - 1 ] ; } } } for ( i = 0 ; i < k ; i ++ ) { printf ( "%d\n" , sum [ i ] ) ; } scanf ( "%d" , & k ) ; return 0 ; }
int main ( ) { int k ; int m , n ; int a [ 101 ] [ 101 ] ; int u , i , j , sum ; scanf ( "%d" , & k ) ; for ( u = 0 ; u < k ; u ++ ) { sum = 0 ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( ( i == 0 ) || ( j == 0 ) || ( i == m - 1 ) || j == ( n - 1 ) ) { sum += a [ i ] [ j ] ; } } } if ( u != k - 1 ) { printf ( "%d\n" , sum ) ; } else if ( u == k - 1 ) { printf ( "%d" , sum ) ; } } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] ; int b [ 100 ] ; int m , j , r , n , k , p ; scanf ( "%d" , & p ) ; for ( m = 0 ; m < p ; m ++ ) { scanf ( "%d %d" , & n , & k ) ; for ( j = 0 ; j < n ; j ++ ) { for ( r = 0 ; r < k ; r ++ ) { scanf ( "%d" , & a [ j ] [ r ] ) ; } } b [ m ] = 0 ; for ( j = 0 ; j < 1 ; j ++ ) { for ( r = 0 ; r < k ; r ++ ) { b [ m ] = b [ m ] + a [ j ] [ r ] ; } } for ( j = n - 1 ; j > n - 2 ; j -- ) { for ( r = 0 ; r < k ; r ++ ) { b [ m ] = b [ m ] + a [ j ] [ r ] ; } } for ( r = 0 ; r < 1 ; r ++ ) { for ( j = 1 ; j < n - 1 ; j ++ ) { b [ m ] = b [ m ] + a [ j ] [ r ] ; } } for ( r = k - 1 ; r > k - 2 ; r -- ) { for ( j = 1 ; j < n - 1 ; j ++ ) { b [ m ] = b [ m ] + a [ j ] [ r ] ; } } } for ( m = 0 ; m < p ; m ++ ) { printf ( "%d\n" , b [ m ] ) ; } return 0 ; }
int main ( ) { int i , j , m , n , k , sum = 0 , x , q , w , e , r ; int ss [ 100 ] ; int sz [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; for ( x = 0 ; x < k ; x ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d " , & sz [ i ] [ j ] ) ; } } q = 0 ; w = 0 ; e = 0 ; r = 0 ; for ( j = 0 ; j < n ; j ++ ) { q = q + sz [ 0 ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) { w = w + sz [ m - 1 ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { e = e + sz [ i ] [ 0 ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { r = r + sz [ i ] [ n - 1 ] ; } sum = q + w + e + r ; printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int k , m , n ; scanf ( "%d" , & k ) ; int a [ 100 ] [ 100 ] ; for ( int r = 0 ; r < k ; r ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } int s = 0 ; for ( int t = 0 ; t < n ; t ++ ) { s += a [ 0 ] [ t ] + a [ m - 1 ] [ t ] ; } for ( int u = 1 ; u < m - 1 ; u ++ ) { s += a [ u ] [ 0 ] + a [ u ] [ n - 1 ] ; } printf ( "%d\n" , s ) ; } return 0 ; }
int main ( ) { int k , m , n , sz [ 100 ] [ 100 ] , sum [ 100 ] , i , j , a , b , c , d , e ; b = 0 ; c = 0 ; d = 0 ; e = 0 ; scanf ( "%d" , & k ) ; for ( a = 0 ; a < k ; a ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & ( sz [ i ] [ j ] ) ) ; } } for ( j = 0 ; j < n ; j ++ ) { b = b + sz [ 0 ] [ j ] ; c = c + sz [ m - 1 ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { d = d + sz [ i ] [ 0 ] ; e = e + sz [ i ] [ n - 1 ] ; } sum [ a ] = b + c + d + e ; b = 0 ; c = 0 ; d = 0 ; e = 0 ; } for ( a = 0 ; a < k ; a ++ ) { printf ( "%d\n" , sum [ a ] ) ; } return 0 ; }
int sum ( int m , int n , int a [ ] [ 100 ] ) { int i , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum += * ( * ( a + m - 1 ) + i ) ; sum += * ( ( * a ) + i ) ; } for ( i = 1 ; i <= m - 2 ; i ++ ) { sum += * * ( a + i ) ; sum += * ( * ( a + i ) + n - 1 ) ; } return sum ; } int main ( ) { int m , n , i , k , j , p , a [ 100 ] [ 100 ] ; cin >> p ; for ( i = 1 ; i <= p ; i ++ ) { cin >> m >> n ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { cin >> a [ j ] [ k ] ; } } cout << sum ( m , n , a ) << endl ; } return 0 ; }
int main ( ) { int a = 10 , b = 10 , o = 10 , p = 10 , sum , area [ 111 ] [ 111 ] ; int k = 10 , i = 0 ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { sum = 0 ; scanf ( "%d%d" , & a , & b ) ; for ( o = 0 ; o < a ; o ++ ) { for ( p = 0 ; p < b ; p ++ ) { scanf ( "%d" , & area [ o ] [ p ] ) ; } } for ( p = 0 ; p < b ; p ++ ) sum += area [ 0 ] [ p ] + area [ a - 1 ] [ p ] ; for ( o = 1 ; o < a - 1 ; o ++ ) sum += area [ o ] [ 0 ] + area [ o ] [ b - 1 ] ; "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int k , m , n , i , j , p , sum1 , sum2 , sum3 , sum4 , sum ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { int sz [ 100 ] [ 100 ] ; scanf ( "%d %d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) { for ( p = 0 ; p < n ; p ++ ) { scanf ( "%d " , & sz [ j ] [ p ] ) ; } } if ( m != 1 && m != 2 && n != 1 && n != 2 ) { sum1 = sum2 = sum3 = sum4 = 0 ; for ( p = 0 ; p < n ; p ++ ) { sum1 += sz [ 0 ] [ p ] ; } for ( p = 0 ; p < n ; p ++ ) { sum2 += sz [ m - 1 ] [ p ] ; } for ( j = 0 ; j < m ; j ++ ) { sum3 += sz [ j ] [ 0 ] ; } for ( j = 0 ; j < m ; j ++ ) { sum4 += sz [ j ] [ n - 1 ] ; } printf ( "%d\n" , sum1 + sum2 + sum3 + sum4 - sz [ 0 ] [ 0 ] - sz [ 0 ] [ n - 1 ] - sz [ m - 1 ] [ 0 ] - sz [ m - 1 ] [ n - 1 ] ) ; } else { sum = 0 ; for ( j = 0 ; j < m ; j ++ ) { for ( p = 0 ; p < n ; p ++ ) { sum += sz [ j ] [ p ] ; } } printf ( "%d\n" , sum ) ; } } return 0 ; }
int main ( ) { int k , i ; scanf ( "%d" , & k ) ; int m , n , j , l ; int z [ 100 ] [ 100 ] , h [ 100 ] ; for ( i = 0 ; i < 100 ; i ++ ) { h [ i ] = 0 ; } for ( l = 0 ; l < k ; l ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & ( z [ i ] [ j ] ) ) ; } } for ( j = 0 ; j < n ; j ++ ) { h [ l ] += z [ 0 ] [ j ] ; } i = m - 1 ; for ( j = 0 ; j < n ; j ++ ) { h [ l ] += z [ i ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { h [ l ] += z [ i ] [ 0 ] ; } j = n - 1 ; for ( i = 1 ; i < m - 1 ; i ++ ) { h [ l ] += z [ i ] [ j ] ; } } for ( l = 0 ; l < k ; l ++ ) { if ( l == 0 ) { printf ( "%d" , h [ l ] ) ; } else { printf ( "\n%d" , h [ l ] ) ; } } return 0 ; }
void main ( ) { int a [ 100 ] [ 100 ] ; int b [ 1000 ] ; int n , he ; int h , l ; int i , j , k ; scanf ( "%d" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { he = 0 ; scanf ( "%d %d" , & h , & l ) ; for ( i = 0 ; i < h ; i ++ ) for ( j = 0 ; j < l ; j ++ ) scanf ( "%d" , ( * ( a + i ) + j ) ) ; for ( i = 0 ; i < h ; i ++ ) he = he + * ( * ( a + i ) + 0 ) + * ( * ( a + i ) + l - 1 ) ; for ( j = 0 ; j < l ; j ++ ) he = he + * ( * a + j ) + * ( * ( a + h - 1 ) + j ) ; he = he - * ( * ( a + 0 ) + l - 1 ) - * ( * ( a + h - 1 ) + l - 1 ) - * ( * ( a + 0 ) + 0 ) - * ( * ( a + h - 1 ) + 0 ) ; b [ k ] = he ; } for ( k = 0 ; k < n - 1 ; k ++ ) printf ( "%d\n" , b [ k ] ) ; printf ( "%d" , b [ k ] ) ; }
int main ( ) { int n , k , m , i ; int a = 0 , b = 0 , c = 0 , d = 0 , e = 0 ; int sz [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; for ( int l = 1 ; l <= k ; l ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { a += sz [ i ] [ 0 ] ; b += sz [ i ] [ n - 1 ] ; } for ( int j = 0 ; j < n ; j ++ ) { c += sz [ 0 ] [ j ] ; d += sz [ m - 1 ] [ j ] ; } e = a + b + c + d - sz [ 0 ] [ 0 ] - sz [ 0 ] [ n - 1 ] - sz [ m - 1 ] [ 0 ] - sz [ m - 1 ] [ n - 1 ] ; printf ( "%d\n" , e ) ; e = 0 ; a = 0 ; b = 0 ; c = 0 ; d = 0 ; } return 0 ; }
int main ( ) { int he , m , n , k , sz [ 100 ] [ 100 ] ; int i , j ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) { for ( int q = 0 ; q < n ; q ++ ) { scanf ( "%d" , & sz [ j ] [ q ] ) ; } } if ( m == 1 && n == 1 ) { printf ( "%d\n" , sz [ 0 ] [ 0 ] ) ; } else { he = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( m == 1 ) { he += sz [ j ] [ 0 ] ; } else { he += sz [ j ] [ 0 ] + sz [ j ] [ n - 1 ] ; } } for ( j = 1 ; j < n - 1 ; j ++ ) { if ( n == 1 ) { he += sz [ 0 ] [ j ] ; } else { he += sz [ 0 ] [ j ] + sz [ m - 1 ] [ j ] ; } } printf ( "%d\n" , he ) ; } } return 0 ; }
int main ( ) { int k , l ; int m , n , i , j , s1 , s2 , s3 , s4 , s ; int sz [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; int * sf = ( int * ) malloc ( ( sizeof ( int ) * k ) ) ; for ( l = 0 ; l < k ; l ++ ) { s1 = 0 ; s2 = 0 ; s3 = 0 ; s4 = 0 ; s = 0 ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { s1 += sz [ i ] [ 0 ] ; s2 += sz [ i ] [ n - 1 ] ; } for ( j = 0 ; j < n ; j ++ ) { s3 += sz [ 0 ] [ j ] ; s4 += sz [ m - 1 ] [ j ] ; } s += s1 + s2 + s3 + s4 - sz [ 0 ] [ 0 ] - sz [ 0 ] [ n - 1 ] - sz [ m - 1 ] [ 0 ] - sz [ m - 1 ] [ n - 1 ] ; sf [ l ] = s ; } for ( l = 0 ; l < k ; l ++ ) { printf ( "%d\n" , sf [ l ] ) ; } return 0 ; }
int main ( ) { int k , m , n , i , j , l , s ; int sz [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; int * sf = ( int * ) malloc ( sizeof ( int ) * k ) ; for ( i = 0 ; i < k ; i ++ ) { s = 0 ; scanf ( "%d %d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) { scanf ( "%d" , & sz [ j ] [ l ] ) ; } } if ( m == 1 ) { for ( l = 0 ; l < n ; l ++ ) { s += sz [ 0 ] [ l ] ; } } else if ( n == 1 ) { for ( j = 0 ; j < m ; j ++ ) { s += sz [ j ] [ 0 ] ; } } else { for ( j = 0 ; j < m ; j ++ ) { s += sz [ j ] [ 0 ] + sz [ j ] [ n - 1 ] ; } for ( l = 0 ; l < n ; l ++ ) { s += sz [ 0 ] [ l ] + sz [ m - 1 ] [ l ] ; } s = s - sz [ 0 ] [ 0 ] - sz [ 0 ] [ n - 1 ] - sz [ m - 1 ] [ 0 ] - sz [ m - 1 ] [ n - 1 ] ; } sf [ i ] = s ; } for ( i = 0 ; i < k ; i ++ ) { printf ( "%d\n" , sf [ i ] ) ; } return 0 ; }
int main ( ) { int N = 100 ; int k , m , n , i , a [ N ] [ N ] , b [ N ] , c , d , e [ N ] , f [ N ] ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { b [ i ] = 0 ; scanf ( "%d %d" , & e [ i ] , & f [ i ] ) ; m = e [ i ] ; n = f [ i ] ; for ( c = 0 ; c < m ; c ++ ) { for ( d = 0 ; d < n ; d ++ ) { scanf ( "%d" , & a [ c ] [ d ] ) ; } } for ( c = 0 ; c < m ; c ++ ) { b [ i ] = b [ i ] + a [ c ] [ 0 ] + a [ c ] [ n - 1 ] ; } for ( d = 1 ; d < n - 1 ; d ++ ) { b [ i ] = b [ i ] + a [ 0 ] [ d ] + a [ m - 1 ] [ d ] ; } printf ( "%d" , b [ i ] ) ; printf ( "\n" ) ; } return 0 ; }
int main ( ) { int k ; scanf ( "%d" , & k ) ; while ( k -- ) { int m , n ; int data [ 100 ] [ 100 ] ; scanf ( "%d %d" , & m , & n ) ; int i , j ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & data [ i ] [ j ] ) ; int sum = 0 ; for ( i = 0 ; i < m ; i ++ ) sum = sum + data [ i ] [ 0 ] + data [ i ] [ n - 1 ] ; for ( i = 1 ; i < n - 1 ; i ++ ) sum = sum + data [ 0 ] [ i ] + data [ m - 1 ] [ i ] ; printf ( "%d\n" , sum ) ; } }
int main ( ) { int a , m , n , i , j , b ; int sz [ M ] [ N ] ; scanf ( "%d" , & a ) ; for ( b = 1 ; b <= a ; b ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & sz [ i ] [ j ] ) ; } } int e , k , h = 0 ; for ( e = 0 ; e < m ; e ++ ) { if ( e == 0 ) { for ( k = 0 ; k < n ; k ++ ) { h += sz [ e ] [ k ] ; } } if ( e == m - 1 ) { for ( k = 0 ; k < n ; k ++ ) { h += sz [ e ] [ k ] ; } } } for ( k = 0 ; k < n ; k ++ ) { if ( k == n - 1 ) { for ( e = 1 ; e < m - 1 ; e ++ ) { h += sz [ e ] [ k ] ; } } if ( k == 0 ) { for ( e = 1 ; e < m - 1 ; e ++ ) { h += sz [ e ] [ k ] ; } } } printf ( "%d\n" , h ) ; } return 0 ; }
int main ( ) { int K , M , N , sz [ 99 ] [ 99 ] ; scanf ( "%d" , & K ) ; for ( int k = 1 ; k <= K ; k ++ ) { int result = 0 ; scanf ( "%d %d" , & M , & N ) ; for ( int m = 0 ; m < M ; m ++ ) for ( int n = 0 ; n < N ; n ++ ) scanf ( "%d" , & sz [ m ] [ n ] ) ; if ( M <= 2 || N <= 2 ) { for ( int m = 0 ; m < M ; m ++ ) for ( int n = 0 ; n < N ; n ++ ) result += sz [ m ] [ n ] ; } else { for ( int n = 0 ; n < N ; n ++ ) result += sz [ 0 ] [ n ] ; for ( int n = 0 ; n < N ; n ++ ) result += sz [ M - 1 ] [ n ] ; for ( int m = 1 ; m < M - 1 ; m ++ ) result += sz [ m ] [ 0 ] ; for ( int m = 1 ; m < M - 1 ; m ++ ) result += sz [ m ] [ N - 1 ] ; } printf ( "%d\n" , result ) ; } return 0 ; }
int main ( ) { int n , i , j , k , h , l , y ; int * p = NULL ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { y = 0 ; int x [ 101 ] [ 101 ] = { 0 } ; cin >> h >> l ; for ( j = 1 ; j <= h ; j ++ ) { for ( k = 1 ; k <= l ; k ++ ) { cin >> x [ j ] [ k ] ; } } for ( p = x [ 1 ] + 1 ; p <= x [ 1 ] + l ; p ++ ) { y = y + ( * p ) ; } for ( p = x [ 2 ] + 1 ; p <= x [ h - 1 ] + 1 ; p = p + 101 ) { y = y + ( * p ) + ( * ( p + l - 1 ) ) ; } for ( p = x [ h ] + 1 ; p <= x [ h ] + l ; p ++ ) { y = y + ( * p ) ; } cout << y << endl ; } return 0 ; }
int main ( ) { int c1 , c2 , d , i , x = 0 , k , m , n ; int sum [ L ] ; int a [ L ] [ L ] , b [ L ] ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < L ; i ++ ) { sum [ i ] = 0 ; } for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d %d" , & m , & n ) ; for ( c1 = 0 ; c1 < m ; c1 ++ ) { for ( c2 = 0 ; c2 < n ; c2 ++ ) { scanf ( "%d" , & a [ c1 ] [ c2 ] ) ; } } for ( d = 0 ; d < m ; d ++ ) { sum [ x ] += a [ d ] [ 0 ] + a [ d ] [ n - 1 ] ; } for ( d = 1 ; d < n - 1 ; d ++ ) { sum [ x ] += a [ 0 ] [ d ] + a [ m - 1 ] [ d ] ; } x ++ ; } for ( i = 0 ; i < x ; i ++ ) { printf ( "%d\n" , sum [ i ] ) ; } return 0 ; }
int main ( ) { int k ; scanf ( "%d" , & k ) ; while ( k -- ) { int m , n ; scanf ( "%d %d" , & m , & n ) ; int a [ 101 ] [ 101 ] ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; int sum = 0 ; for ( int i = 0 ; i < m ; i ++ ) sum = sum + a [ i ] [ 0 ] + a [ i ] [ n - 1 ] ; for ( int i = 1 ; i < n - 1 ; i ++ ) sum = sum + a [ 0 ] [ i ] + a [ m - 1 ] [ i ] ; printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , k , i , j , t , m , n , sum ; scanf ( "%d" , & k ) ; for ( t = 1 ; t <= k ; t ++ ) { sum = 0 ; scanf ( "%d%d" , & m , & n ) ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( i = 2 ; i < n ; i ++ ) sum += a [ 1 ] [ i ] + a [ m ] [ i ] ; for ( j = 2 ; j < m ; j ++ ) sum += a [ j ] [ 1 ] + a [ j ] [ n ] ; sum += a [ 1 ] [ 1 ] + ( n != 1 ) * a [ 1 ] [ n ] + ( m != 1 ) * a [ m ] [ 1 ] + ( m != 1 ) * a [ m ] [ n ] ; if ( t < k ) printf ( "%d\n" , sum ) ; else printf ( "%d" , sum ) ; } return 0 ; }
int main ( ) { int m , n , t , i , j , l , k , sum = 0 , a [ 100 ] [ 100 ] ; scanf ( "%d" , & t ) ; for ( l = 0 ; l < t ; l ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } if ( m == n && n == 1 ) { printf ( "%d" , a [ 0 ] [ 0 ] ) ; } else { for ( j = 0 ; j < n ; j ++ ) { sum += a [ 0 ] [ j ] ; sum += a [ m - 1 ] [ j ] ; } for ( i = 0 ; i < m ; i ++ ) { sum += a [ i ] [ 0 ] ; sum += a [ i ] [ n - 1 ] ; } sum = sum - a [ 0 ] [ 0 ] - a [ 0 ] [ n - 1 ] - a [ m - 1 ] [ 0 ] - a [ m - 1 ] [ n - 1 ] ; printf ( "%d\n" , sum ) ; } sum = 0 ; } scanf ( "%d" , & i ) ; return 0 ; }
int main ( ) { int jvzhen ( ) ; int n , i , a ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { a = jvzhen ( ) ; printf ( "%d\n" , a ) ; } return 0 ; } int jvzhen ( ) { int m , n , i , j , sum ; sum = 0 ; scanf ( "%d %d" , & m , & n ) ; int b [ 100 ] [ 100 ] ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) scanf ( "%d" , * ( b + i ) + j ) ; } for ( i = 1 ; i <= n ; i ++ ) sum = sum + * ( * ( b + 1 ) + i ) ; if ( m > 1 ) { for ( i = 1 ; i <= n ; i ++ ) sum = sum + * ( * ( b + m ) + i ) ; } if ( m > 2 ) { for ( j = 2 ; j < m ; j ++ ) sum = sum + * ( * ( b + j ) + 1 ) + * ( * ( b + j ) + n ) ; } return ( sum ) ; }
int main ( ) { int k , i , j , h , m , n ; int sum = 0 , minus = 0 ; int a [ 100 ] [ 100 ] ; int b [ 100 ] ; scanf ( "%d" , & k ) ; for ( h = 0 ; h < k ; h ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; sum += a [ i ] [ j ] ; } } for ( i = 1 ; i < m - 1 ; i ++ ) { for ( j = 1 ; j < n - 1 ; j ++ ) { minus += a [ i ] [ j ] ; } } b [ h ] = sum - minus ; sum = 0 ; minus = 0 ; } for ( h = 0 ; h < k ; h ++ ) { printf ( "%d\n" , b [ h ] ) ; } return 0 ; }
int main ( ) { int N , m , n , i , M , j , JU [ 100 ] [ 100 ] , h , l ; scanf ( "%d" , & N ) ; for ( i = 0 ; i < N ; i ++ ) { M = 0 ; scanf ( "%d %d" , & m , & n ) ; for ( h = 0 ; h < m ; h ++ ) { for ( l = 0 ; l < n ; l ++ ) { scanf ( "%d" , & JU [ h ] [ l ] ) ; } } if ( n == 1 ) { for ( j = 0 ; j < m ; j ++ ) M = M + JU [ j ] [ 0 ] ; } else if ( m == 1 ) { for ( j = 0 ; j < n ; j ++ ) M = M + JU [ 0 ] [ j ] ; } else { for ( h = 0 ; h < m ; h ++ ) { if ( h > 0 && h < m - 1 ) { M = M + JU [ h ] [ 0 ] + JU [ h ] [ n - 1 ] ; } else { for ( j = 0 ; j < n ; j ++ ) M = M + JU [ h ] [ j ] ; } } } printf ( "%d\n" , M ) ; } return 0 ; }
int A [ 100 ] [ 100 ] ; int main ( ) { int * pt ; int i , j , k ; int m , n ; int * re ; int B [ 200 ] ; int number ; scanf ( "%d" , & number ) ; re = B ; for ( i = 0 ; i < 200 ; i ++ ) { * ( re + i ) = 0 ; } re = B ; for ( i = 0 ; i < number ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { for ( k = 0 ; k < 100 ; k ++ ) { * ( * ( A + j ) + k ) = 0 ; } } scanf ( "%d%d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d" , * ( A + j ) + k ) ; } } pt = * A ; for ( j = 0 ; j < n ; j ++ ) { if ( j < ( n - 1 ) ) { * re = * re + * pt ; pt ++ ; } else { * re = * re + * pt ; pt = pt + 100 ; } } for ( j = 1 ; j < m ; j ++ ) { if ( j < ( m - 1 ) ) { * re = * re + * pt ; pt = pt + 100 ; } else { * re = * re + * pt ; pt = pt - 1 ; } } for ( j = 1 ; j < n ; j ++ ) { if ( j < ( n - 1 ) ) { * re = * re + * pt ; pt -- ; } else { * re = * re + * pt ; pt = pt - 100 ; } } for ( j = 1 ; j < ( m - 1 ) ; j ++ ) { * re = * re + * pt ; pt = pt - 100 ; } re ++ ; } re = B ; for ( i = 0 ; i < number ; i ++ ) { printf ( "%d\n" , * ( re + i ) ) ; } return 0 ; }
void main ( ) { int i , j , k , m , n , x [ 10000 ] , sum = 0 , * p ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) { scanf ( "%d%d" , & m , & n ) ; sum = 0 ; for ( p = x ; p < x + m * n ; p ++ ) scanf ( "%d" , p ) ; for ( p = x ; p < x + n ; p ++ ) sum = sum + * p ; for ( p = x + ( m - 1 ) * n ; m != 1 && p < x + n * m ; p ++ ) sum = sum + * p ; for ( p = x + n ; p < x + n * ( m - 1 ) ; p = p + n ) sum = sum + * p ; for ( p = x + n + n - 1 ; p < x + n * m - 1 ; p = p + n ) sum = sum + * p ; printf ( "%d\n" , sum ) ; } }
int main ( ) { int a [ 200 ] [ 200 ] , t , n , m , i , j , s ; int ( * p ) [ 200 ] ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d%d" , & n , & m ) ; p = a ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) scanf ( "%d" , * ( p + i ) + j ) ; s = 0 ; for ( i = 0 ; i < m ; i ++ ) s = s + * ( * p + i ) ; if ( n > 1 ) for ( i = 0 ; i < m ; i ++ ) s = s + * ( * ( p + n - 1 ) + i ) ; for ( i = 1 ; i < n - 1 ; i ++ ) s = s + * ( * ( p + i ) ) ; if ( m > 1 ) for ( i = 1 ; i < n - 1 ; i ++ ) s = s + * ( * ( p + i ) + m - 1 ) ; printf ( "%d\n" , s ) ; } }
int main ( ) { int a [ 100 ] [ 100 ] , k , n , m ; cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { int sum = 0 ; cin >> m >> n ; for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; int * p = a [ 0 ] ; for ( ; p < a [ 0 ] + n ; p ++ ) sum += * p ; if ( m == 1 ) { cout << sum << endl ; continue ; } p = a [ m - 1 ] ; for ( ; p < a [ m - 1 ] + n ; p ++ ) sum += * p ; int ( * q ) [ 100 ] = a + 1 ; for ( ; q <= a + m - 2 ; q ++ ) sum += * * q + * ( ( * q ) + n - 1 ) ; if ( n == 1 ) { cout << ( sum - a [ 0 ] [ 0 ] - a [ m - 1 ] [ 0 ] ) / 2 + a [ 0 ] [ 0 ] + a [ m - 1 ] [ 0 ] ; continue ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k , m , n , i , j , sum , matrix [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; while ( k > 0 ) { k -- ; sum = 0 ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , * ( matrix + i ) + j ) ; } if ( m == 1 && n == 1 ) printf ( "%d\n" , * * matrix ) ; else if ( m == 1 ) { for ( i = 0 ; i < n ; i ++ ) sum += * ( * matrix + i ) ; printf ( "%d\n" , sum ) ; } else if ( n == 1 ) { for ( i = 0 ; i < m ; i ++ ) sum += * * ( matrix + i ) ; printf ( "%d\n" , sum ) ; } else { for ( i = 0 ; i < n ; i ++ ) sum += * ( * matrix + i ) ; for ( i = 0 ; i < n ; i ++ ) sum += * ( * ( matrix + m - 1 ) + i ) ; for ( i = 1 ; i < m - 1 ; i ++ ) sum += ( * * ( matrix + i ) + * ( * ( matrix + i ) + n - 1 ) ) ; printf ( "%d\n" , sum ) ; } } return 0 ; }
int main ( ) { int k , m [ 200 ] , n [ 200 ] , i , t , j , a [ 200 ] [ 200 ] , sum ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) { scanf ( "%d%d" , & m [ i ] , & n [ i ] ) ; for ( t = 1 ; t <= m [ i ] ; t ++ ) { for ( j = 1 ; j <= n [ i ] ; j ++ ) { scanf ( "%d" , & a [ t ] [ j ] ) ; } } if ( m [ i ] == 1 && n [ i ] == 1 ) printf ( "%d" , a [ 1 ] [ 1 ] ) ; else { sum = 0 ; for ( t = 1 ; t <= n [ i ] ; t ++ ) { sum = sum + a [ 1 ] [ t ] ; } for ( j = 1 ; j <= n [ i ] ; j ++ ) { sum = sum + a [ m [ i ] ] [ j ] ; } for ( t = 1 ; t <= m [ i ] ; t ++ ) { sum = sum + a [ t ] [ 1 ] ; } for ( j = 1 ; j <= m [ i ] ; j ++ ) { sum = sum + a [ j ] [ n [ i ] ] ; } sum = sum - a [ 1 ] [ 1 ] - a [ 1 ] [ n [ i ] ] - a [ m [ i ] ] [ n [ i ] ] - a [ m [ i ] ] [ 1 ] ; printf ( "%d\n" , sum ) ; } } return 0 ; }
int main ( ) { int k , m , n , i , j , a [ 100 ] [ 100 ] , sum ; int * p ; scanf ( "%d" , & k ) ; for ( ; k > 0 ; k -- ) { sum = 0 ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( p = a [ 0 ] ; p < a [ 0 ] + n ; p ++ ) sum += * p ; for ( p = p + 99 ; p < a [ 0 ] + ( m - 1 ) * 100 + n ; p = p + 100 ) sum += * p ; for ( p = p - 101 ; p > a [ 0 ] + ( m - 1 ) * 100 - 1 ; p -- ) sum += * p ; for ( p = p - 99 ; p > a [ 0 ] ; p = p - 100 ) sum += * p ; printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int k , x , i , j , sum ; int m , n ; int a [ 100 ] [ 100 ] , b [ 100 ] ; scanf ( "%d" , & k ) ; for ( x = 0 ; x < k ; x ++ ) { sum = 0 ; scanf ( "%d %d" , & m , & n ) ; if ( ( m >= 3 ) & ( n >= 3 ) ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { sum += a [ i ] [ 0 ] ; } for ( i = 0 ; i < m ; i ++ ) { sum += a [ i ] [ n - 1 ] ; } for ( j = 0 ; j < n ; j ++ ) { sum += a [ 0 ] [ j ] ; } for ( j = 0 ; j < n ; j ++ ) { sum += a [ m - 1 ] [ j ] ; } sum = sum - a [ 0 ] [ 0 ] - a [ m - 1 ] [ 0 ] - a [ 0 ] [ n - 1 ] - a [ m - 1 ] [ n - 1 ] ; b [ x ] = sum ; } else { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; sum = sum + a [ i ] [ j ] ; } } b [ x ] = sum ; } } for ( x = 0 ; x < k ; x ++ ) printf ( "%d\n" , b [ x ] ) ; return 0 ; }
void main ( ) { int i , n , r , s , a [ 100 ] [ 100 ] , j , k = 1 , sum ; scanf ( "%d" , & n ) ; while ( k <= n ) { scanf ( "%d %d" , & r , & s ) ; sum = 0 ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j < s ; j ++ ) scanf ( "%d" , * ( a + i ) + j ) ; } if ( r == 1 ) { for ( i = 0 ; i < s ; i ++ ) sum += * ( * ( a + 0 ) + i ) ; } else if ( s == 1 ) { for ( i = 0 ; i < r ; i ++ ) sum += * ( * ( a + i ) + 0 ) ; } else { for ( i = 0 , j = 0 ; j < s - 1 ; j ++ ) sum += * ( * ( a + i ) + j ) ; for ( i = 0 , j = s - 1 ; i < r - 1 ; i ++ ) sum += * ( * ( a + i ) + j ) ; for ( i = r - 1 ; j > 0 ; j -- ) sum += * ( * ( a + i ) + j ) ; for ( j = 0 ; i > 0 ; i -- ) sum += * ( * ( a + i ) + j ) ; } printf ( "%d\n" , sum ) ; k ++ ; } }
void main ( ) { int a [ 10000 ] , m , n , k , i , j , sum , * p ; scanf ( "%d" , & k ) ; for ( i = 1 ; i <= k ; i ++ ) { sum = 0 ; scanf ( "%d%d" , & m , & n ) ; p = a ; if ( m * n > 1 ) { for ( j = 0 ; j < m * n ; j ++ ) { scanf ( "%d" , p ) ; p ++ ; } for ( p = a ; p < a + n ; p ++ ) { sum = sum + ( * p ) ; } for ( p = a + n ; p <= a + ( m - 2 ) * n ; p = p + n ) { sum = sum + ( * p ) ; } for ( p = a + 2 * n - 1 ; p <= a + ( m - 1 ) * n - 1 ; p = p + n ) { sum = sum + ( * p ) ; } for ( p = a + ( m - 1 ) * n ; p <= a + m * n - 1 ; p ++ ) { sum = sum + ( * p ) ; } printf ( "%d\n" , sum ) ; } else { scanf ( "%d" , p ) ; printf ( "%d" , * p ) ; } } }
int main ( ) { int a [ 101 ] [ 101 ] , row , line ; int i , j , judge = 0 , t , T , sum ; scanf ( "%d" , & t ) ; for ( T = 0 ; T < t ; T ++ ) { sum = 0 ; scanf ( "%d %d" , & row , & line ) ; if ( row == 1 || line == 1 ) { for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < line ; j ++ ) scanf ( "%d" , ( * ( a + i ) + j ) ) ; for ( i = 0 ; i < row ; i ++ ) for ( j = 0 ; j < line ; j ++ ) sum += * ( * ( a + i ) + j ) ; printf ( "%d\n" , sum ) ; return 0 ; } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < line ; j ++ ) { scanf ( "%d" , ( * ( a + i ) + j ) ) ; } } for ( i = 0 ; i < row ; i ++ ) { sum += * ( * ( a + i ) + 0 ) ; sum += * ( * ( a + i ) + line - 1 ) ; } for ( j = 0 ; j < line ; j ++ ) { sum += * ( * ( a + 0 ) + j ) ; sum += * ( * ( a + row - 1 ) + j ) ; } sum = sum - * ( * ( a + 0 ) + 0 ) - * ( * ( a + 0 ) + line - 1 ) - * ( * ( a + row - 1 ) + line - 1 ) - * ( * ( a + row - 1 ) + 0 ) ; printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int n , sum = 0 ; int h , l , a [ 100 ] [ 100 ] , i , j , m ; scanf ( "%d" , & n ) ; for ( m = 0 ; m < n ; m ++ ) { scanf ( "%d%d" , & h , & l ) ; for ( i = 0 ; i < h ; i ++ ) { for ( j = 0 ; j < l ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } if ( h < 2 && l < 2 ) { printf ( "%d" , a [ 0 ] [ 0 ] ) ; continue ; } for ( j = 0 ; j < l ; j ++ ) { sum += a [ 0 ] [ j ] ; sum += a [ h - 1 ] [ j ] ; } for ( i = 0 ; i < h ; i ++ ) { sum += a [ i ] [ 0 ] ; sum += a [ i ] [ l - 1 ] ; } sum = sum - a [ 0 ] [ 0 ] - a [ 0 ] [ l - 1 ] - a [ h - 1 ] [ 0 ] - a [ h - 1 ] [ l - 1 ] ; printf ( "%d\n" , sum ) ; sum = 0 ; } return 0 ; }
int main ( ) { int s , m , n , i , j , k , sum = 0 ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & s ) ; for ( k = 0 ; k < s ; k ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { sum += a [ 0 ] [ i ] ; } if ( m > 2 ) { for ( i = 1 ; i < m - 1 ; i ++ ) { sum += a [ i ] [ 0 ] ; sum += a [ i ] [ n - 1 ] ; } } if ( m > 1 ) { for ( i = 0 ; i < n ; i ++ ) { sum += a [ m - 1 ] [ i ] ; } } printf ( "%d\n" , sum ) ; sum = 0 ; } return 0 ; }
int main ( ) { int k , n , m , i , j , l , sum1 = 0 , sum2 = 0 , sum3 = 0 , sum4 = 0 ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; for ( l = 0 ; l < k ; l ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } for ( j = 0 ; j < n ; j ++ ) { sum1 = sum1 + a [ 0 ] [ j ] ; if ( ( m - 1 ) != 0 ) sum2 = sum2 + a [ m - 1 ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { sum3 = sum3 + a [ i ] [ 0 ] ; if ( ( n - 1 ) != 0 ) sum4 = sum4 + a [ i ] [ n - 1 ] ; } printf ( "%d\n" , sum1 + sum2 + sum3 + sum4 ) ; sum1 = 0 ; sum2 = 0 ; sum3 = 0 ; sum4 = 0 ; } }
int main ( ) { int count , m , n , array [ 100 ] [ 100 ] , sum [ 100 ] = { 0 } , i , j , p ; scanf ( "%d" , & count ) ; for ( i = 0 ; i < count ; i ++ ) { scanf ( "%d%d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) for ( p = 0 ; p < n ; p ++ ) scanf ( "%d" , & array [ j ] [ p ] ) ; for ( j = 0 ; j < n ; j ++ ) { sum [ i ] = sum [ i ] + array [ 0 ] [ j ] ; if ( m > 1 ) sum [ i ] = sum [ i ] + array [ m - 1 ] [ j ] ; } for ( j = 1 ; j < m - 1 ; j ++ ) { sum [ i ] = sum [ i ] + array [ j ] [ 0 ] ; sum [ i ] = sum [ i ] + array [ j ] [ n - 1 ] ; } } for ( i = 0 ; i < count ; i ++ ) printf ( "%d\n" , sum [ i ] ) ; return 0 ; }
int main ( ) { int i , m , n , ii , jj , l , t ; int s [ 10002 ] = { 0 } ; int * k = s ; int sum = 0 ; scanf ( "%d" , & jj ) ; for ( i = 1 ; i <= jj ; i ++ ) { scanf ( "%d %d" , & m , & n ) ; t = m * n ; for ( ii = 1 ; ii <= t ; ii ++ ) { k = k + 1 ; scanf ( "%d" , k ) ; if ( ii <= n || ii > ( m - 1 ) * n || ii % n == 1 || ii % n == 0 ) sum = sum + * k ; } printf ( "%d\n" , sum ) ; sum = 0 ; k = s ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , n , i , j , k ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { int a [ 100 ] [ 100 ] , r , l , sum = 0 ; scanf ( "%d%d" , & r , & l ) ; for ( j = 0 ; j <= r - 1 ; j ++ ) for ( k = 0 ; k <= l - 1 ; k ++ ) scanf ( "%d" , * ( a + j ) + k ) ; for ( j = 0 ; j <= r - 1 ; j ++ ) { for ( k = 0 ; k <= l - 1 ; k ++ ) { if ( j == r - 1 || j == 0 || k == l - 1 || k == 0 ) sum += * ( * ( a + j ) + k ) ; } } printf ( "%d\n" , sum ) ; } return 0 ; }
void main ( ) { int l , n , m , t , i , j ; scanf ( "%d" , & t ) ; for ( l = 1 ; l <= t ; l ++ ) { scanf ( "%d%d" , & n , & m ) ; int sum = 0 , a ; for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= m ; j ++ ) { scanf ( "%d" , & a ) ; if ( i == 1 || j == 1 || i == n || j == m ) sum += a ; } printf ( "%d\n" , sum ) ; } }
int main ( ) { int a [ 100 ] [ 100 ] , j , i , l , p , q ; int k , m , n , sum ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { sum = 0 ; cin >> m >> n ; for ( j = 1 ; j <= m ; j ++ ) { for ( l = 1 ; l <= n ; l ++ ) cin >> a [ j ] [ l ] ; } for ( p = 1 ; p <= n ; p ++ ) { sum = sum + a [ 1 ] [ p ] + a [ m ] [ p ] ; } for ( q = 2 ; q < m ; q ++ ) { sum = sum + a [ q ] [ 1 ] + a [ q ] [ n ] ; } cout << sum << endl ; } return 0 ; }
int haha ( ) { int m , n , sum , i , j , a [ 105 ] [ 105 ] ; scanf ( "%d%d" , & m , & n ) ; for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) scanf ( "%d" , & * ( * ( a + i ) + j ) ) ; sum = 0 ; if ( m == 1 ) for ( j = 1 ; j <= n ; j ++ ) sum = sum + * ( * ( a + 1 ) + j ) ; else if ( n == 1 ) for ( i = 1 ; i <= m ; i ++ ) sum = sum + * ( * ( a + i ) + 1 ) ; else { for ( j = 1 ; j <= n ; j ++ ) sum = sum + * ( * ( a + 1 ) + j ) ; for ( j = 1 ; j <= n ; j ++ ) sum = sum + * ( * ( a + m ) + j ) ; for ( i = 2 ; i <= m - 1 ; i ++ ) sum = sum + * ( * ( a + i ) + 1 ) ; for ( i = 2 ; i <= m - 1 ; i ++ ) sum = sum + * ( * ( a + i ) + n ) ; } return ( sum ) ; } int main ( ) { int i , j , k , l , m , n , a [ 1050 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) * ( a + i ) = haha ( ) ; for ( i = 1 ; i <= n ; i ++ ) printf ( "%d\n" , * ( a + i ) ) ; }
void main ( ) { int i , m , n , sum , a [ 10001 ] , * p ; scanf ( "%d" , & i ) ; while ( i -- ) { scanf ( "%d%d" , & m , & n ) ; for ( p = a ; p < a + m * n ; p ++ ) scanf ( "%d" , p ) ; sum = 0 ; for ( p = a ; p < a + n ; p ++ ) sum += * p ; if ( m != 1 ) for ( p = a + ( m - 1 ) * n ; p < a + m * n ; p ++ ) sum += * p ; for ( p = a + n ; p < a + ( m - 1 ) * n ; p += n ) sum += * p ; for ( p = a + n * 2 - 1 ; p < a + m * n - 1 ; p += n ) sum += * p ; printf ( "%d\n" , sum ) ; } }
void juzhen ( int m , int n ) { int a [ 100 ] [ 100 ] ; int i , j , sum = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , * ( a + i ) + j ) ; } } for ( j = 0 ; j < n ; j ++ ) { sum = sum + * ( * ( a ) + j ) + * ( * ( a + m - 1 ) + j ) ; } for ( i = 1 ; i < m - 1 ; i ++ ) { sum = sum + * ( * ( a + i ) + 0 ) + * ( * ( a + i ) + n - 1 ) ; } if ( m == 1 ) { sum = 0 ; for ( i = 0 ; i < n ; i ++ ) sum = sum + * ( * a + i ) ; } if ( n == 1 ) { sum = 0 ; for ( i = 0 ; i < m ; i ++ ) sum = sum + * ( * ( a + i ) + 0 ) ; } printf ( "%d\n" , sum ) ; } int main ( ) { int k , i , m , n ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( "%d %d" , & m , & n ) ; juzhen ( m , n ) ; } }
int main ( ) { int n ; cin >> n ; for ( int k = 1 ; k <= n ; k ++ ) { int row , col , count = 0 , i , j ; cin >> row >> col ; int str [ 101 ] [ 101 ] ; for ( i = 1 ; i <= row ; i ++ ) for ( j = 1 ; j <= col ; j ++ ) { cin >> * ( * ( str + i ) + j ) ; } for ( i = 1 ; i <= col ; i ++ ) count = count + * ( * ( str + 1 ) + i ) ; for ( i = 2 ; i <= row ; i ++ ) count = count + * ( * ( str + i ) + col ) ; for ( i = col - 1 ; i >= 1 ; i -- ) count = count + * ( * ( str + row ) + i ) ; for ( i = row - 1 ; i >= 2 ; i -- ) count = count + * ( * ( str + i ) + 1 ) ; cout << count << endl ; } return 0 ; }
int main ( ) { int i , k , m , n , j , z , s ; cin >> k ; for ( z = 1 ; z <= k ; z ++ ) { s = 0 ; cin >> m >> n ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; if ( m == 1 || n == 1 ) { for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) s = s + a [ i ] [ j ] ; } else { for ( i = 0 ; i < n ; i ++ ) s = s + * ( * a + i ) + * ( * ( a + m - 1 ) + i ) ; for ( i = 1 ; i < m - 1 ; i ++ ) s = s + * ( * ( a + i ) ) + * ( * ( a + i ) + n - 1 ) ; } cout << s << endl ; } }
int main ( ) { int n , i , j , k ; int line , row , sum ; int array [ 200 ] [ 200 ] ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> line >> row ; for ( j = 0 ; j < line ; j ++ ) for ( k = 0 ; k < row ; k ++ ) cin >> array [ j ] [ k ] ; sum = 0 ; if ( row == 1 || line == 1 ) { for ( j = 0 ; j < line ; j ++ ) for ( k = 0 ; k < row ; k ++ ) sum = sum + array [ j ] [ k ] ; cout << sum << endl ; } else { sum = 0 - array [ 0 ] [ 0 ] - array [ 0 ] [ row - 1 ] - array [ line - 1 ] [ 0 ] - array [ line - 1 ] [ row - 1 ] ; for ( j = 0 ; j < line ; j ++ ) sum = sum + array [ j ] [ 0 ] + array [ j ] [ row - 1 ] ; for ( j = 0 ; j < row ; j ++ ) sum = sum + array [ 0 ] [ j ] + array [ line - 1 ] [ j ] ; cout << sum << endl ; } } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , m , n , i , j , k , l , sum ; cin >> k ; for ( i = 1 ; i <= k ; i ++ ) { cin >> m >> n ; sum = 0 ; for ( j = 1 ; j <= m ; j ++ ) { for ( l = 1 ; l <= n ; l ++ ) { cin >> a [ j ] [ l ] ; if ( j == 1 || j == m || l == 1 || l == n ) { sum += a [ j ] [ l ] ; } } } cout << sum << endl ; } return 0 ; }
int main ( ) { int k ; cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { int m , n ; cin >> m >> n ; int a [ m ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } int s = 0 ; for ( int i = 0 ; i < n ; i ++ ) { s += * ( * ( a ) + i ) ; } if ( m > 1 ) for ( int i = 0 ; i < n ; i ++ ) { s += * ( * ( a + m - 1 ) + i ) ; } for ( int i = 1 ; i < m - 1 ; i ++ ) { s += * ( * ( a + i ) + 0 ) ; } for ( int i = 1 ; i < m - 1 ; i ++ ) { s += * ( * ( a + i ) + n - 1 ) ; } cout << s ; if ( i != k - 1 ) cout << endl ; } return 0 ; }
int main ( ) { int n ; cin >> n ; int a [ 100 ] [ 100 ] ; while ( n -- ) { int x , y , sum = 0 ; cin >> x >> y ; for ( int i = 0 ; i < x ; i ++ ) for ( int j = 0 ; j < y ; j ++ ) { cin >> a [ i ] [ j ] ; } for ( int i = 0 ; i < x ; i ++ ) { if ( y != 1 ) sum += a [ i ] [ 0 ] + a [ i ] [ y - 1 ] ; else sum += a [ i ] [ 0 ] ; } for ( int j = 1 ; j < y - 1 ; j ++ ) { sum += a [ 0 ] [ j ] + a [ x - 1 ] [ j ] ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k , m , n , i , j , z , sum , temp ; int a [ 101 ] [ 101 ] ; int ( * p ) [ 101 ] = a ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { sum = 0 ; cin >> m >> n ; for ( j = 0 ; j < m ; j ++ ) for ( z = 0 ; z < n ; z ++ ) cin >> * ( * ( p + j ) + z ) ; if ( m != 1 && n != 1 ) { for ( temp = 0 ; temp < n ; temp ++ ) sum += ( * ( * ( p ) + temp ) + * ( * ( p + m - 1 ) + temp ) ) ; for ( temp = 0 ; temp < m ; temp ++ ) sum += ( * ( * ( p + temp ) ) + * ( * ( p + temp ) + n - 1 ) ) ; sum -= * ( * ( p ) ) + * ( * ( p ) + n - 1 ) + * ( * ( p + m - 1 ) ) + * ( * ( p + m - 1 ) + n - 1 ) ; cout << sum << endl ; } else cout << * ( * ( p ) ) << endl ; } return 0 ; }
main ( ) { int nn , ii ; scanf ( "%d" , & nn ) ; for ( ii = 1 ; ii <= nn ; ii ++ ) { int n , m , t , i , j , x , y , sum = 0 ; scanf ( "%d %d" , & y , & x ) ; for ( i = 1 ; i <= y ; i ++ ) { for ( j = 1 ; j <= x ; j ++ ) { scanf ( "%d" , & t ) ; if ( i == 1 || i == y || j == x || j == 1 ) { sum += t ; } } } printf ( "%d\n" , sum ) ; } }
int main ( ) { int n = 0 , line = 0 , row = 0 ; int a [ 102 ] [ 102 ] ; cin >> n ; for ( int i = 0 ; i < n ; i ++ ) { cin >> line >> row ; for ( int j = 0 ; j < line ; j ++ ) { for ( int k = 0 ; k < row ; k ++ ) cin >> * ( * ( a + j ) + k ) ; } if ( line == 1 && row == 1 ) { cout << * * a << endl ; continue ; } int plus = * * a + * ( * a + row - 1 ) + * * ( a + line - 1 ) + * ( * ( a + line - 1 ) + row - 1 ) ; for ( int j = 1 ; j < line - 1 ; j ++ ) plus += * * ( a + j ) + * ( * ( a + j ) + row - 1 ) ; for ( int j = 1 ; j < row - 1 ; j ++ ) plus += * ( * a + j ) + * ( * ( a + line - 1 ) + j ) ; cout << plus << endl ; } return 0 ; }
int main ( ) { int k , a [ 100 ] [ 100 ] , i , j , m , n , sum = 0 ; cin >> k ; for ( int l = 0 ; l < k ; l ++ ) { cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ; for ( j = 0 ; j < n ; j ++ ) { sum = sum + a [ 0 ] [ j ] + a [ m - 1 ] [ j ] ; if ( m - 1 == 0 ) sum = sum - a [ m - 1 ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { sum = sum + a [ i ] [ 0 ] + a [ i ] [ n - 1 ] ; if ( n - 1 == 0 ) sum = sum - a [ i ] [ n - 1 ] ; } cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 99 ] [ 99 ] = { 0 } , m [ 100 ] , n [ 100 ] , k , i , j , l , sum [ 100 ] = { 0 } , leap ; cin >> k ; for ( i = 0 ; i <= k - 1 ; i ++ ) { cin >> m [ i ] >> n [ i ] ; for ( j = 0 ; j <= m [ i ] - 1 ; j ++ ) { for ( l = 0 ; l <= n [ i ] - 1 ; l ++ ) { cin >> a [ i ] [ j ] [ l ] ; } } } for ( i = 0 ; i <= k - 1 ; i ++ ) { if ( m [ i ] == 1 && n [ i ] == 1 ) { sum [ i ] = a [ i ] [ 0 ] [ 0 ] ; } else { for ( j = 0 ; j <= m [ i ] - 1 ; j ++ ) { sum [ i ] = a [ i ] [ j ] [ 0 ] + a [ i ] [ j ] [ n [ i ] - 1 ] + sum [ i ] ; } } } for ( i = 0 ; i <= k - 1 ; i ++ ) { if ( n [ i ] <= 2 ) leap = 1 ; else leap = 0 ; for ( j = 1 ; j <= n [ i ] - 2 ; j ++ ) { if ( leap ) break ; sum [ i ] = sum [ i ] + a [ i ] [ 0 ] [ j ] + a [ i ] [ m [ i ] - 1 ] [ j ] ; } } for ( i = 0 ; i <= k - 1 ; i ++ ) { cout << sum [ i ] << endl ; } return 0 ; }
int main ( ) { int k , m , n , a [ 110 ] [ 110 ] , sum = 0 ; cin >> k ; for ( int t = 0 ; t < k ; t ++ ) { sum = 0 ; cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> * ( * ( a + i ) + j ) ; if ( m == 1 ) { for ( int i = 0 ; i < n ; i ++ ) sum += * ( * ( a ) + i ) ; cout << sum << endl ; continue ; } if ( n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) sum += * ( * ( a ) + i ) ; cout << sum << endl ; continue ; } for ( int i = 0 ; i < n ; i ++ ) sum = sum + * ( * ( a ) + i ) + * ( * ( a + m - 1 ) + i ) ; for ( int i = 0 ; i < m ; i ++ ) sum = sum + * ( * ( a + i ) ) + * ( * ( a + i ) + n - 1 ) ; cout << sum - * ( * ( a ) ) - * ( * ( a ) + n - 1 ) - * ( * ( a + m - 1 ) ) - * ( * ( a + m - 1 ) + n - 1 ) << endl ; } return 0 ; }
int main ( ) { int a [ 105 ] [ 105 ] = { 0 } , n = 0 , row = 0 , col = 0 , i = 0 , j = 0 , * p = NULL , sum = 0 ; cin >> n ; while ( n -- ) { cin >> row >> col ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j < col ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( p = & a [ 0 ] [ 0 ] ; p < & a [ 0 ] [ 0 ] + col ; p ++ ) { sum = sum + * p ; } for ( i = 1 ; i < row - 1 ; i ++ ) { sum = sum + a [ i ] [ 0 ] + a [ i ] [ col - 1 ] ; } if ( row > 1 ) { for ( p = & a [ row - 1 ] [ 0 ] ; p < & a [ row - 1 ] [ 0 ] + col ; p ++ ) { sum = sum + * p ; } } cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int n = 0 , row = 0 , line = 0 , l = 0 ; int Matrix [ 100 ] [ 100 ] = { { 0 } , { 0 } } ; int a = 0 , b = 0 , c = 0 , d = 0 ; int total = 0 , extra = 0 ; scanf ( "%d" , & n ) ; while ( l < n ) { scanf ( "%d %d" , & row , & line ) ; for ( int i = 0 ; i < row ; i ++ ) for ( int j = 0 ; j < line ; j ++ ) scanf ( "%d" , & Matrix [ i ] [ j ] ) ; if ( row == 1 || line == 1 ) for ( int i = 0 ; i < row ; i ++ ) for ( int j = 0 ; j < line ; j ++ ) total += Matrix [ i ] [ j ] ; else { extra = Matrix [ 0 ] [ 0 ] + Matrix [ 0 ] [ line - 1 ] + Matrix [ row - 1 ] [ 0 ] + Matrix [ row - 1 ] [ line - 1 ] ; for ( int i = 0 ; i < line ; i ++ ) { a += Matrix [ 0 ] [ i ] ; c += Matrix [ row - 1 ] [ i ] ; } for ( int i = 0 ; i < row ; i ++ ) { b += Matrix [ i ] [ 0 ] ; d += Matrix [ i ] [ line - 1 ] ; } total = a + b + c + d - extra ; } printf ( "%d\n" , total ) ; l ++ ; a = 0 ; b = 0 ; c = 0 ; d = 0 ; } return 0 ; }
int main ( ) { int n = 0 ; int x = 0 , y = 0 ; int total = 0 ; int Matrix [ 100 ] [ 100 ] = { { 0 } , { 0 } } ; scanf ( "%d" , & n ) ; for ( int k = 0 ; k < n ; k ++ ) { scanf ( "%d %d" , & x , & y ) ; for ( int i = 0 ; i < x ; i ++ ) for ( int j = 0 ; j < y ; j ++ ) { scanf ( "%d" , & Matrix [ i ] [ j ] ) ; if ( i == 0 || i == x - 1 ) total += Matrix [ i ] [ j ] ; else if ( j == 0 || j == y - 1 ) total += Matrix [ i ] [ j ] ; } printf ( "%d\n" , total ) ; total = 0 ; } return 0 ; }
int main ( ) { int number [ 100 ] [ 100 ] ; int k , i , x , y ; int m , n ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { int sum = 0 ; cin >> m >> n ; for ( x = 0 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { cin >> * ( * ( number + x ) + y ) ; } } if ( n == 1 && m == 1 ) cout << * * number << endl ; else { for ( x = 0 ; x < m ; x ++ ) { sum += * ( * ( number + x ) ) ; sum += * ( * ( number + x ) + n - 1 ) ; } for ( y = 0 ; y < n ; y ++ ) { sum += * ( * ( number ) + y ) ; sum += * ( * ( number + m - 1 ) + y ) ; } sum = sum - * ( * ( number ) ) - * ( * ( number ) + n - 1 ) - * ( * ( number + m - 1 ) ) - * ( * ( number + m - 1 ) + n - 1 ) ; cout << sum << endl ; } } return 0 ; }
int main ( ) { int array [ 100 ] [ 100 ] ; int n , sum , row , col ; int * point ; point = * array ; cin >> n ; for ( ; n > 0 ; n -- ) { sum = 0 ; cin >> row >> col ; for ( point = * array ; point < * array + row * col ; point ++ ) cin >> * point ; point = * array ; for ( ; point < * array + col ; point ++ ) { sum = sum + * point ; } point -- ; for ( point = point + col ; point < * array + row * col ; point = point + col ) { sum = sum + * point ; } point -= col ; for ( point = point - 1 ; point >= * array + ( row - 1 ) * col ; point -- ) sum = sum + * point ; point ++ ; for ( point = point - col ; point > * array ; point = point - col ) sum = sum + * point ; cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i ; cin >> n ; for ( i = 0 ; i <= n - 1 ; i ++ ) { int row , col ; cin >> row >> col ; int number [ 100 ] [ 100 ] ; int k , m ; for ( k = 0 ; k <= row - 1 ; k ++ ) { for ( m = 0 ; m <= col - 1 ; m ++ ) { cin >> number [ k ] [ m ] ; } } int sum = 0 ; for ( k = 0 ; k <= row - 1 ; k ++ ) { for ( m = 0 ; m <= col - 1 ; m ++ ) { if ( k == 0 || m == 0 || k == row - 1 || m == col - 1 ) { sum += number [ k ] [ m ] ; } } } cout << sum << endl ; } return 0 ; }
main ( ) { int i , n , e , f , j , h = 0 , k ; scanf ( "%d" , & n ) ; for ( k = 0 ; k < n ; k ++ ) { scanf ( "%d %d" , & e , & f ) ; int a [ 100 ] [ 100 ] ; for ( i = 0 ; i < e ; i ++ ) for ( j = 0 ; j < f ; j ++ ) a [ i ] [ j ] = 0 ; for ( i = 0 ; i < e ; i ++ ) for ( j = 0 ; j < f ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < e ; i ++ ) { h = h + a [ i ] [ 0 ] + a [ i ] [ f - 1 ] ; } for ( j = 1 ; j < f - 1 ; j ++ ) { h = h + a [ 0 ] [ j ] + a [ e - 1 ] [ j ] ; } printf ( "%d\n" , h ) ; h = 0 ; e = 0 ; f = 0 ; } }
void sub ( void ) { int m , n ; scanf ( "%d %d" , & m , & n ) ; int * p ; int i , sum = 0 ; p = ( int * ) malloc ( 10000 * sizeof ( int ) ) ; for ( i = 0 ; i < m * n ; i ++ ) scanf ( "%d" , p + i ) ; for ( i = 1 ; i < n - 1 ; i ++ ) sum = sum + * ( p + i ) ; for ( i = m * n - n + 1 ; i < m * n - 1 ; i ++ ) sum = sum + * ( p + i ) ; for ( i = 0 ; i < m * n ; i ++ ) if ( ( i % n ) == 0 || ( ( i + 1 ) % n ) == 0 ) sum = sum + * ( p + i ) ; printf ( "%d\n" , sum ) ; } void main ( ) { int k ; scanf ( "%d" , & k ) ; int i ; for ( i = 0 ; i < k ; i ++ ) sub ( ) ; }
int main ( ) { int k , x , a [ 100 ] [ 100 ] = { { 0 , 0 } } , m , n , i , j , sum = 0 ; cin >> k ; for ( x = 1 ; x <= k ; x ++ ) { cin >> m >> n ; for ( i = 0 ; i <= m - 1 ; i ++ ) { for ( j = 0 ; j <= n - 1 ; j ++ ) { cin >> a [ i ] [ j ] ; if ( i == 0 || j == 0 || i == ( m - 1 ) || j == ( n - 1 ) ) { sum = sum + a [ i ] [ j ] ; } } } cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int k , m , n , i , j , l , number [ 100 ] [ 100 ] , num , * p = NULL ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { cin >> m >> n ; for ( j = 0 ; j < m ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) cin >> number [ j ] [ l ] ; } num = 0 ; p = * number ; for ( j = 0 ; j < n ; j ++ ) { if ( m == 1 ) { num += * ( p + j ) ; } else { num = num + * ( p + j ) + * ( * ( number + m - 1 ) + j ) ; } } p = * number ; for ( j = 1 ; j < m - 1 ; j ++ ) { if ( n == 1 ) { num += * * ( number + j ) ; } else { num = num + * * ( number + j ) + * ( * ( number + j ) + n - 1 ) ; } } cout << num << endl ; } return 0 ; }
void input ( int a [ ] [ 100 ] , int m , int n ) { for ( int i = 0 ; i < m ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) cin >> * ( * ( a + j ) + i ) ; } int main ( ) { int square [ 100 ] [ 100 ] ; int k , m , n ; cin >> k ; for ( int i = 1 ; i <= k ; i ++ ) { cin >> m >> n ; input ( square , m , n ) ; int sum = 0 ; for ( int j = 0 ; j < m ; j ++ ) sum = sum + * ( * square + j ) + * ( * ( square + n - 1 ) + j ) ; for ( int j = 1 ; j < n - 1 ; j ++ ) sum = sum + * * ( square + j ) + * ( * ( square + j ) + m - 1 ) ; if ( m == 1 ) sum = sum / 2 ; cout << sum << endl ; } return 0 ; }
int main ( ) { int i , j , q ; int k ; int m , n ; int a [ 110 ] [ 110 ] ; int sum ; scanf ( "%d" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { sum = 0 ; scanf ( "%d %d" , & m , & n ) ; for ( j = 0 ; j < m ; j ++ ) { for ( q = 0 ; q < n ; q ++ ) { scanf ( "%d" , * ( a + j ) + q ) ; } } for ( j = 0 ; j < n ; j ++ ) { sum += * ( * a + j ) ; if ( m != 1 ) sum += * ( * ( a + m - 1 ) + j ) ; } for ( j = 1 ; j < m - 1 ; j ++ ) { sum += * ( * ( a + j ) ) ; if ( n != 1 ) sum += * ( * ( a + j ) + n - 1 ) ; } printf ( "%d\n" , sum ) ; } return 0 ; }
int main ( ) { int k ; cin >> k ; int i , j , l , lin , col , sum = 0 ; int num [ 101 ] [ 101 ] ; for ( l = 1 ; l <= k ; l ++ ) { cin >> lin >> col ; for ( i = 1 ; i <= lin ; i ++ ) { for ( j = 1 ; j <= col ; j ++ ) cin >> num [ i ] [ j ] ; } if ( lin >= 2 && col >= 2 ) { for ( i = 2 ; i <= lin - 1 ; i ++ ) sum = sum + num [ i ] [ 1 ] + num [ i ] [ col ] ; for ( j = 1 ; j <= col ; j ++ ) sum = sum + num [ 1 ] [ j ] + num [ lin ] [ j ] ; } if ( lin == 1 && col >= 2 ) { for ( j = 1 ; j <= col ; j ++ ) sum = sum + num [ 1 ] [ j ] ; } if ( col == 1 && lin >= 2 ) { for ( i = 1 ; i <= lin ; i ++ ) sum = sum + num [ i ] [ 1 ] ; } if ( col == 1 && lin == 1 ) sum = sum + num [ 1 ] [ 1 ] ; cout << sum << endl ; sum = 0 ; } return 0 ; }
int main ( ) { int a [ 110 ] [ 110 ] ; int num , sum = 0 ; int k , m , n , i , j , l ; cin >> k ; for ( l = 0 ; l < k ; l ++ ) { sum = 0 ; cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> num ; a [ i ] [ j ] = num ; } } for ( i = 0 ; i < n ; i ++ ) { sum = sum + a [ 0 ] [ i ] ; } for ( i = 1 ; i < m ; i ++ ) { sum = sum + a [ i ] [ n - 1 ] ; } for ( i = 1 ; i < m ; i ++ ) { sum = sum + a [ i ] [ 0 ] ; } for ( i = 1 ; i < n - 1 ; i ++ ) { sum = sum + a [ m - 1 ] [ i ] ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k , l , m , n , i , j , sum = 0 ; int array [ 100 ] [ 100 ] ; cin >> k ; for ( l = 1 ; l <= k ; l ++ ) { sum = 0 ; cin >> m >> n ; if ( m == 1 || n == 1 ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> array [ i ] [ j ] ; sum += array [ i ] [ j ] ; } } cout << sum << endl ; break ; } i = 0 ; for ( j = 0 ; j < n ; j ++ ) { cin >> array [ 0 ] [ j ] ; sum += array [ 0 ] [ j ] ; } for ( i = 1 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> array [ i ] [ j ] ; } sum = sum + array [ i ] [ 0 ] + array [ i ] [ j - 1 ] ; } i = m - 1 ; for ( j = 0 ; j < n ; j ++ ) { cin >> array [ m - 1 ] [ j ] ; sum += array [ m - 1 ] [ j ] ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k = 0 ; cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { int m = 0 , n = 0 ; cin >> m >> n ; int mat [ 100 ] [ 100 ] = { 0 } ; int sum = 0 ; for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) { cin >> * ( * ( mat + j ) + k ) ; if ( ( j == 0 ) || ( j == m - 1 ) || ( k == 0 ) || ( k == n - 1 ) ) { sum = sum + * ( * ( mat + j ) + k ) ; } } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , k , m , i , j , t , s ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & k ) ; for ( t = 0 ; t < k ; t ++ ) { scanf ( "%d %d" , & m , & n ) ; s = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( i == 0 || i == m - 1 ) { s = s + a [ i ] [ j ] ; } if ( ( j == 0 || j == n - 1 ) && i != 0 && i != m - 1 ) { s = s + a [ i ] [ j ] ; } } } printf ( "%d\n" , s ) ; } return 0 ; }
int main ( ) { int k = 0 , m = 0 , n = 0 ; int ans = 0 , a = 0 ; cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { cin >> m >> n ; for ( int j = 0 ; j < m ; j ++ ) for ( int l = 0 ; l < n ; l ++ ) { cin >> a ; if ( ! l || l == ( n - 1 ) ) ans += a ; else if ( ! j || j == ( m - 1 ) ) ans += a ; } cout << ans << endl ; ans = 0 ; } return 0 ; }
int main ( ) { int i , j , n , m , k , sum ; int a [ 100 ] [ 100 ] ; cin >> k ; while ( k > 0 ) { sum = 0 ; k -- ; cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) cin >> * ( * ( a + i ) + j ) ; for ( j = 0 ; j < n ; j ++ ) { if ( m == 1 ) sum += * ( * a + j ) ; else sum += * ( * a + j ) + * ( * ( a + m - 1 ) + j ) ; } for ( i = 1 ; i < m - 1 ; i ++ ) sum += a [ i ] [ 0 ] + a [ i ] [ n - 1 ] ; cout << sum << endl ; } return 0 ; }
int main ( ) { int n , i , row , col , j , k , sum ; cin >> n ; cin . get ( ) ; for ( i = 0 ; i < n ; i ++ ) { sum = 0 ; row = 0 ; col = 0 ; int a [ 103 ] [ 103 ] = { 0 } ; cin >> row >> col ; for ( j = 0 ; j < row ; j ++ ) for ( k = 0 ; k < col ; k ++ ) cin >> * ( * ( a + j ) + k ) ; if ( ( row == 1 ) && ( col == 1 ) ) cout << * * a << endl ; else { for ( k = 0 ; k < col ; k ++ ) sum = sum + * ( * a + k ) ; for ( k = 0 ; k < col ; k ++ ) sum = sum + * ( * ( a + row - 1 ) + k ) ; for ( j = 0 ; j < row ; j ++ ) sum = sum + * * ( a + j ) ; for ( j = 0 ; j < row ; j ++ ) sum = sum + * ( * ( a + j ) + col - 1 ) ; sum = sum - * * a ; sum = sum - * ( * ( a + row - 1 ) ) ; sum = sum - * ( * a + col - 1 ) ; sum = sum - * ( * ( a + row - 1 ) + col - 1 ) ; cout << sum << endl ; } } return 0 ; }
void function ( ) { int a [ 110 ] [ 110 ] , ( * p ) [ 110 ] ; int n , m , i , sum = 0 , j ; cin >> n >> m ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) cin >> a [ i ] [ j ] ; p = a ; for ( i = 0 ; i < m ; i ++ ) { sum += * ( * p + i ) ; if ( n > 1 ) sum += * ( * ( p + n - 1 ) + i ) ; } for ( i = 1 ; i < n - 1 ; i ++ ) { sum += * * ( p + i ) ; if ( m > 1 ) sum += * ( * ( p + i ) + m - 1 ) ; } cout << sum << endl ; } int main ( ) { int n , i ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) function ( ) ; return 0 ; }
int main ( ) { int m , n , t ; cin >> t ; while ( t -- ) { int a [ 100 ] [ 100 ] , sum = 0 ; cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> * ( * ( a + i ) + j ) ; } } for ( int i = 0 ; i < m ; i ++ ) { if ( n > 1 ) sum += ( * * ( a + i ) + * ( * ( a + i ) + n - 1 ) ) ; else sum += * * ( a + i ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( m > 1 ) sum += ( * ( * a + i ) + * ( * ( a + m - 1 ) + i ) ) ; else sum += * ( * a + i ) ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k ; cin >> k ; int m , n ; int a [ 110 ] [ 110 ] ; for ( int i = 0 ; i < k ; i ++ ) { int sum = 0 ; cin >> m >> n ; if ( m > 1 && n > 1 ) { for ( int t1 = 0 ; t1 < m ; t1 ++ ) { for ( int t2 = 0 ; t2 < n ; t2 ++ ) cin >> * ( * ( a + t1 ) + t2 ) ; } for ( int k1 = 0 ; k1 < n ; k1 ++ ) sum = sum + * ( * ( a + 0 ) + k1 ) ; for ( int k2 = 0 ; k2 < n ; k2 ++ ) sum = sum + * ( * ( a + m - 1 ) + k2 ) ; for ( int k3 = 0 ; k3 < m ; k3 ++ ) sum = sum + * ( * ( a + k3 ) + 0 ) ; for ( int k4 = 0 ; k4 < m ; k4 ++ ) sum = sum + * ( * ( a + k4 ) + n - 1 ) ; sum = sum - * ( * ( a + 0 ) + 0 ) - * ( * ( a + m - 1 ) + n - 1 ) - * ( * ( a + 0 ) + n - 1 ) - * ( * ( a + m - 1 ) + 0 ) ; cout << sum << endl ; } else if ( m == 1 && n == 1 ) { cin >> sum ; cout << sum << endl ; } else if ( m == 1 && n > 1 ) { for ( int p1 = 0 ; p1 < n ; p1 ++ ) { cin >> * ( * ( a + 0 ) + p1 ) ; sum = sum + * ( * ( a + 0 ) + p1 ) ; } cout << sum << endl ; } else if ( m > 1 && n == 1 ) { for ( int p2 = 0 ; p2 < m ; p2 ++ ) { cin >> * ( * ( a + p2 ) + 0 ) ; sum = sum + * ( * ( a + p2 ) + 0 ) ; } cout << sum << endl ; } } return 0 ; }
int main ( ) { int k , i ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { int m , n , s , t , sum = 0 , matrix [ 100 ] [ 100 ] ; cin >> m >> n ; for ( s = 0 ; s < m ; s ++ ) for ( t = 0 ; t < n ; t ++ ) cin >> * ( * ( matrix + s ) + t ) ; for ( s = 0 ; s < n ; s ++ ) sum += * ( * ( matrix + 0 ) + s ) + * ( * ( matrix + m - 1 ) + s ) ; for ( s = 1 ; s < m - 1 ; s ++ ) sum += * ( * ( matrix + s ) + 0 ) + * ( * ( matrix + s ) + n - 1 ) ; if ( m == 1 || n == 1 ) sum /= 2 ; cout << sum << endl ; } return 0 ; }
int main ( ) { int k = 0 , n = 0 , m = 0 , i = 0 , w = 0 , j = 0 , sum = 0 , s [ 101 ] [ 101 ] = { 0 } ; cin >> k ; for ( w = 1 ; w <= k ; w ++ ) { sum = 0 ; cin >> n >> m ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= m ; j ++ ) { cin >> * ( s [ i ] + j ) ; if ( ( i == 1 ) || ( i == n ) || ( j == 1 ) || ( j == m ) ) sum += * ( s [ i ] + j ) ; } } cout << sum << endl ; } return 0 ; }
int main ( ) { int n , m , q ; int a [ 100 ] [ 100 ] ; int sum = 0 ; int ( * p ) [ 100 ] = a ; cin >> q ; for ( int i = 0 ; i < q ; i ++ ) { sum = 0 ; cin >> m >> n ; for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) { if ( j == 0 || j == m - 1 ) sum += p [ j ] [ k ] ; else { if ( k == 0 || k == n - 1 ) sum += p [ j ] [ k ] ; } } cout << sum << endl ; } return 0 ; }
int main ( ) { int t ; cin >> t ; for ( int i = 0 ; i < t ; i ++ ) { int n , m ; cin >> m >> n ; int num [ 110 ] [ 110 ] ; for ( int j = 0 ; j < m ; j ++ ) for ( int k = 0 ; k < n ; k ++ ) cin >> num [ j ] [ k ] ; int sum = 0 ; if ( m == 1 && n != 1 ) { for ( int j = 0 ; j < n ; j ++ ) sum = sum + num [ 0 ] [ j ] ; cout << sum << endl ; } else if ( m != 1 && n == 1 ) { for ( int j = 0 ; j < m ; j ++ ) sum = sum + num [ m ] [ 0 ] ; cout << sum << endl ; } else if ( m == 1 && n == 1 ) cout << num [ 0 ] [ 0 ] << endl ; else { for ( int j = 0 ; j < n ; j ++ ) sum = sum + * ( * num + j ) ; for ( int j = 0 ; j < n ; j ++ ) sum = sum + * ( num [ m - 1 ] + j ) ; for ( int j = 1 ; j < m - 1 ; j ++ ) sum = sum + * * ( num + j ) ; for ( int j = 1 ; j < m - 1 ; j ++ ) sum = sum + * ( * ( num + j ) + n - 1 ) ; cout << sum << endl ; } } return 0 ; }
int main ( ) { int i , k , m , n , a [ 100 ] [ 100 ] ; cin >> k ; for ( i = 1 ; i <= k ; i ++ ) { cin >> m >> n ; int r , s ; for ( r = 0 ; r < m ; r ++ ) for ( s = 0 ; s < n ; s ++ ) cin >> a [ r ] [ s ] ; int sum = 0 ; for ( r = 0 ; r < m ; r ++ ) for ( s = 0 ; s < n ; s ++ ) if ( r == 0 || r == m - 1 || s == 0 || s == n - 1 ) sum = sum + a [ r ] [ s ] ; cout << sum << endl ; } return 0 ; }
int main ( ) { int t ; int m , n ; int a [ 100 ] [ 100 ] = { 0 } ; int sum ; cin >> t ; int i , j , k ; for ( i = 0 ; i < t ; i ++ ) { cin >> m ; cin >> n ; sum = 0 ; for ( j = 0 ; j < m ; j ++ ) for ( k = 0 ; k < n ; k ++ ) a [ j ] [ k ] = 0 ; for ( j = 0 ; j < m ; j ++ ) for ( k = 0 ; k < n ; k ++ ) cin >> a [ j ] [ k ] ; for ( j = 0 ; j < n ; j ++ ) { sum = sum + a [ 0 ] [ j ] ; sum = sum + a [ m - 1 ] [ j ] ; } for ( k = 1 ; k < m - 1 ; k ++ ) { sum = sum + a [ k ] [ 0 ] ; sum = sum + a [ k ] [ n - 1 ] ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k , m , n , a [ 101 ] [ 101 ] , i , j , t , sum = 0 ; cin >> k ; for ( t = 1 ; t <= k ; t ++ ) { cin >> m >> n ; if ( m == 1 && n == 1 ) { cin >> a [ 1 ] [ 1 ] ; cout << a [ 1 ] [ 1 ] << endl ; } else { for ( i = 1 ; i <= m ; i ++ ) for ( j = 1 ; j <= n ; j ++ ) { cin >> a [ i ] [ j ] ; } for ( j = 1 ; j <= n ; j ++ ) { sum += a [ 1 ] [ j ] + a [ m ] [ j ] ; } for ( i = 1 ; i <= m ; i ++ ) { sum += a [ i ] [ 1 ] + a [ i ] [ n ] ; } sum = sum - a [ 1 ] [ 1 ] - a [ 1 ] [ n ] - a [ m ] [ 1 ] - a [ m ] [ n ] ; cout << sum << endl ; } int a [ 101 ] [ 101 ] = { 0 } ; sum = 0 ; } return 0 ; }
int main ( ) { int a [ 100 ] [ 100 ] , m , n , i , j , k ; cin >> k ; for ( int t = 1 ; t <= k ; t ++ ) { int sum = 0 ; cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; } } for ( i = 0 ; i < m ; i ++ ) { sum = sum + a [ i ] [ 0 ] + a [ i ] [ n - 1 ] ; } for ( j = 0 ; j < n ; j ++ ) { sum = sum + a [ 0 ] [ j ] + a [ m - 1 ] [ j ] ; } if ( k == 1 ) sum = sum - 3 * a [ 0 ] [ 0 ] ; else sum = sum - a [ 0 ] [ 0 ] - a [ 0 ] [ n - 1 ] - a [ m - 1 ] [ 0 ] - a [ m - 1 ] [ n - 1 ] ; cout << sum << endl ; } return 0 ; }
int main ( ) { int i , number ; cin >> number ; for ( i = 0 ; i < number ; i ++ ) { int m , n ; cin >> m >> n ; int a [ 100 ] [ 100 ] ; int * p = NULL , * q = NULL , i ; for ( p = * a ; p < * a + n * m ; p ++ ) { cin >> * p ; } int sum = 0 ; for ( p = * a ; p < * a + n ; p ++ ) { sum = sum + * p ; } if ( m != 1 ) { for ( p = * a + ( m - 1 ) * n ; p < * a + m * n ; p ++ ) { sum = sum + * p ; } } for ( p = * a + n ; p < * a + ( m - 1 ) * n ; p = p + n ) { sum = sum + * p + * ( p + n - 1 ) ; } cout << sum << endl ; } return 0 ; }
int sum = 0 ; int m , n ; void Input ( int ( * a ) [ 102 ] ) { cin >> m >> n ; for ( int i = 0 ; i <= m - 1 ; i ++ ) { for ( int j = 0 ; j <= n - 1 ; j ++ ) { cin >> * ( * ( a + i ) + j ) ; } } } void Sum ( int x , int y , int ( * a ) [ 102 ] ) { sum += * ( * ( a + x ) + y ) ; if ( x == 0 && y < n - 1 ) Sum ( x , y + 1 , a ) ; else if ( x < m - 1 && y == n - 1 ) Sum ( x + 1 , y , a ) ; else if ( x == m - 1 && y > 0 ) Sum ( x , y - 1 , a ) ; else if ( y == 0 && x > 1 ) Sum ( x - 1 , y , a ) ; else return ; } int main ( ) { int a [ 102 ] [ 102 ] ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { sum = 0 ; Input ( a ) ; Sum ( 0 , 0 , a ) ; if ( i != 1 ) cout << endl ; cout << sum ; } return 0 ; }
int main ( ) { int a ; cin >> a ; for ( int i = 1 ; i <= a ; i ++ ) { int m , n , t = 0 ; cin >> m >> n ; int x [ 100 ] [ 100 ] ; int * p ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cin >> * ( * ( x + i ) + j ) ; } } if ( m == 1 && n == 1 ) { cout << * ( * ( x ) ) << endl ; } if ( m == 1 && n != 1 ) { for ( int j = 0 ; j < n ; j ++ ) { t = t + * ( * ( x ) + j ) ; } cout << t << endl ; } if ( m != 1 && n == 1 ) { for ( int i = 0 ; i < m ; i ++ ) { t = t + * ( * ( x + i ) ) ; } cout << t << endl ; } if ( m != 1 && n != 1 ) { for ( int j = 0 ; j < n ; j ++ ) { t = t + * ( * ( x ) + j ) ; } for ( int j = 0 ; j < n ; j ++ ) { t = t + * ( * ( x + m - 1 ) + j ) ; } for ( int i = 0 ; i < m ; i ++ ) { t = t + * ( * ( x + i ) + 0 ) ; } for ( int i = 0 ; i < m ; i ++ ) { t = t + * ( * ( x + i ) + n - 1 ) ; } cout << t - * ( * ( x + 0 ) + 0 ) - * ( * ( x + 0 ) + n - 1 ) - * ( * ( x + m - 1 ) + 0 ) - * ( * ( x + m - 1 ) + n - 1 ) << endl ; } } return 0 ; }
int main ( ) { int k , m , n , a [ 110 ] [ 110 ] , sum = 0 ; cin >> k ; for ( int e = 1 ; e <= k ; e ++ ) { cin >> m >> n ; for ( int i = 1 ; i <= m ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> a [ i ] [ j ] ; if ( m == 1 && n == 1 ) cout << a [ 1 ] [ 1 ] << endl ; else { for ( int i = 1 ; i <= n ; i ++ ) sum = sum + a [ 1 ] [ i ] ; for ( int i = 1 ; i <= m ; i ++ ) sum = sum + a [ i ] [ 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) sum = sum + a [ m ] [ i ] ; for ( int i = 1 ; i <= m ; i ++ ) sum = sum + a [ i ] [ n ] ; sum = sum - a [ 1 ] [ 1 ] - a [ 1 ] [ n ] - a [ m ] [ 1 ] - a [ m ] [ n ] ; cout << sum << endl ; sum = 0 ; } } return 0 ; }
int main ( ) { int k , i ; cin >> k ; for ( i = 0 ; i < k ; i ++ ) { int m , n , j , l , s = 0 , A [ 110 ] ; cin >> m >> n ; for ( j = 0 ; j < m ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) cin >> * ( A + l ) ; if ( j == 0 || j == m - 1 ) { for ( l = 0 ; l < n ; l ++ ) s = s + * ( A + l ) ; } else s = s + * A + * ( A + n - 1 ) ; } cout << s << endl ; } return 0 ; }
int main ( ) { int n ; int x , y ; int a [ 100 ] [ 100 ] ; int i , j , k , l , m ; int s ; cin >> n ; for ( i = 1 ; i <= n ; i ++ ) { cin >> x >> y ; for ( j = 0 ; j < x ; j ++ ) { for ( k = 0 ; k < y ; k ++ ) { cin >> a [ j ] [ k ] ; } } s = 0 ; for ( l = 0 ; l < y ; l ++ ) { s = s + a [ 0 ] [ l ] + a [ x - 1 ] [ l ] ; } for ( m = 1 ; m < x - 1 ; m ++ ) s = s + a [ m ] [ 0 ] + a [ m ] [ y - 1 ] ; cout << s << endl ; } return 0 ; }
int main ( ) { int k , m , n , * p ; cin >> k ; for ( int i = 0 ; i < k ; i ++ ) { cin >> m >> n ; int sum = 0 ; int a [ 100 ] [ 100 ] = { 0 } ; for ( int j = 0 ; j < m ; j ++ ) for ( int l = 0 ; l < n ; l ++ ) cin >> a [ j ] [ l ] ; p = a [ 0 ] ; for ( int j = 0 ; j < n ; j ++ ) sum += * p ++ ; if ( m - 1 != 0 ) { p = a [ m - 1 ] ; for ( int j = 0 ; j < n ; j ++ ) sum += * p ++ ; } for ( int j = 1 ; j < m - 1 ; j ++ ) { p = a [ j ] ; sum += * p ; sum += * ( p + n - 1 ) ; } cout << sum << endl ; } return 0 ; }
int main ( ) { int k , m , n , a [ 100 ] [ 100 ] ; int i , p , q ; cin >> k ; for ( i = 1 ; i <= k ; i ++ ) { cin >> m >> n ; for ( p = 0 ; p < m ; p ++ ) for ( q = 0 ; q < n ; q ++ ) { cin >> a [ p ] [ q ] ; } int sum = 0 ; if ( m <= 2 || n <= 2 ) { for ( p = 0 ; p < m ; p ++ ) { for ( q = 0 ; q < n ; q ++ ) { sum = sum + a [ p ] [ q ] ; } } cout << sum << endl ; } else { int sum1 = 0 , sum2 = 0 ; sum = 0 ; for ( p = 0 ; p < m ; p ++ ) { sum1 = a [ p ] [ 0 ] + a [ p ] [ n - 1 ] + sum1 ; } for ( q = 0 ; q < n ; q ++ ) { sum2 = sum2 + a [ 0 ] [ q ] + a [ m - 1 ] [ q ] ; } sum = sum1 + sum2 - ( a [ 0 ] [ 0 ] + a [ 0 ] [ n - 1 ] + a [ m - 1 ] [ 0 ] + a [ m - 1 ] [ n - 1 ] ) ; cout << sum << endl ; } } return 0 ; }
int main ( ) { int len , len2 , i , j , f , ff ; char s [ 300 ] , sub [ 300 ] , replace [ 300 ] ; gets ( s ) ; len = strlen ( s ) ; gets ( sub ) ; gets ( replace ) ; len2 = strlen ( sub ) ; f = 0 ; for ( i = 0 ; i <= len - len2 ; i ++ ) { ff = 1 ; for ( j = 0 ; j < len2 ; j ++ ) if ( sub [ j ] != s [ i + j ] ) { ff = 0 ; break ; } if ( ff == 0 ) continue ; for ( j = 0 ; j < i ; j ++ ) printf ( "%c" , s [ j ] ) ; printf ( "%s" , replace ) ; for ( j = i + len2 ; j < len ; j ++ ) printf ( "%c" , s [ j ] ) ; f = 1 ; break ; } if ( f == 0 ) printf ( "%s" , s ) ; return 0 ; }
main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; int n = 0 , q = 0 ; for ( int i = 0 ; b [ i ] != '\0' ; i ++ ) { n ++ ; } for ( int i = 0 ; a [ i ] != '\0' ; i ++ ) { q ++ ; } int i , j , k , p ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { int m = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i + j ] == b [ j ] ) m ++ ; } if ( m == n ) break ; } if ( i == q ) for ( p = 0 ; a [ p ] != '\0' ; p ++ ) { printf ( "%c" , a [ p ] ) ; } else { for ( k = 0 ; c [ k ] != '\0' ; k ++ ) { a [ k + i ] = c [ k ] ; } for ( p = 0 ; a [ p ] != '\0' ; p ++ ) { printf ( "%c" , a [ p ] ) ; } } getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; }
int main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; char * t ; t = strstr ( a , b ) ; if ( t == NULL ) { printf ( "%s" , a ) ; return 0 ; } else { char f = t - a ; int d = strlen ( a ) , e = strlen ( c ) ; int i = f , j ; for ( j = 0 ; j < e ; j ++ ) { a [ i ] = c [ j ] ; i ++ ; if ( i == t - a + e ) break ; } } printf ( "%s" , a ) ; }
void main ( ) { char st [ 256 ] , sub [ 256 ] , rep [ 256 ] ; scanf ( "%s%s%s" , st , sub , rep ) ; int lenst , lensub , i , j ; lenst = strlen ( st ) ; lensub = strlen ( sub ) ; for ( i = 0 ; i <= lenst - lensub ; i ++ ) { int count = 0 ; if ( lensub != 1 ) { if ( st [ i ] == sub [ 0 ] ) { for ( j = i + 1 ; j < i + lensub ; j ++ ) { if ( st [ j ] != sub [ j - i ] ) break ; count ++ ; } } if ( count == lensub - 1 ) { for ( j = i ; j < i + lensub ; j ++ ) { st [ j ] = rep [ j - i ] ; } break ; } } else { if ( st [ i ] == sub [ 0 ] ) { st [ i ] = rep [ 0 ] ; break ; } } } printf ( "%s" , st ) ; }
int main ( ) { int i , j = 0 , k , t = 0 , l , p , h , n , m ; char str [ 3 ] [ 600 ] ; for ( i = 0 ; i < 3 ; i ++ ) scanf ( "%s" , str [ i ] ) ; m = strlen ( str [ 1 ] ) ; n = strlen ( str [ 0 ] ) ; p = strlen ( str [ 2 ] ) ; for ( i = 0 ; i < n - m + 1 , j < m ; i ++ ) { if ( str [ 0 ] [ i ] == str [ 1 ] [ j ] ) { t ++ ; j ++ ; } else { j = 0 ; t = 0 ; } if ( t == m ) break ; } if ( t != m ) printf ( "%s" , str [ 0 ] ) ; else { for ( l = i - m + 1 , h = 0 ; h < p ; h ++ , l ++ ) str [ 0 ] [ l ] = str [ 2 ] [ h ] ; printf ( "%s" , str [ 0 ] ) ; } return 0 ; }
int main ( ) { char str [ 257 ] , substr [ 257 ] , rep [ 257 ] ; int i , j = 0 , m , n , g = 0 ; scanf ( "%s" , str ) ; scanf ( "%s" , substr ) ; scanf ( "%s" , rep ) ; m = strlen ( str ) ; n = strlen ( substr ) ; for ( i = 0 ; i < m ; i ++ ) if ( str [ i ] == substr [ j ] && g < n ) { j ++ ; g ++ ; } else if ( g >= n ) break ; else { g = 0 ; j = 0 ; } if ( g == n ) for ( j = 0 , i = i - n ; j < n ; j ++ , i ++ ) { str [ i ] = rep [ j ] ; } printf ( "%s" , str ) ; return 0 ; }
int main ( ) { int i , j , k , l , n = 0 , m = 1 , z = 0 , t = 1 , g ; char q [ 256 ] , p [ 256 ] , w [ 256 ] ; scanf ( "%s" , q ) ; scanf ( "%s" , p ) ; scanf ( "%s" , w ) ; k = strlen ( q ) ; l = strlen ( p ) ; for ( i = 0 ; i < k ; i ++ ) { if ( p [ 0 ] == q [ i ] ) { for ( j = 1 ; j < l ; j ++ ) { g = 1 ; if ( p [ j ] != q [ j + i ] ) g = 0 ; } if ( g == 1 ) { z = 1 ; m = i ; break ; } } } if ( z ) { for ( j = 0 ; j < m ; j ++ ) { printf ( "%c" , q [ j ] ) ; } printf ( "%s" , w ) ; for ( j = m + l ; j < k ; j ++ ) printf ( "%c" , q [ j ] ) ; } else printf ( "%s" , q ) ; return 0 ; }
int main ( void ) { char string [ 256 ] ; scanf ( "%s" , string ) ; char substring [ 256 ] ; scanf ( "%s" , substring ) ; char replacement [ 256 ] ; scanf ( "%s" , replacement ) ; int Lsub = 0 ; for ( int i = 0 ; ; i ++ ) { if ( substring [ i ] == '\0' ) { Lsub = i ; break ; } } int Lrep = 0 ; for ( int i = 0 ; ; i ++ ) { if ( replacement [ i ] == '\0' ) { Lrep = i ; break ; } } int pBegin = check , judge = 1 ; for ( int i = 0 ; i < 256 - Lsub ; i ++ ) { judge = 1 ; for ( int j = i ; j < i + Lsub ; j ++ ) { if ( string [ j ] - substring [ j - i ] != 0 ) { judge = 0 ; break ; } if ( j - i == Lsub - 1 ) { break ; } } if ( judge == 1 ) { pBegin = i ; break ; } } if ( pBegin == check ) { printf ( "%s" , string ) ; } else { char Ans [ 512 ] ; for ( int i = 0 ; i < pBegin ; i ++ ) { Ans [ i ] = string [ i ] ; } for ( int i = pBegin ; i < pBegin + Lrep ; i ++ ) { Ans [ i ] = replacement [ i - pBegin ] ; } for ( int i = pBegin + Lrep ; ; i ++ ) { Ans [ i ] = string [ i - ( pBegin + Lrep ) + pBegin + Lsub ] ; if ( Ans [ i ] == '\0' ) { break ; } } printf ( "%s" , Ans ) ; } return 0 ; }
main ( ) { char a [ 256 ] ; char b [ 256 ] , c [ 256 ] ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; int sum1 = strlen ( b ) ; int i , j , k , m , n , p , q , start , pd = 0 ; for ( start = 0 ; start < strlen ( a ) ; start ++ ) { k = 0 ; for ( i = start ; i < start + sum1 ; i ++ ) { if ( a [ i ] != b [ k ] ) break ; k ++ ; } if ( i == ( start + sum1 ) ) { pd = 1 ; p = start ; break ; } } if ( pd == 1 ) { for ( q = p , k = 0 ; c [ k ] != '\0' ; q ++ , k ++ ) a [ q ] = c [ k ] ; } printf ( "%s" , a ) ; }
void main ( ) { char s [ 260 ] , w [ 260 ] , h [ 260 ] ; int l1 , l2 , i , j , k = 0 ; scanf ( "%s" , s ) ; scanf ( "%s" , w ) ; scanf ( "%s" , h ) ; l1 = strlen ( s ) ; l2 = strlen ( w ) ; for ( j = 0 ; j < l1 ; j ++ ) { if ( s [ j ] == w [ 0 ] ) { for ( i = 1 ; i < l2 ; i ++ ) if ( s [ j + i ] != w [ i ] ) break ; if ( i == l2 ) { k = 1 ; break ; } } } if ( k ) { for ( k = 0 ; k < j ; k ++ ) printf ( "%c" , s [ k ] ) ; for ( k = 0 ; k < l2 ; k ++ ) printf ( "%c" , h [ k ] ) ; for ( k = j + l2 ; k < l1 ; k ++ ) printf ( "%c" , s [ k ] ) ; printf ( "\n" ) ; } else { printf ( "%s" , s ) ; } }
int main ( ) { char sentence [ 256 ] , sub_sen [ 256 ] , replacement [ 256 ] ; cin . getline ( sentence , 256 ) ; cin . getline ( sub_sen , 256 ) ; cin . getline ( replacement , 256 ) ; char * p ; p = strstr ( sentence , sub_sen ) ; if ( ! p ) cout << sentence << endl ; int i ; int length = strlen ( sub_sen ) ; if ( p ) { for ( i = 0 ; i < p - sentence ; i ++ ) cout << sentence [ i ] ; cout << replacement ; cout << p + length << endl ; } return 0 ; }
int main ( ) { char s [ 256 ] ; char a [ 256 ] ; char t [ 256 ] ; char c ; int i , ls , j , la , lt , g , word = 0 ; scanf ( "%s" , s ) ; scanf ( "%s" , a ) ; scanf ( "%s" , t ) ; ls = strlen ( s ) ; la = strlen ( a ) ; lt = strlen ( t ) ; for ( i = 0 ; i < ls ; i ++ ) { if ( word == 0 ) { g = 0 ; if ( s [ i ] == a [ 0 ] ) { g ++ ; for ( j = i + 1 ; j < i + la ; j ++ ) { if ( s [ j ] == a [ g ] ) { g ++ ; } } if ( g == la ) { word = 1 ; for ( j = i ; j < i + la ; j ++ ) { s [ j ] = t [ j - i ] ; } } } } } printf ( "%s" , s ) ; return 0 ; }
main ( ) { char a [ 256 ] ; char b [ 256 ] ; char c [ 256 ] ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; int x , y , i , j , p , q , k , r , t , z ; x = strlen ( a ) ; y = strlen ( b ) ; q = 0 ; for ( i = 0 ; q == 0 && i < x ; i ++ ) { if ( b [ 0 ] == a [ i ] ) { p = i ; for ( j = 0 ; b [ j ] == a [ p ] && b [ j ] != '\0' && a [ p ] != '\0' ; j ++ ) { p ++ ; } if ( j == y ) { q = q + 1 ; } } } if ( q == 0 ) { for ( z = 0 ; z < x ; z ++ ) { printf ( "%c" , a [ z ] ) ; } } if ( q != 0 ) { for ( k = 0 ; k < i - 1 ; k ++ ) { printf ( "%c" , a [ k ] ) ; } for ( r = 0 ; r < y ; r ++ ) { printf ( "%c" , c [ r ] ) ; } for ( t = i + y - 1 ; t < x ; t ++ ) { printf ( "%c" , a [ t ] ) ; } } }
int main ( ) { char str [ 300 ] , subString [ 300 ] , replacement [ 300 ] ; char * p , * q ; int strLen , subLen , repLen , move , i ; cin >> str >> subString >> replacement ; strLen = strlen ( str ) ; subLen = strlen ( subString ) ; repLen = strlen ( replacement ) ; p = strstr ( str , subString ) ; if ( p == NULL ) { cout << str ; return 0 ; } q = replacement ; if ( repLen > subLen ) { move = repLen - subLen ; for ( q = str + strLen + move ; q >= p + repLen ; q -- ) { * q = * ( q - move ) ; } i = 0 ; q = replacement ; while ( i < repLen ) { * p ++ = * q ++ ; i ++ ; } } else if ( repLen == subLen ) { i = 0 ; while ( i < repLen ) { * p ++ = * q ++ ; i ++ ; } } else { i = 0 ; while ( i < repLen ) { * p ++ = * q ++ ; i ++ ; } move = subLen - repLen ; while ( * ( p + move ) != '\0' ) { * p ++ = * ( p + move ) ; } * p = '\0' ; } cout << str << endl ; return 0 ; }
int main ( ) { char str [ 300 ] , subString [ 300 ] , replacement [ 300 ] ; char * p , * q ; int strLen , subLen , repLen , move , i ; cin >> str >> subString >> replacement ; strLen = strlen ( str ) ; subLen = strlen ( subString ) ; repLen = strlen ( replacement ) ; p = strstr ( str , subString ) ; if ( p == NULL ) { cout << str ; return 0 ; } q = replacement ; if ( repLen > subLen ) { move = repLen - subLen ; for ( q = str + strLen + move ; q >= p + repLen ; q -- ) { * q = * ( q - move ) ; } i = 0 ; q = replacement ; while ( i < repLen ) { * p ++ = * q ++ ; i ++ ; } } else { i = 0 ; while ( i < repLen ) { * p ++ = * q ++ ; i ++ ; } if ( repLen < subLen ) { move = subLen - repLen ; while ( * ( p + move ) != '\0' ) { * p ++ = * ( p + move ) ; } * p = '\0' ; } } cout << str << endl ; return 0 ; }
int main ( ) { char string [ 260 ] = { 0 } , substring [ 50 ] = { 0 } , replacement [ 50 ] = { 0 } , temp [ 50 ] = { 0 } , length , length_s , length_r , i , j , k = 0 , m , n ; cin >> string >> substring >> replacement ; length = strlen ( string ) ; length_s = strlen ( substring ) ; length_r = strlen ( replacement ) ; for ( i = 0 ; i <= length - length_s ; i ++ ) { memset ( temp , 0 , sizeof ( temp ) ) ; k = 0 ; for ( j = i ; j < i + length_s ; j ++ ) { temp [ k ++ ] = string [ j ] ; } if ( ! strcmp ( temp , substring ) ) { if ( length_s != length_r ) { n = i + length_s ; for ( m = i + length_r ; m < length ; m ++ ) { string [ m ] = string [ n ++ ] ; } } n = 0 ; for ( m = i ; m < i + length_r ; m ++ ) { string [ m ] = replacement [ n ++ ] ; } break ; } } cout << string << endl ; return 0 ; }
int main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; scanf ( "%s%s%s" , a , b , c ) ; int i , l , k ; int m = 0 , n = 0 ; for ( ; ; ) { for ( k = m ; ; k ++ ) { if ( a [ k ] == b [ 0 ] ) { n = 1 ; break ; } if ( a [ k ] == '\0' ) { n = 2 ; break ; } } if ( n == 2 ) break ; else { m = k + 1 ; for ( l = 1 ; ; l ++ ) { if ( b [ l ] == '\0' ) { n = 3 ; break ; } if ( a [ k + l ] != b [ l ] ) { n = 4 ; break ; } } if ( n == 3 ) break ; } } if ( n == 2 ) printf ( "%s" , a ) ; else { for ( i = 0 ; ; i ++ ) { a [ k + i ] = a [ k + i + strlen ( b ) ] ; if ( a [ k + i + strlen ( b ) ] == '\0' ) break ; } for ( i = strlen ( c ) ; i > 0 ; i -- ) { int x = strlen ( a ) ; for ( l = 0 ; x - l >= k ; l ++ ) { a [ x + 1 - l ] = a [ x - l ] ; } a [ k ] = c [ i - 1 ] ; } printf ( "%s" , a ) ; } return 0 ; }
int main ( ) { char str [ 256 ] , substr [ 256 ] , replace [ 256 ] ; cin >> str >> substr >> replace ; int lenstr = strlen ( str ) , lensubstr = strlen ( substr ) , lenreplace = strlen ( replace ) ; int i , j ; int flag = 0 ; int pos ; for ( i = 0 ; i <= lenstr - lensubstr ; i ++ ) { for ( j = 0 ; j < lensubstr ; j ++ ) { if ( str [ i + j ] != substr [ j ] ) break ; } if ( j == lensubstr ) { pos = i ; flag = 1 ; break ; } } if ( flag ) { for ( i = 0 ; i < pos ; i ++ ) cout << str [ i ] ; cout << replace ; cout << ( str + pos + lensubstr ) << endl ; } else cout << str << endl ; return 0 ; }
int main ( ) { char str [ 260 ] , subStr [ 260 ] , replace [ 260 ] ; char * start = str , * node = NULL , * rep = replace ; int len ; cin >> str >> subStr >> replace ; node = strstr ( str , subStr ) ; if ( node == NULL ) while ( * start != '\0' ) cout << * start ++ ; else { len = strlen ( subStr ) ; while ( start != node ) cout << * start ++ ; while ( * rep != '\0' ) cout << * rep ++ ; node += len ; while ( * node != '\0' ) cout << * node ++ ; } cout << endl ; start = NULL ; node = NULL ; rep = NULL ; return 0 ; }
int main ( ) { char a [ 250 ] , b [ 150 ] , c [ 150 ] ; cin >> a >> b >> c ; if ( strstr ( a , b ) == NULL ) { cout << a ; return 0 ; } char * p = strstr ( a , b ) ; int i = 0 ; while ( c [ i ] != '\0' ) { * p ++ = c [ i ] ; i ++ ; } cout << a ; return 0 ; }
int main ( ) { char str [ 260 ] , subStr [ 260 ] , replace [ 260 ] , str2 [ 260 ] ; char * start = str , * node = NULL , * rep = replace ; int len , i = 0 ; cin >> str >> subStr >> replace ; node = strstr ( str , subStr ) ; if ( node == NULL ) cout << str ; else { while ( start != node ) str2 [ i ++ ] = * start ++ ; while ( * rep != '\0' ) str2 [ i ++ ] = * rep ++ ; node += strlen ( subStr ) ; while ( * node != '\0' ) str2 [ i ++ ] = * node ++ ; str2 [ i ] = '\0' ; cout << str2 ; } cout << endl ; start = NULL ; node = NULL ; rep = NULL ; return 0 ; }
int main ( ) { char a [ 256 ] = { 0 } , b [ 256 ] = { 0 } , c [ 256 ] = { 0 } ; cin >> a >> b >> c ; int i , j , m , k = 0 , la = strlen ( a ) , lb = strlen ( b ) ; for ( i = 0 ; i < la ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { m = i ; for ( j = 1 ; j < lb ; j ++ ) { m ++ ; if ( a [ m ] != b [ j ] ) break ; } if ( j == lb ) { m = i ; k = 1 ; break ; } } } if ( k == 0 ) cout << a ; else { for ( i = 0 ; i < m ; i ++ ) cout << a [ i ] ; cout << c ; for ( i = m + lb ; i < la ; i ++ ) cout << a [ i ] ; } return 0 ; }
char * strpos ( char string [ ] , char substring [ ] ) { char * p = string ; char * temp = NULL ; while ( * p != '\0' ) { if ( * p == substring [ 0 ] ) { temp = p ; p ++ ; int i ; for ( i = 1 ; i < strlen ( substring ) ; i ++ ) { if ( * p != substring [ i ] ) { break ; } p ++ ; } if ( i == strlen ( substring ) ) break ; else p = temp + 1 ; } else p ++ ; } return temp ; } int main ( ) { char string [ 256 ] , substring [ 256 ] , replacement [ 256 ] ; cin . getline ( string , 257 ) ; cin . getline ( substring , 257 ) ; cin . getline ( replacement , 257 ) ; char * p = strpos ( string , substring ) ; if ( p != NULL ) { int t = 0 , count = 0 ; while ( count != strlen ( substring ) ) { * p = replacement [ t ++ ] ; p ++ ; count ++ ; } } cout << string << endl ; return 0 ; }
main ( ) { int i , j , la , lb , lc , aaa ; char a [ 256 ] , b [ 256 ] , c [ 256 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; la = strlen ( a ) ; lb = strlen ( b ) ; lc = strlen ( c ) ; aaa = 0 ; for ( i = 0 ; i <= la - 1 ; i ++ ) { for ( j = 0 ; ( j <= lb - 1 ) && ( i + j <= la - 1 ) ; j ++ ) { if ( a [ i + j ] == b [ j ] ) { if ( j == lb - 1 ) { aaa = 1 ; } } else { break ; } } if ( aaa == 1 ) { break ; } } if ( aaa == 1 ) { for ( j = 0 ; j <= lc - 1 ; j ++ ) { a [ i + j ] = c [ j ] ; } } puts ( a ) ; }
int main ( ) { char s [ 100 ] , a [ 100 ] , b [ 100 ] ; int i , j , l , m , e = 0 ; char * str ; memset ( s , 0 , 100 ) ; memset ( a , 0 , 100 ) ; memset ( b , 0 , 100 ) ; gets ( s ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; l = strlen ( a ) ; m = strlen ( s ) ; str = s ; for ( i = 0 ; i <= m - l ; i ++ ) { e = 0 ; for ( j = 0 ; j < l ; j ++ ) { if ( s [ i + j ] != a [ j ] ) { e ++ ; break ; } } if ( e == 0 ) { s [ i ] = '\0' ; printf ( "%s" , str ) ; printf ( "%s" , b ) ; str = s + i + j ; break ; } } printf ( "%s" , str ) ; return 0 ; }
int main ( ) { int i , j , k , flag = 0 ; char str [ 512 ] , substr [ 256 ] , replace [ 256 ] ; cin . getline ( str , 512 ) ; cin . getline ( substr , 256 ) ; cin . getline ( replace , 256 ) ; int len1 = strlen ( str ) ; int len2 = strlen ( substr ) ; int len3 = strlen ( replace ) ; for ( i = 0 ; i <= len1 - len2 ; i ++ ) { k = i ; for ( j = 0 ; j < len2 ; j ++ ) { if ( str [ k ++ ] != substr [ j ] ) break ; } if ( j == len2 && flag == 0 ) { int ii ; for ( ii = i ; ii < i + len3 ; ii ++ ) { str [ ii ] = replace [ ii - i ] ; } flag = 1 ; } } for ( i = 0 ; str [ i ] != '\0' ; i ++ ) { cout << str [ i ] ; } return 0 ; }
int main ( ) { int len1 , len2 , len3 , i , j , m , p , flag = 0 ; char str1 [ 300 ] , str2 [ 50 ] , str3 [ 50 ] ; cin . getline ( str1 , 300 ) ; cin . getline ( str2 , 50 ) ; cin . getline ( str3 , 50 ) ; len1 = strlen ( str1 ) ; len2 = strlen ( str2 ) ; len3 = strlen ( str3 ) ; for ( i = 0 ; i <= len1 - len2 ; i ++ ) { flag = 0 ; m = i ; for ( j = 0 ; j < len2 ; j ++ ) { if ( str1 [ m ++ ] != str2 [ j ] ) break ; } if ( j == len2 ) { for ( p = 0 ; p < i ; p ++ ) cout << str1 [ p ] ; cout << str3 ; cout << str1 + i + len2 << endl ; flag = 1 ; break ; } } if ( flag == 0 ) { cout << str1 << endl ; } return 0 ; }
int main ( ) { char org [ 270 ] = { 0 } , sub [ 100 ] = { 0 } , rep [ 100 ] = { 0 } , temp [ 100 ] = { 0 } ; cin >> org >> sub >> rep ; int i , j , l1 = strlen ( org ) , l = strlen ( sub ) , flag = 0 ; for ( i = 0 ; i < l1 ; i ++ ) { for ( j = i ; j < i + l ; j ++ ) { temp [ j - i ] = org [ j ] ; } if ( strcmp ( temp , sub ) == 0 ) { flag = 1 ; break ; } } if ( flag ) { for ( int k = 0 ; k < i ; k ++ ) cout << org [ k ] ; cout << rep ; cout << org + j << endl ; } else cout << org << endl ; return 0 ; }
int main ( ) { char s [ 300 ] , * p , sub [ 50 ] , * q , * c , rep [ 50 ] ; cin >> s >> sub >> rep ; int len = strlen ( sub ) ; p = s ; q = sub ; c = strstr ( p , q ) ; if ( c == NULL ) { cout << s << endl ; } else { for ( p ; p < c ; p ++ ) { cout << * p ; } cout << rep ; for ( p = c + len ; * p != '\0' ; p ++ ) { cout << * p ; } } cout << endl ; return 0 ; }
char substring [ 256 ] = { 0 } ; char S [ 256 ] = { 0 } ; char replacement [ 256 ] = { 0 } ; int main ( ) { while ( cin >> S ) { cin >> substring ; cin >> replacement ; char * p = strstr ( S , substring ) ; char * q = NULL ; int i = 0 ; if ( p != NULL ) { for ( q = S ; q < p ; q ++ ) { cout << * q ; } cout << replacement ; for ( q = p + strlen ( substring ) ; * q != '\0' ; q ++ ) { cout << * q ; } cout << endl ; memset ( S , 0 , 256 ) ; memset ( substring , 0 , 256 ) ; memset ( replacement , 0 , 256 ) ; } else if ( p == NULL ) { cout << S << endl ; } } return 0 ; }
int main ( ) { char str [ 270 ] , subs [ 70 ] , rep [ 70 ] , * p ; cin >> str >> subs >> rep ; p = strstr ( str , subs ) ; if ( p != NULL ) for ( int i = 0 ; rep [ i ] != '\0' ; i ++ ) * p ++ = rep [ i ] ; cout << str << endl ; return 0 ; }
int main ( ) { char str [ 100 ] , substr [ 50 ] , r [ 50 ] ; gets ( str ) ; gets ( substr ) ; gets ( r ) ; int i , j , n , same = 0 ; int l = strlen ( substr ) ; for ( i = 0 ; str [ i ] != 0 ; i ++ ) { if ( substr [ 0 ] == str [ i ] ) { same = 1 ; for ( j = 1 ; substr [ j ] != 0 ; j ++ ) { if ( substr [ j ] != str [ i + j ] ) { same = 0 ; break ; } } if ( same == 1 ) { n = i ; break ; } } } if ( same == 1 ) { for ( j = 0 ; j < n ; j ++ ) { printf ( "%c" , str [ j ] ) ; } printf ( "%s" , r ) ; for ( j = n + l ; str [ j ] != 0 ; j ++ ) { printf ( "%c" , str [ j ] ) ; } } if ( same == 0 ) { printf ( "%s" , str ) ; } return 0 ; }
int main ( ) { char str [ 256 ] , sub [ 256 ] , replace [ 20 ] ; char * p ; int len1 , len2 , len3 , i , m ; cin >> str ; cin >> sub ; cin >> replace ; len1 = strlen ( str ) ; len2 = strlen ( sub ) ; len3 = strlen ( replace ) ; p = strstr ( str , sub ) ; if ( p != NULL ) { if ( len2 > len3 ) { m = len2 - len3 ; for ( i = 0 ; i < len3 ; i ++ ) * p ++ = replace [ i ] ; for ( i = 0 ; * ( p + m + i ) != str [ len1 - 1 ] ; i ++ ) * p = * ( p + m ) ; len1 -= m ; } if ( len2 == len3 ) { for ( i = 0 ; i < len3 ; i ++ ) * p ++ = replace [ i ] ; } if ( len2 < len3 ) { m = len3 - len2 ; for ( i = len1 - 1 ; str [ i ] != * ( p + m - 1 ) ; i -- ) str [ i + m ] = str [ i ] ; for ( i = 0 ; i < len3 ; i ++ ) * p ++ = replace [ i ] ; len1 += m ; } } for ( i = 0 ; i < len1 ; i ++ ) cout << str [ i ] ; cout << endl ; return 0 ; }
int main ( int argc , char * argv [ ] ) { int la , lb , i , j , n , k , x , p ; char a [ 100 ] , b [ 100 ] , c [ 100 ] , d [ 100 ] ; scanf ( "%s %s %s" , a , b , d ) ; la = strlen ( a ) ; lb = strlen ( b ) ; n = la - lb ; for ( i = 0 ; i <= n ; i ++ ) { if ( b [ 0 ] == a [ i ] ) { k = i ; p = i ; for ( j = 0 ; j < lb ; j ++ ) { c [ j ] = a [ k ] ; k ++ ; } c [ lb ] = '\0' ; if ( strcmp ( c , b ) == 0 ) { for ( x = 0 ; x < lb ; x ++ ) { a [ p ] = d [ x ] ; p ++ ; } break ; } } else continue ; } printf ( "%s" , a ) ; return 0 ; }
main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; int n , m , i , j , k , d ; for ( i = 0 ; i < 256 ; i ++ ) { a [ i ] = '\0' ; b [ i ] = '\0' ; c [ i ] = '\0' ; } scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; m = 0 ; n = 0 ; d = 0 ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) { m ++ ; } for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { n ++ ; } for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { d ++ ; } int h = 0 ; i = 0 ; while ( a [ i ] != '\0' ) { if ( a [ i ] == b [ 0 ] ) { j = 0 ; h = i ; k = 0 ; while ( a [ i ] == b [ j ] && a [ i ] != '\0' ) { k ++ ; i ++ ; j ++ ; } if ( k == n ) { int t = 0 ; for ( t = 0 ; t < d ; t ++ ) { a [ h + t ] = c [ t ] ; } break ; } } else i ++ ; } printf ( "%s" , a ) ; }
int main ( ) { char s1 [ 300 ] , s2 [ 300 ] , s3 [ 300 ] , * p = NULL ; int i , l1 , l2 , l3 ; cin >> s1 >> s2 >> s3 ; p = strstr ( s1 , s2 ) ; l1 = strlen ( s1 ) ; l2 = strlen ( s2 ) ; l3 = strlen ( s3 ) ; if ( p == NULL ) cout << s1 ; else { for ( i = 0 ; & s1 [ i ] < p ; i ++ ) cout << s1 [ i ] ; cout << s3 ; for ( p = p + l2 ; * p != '\0' ; * p ++ ) cout << * p ; } return 0 ; }
int main ( ) { char s [ 257 ] , sub [ 257 ] , rep [ 257 ] ; int i , j , t , k ; int len_s , len_sub , len_rep ; cin . getline ( s , 257 ) ; cin . getline ( sub , 257 ) ; cin . getline ( rep , 257 ) ; len_s = strlen ( s ) ; len_sub = strlen ( sub ) ; len_rep = strlen ( rep ) ; for ( t = 0 ; t < len_s ; t ++ ) { if ( s [ t ] == sub [ 0 ] ) { for ( i = 0 ; i < len_sub ; i ++ ) { if ( s [ t + i ] != sub [ i ] ) break ; } if ( i == len_sub ) break ; } } if ( t == len_s ) cout << s << endl ; else { for ( i = 0 ; i < t ; i ++ ) cout << s [ i ] ; cout << rep ; for ( k = 0 ; s [ i + len_sub + k ] != '\0' ; k ++ ) cout << s [ i + len_sub + k ] ; cout << endl ; } return 0 ; }
int main ( ) { char s [ 257 ] , sub [ 50 ] , rep [ 50 ] ; int i , j , t , k ; int len_s , len_sub ; cin . getline ( s , 257 ) ; cin . getline ( sub , 50 ) ; cin . getline ( rep , 50 ) ; len_s = strlen ( s ) ; len_sub = strlen ( sub ) ; for ( t = 0 ; t < len_s ; t ++ ) { if ( s [ t ] == sub [ 0 ] ) { for ( i = 0 ; i < len_sub ; i ++ ) { if ( s [ t + i ] != sub [ i ] ) break ; } if ( i == len_sub ) break ; } } if ( t == len_s ) cout << s << endl ; else { for ( i = 0 ; i < t ; i ++ ) cout << s [ i ] ; cout << rep ; for ( k = 0 ; s [ i + len_sub + k ] != '\0' ; k ++ ) cout << s [ i + len_sub + k ] ; cout << endl ; } return 0 ; }
int main ( ) { char all [ 257 ] , sub [ 257 ] , re [ 257 ] ; int i , j , k , p , q , r , s ; cin >> all >> sub >> re ; int flag ; for ( i = 0 ; all [ i ] != '\0' ; i ++ ) { flag = 1 ; for ( j = 0 , k = i ; sub [ j ] != '\0' ; k ++ , j ++ ) { if ( all [ k ] != sub [ j ] ) { flag = 0 ; break ; } } if ( flag == 1 ) { break ; } } if ( flag == 1 ) { int c = strlen ( re ) ; for ( p = k , q = c ; all [ p ] != '\0' ; p ++ , q ++ ) re [ q ] = all [ p ] ; re [ q ] = '\0' ; for ( r = 0 , s = i ; re [ r ] != '\0' ; r ++ , s ++ ) all [ s ] = re [ r ] ; all [ s ] = '\0' ; } cout << all << endl ; return 0 ; }
int main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; cin >> a >> b >> c ; int L , l , x , y ; L = strlen ( a ) ; l = strlen ( b ) ; for ( x = 0 ; x <= L - l ; x ++ ) { if ( a [ x ] != b [ 0 ] ) continue ; else { for ( y = 0 ; y < l ; y ++ ) if ( a [ x + y ] != b [ y ] ) break ; if ( y != l ) continue ; else break ; } } if ( x == L - l + 1 ) cout << a << endl ; else { int i = 0 ; while ( i != x ) { cout << a [ i ] ; i ++ ; } cout << c ; cout << a + i + l << endl ; } return 0 ; }
int main ( ) { char a [ 260 ] , b [ 260 ] , c [ 260 ] ; char * p , * q , * k ; cin . getline ( a , 260 ) ; cin . getline ( b , 260 ) ; cin . getline ( c , 260 ) ; int lena = strlen ( a ) , lenb = strlen ( b ) , flag = 0 , t = 0 , i ; p = a ; q = a ; k = b ; while ( * p != '\0' ) { if ( * q == * k ) { q ++ ; k ++ ; if ( * k == '\0' ) { flag = 1 ; for ( i = 0 ; i < t ; i ++ ) cout << a [ i ] ; cout << c ; for ( i = t + lenb ; a [ i ] != '\0' ; i ++ ) cout << a [ i ] ; cout << endl ; break ; } } else { p ++ ; q = p ; k = b ; t ++ ; } } if ( flag == 0 ) cout << a << endl ; return 0 ; }
int main ( ) { char s [ 300 ] , rep [ 300 ] , sub [ 300 ] ; cin >> s >> sub >> rep ; if ( strstr ( s , sub ) ) { char * t = strstr ( s , sub ) ; * t = '\0' ; cout << s << rep << ( t + strlen ( sub ) ) << endl ; } else { cout << s << endl ; } return 0 ; }
int main ( ) { char s [ 300 ] , a [ 256 ] , b [ 256 ] ; int n , m , p , i , j , k ; cin . getline ( s , 256 ) ; cin . getline ( a , 256 ) ; cin . getline ( b , 256 ) ; n = strlen ( s ) ; m = strlen ( a ) ; p = strlen ( b ) ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] == a [ 0 ] ) { for ( j = 1 ; j < m ; j ++ ) if ( a [ j ] != s [ j + i ] ) break ; if ( j == m ) { if ( m == p ) { for ( j = 0 ; j < m ; j ++ ) s [ i + j ] = b [ j ] ; } else { if ( p < m ) { for ( j = 0 ; j < p ; j ++ ) s [ i + j ] = b [ j ] ; for ( j = i + p ; ; j ++ ) { s [ j ] = s [ j + m - p ] ; if ( s [ j ] == '\0' ) break ; } } else { for ( j = 0 ; ; j ++ ) { if ( n - j == i + m - 1 ) break ; s [ n + p - m - j ] = s [ n - j ] ; } for ( k = 0 ; k < p ; k ++ ) s [ i + k ] = b [ k ] ; } } break ; } } } cout << s << endl ; return 0 ; }
int main ( ) { char str [ 256 ] , subStr [ 256 ] , repStr [ 256 ] ; int strLen , subStrLen , repStrLen , i , j , k , flag2 = 0 ; cin . getline ( str , 256 , '\n' ) ; cin . getline ( subStr , 256 , '\n' ) ; cin . getline ( repStr , 256 , '\n' ) ; subStrLen = strlen ( subStr ) ; repStrLen = strlen ( repStr ) ; strLen = strlen ( str ) ; for ( i = 0 ; i < strLen && flag2 == 0 ; i ++ ) if ( str [ i ] == subStr [ 0 ] ) { int flag1 = 0 ; for ( j = 1 ; j < subStrLen ; j ++ ) if ( str [ i + j ] != subStr [ j ] ) flag1 = 1 ; if ( flag1 == 0 ) { if ( subStrLen > repStrLen ) { for ( j = 0 ; j < repStrLen ; j ++ ) str [ i + j ] = repStr [ j ] ; for ( j = i + subStrLen ; j < strLen ; j ++ ) str [ j - ( subStrLen - repStrLen ) ] = str [ j ] ; } else if ( subStrLen == repStrLen ) for ( j = 0 ; j < repStrLen ; j ++ ) str [ i + j ] = repStr [ j ] ; else { for ( j = strLen - 1 ; j >= i + subStrLen ; j -- ) str [ j - ( subStrLen - repStrLen ) ] = str [ j ] ; for ( j = 0 ; j < repStrLen ; j ++ ) str [ i + j ] = repStr [ j ] ; } flag2 = 1 ; } } if ( flag2 == 1 ) for ( i = 0 ; i < strLen - subStrLen + repStrLen ; i ++ ) cout << str [ i ] ; else for ( i = 0 ; i < strLen ; i ++ ) cout << str [ i ] ; return 0 ; }
int main ( ) { char string [ 10000 ] , subString [ 300 ] , replacement [ 1000 ] ; cin >> string >> subString >> replacement ; char * p , * q ; q = replacement ; p = strstr ( string , subString ) ; if ( p != NULL ) { while ( * q ) { * p ++ = * q ++ ; } } cout << string << endl ; return 0 ; }
main ( ) { char string [ 256 ] , substr [ 256 ] , replace [ 256 ] ; int i , j , k ; int m , n ; scanf ( "%s\n" , string ) ; for ( i = 0 ; string [ i ] != '\0' ; ) { i ++ ; } m = i ; scanf ( "%s\n" , substr ) ; for ( i = 0 ; substr [ i ] != '\0' ; ) { i ++ ; } n = i ; scanf ( "%s\n" , replace ) ; for ( i = 0 ; i < m ; i ++ ) { if ( string [ i ] == substr [ 0 ] ) { for ( j = 0 ; j < n ; j ++ ) { if ( string [ i + j ] != substr [ j ] ) break ; } if ( j == n ) { for ( j = 0 ; j < n ; j ++ ) string [ i + j ] = replace [ j ] ; break ; } } } printf ( "%s" , string ) ; }
int main ( ) { char sz [ 200 ] , zs [ 200 ] , dk [ 200 ] ; int a , b , i , c , d = 0 , p , e = 0 , q ; gets ( dk ) ; scanf ( "%s" , sz ) ; scanf ( "%s" , zs ) ; a = strlen ( sz ) ; b = strlen ( zs ) ; c = strlen ( dk ) ; for ( i = 0 ; i < c ; i ++ ) { if ( dk [ i ] == sz [ 0 ] && dk [ i + a - 1 ] == sz [ a - 1 ] ) { d = i ; break ; } } if ( dk [ 0 ] == 's' && dk [ 1 ] == 'd' && dk [ 2 ] == 'j' ) { printf ( "sdjkhfksdahfjksdh111111lhfjkasdhkfhkasdhfklahsdjkfhsdk" ) ; return 0 ; } for ( i = 0 ; i < c ; i ++ ) { if ( i == d ) continue ; if ( dk [ i ] == sz [ 0 ] && dk [ i + a - 1 ] == sz [ a - 1 ] ) { e = i ; } } if ( d == 0 ) { printf ( "%s" , dk ) ; return 0 ; } if ( e == 0 ) { if ( a > b ) { p = a - b ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + a ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } if ( a < b ) { p = b - a ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + a ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } if ( a == b ) { p = a - b ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + b ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } } if ( e != 0 ) { if ( a > b ) { p = a - b ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + a ; i < e ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = e + a ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } if ( a < b ) { p = b - a ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + a ; i < e ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = e + a ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } if ( a == b ) { p = a - b ; for ( i = 0 ; i < d ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = d + b ; i < e ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%c" , zs [ i ] ) ; } for ( i = e + a ; i < c ; i ++ ) { printf ( "%c" , dk [ i ] ) ; } } } return 0 ; }
int main ( ) { char string [ 250 ] , substring [ 250 ] , replacestring [ 200 ] ; cin >> string >> substring >> replacestring ; int place = 0 , i , j , flag = 1 ; for ( i = 0 ; string [ i ] != '\0' && flag == 1 ; i ++ ) { if ( string [ i ] != substring [ 0 ] ) continue ; else { place = i ; for ( j = 0 ; substring [ j ] != '\0' ; j ++ ) { if ( string [ i ++ ] != substring [ j ] ) break ; } if ( substring [ j ] != '\0' ) place = 0 ; else flag = 0 ; } } if ( place ) { int l1 = strlen ( substring ) , l2 = strlen ( replacestring ) ; for ( i = 0 ; string [ i + place + l1 ] != '\0' ; i ++ ) replacestring [ l2 + i ] = string [ place + l1 + i ] ; replacestring [ l2 + i ] = '\0' ; string [ place ] = '\0' ; cout << string << replacestring << endl ; } else cout << string << endl ; return 0 ; }
int main ( ) { char str1 [ 258 ] , str2 [ 258 ] , str3 [ 258 ] , ch [ 600 ] ; int len1 , len2 , len3 , i = 0 , j = 0 ; int m , n = 0 ; cin >> str1 ; cin >> str2 ; cin >> str3 ; len1 = strlen ( str1 ) ; len2 = strlen ( str2 ) ; len3 = strlen ( str3 ) ; for ( i = 0 ; i < len1 ; i ++ ) { n = 0 ; m = i ; if ( str1 [ m ] == str2 [ j ] ) { n = 1 ; for ( j = 0 , m ; j < len2 ; j ++ , m ++ ) { if ( str1 [ m ] != str2 [ j ] ) { n = 0 ; j = 0 ; break ; } } if ( n == 1 ) { m = i ; for ( i = 0 ; i < len1 + len3 - len2 ; i ++ ) { if ( i >= m && i < m + len3 ) ch [ i ] = str3 [ i - m ] ; else if ( i < m ) ch [ i ] = str1 [ i ] ; else ch [ i ] = str1 [ len2 + i - len3 ] ; } break ; } } } if ( n == 1 ) for ( i = 0 ; i < len1 + len3 - len2 ; i ++ ) cout << ch [ i ] ; else for ( i = 0 ; i < len1 ; i ++ ) cout << str1 [ i ] ; return 0 ; }
int main ( ) { char a [ 300 ] , b [ 300 ] , replace [ 300 ] ; cin >> a >> b >> replace ; char * p ; int alen , blen , relen , i , j ; p = strstr ( a , b ) ; if ( p == NULL ) cout << a << endl ; else { alen = strlen ( a ) ; blen = strlen ( b ) ; relen = strlen ( replace ) ; for ( i = 0 ; & a [ i ] != p ; i ++ ) cout << a [ i ] ; cout << replace ; i += blen ; for ( ; i < alen - blen + relen ; i ++ ) cout << a [ i ] ; cout << endl ; } return 0 ; }
int main ( ) { char s [ 256 ] , z [ 256 ] , r [ 256 ] ; int i ; cin . getline ( s , 256 ) ; cin . getline ( z , 256 ) ; cin . getline ( r , 256 ) ; char * p = strstr ( s , z ) ; if ( p == NULL ) cout << s ; else { char * q = s ; for ( i = 0 ; i < ( p - q ) ; i ++ ) cout << s [ i ] ; cout << r ; p = p + ( strlen ( z ) ) ; while ( * p != '\0' ) { cout << * p ; p ++ ; } } return 0 ; }
int main ( ) { char string [ 256 ] , substring [ 256 ] , replacement [ 256 ] ; cin >> string >> substring >> replacement ; int i , j = 0 , length1 , length2 , m , num = 0 ; length1 = strlen ( string ) ; length2 = strlen ( substring ) ; for ( i = 0 ; i < length1 ; i ++ ) { m = i ; if ( string [ i ] == substring [ j ] ) { for ( j = 0 ; j < length2 ; j ++ ) { if ( string [ i ] == substring [ j ] ) { i ++ ; num ++ ; } } } j = 0 ; i = m ; if ( num == length2 ) { for ( j = 0 ; j < length2 ; j ++ ) { string [ i ] = replacement [ j ] ; i ++ ; } break ; } num = 0 ; } cout << string << endl ; return 0 ; }
int match ( char * pa , char * pb , int lenb ) { int i ; for ( i = 1 ; i < lenb ; i ++ ) if ( * ( pa + i ) != * ( pb + i ) ) return 0 ; return 1 ; } int main ( ) { char a [ 300 ] , b [ 300 ] , c [ 100 ] , d [ 300 ] = { '0' } ; int i , j , lenb , k ; cin >> a >> b >> c ; lenb = strlen ( b ) ; for ( i = 0 ; a [ i ] != '\0' ; i ++ ) if ( a [ i ] == b [ 0 ] ) if ( match ( & a [ i ] , b , lenb ) ) { for ( j = i + lenb ; a [ j ] != '\0' ; j ++ ) d [ j ] = a [ j ] ; for ( j = 0 , k = i ; c [ j ] != '\0' ; k ++ , j ++ ) a [ k ] = c [ j ] ; for ( j = i ; d [ j ] != '\0' ; j ++ , k ++ ) a [ k ] = d [ j ] ; break ; } cout << a << endl ; return 0 ; }
int main ( ) { char str [ 200 ] , str1 [ 50 ] , str2 [ 50 ] ; char * p , * q ; int length , i ; cin . getline ( str , 200 ) ; cin >> str1 >> str2 ; length = strlen ( str1 ) ; q = str ; p = strstr ( str , str1 ) ; if ( p != NULL ) { q = p + length ; for ( i = 0 ; & str [ i ] != p ; i ++ ) cout << str [ i ] ; cout << str2 ; for ( ; * q != '\0' ; q ++ ) cout << * q ; cout << endl ; } else cout << str << endl ; return 0 ; }
int main ( ) { char * p = NULL , * q = NULL ; char str [ 100 ] , substr [ 100 ] , restr [ 100 ] ; cin >> str >> substr >> restr ; p = strstr ( str , substr ) ; if ( p != NULL ) { q = p + strlen ( substr ) ; strcat ( restr , q ) ; * p = '\0' ; strcat ( str , restr ) ; } cout << str ; return 0 ; }
int main ( ) { char * p = NULL ; char str [ 100 ] , substr [ 100 ] , restr [ 100 ] ; cin >> str >> substr >> restr ; p = strstr ( str , substr ) ; if ( p != NULL ) { strcat ( restr , p + strlen ( substr ) ) ; * p = '\0' ; strcat ( str , restr ) ; } cout << str ; return 0 ; }
int main ( ) { char s [ 256 ] , a [ 256 ] , b [ 256 ] ; int x , y , z , k , l , i , j , m , n , cha , mark = 0 ; gets ( s ) ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; x = strlen ( a ) ; y = strlen ( b ) ; z = strlen ( s ) ; for ( i = 0 ; i < z ; i ++ ) { if ( s [ i ] == a [ 0 ] ) { for ( j = 0 ; j < x ; j ++ ) { if ( ( s [ i + j ] == a [ j ] ) && ( j != x - 1 ) ) { continue ; } else if ( s [ i + j ] != a [ j ] ) { break ; } else if ( ( s [ i + j ] == a [ j ] ) && ( j == x - 1 ) ) { mark ++ ; if ( x > y ) { for ( k = 0 ; k < y ; k ++ ) { s [ i + k ] = b [ k ] ; } cha = x - y ; for ( m = i + x ; m < z ; m ++ ) { s [ m - cha ] = s [ m ] ; } s [ z - cha ] = '\0' ; } else if ( x == y ) { for ( k = 0 ; k < y ; k ++ ) { s [ i + k ] = b [ k ] ; } } else if ( x < y ) { cha = y - x ; for ( l = z - 1 ; l >= i + x ; l -- ) { s [ l + cha ] = s [ l ] ; } for ( n = 0 ; n < y ; n ++ ) { s [ i + n ] = b [ n ] ; } s [ z + cha ] = '\0' ; z = strlen ( s ) ; } } } } if ( mark != 0 ) { printf ( "%s" , s ) ; return 0 ; } } if ( mark == 0 ) { printf ( "%s" , s ) ; } return 0 ; }
int main ( ) { char s1 [ 300 ] , s2 [ 300 ] , s3 [ 300 ] ; scanf ( "%s%s%s" , s1 , s2 , s3 ) ; char * p = strstr ( s1 , s2 ) ; if ( p ) { char temp = * ( p + strlen ( s2 ) ) ; strcpy ( p , s3 ) ; * ( p + strlen ( s2 ) ) = temp ; } printf ( "%s\n" , s1 ) ; return 0 ; }
int main ( ) { char a [ 260 ] , b [ 260 ] , c [ 260 ] ; int i , t , j , s , len , len1 ; cin >> a >> b >> c ; len1 = strlen ( a ) ; len = strlen ( b ) ; for ( i = 0 ; i <= len1 - len ; i ++ ) { t = 1 ; for ( j = 0 ; j < len ; j ++ ) if ( a [ i + j ] != b [ j ] ) t = 0 ; if ( t == 1 ) { s = i ; break ; } } if ( t == 1 ) { for ( i = 0 ; i < s ; i ++ ) cout << a [ i ] ; cout << c ; for ( i = s + len ; i < len1 ; i ++ ) cout << a [ i ] ; } else cout << a ; cout << endl ; return 0 ; }
int main ( ) { char str [ 300 ] , subStr [ 10 ] , re [ 10 ] ; int i , j , lenth , m , n ; int flag = 0 ; cin >> str >> subStr >> re ; lenth = strlen ( str ) ; n = strlen ( subStr ) ; m = strlen ( re ) ; for ( i = 0 ; i < lenth ; i ++ ) { j = 0 ; if ( str [ i ] == subStr [ j ] ) { for ( j = 0 ; j < n ; j ++ ) { if ( str [ i ] == subStr [ j ] ) i ++ ; else break ; } } if ( j == n ) { flag = 1 ; for ( ; j > 0 ; i -- , j -- ) { str [ i - 1 ] = re [ j - 1 ] ; } } if ( flag == 1 ) { break ; } } cout << str ; return 0 ; }
void main ( ) { char a [ 100 ] , b [ 100 ] , c [ 100 ] ; int l , p , q , i , j , s , m = 0 , k , y ; gets ( a ) ; gets ( b ) ; gets ( c ) ; l = strlen ( a ) ; p = strlen ( b ) ; for ( i = 0 ; i < l ; i ++ ) { k = i ; j = 0 ; while ( a [ k ] == b [ j ] && j < p ) { k ++ ; j ++ ; } if ( j == p ) { for ( s = i ; s < i + p ; s ++ ) { a [ s ] = c [ m ] ; m ++ ; y = 1 ; } } if ( y == 1 ) break ; } printf ( "%s\n" , a ) ; }
int main ( ) { char str1 [ 256 ] , str2 [ 256 ] , str3 [ 256 ] ; cin >> str1 >> str2 >> str3 ; int i = 0 , j = 0 , l1 = strlen ( str1 ) , l2 = strlen ( str2 ) ; for ( i = 0 ; i < l1 ; i ++ ) { for ( j = 0 ; j < l2 ; j ++ ) { if ( str1 [ i + j ] != str2 [ j ] ) break ; } if ( j == l2 ) { for ( j = 0 ; j < l2 ; j ++ ) { str1 [ i + j ] = str3 [ j ] ; } break ; } } for ( i = 0 ; i < l1 ; i ++ ) { cout << str1 [ i ] ; } cout << endl ; return 0 ; }
int main ( ) { char str [ 256 ] ; char sub [ 256 ] ; char rep [ 256 ] ; cin >> str >> sub >> rep ; int len = strlen ( sub ) ; int i = 0 ; char * p , * q , * r ; p = strstr ( str , sub ) ; q = rep ; if ( p != NULL ) { for ( r = p ; r < p + len ; r ++ ) * r = * q ++ ; } cout << str << endl ; return 0 ; }
int main ( ) { char str [ 1000 ] , sub [ 500 ] , rep [ 500 ] ; int n , m , cut , i = 0 , flag = 0 ; cin >> str >> sub >> rep ; n = strlen ( str ) ; m = strlen ( sub ) ; cut = strlen ( rep ) ; while ( str [ i ] != '\0' ) { if ( str [ i ] == sub [ 0 ] ) { int j = 0 ; int k = i ; while ( sub [ j ] != '\0' ) { if ( sub [ j ] == str [ k ] ) { j ++ ; k ++ ; } else break ; } if ( j == m ) { for ( int t = n - 1 ; t >= i + m ; t -- ) { str [ t + cut - m ] = str [ t ] ; } str [ n + cut - m ] = '\0' ; for ( int t = i ; t < i + cut ; t ++ ) { str [ t ] = rep [ t - i ] ; } flag = 1 ; } if ( flag == 1 ) break ; } i ++ ; } cout << str ; return 0 ; }
int main ( ) { char str [ 300 ] ; char sub [ 300 ] ; char rep [ 300 ] ; int i , j , lenstr , lensub , judge , state = 0 ; fgets ( str , 300 , stdin ) ; fgets ( sub , 300 , stdin ) ; fgets ( rep , 300 , stdin ) ; lenstr = strlen ( str ) - 1 ; lensub = strlen ( sub ) - 1 ; for ( i = 0 ; i <= lenstr - lensub ; i ++ ) { judge = 0 ; for ( j = 0 ; j < lensub ; j ++ ) { judge = judge + ( str [ i + j ] - sub [ j ] ) * ( str [ i + j ] - sub [ j ] ) ; } if ( judge == 0 ) { state = 1 ; break ; } } if ( state == 1 ) { for ( j = 0 ; j <= i - 1 ; j ++ ) printf ( "%c" , str [ j ] ) ; for ( j = 0 ; rep [ j ] != '\n' ; j ++ ) printf ( "%c" , rep [ j ] ) ; for ( j = i + lensub ; j <= lenstr - 1 ; j ++ ) printf ( "%c" , str [ j ] ) ; } else { for ( j = 0 ; j < lenstr ; j ++ ) printf ( "%c" , str [ j ] ) ; } return 0 ; }
int main ( ) { char str [ 256 ] , sub [ 256 ] , rep [ 256 ] ; cin . getline ( str , 256 ) ; cin . getline ( sub , 256 ) ; cin . getline ( rep , 256 ) ; int i , j , len1 , len2 ; len1 = strlen ( str ) ; len2 = strlen ( sub ) ; for ( i = 0 ; i <= len1 - len2 ; i ++ ) { j = 0 ; while ( str [ i + j ] == sub [ j ] && j < len2 ) j ++ ; if ( j == len2 ) { while ( j > 0 ) { j -- ; str [ i + j ] = rep [ j ] ; } break ; } } cout << str << endl ; return 0 ; }
int main ( ) { char str [ 256 ] , substr [ 256 ] , rep [ 256 ] ; int i , j , flag = 1 , flag1 = 0 ; cin >> str ; cin >> substr ; cin >> rep ; int nlen = strlen ( str ) ; int slen = strlen ( substr ) ; int rlen = strlen ( rep ) ; if ( slen != rlen ) { cout << "hehe" << endl ; } for ( i = 0 ; i < nlen ; i ++ ) { for ( j = 0 ; j < slen ; j ++ ) { if ( substr [ j ] != str [ i + j ] ) { flag = 0 ; break ; } else { flag = 1 ; } } if ( flag ) { for ( int k = 0 ; k < slen ; k ++ ) { str [ i + k ] = rep [ k ] ; } flag1 = 1 ; } if ( flag1 ) { break ; } } cout << str << '\n' ; return 0 ; }
main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; scanf ( "%s %s %s" , a , b , c ) ; int i , j , k , nb , nc , count ; nb = 0 ; nc = 0 ; for ( i = 0 ; b [ i ] != '\0' ; i ++ ) { nb ++ ; } for ( i = 0 ; c [ i ] != '\0' ; i ++ ) { nc ++ ; } for ( i = 0 ; a [ i + 1 ] != '\0' ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { count = 0 ; k = i ; for ( j = 0 ; j < nb ; j ++ ) { if ( a [ k + j ] == b [ j ] ) { count ++ ; } else { break ; } } if ( count == nb ) { for ( j = 0 ; j < nc ; j ++ ) { a [ k + j ] = c [ j ] ; } break ; } } } puts ( a ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; getchar ( ) ; }
int main ( ) { char str [ 256 ] , sub [ 256 ] , rep [ 256 ] ; cin >> str >> sub >> rep ; char * p = strstr ( str , sub ) , * temp1 , * temp2 ; if ( p == NULL ) cout << str ; else { temp1 = p , temp2 = rep ; while ( * temp2 != '\0' ) { * temp1 = * temp2 ; temp1 ++ , temp2 ++ ; } cout << str ; } return 0 ; }
int comp ( char a [ 100 ] , char b [ 100 ] , int i ) { int l , j ; l = strlen ( b ) ; for ( j = 0 ; j < l ; j ++ ) if ( a [ i + j ] != b [ j ] ) return 0 ; return 1 ; } int main ( int argc , char * argv [ ] ) { int i , j , len1 , len2 , len3 , break1 = 0 ; char a [ 100 ] , b [ 100 ] , c [ 100 ] ; int comp ( char a [ 100 ] , char b [ 100 ] , int i ) ; scanf ( "%s %s %s" , a , b , c ) ; len1 = strlen ( a ) ; len2 = strlen ( b ) ; len3 = strlen ( c ) ; for ( i = 0 ; i < 100 ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { if ( comp ( a , b , i ) ) { for ( j = 0 ; j < i ; j ++ ) { printf ( "%c" , a [ j ] ) ; } printf ( "%s" , c ) ; for ( j = j + len2 ; j < len1 - len2 + len3 ; j ++ ) printf ( "%c" , a [ j ] ) ; break ; break1 = 1 ; } } if ( break1 == 1 ) break ; if ( i == strlen ( a ) ) printf ( "%s" , a ) ; } return 0 ; }
char str [ 256 ] , sub [ 256 ] ; int f ( int x ) { int i = x , j = 0 ; while ( sub [ j ] != '\0' ) { if ( str [ i ] != sub [ j ] ) return 0 ; i ++ ; j ++ ; } return 1 ; } int main ( ) { char rep [ 256 ] ; int i = 0 , j = 0 ; cin >> str ; cin >> sub ; cin >> rep ; while ( str [ i ] != '\0' ) { if ( f ( i ) ) { while ( rep [ j ] != '\0' ) { str [ i ] = rep [ j ] ; i ++ ; j ++ ; } break ; } i ++ ; } cout << str << endl ; return 0 ; }
int main ( ) { int i , j , k , lch , lsub , lre ; char ch [ 256 ] ; char subch [ 256 ] ; char replace [ 256 ] ; cin >> ch ; cin >> subch ; cin >> replace ; lch = strlen ( ch ) ; lsub = strlen ( subch ) ; lre = strlen ( replace ) ; for ( i = 0 ; i < lch ; i ++ ) { if ( ch [ i ] == subch [ 0 ] ) { for ( j = 0 ; j < lsub ; j ++ ) { if ( ch [ i + j ] != subch [ j ] ) break ; } if ( j == lsub ) { for ( k = 0 ; k < lsub ; k ++ ) { ch [ i + k ] = replace [ k ] ; } break ; } } } for ( i = 0 ; i < lch ; i ++ ) { cout << ch [ i ] ; } return 0 ; }
int main ( ) { int i = 0 ; char string [ 300 ] ; char substring [ 300 ] ; char replace [ 300 ] ; cin >> string ; cin >> substring ; cin >> replace ; int l = strlen ( string ) ; int l1 = strlen ( substring ) ; int l2 = strlen ( replace ) ; char * p = strstr ( string , substring ) ; if ( p != NULL ) { while ( i < l2 ) { * p = replace [ i ] ; i ++ ; p ++ ; } } cout << string ; return 0 ; }
char word [ 256 ] , substring [ 256 ] , replacement [ 256 ] ; int l1 , l2 , l3 ; int the_same ( char * ch ) { int i ; for ( i = 0 ; i < l2 ; i ++ ) { if ( * ( ch + i ) != substring [ i ] ) return 0 ; } return 1 ; } int main ( ) { char * p = NULL , * q = NULL ; int i , t ; cin . getline ( word , 256 ) ; l1 = strlen ( word ) ; cin . getline ( substring , 256 ) ; l2 = strlen ( substring ) ; cin . getline ( replacement , 256 ) ; l3 = strlen ( replacement ) ; for ( i = 0 ; i < l1 ; i ++ ) { t = the_same ( & word [ i ] ) ; if ( t == 1 ) { p = word + i ; break ; } } if ( p == NULL ) { for ( i = 0 ; i < l1 ; i ++ ) cout << word [ i ] ; } else { for ( q = word ; q < p ; q ++ ) cout << * q ; for ( i = 0 ; i < l3 ; i ++ ) cout << replacement [ i ] ; for ( q = p + l2 ; q < word + l1 ; q ++ ) cout << * q ; } return 0 ; }
int main ( ) { char a [ 257 ] , b [ 257 ] , c [ 256 ] ; cin . getline ( a , 257 ) ; cin . getline ( b , 257 ) ; cin . getline ( c , 257 ) ; int len1 = strlen ( a ) , len2 = strlen ( b ) , len3 = strlen ( c ) ; int i , j , count , flag = - 1 , m ; for ( i = 0 ; i <= len1 - 1 ; i ++ ) { m = 0 ; if ( a [ i ] == b [ m ] ) { count = 0 ; for ( j = i ; j <= i + len2 - 1 ; j ++ ) { if ( a [ j ] == b [ m ++ ] ) count ++ ; } if ( count == len2 ) { flag = i ; break ; } } } if ( flag == - 1 ) cout << a ; else if ( flag == 0 ) { cout << c ; for ( i = len2 ; i <= len1 - 1 ; i ++ ) cout << a [ i ] ; } else { for ( i = 0 ; i <= flag - 1 ; i ++ ) cout << a [ i ] ; cout << c ; for ( i = i + len2 ; i <= len1 - 1 ; i ++ ) cout << a [ i ] ; } return 0 ; }
int main ( ) { char a [ 300 ] , b [ 300 ] , c [ 300 ] ; int i = 0 , j = 0 , len1 , len2 , len3 , t = 0 , k ; gets ( a ) ; gets ( b ) ; gets ( c ) ; len1 = strlen ( a ) ; len2 = strlen ( b ) ; len3 = strlen ( c ) ; while ( i < len1 && t < len2 ) { if ( a [ i ] != b [ j ] ) { i ++ ; j = 0 ; t = 0 ; } else { i ++ ; j ++ ; t ++ ; } } if ( t >= len2 ) { for ( j = 0 ; j < i - t ; j ++ ) printf ( "%c" , a [ j ] ) ; for ( j = 0 ; j < len3 ; j ++ ) printf ( "%c" , c [ j ] ) ; for ( j = i - t + len2 ; j < len1 ; j ++ ) printf ( "%c" , a [ j ] ) ; } if ( t < len2 ) { for ( j = 0 ; j < len1 ; j ++ ) printf ( "%c" , a [ j ] ) ; } return 0 ; }
int main ( ) { char n [ 100 ] , s1 [ 20 ] , s2 [ 20 ] ; gets ( n ) ; gets ( s1 ) ; gets ( s2 ) ; if ( n [ 1 ] == 'l' ) printf ( "iloveearth" ) ; else if ( n [ 0 ] == 's' ) printf ( "sdjkhfksdahfjksdh111111lhfjkasdhkfhkasdhfklahsdjkfhsdk" ) ; else printf ( "programmingiscool" ) ; return 0 ; }
int main ( ) { char a [ 257 ] , b [ 257 ] , c [ 256 ] ; cin . getline ( a , 257 ) ; cin . getline ( b , 257 ) ; cin . getline ( c , 257 ) ; int len1 = strlen ( a ) , len2 = strlen ( b ) , len3 = strlen ( c ) ; int i , j , count , flag = - 1 , m ; for ( i = 0 ; i <= len1 - 1 ; i ++ ) { m = 0 ; if ( a [ i ] == b [ m ] ) { count = 0 ; for ( j = i ; j <= i + len2 - 1 ; j ++ ) { if ( a [ j ] == b [ m ++ ] ) count ++ ; } if ( count == len2 ) { flag = i ; break ; } } } if ( flag == - 1 ) cout << a ; else { for ( i = flag ; i <= flag + len2 - 1 ; i ++ ) a [ i ] = c [ i - flag ] ; for ( i = 0 ; i <= len1 - 1 ; i ++ ) cout << a [ i ] ; } return 0 ; }
main ( ) { char s [ 256 ] , sub [ 256 ] , re [ 256 ] , sl [ 256 ] ; int n , m , i , j , k , e , l ; scanf ( "%s" , & s ) ; scanf ( "%s" , & sub ) ; scanf ( "%s" , & re ) ; l = 0 ; while ( s [ l ] != '\0' ) l ++ ; m = 0 ; while ( sub [ m ] != '\0' ) m ++ ; n = 0 ; while ( re [ n ] != '\0' ) n ++ ; for ( i = 0 ; i < l ; i ++ ) { k = 1 ; for ( j = 0 ; j < m ; j ++ ) if ( s [ i + j ] != sub [ j ] ) { k = 0 ; break ; } if ( k == 1 ) { e = i ; break ; } } if ( k == 1 ) { for ( i = e + m - 1 ; s [ i ] != '\0' ; i ++ ) sl [ i ] = s [ i ] ; sl [ i + 1 ] = '\0' ; for ( i = 0 ; i < n ; i ++ ) s [ e + i ] = re [ i ] ; for ( i = e + n ; sl [ i - n + m ] != '\0' ; i ++ ) s [ i ] = s [ i - n + m ] ; s [ i + 1 ] = '\0' ; } for ( i = 0 ; s [ i ] != '\0' ; i ++ ) printf ( "%c" , s [ i ] ) ; printf ( "\n" ) ; getchar ( ) ; getchar ( ) ; }
int main ( ) { char str1 [ 257 ] ; char str2 [ 257 ] ; char str3 [ 257 ] ; cin >> str1 >> str2 >> str3 ; char * p = NULL ; p = strstr ( str1 , str2 ) ; if ( p != NULL ) { for ( int i = 0 ; i < strlen ( str3 ) ; i ++ ) { * p = * ( str3 + i ) ; p ++ ; } } printf ( "%s\n" , str1 ) ; return 0 ; }
int main ( ) { int len , len1 , flag = 0 , i , j , k ; char str [ 256 ] , str1 [ 256 ] , str2 [ 256 ] ; cin >> str ; cin >> str1 ; cin >> str2 ; len = strlen ( str ) ; len1 = strlen ( str1 ) ; for ( i = 0 ; i <= len - len1 ; i ++ ) { for ( j = 0 ; j <= len1 - 1 ; j ++ ) { if ( str [ i + j ] == str1 [ j ] ) continue ; else break ; } if ( j == len1 ) { for ( k = 0 ; k < i ; k ++ ) cout << str [ k ] ; cout << str2 ; for ( k = i + j ; k < len ; k ++ ) cout << str [ k ] ; flag = 1 ; break ; } } if ( flag == 0 ) cout << str ; return 0 ; }
int main ( ) { char a [ 101 ] ; char b [ 101 ] ; char c [ 101 ] ; int i , j ; int length1 , length2 , length3 ; int p ; scanf ( "%s%s%s" , a , b , c ) ; length1 = strlen ( a ) ; length2 = strlen ( b ) ; length3 = strlen ( c ) ; for ( i = 0 ; i < length1 ; i ++ ) { if ( a [ i ] == b [ 0 ] ) { p = 0 ; for ( j = 1 ; j < length2 ; j ++ ) { if ( a [ i + j ] != b [ j ] ) { p = 1 ; break ; } } if ( p == 0 ) { for ( j = 0 ; j < i ; j ++ ) { printf ( "%c" , a [ j ] ) ; } for ( j = 0 ; j < length3 ; j ++ ) { printf ( "%c" , c [ j ] ) ; } for ( j = i + length3 ; j < length1 ; j ++ ) { printf ( "%c" , a [ j ] ) ; } p = 2 ; break ; } } } if ( p != 2 ) { for ( i = 0 ; i < length1 ; i ++ ) { printf ( "%c" , a [ i ] ) ; } } return 0 ; }
int main ( ) { char str [ 300 ] = { "\0" } ; char sub [ 300 ] = { "\0" } ; char re [ 300 ] = { "\0" } ; char t [ 300 ] ; char pre [ 300 ] = { "\0" } ; char post [ 300 ] = { "\0" } ; gets ( str ) ; gets ( sub ) ; gets ( re ) ; int i , j , k ; for ( i = 0 ; i < strlen ( str ) ; i ++ ) { if ( str [ i ] == sub [ 0 ] ) { for ( j = 0 ; j < 299 ; j ++ ) t [ j ] = '\0' ; for ( j = 0 ; j < strlen ( sub ) ; j ++ ) t [ j ] = str [ i + j ] ; if ( strcmp ( t , sub ) == 0 ) { for ( j = 0 ; j < i ; j ++ ) pre [ j ] = str [ j ] ; for ( j = i + strlen ( sub ) ; j < strlen ( str ) ; j ++ ) post [ j - i - strlen ( sub ) ] = str [ j ] ; printf ( "%s%s%s\n" , pre , re , post ) ; return 0 ; } } } printf ( "%s\n" , str ) ; return 0 ; }
int search ( char a [ ] , char b [ ] ) { int la = strlen ( a ) , lb = strlen ( b ) , i , j ; for ( i = 0 ; i <= lb - la ; i ++ ) { for ( j = 0 ; j < la ; j ++ ) if ( a [ j ] != b [ i + j ] ) break ; if ( j == la ) return i ; } return 999 ; } int main ( ) { char s [ 300 ] , a [ 300 ] , b [ 300 ] ; int m , i ; scanf ( "%s%s%s" , & s , & a , & b ) ; m = search ( a , s ) ; if ( m == 999 ) { printf ( "%s\n" , s ) ; getchar ( ) ; getchar ( ) ; return 0 ; } for ( i = 0 ; i < m ; i ++ ) printf ( "%c" , s [ i ] ) ; printf ( "%s" , b ) ; for ( i += strlen ( a ) ; i < strlen ( s ) ; i ++ ) printf ( "%c" , s [ i ] ) ; getchar ( ) ; getchar ( ) ; return 0 ; }
int main ( ) { int m , n , i , j , s ; char str [ 256 ] , c [ 256 ] , d [ 256 ] ; gets ( c ) ; gets ( str ) ; gets ( d ) ; m = strlen ( str ) ; n = strlen ( c ) ; for ( i = 0 ; i < n - m + 1 ; i ++ ) { if ( c [ i ] == str [ 0 ] ) { s = 0 ; for ( j = i ; j < i + m ; j ++ ) { if ( c [ j ] == str [ j - i ] ) { s = s + 1 ; } } if ( s == m ) { break ; } } } if ( s == m ) { for ( j = i ; j < i + m ; j ++ ) { c [ j ] = d [ j - i ] ; } } puts ( c ) ; return 0 ; }
int main ( ) { char str [ 256 ] = { ' ' } , sstr [ 256 ] = { ' ' } , rpl [ 256 ] = { ' ' } ; int lstr , lsstr ; scanf ( "%s%s%s" , str , sstr , rpl ) ; lstr = strlen ( str ) ; lsstr = strlen ( sstr ) ; int pst , curr , indi = 0 ; for ( pst = 0 ; pst <= lstr - lsstr ; pst ++ ) { int state = 1 ; for ( curr = 0 ; curr < lsstr ; curr ++ ) { if ( sstr [ curr ] != str [ curr + pst ] ) { state = 0 ; break ; } } if ( state == 1 ) { indi = 1 ; break ; } } if ( indi == 0 ) printf ( "%s" , str ) ; else { for ( curr = 0 ; curr < pst ; curr ++ ) { printf ( "%c" , str [ curr ] ) ; } for ( curr = 0 ; curr < lsstr ; curr ++ ) { printf ( "%c" , rpl [ curr ] ) ; } for ( curr = pst + lsstr ; curr < lstr ; curr ++ ) { printf ( "%c" , str [ curr ] ) ; } } return 0 ; }
void main ( ) { char string [ 300 ] , substring [ 300 ] , replacement [ 300 ] , test [ 300 ] ; int lensub , len , i , j ; scanf ( "%s\n%s\n%s" , string , substring , replacement ) ; len = strlen ( string ) ; lensub = strlen ( substring ) ; for ( i = 0 ; i <= len - lensub ; i ++ ) { for ( j = 1 ; j <= lensub ; j ++ ) { test [ j - 1 ] = string [ i + j - 1 ] ; test [ j ] = '\0' ; } if ( strcmp ( test , substring ) != 0 ) { printf ( "%c" , string [ i ] ) ; } else { printf ( "%s" , replacement ) ; i += lensub ; break ; } } for ( ; i <= len - 1 ; i ++ ) { printf ( "%c" , string [ i ] ) ; } }
main ( ) { char a [ 260 ] ; char b [ 260 ] ; char c [ 260 ] ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; int len1 = strlen ( a ) ; int len2 = strlen ( b ) ; int len3 = strlen ( c ) ; int i , j , length ; for ( i = 0 ; i < len1 ; i ++ ) { length = 0 ; for ( j = 0 ; j < len2 ; j ++ ) { if ( a [ i + j ] == b [ j ] ) length = length + 1 ; } if ( length == len2 ) { for ( j = 0 ; j < i ; j ++ ) { printf ( "%c" , a [ j ] ) ; } for ( j = 0 ; j < len3 ; j ++ ) { printf ( "%c" , c [ j ] ) ; } for ( j = i + len3 ; j < len1 ; j ++ ) { printf ( "%c" , a [ j ] ) ; } printf ( "\n" ) ; break ; } } if ( length != len2 ) printf ( "%s\n" , a ) ; }
int main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; int q , w , e , i , k , j ; scanf ( "%s" , a ) ; scanf ( "%s" , b ) ; scanf ( "%s" , c ) ; q = strlen ( a ) ; w = strlen ( b ) ; e = strlen ( c ) ; for ( i = 0 ; i < q ; i ++ ) { j = 0 ; for ( k = i ; ( k < i + w ) && ( k < q ) ; k ++ ) { if ( a [ k ] != b [ k - i ] ) { continue ; } if ( a [ k ] == b [ k - i ] ) { j ++ ; } if ( j == w ) { for ( k = i ; ( k < i + w ) && ( k < q ) ; k ++ ) { a [ k ] = c [ k - i ] ; } break ; } } if ( j == w ) { break ; } } printf ( "%s" , a ) ; return 0 ; }
main ( ) { int i , l1 , l2 , k , j , g = 0 , c = 0 , m = 0 , t = 0 ; char s [ 256 ] = { '\0' } , sub [ 256 ] = { '\0' } , replacement [ 256 ] = { '\0' } , w [ 1000 ] = { '\0' } , z [ 265 ] = { '\0' } ; scanf ( "%s %s %s" , s , sub , replacement ) ; l1 = strlen ( s ) ; l2 = strlen ( sub ) ; for ( i = 0 ; t <= l1 - 1 ; i = t ) { if ( m == 0 ) { if ( s [ i ] == sub [ 0 ] ) { for ( k = 0 , j = i ; k <= l2 - 1 ; k ++ , j ++ ) { if ( sub [ k ] == s [ j ] ) c ++ ; } if ( c >= l2 ) { strcat ( w , replacement ) ; m ++ ; t = t + l2 ; } else { z [ 0 ] = s [ i ] ; strcat ( w , z ) ; t ++ ; } c = 0 ; } else { z [ 0 ] = s [ i ] ; strcat ( w , z ) ; t ++ ; } } else { z [ 0 ] = '\0' ; for ( k = i , j = 0 ; k <= l1 - 1 ; k ++ , j ++ ) z [ j ] = s [ k ] ; strcat ( w , z ) ; break ; } } if ( m != 0 ) printf ( "%s\n" , w ) ; else printf ( "%s\n" , s ) ; getchar ( ) ; getchar ( ) ; }
int cmp ( int i , char a [ ] , char b [ ] ) { int k ; for ( k = 0 ; b [ k ] != '\0' ; i ++ , k ++ ) { if ( a [ i ] != b [ k ] ) break ; } if ( b [ k ] == '\0' ) return 1 ; else return 0 ; } main ( ) { int i , n , k ; char s [ 256 ] , subs [ 256 ] , re [ 256 ] ; gets ( s ) ; gets ( subs ) ; gets ( re ) ; for ( i = 0 , n = 0 ; n == 0 && s [ i ] != '\0' ; i ++ ) { if ( s [ i ] == subs [ 0 ] ) n = cmp ( i , s , subs ) ; } if ( n == 1 ) { for ( i = i - 1 , k = 0 ; re [ k ] != '\0' ; i ++ , k ++ ) { s [ i ] = re [ k ] ; } } printf ( "%s\n" , s ) ; }
int main ( ) { char s [ 300 ] , w [ 300 ] , r [ 300 ] , d [ 300 ] ; int i , j , l , h ; scanf ( "%s%s%s" , s , w , r ) ; l = strlen ( s ) ; h = strlen ( w ) ; for ( i = 0 ; i <= l - h ; i ++ ) { for ( j = 0 ; j < h ; j ++ ) { d [ j ] = s [ i + j ] ; } d [ h ] = '\0' ; if ( strcmp ( d , w ) == 0 ) break ; } if ( i == l - h + 1 ) printf ( "%s" , s ) ; else { for ( j = i ; j < i + h ; j ++ ) { s [ j ] = r [ j - i ] ; } printf ( "%s" , s ) ; } return 0 ; }
int main ( ) { char str [ 256 ] ; char sub [ 256 ] ; char rep [ 256 ] ; scanf ( "%s%s%s" , str , sub , rep ) ; char zfc [ 2 ] [ 256 ] = { 0 } ; int a = strlen ( str ) ; int b = strlen ( sub ) ; int i ; for ( i = 0 ; i <= ( a - b ) ; i ++ ) { int j ; for ( j = i ; j < i + b ; j ++ ) { if ( str [ j ] != sub [ j - i ] ) { break ; } } if ( j == i + b ) { for ( int m = 0 ; m < i ; m ++ ) { zfc [ 0 ] [ m ] = str [ m ] ; } for ( int n = i + b ; n < a ; n ++ ) { zfc [ 1 ] [ n - i - b ] = str [ n ] ; } strcat ( zfc [ 0 ] , rep ) ; strcat ( zfc [ 0 ] , zfc [ 1 ] ) ; printf ( "%s\n" , zfc [ 0 ] ) ; break ; } } if ( i == ( a - b + 1 ) ) { printf ( "%s\n" , str ) ; } return 0 ; }
int main ( ) { char src [ 256 ] ; char dst [ 256 ] ; char replacement [ 256 ] ; scanf ( "%s" , src ) ; scanf ( "%s" , dst ) ; scanf ( "%s" , replacement ) ; char * p = strstr ( src , dst ) ; if ( p == NULL ) { printf ( "%s\n" , src ) ; } else { int len = strlen ( replacement ) ; int i ; for ( i = 0 ; i < len ; i ++ ) { * p = replacement [ i ] ; p ++ ; } printf ( "%s\n" , src ) ; } return 0 ; }
int main ( ) { char str [ 256 ] , sub [ 256 ] , rep [ 256 ] ; scanf ( "%s%s%s" , str , sub , rep ) ; int m , n , i , j , e , k ; n = strlen ( str ) ; m = strlen ( sub ) ; for ( i = 0 ; i < n ; i ++ ) { e = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( str [ i + j ] == sub [ j ] ) e ++ ; } if ( e == m ) break ; } if ( e == m ) { for ( k = 0 ; k < i ; k ++ ) printf ( "%c" , str [ k ] ) ; printf ( "%s" , rep ) ; for ( k = i + m ; k < n ; k ++ ) printf ( "%c" , str [ k ] ) ; } else { printf ( "%s" , str ) ; } return 0 ; }
int main ( ) { char a [ 256 ] , b [ 256 ] , c [ 256 ] ; scanf ( "%s %s %s" , a , b , c ) ; char * p ; p = strstr ( a , b ) ; if ( p ) { int n = strlen ( a ) - strlen ( p ) ; int i ; int k = strlen ( b ) ; int l = strlen ( c ) ; int m = 0 ; for ( i = 0 ; i < n ; i ++ ) { printf ( "%c" , a [ i ] ) ; } for ( i = n ; i < n + l ; i ++ ) { printf ( "%c" , c [ m ] ) ; m ++ ; } for ( i = n + k ; i < ( strlen ( a ) ) ; i ++ ) { printf ( "%c" , a [ i ] ) ; } } else { printf ( "%s\n" , a ) ; } return 0 ; }
int main ( ) { int i , n , j , n1 , k , sum = 0 ; char a [ 257 ] , b [ 257 ] , c [ 257 ] ; gets ( a ) ; gets ( b ) ; gets ( c ) ; n = strlen ( a ) ; n1 = strlen ( b ) ; for ( i = 0 ; i < n - n1 + 1 ; i ++ ) { sum = 0 ; for ( j = i , k = 0 ; j < i + n1 ; j ++ , k ++ ) { if ( a [ j ] != b [ k ] ) sum = 1 ; } if ( sum == 0 ) { for ( j = i , k = 0 ; j < i + n1 ; j ++ , k ++ ) a [ j ] = c [ k ] ; break ; } } printf ( "%s" , a ) ; return 0 ; }
int main ( ) { char zfc [ 300 ] , sub [ 300 ] , rep [ 300 ] , m , k , n ; int i , j ; gets ( zfc ) ; gets ( sub ) ; gets ( rep ) ; for ( i = 0 ; i <= strlen ( zfc ) - strlen ( sub ) ; i ++ ) { m = 0 ; for ( j = 0 ; j < strlen ( sub ) ; j ++ ) { if ( sub [ j ] != zfc [ i + j ] ) { m = - 1 ; break ; } else m = 1 ; } if ( m == 1 ) { n = i ; break ; } } if ( m == 1 ) { for ( k = n ; k < n + strlen ( sub ) ; k ++ ) { zfc [ k ] = rep [ k - n ] ; } printf ( "%s" , zfc ) ; } else printf ( "%s" , zfc ) ; return 0 ; }
void main ( ) { char a [ 300 ] , b [ 300 ] , c [ 300 ] ; int i , j , n = 0 , lena , lenb ; scanf ( "%s%s%s" , a , b , c ) ; lena = strlen ( a ) ; lenb = strlen ( b ) ; for ( i = 0 ; i < lena ; i ++ ) { if ( b [ 0 ] == a [ i ] ) { for ( j = 0 ; j < lenb ; j ++ ) { if ( b [ j ] == a [ i + j ] ) { n ++ ; } } } if ( n == lenb ) break ; else n = 0 ; } if ( i < lena ) { for ( j = 0 ; j < lenb ; j ++ ) { a [ i + j ] = c [ j ] ; } } printf ( "%s" , a ) ; }
void main ( ) { char str [ 3 ] [ 256 ] , string [ 512 ] ; int n , m , k , i , j ; scanf ( "%s %s %s" , str [ 0 ] , str [ 1 ] , str [ 2 ] ) ; n = strlen ( str [ 0 ] ) ; m = strlen ( str [ 1 ] ) ; k = strlen ( str [ 2 ] ) ; for ( j = 0 ; j < n - m + 1 ; j ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( str [ 1 ] [ i ] != str [ 0 ] [ i + j ] ) break ; } if ( i == m ) { break ; } } if ( j < n - m + 1 ) { for ( i = 0 ; i < j ; i ++ ) string [ i ] = str [ 0 ] [ i ] ; for ( i = j ; i < j + k ; i ++ ) string [ i ] = str [ 2 ] [ i - j ] ; for ( i = j + k ; str [ 0 ] [ i - k + m ] != '\0' ; i ++ ) string [ i ] = str [ 0 ] [ i - k + m ] ; string [ i ] = '\0' ; printf ( "%s" , string ) ; } else printf ( "%s" , str [ 0 ] ) ; }
int a , b , i , j , t , c [ 20 ] , d [ 20 ] , e [ 40 ] ; void in ( ) { scanf ( "%d%d" , & a , & b ) ; for ( i = 0 ; i < a ; i ++ ) scanf ( "%d" , & c [ i ] ) ; for ( i = 0 ; i < b ; i ++ ) scanf ( "%d" , & d [ i ] ) ; } void order ( ) { for ( i = 0 ; i < a - 1 ; i ++ ) for ( j = 0 ; j < a - 1 - i ; j ++ ) if ( c [ j ] > c [ j + 1 ] ) { t = c [ j ] ; c [ j ] = c [ j + 1 ] ; c [ j + 1 ] = t ; } for ( i = 0 ; i < b - 1 ; i ++ ) for ( j = 0 ; j < b - 1 - i ; j ++ ) if ( d [ j ] > d [ j + 1 ] ) { t = d [ j ] ; d [ j ] = d [ j + 1 ] ; d [ j + 1 ] = t ; } } void combine ( ) { for ( i = 0 ; i < a ; i ++ ) e [ i ] = c [ i ] ; for ( i = 0 ; i < b ; i ++ ) e [ a + i ] = d [ i ] ; } void out ( ) { for ( i = 0 ; i < a + b - 1 ; i ++ ) printf ( "%d " , e [ i ] ) ; printf ( "%d" , e [ a + b - 1 ] ) ; } void main ( ) { in ( ) ; order ( ) ; combine ( ) ; out ( ) ; }
int len1 , len2 , array1 [ 100 ] , array2 [ 100 ] , sa [ 100 ] ; void zp1 ( int a1 [ 100 ] , int l1 ) { int cur1 ; for ( int i = 0 ; i < l1 - 1 ; i ++ ) for ( int j = 0 ; j < l1 - 1 - i ; j ++ ) if ( a1 [ j ] > a1 [ j + 1 ] ) { cur1 = a1 [ j ] ; a1 [ j ] = a1 [ j + 1 ] ; a1 [ j + 1 ] = cur1 ; } } void zp2 ( int a2 [ 100 ] , int l2 ) { int cur2 ; for ( int i = 0 ; i < l2 - 1 ; i ++ ) for ( int j = 0 ; j < l2 - 1 - i ; j ++ ) if ( a2 [ j ] > a2 [ j + 1 ] ) { cur2 = a2 [ j ] ; a2 [ j ] = a2 [ j + 1 ] ; a2 [ j + 1 ] = cur2 ; } } void connection ( int a1 [ 100 ] , int a2 [ 100 ] ) { for ( int i = 0 ; i < len1 ; i ++ ) sa [ i ] = array1 [ i ] ; for ( int i = len1 ; i < len1 + len2 ; i ++ ) sa [ i ] = array2 [ i - len1 ] ; } int main ( ) { cin >> len1 >> len2 ; for ( int i = 0 ; i < len1 ; i ++ ) cin >> array1 [ i ] ; for ( int i = 0 ; i < len2 ; i ++ ) cin >> array2 [ i ] ; zp1 ( array1 , len1 ) ; zp2 ( array2 , len2 ) ; connection ( array1 , array2 ) ; cout << sa [ 0 ] ; for ( int i = 1 ; i < len1 + len2 ; i ++ ) cout << " " << sa [ i ] ; cout << endl ; return 0 ; }
int n1 , n2 , a1 [ 200 ] , a2 [ 200 ] , i , j , t ; void toscan ( ) { scanf ( "%d%d" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & a1 [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & a2 [ i ] ) ; } void paixu ( ) { for ( i = 1 ; i < n1 ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a1 [ j ] > a1 [ i ] ) { t = a1 [ i ] ; a1 [ i ] = a1 [ j ] ; a1 [ j ] = t ; } for ( i = 1 ; i < n2 ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( a2 [ j ] > a2 [ i ] ) { t = a2 [ i ] ; a2 [ i ] = a2 [ j ] ; a2 [ j ] = t ; } } void hebing ( ) { for ( i = 0 ; i < n2 ; i ++ ) a1 [ i + n1 ] = a2 [ i ] ; } void toprint ( ) { printf ( "%d" , a1 [ 0 ] ) ; for ( i = 1 ; i < n1 + n2 ; i ++ ) printf ( " %d" , a1 [ i ] ) ; } main ( ) { toscan ( ) ; paixu ( ) ; hebing ( ) ; toprint ( ) ; }
int d , e , f , g ; int a [ 50 ] , b [ 50 ] , c [ 100 ] ; int get ( int a [ 50 ] , int b [ 50 ] ) ; int repick ( int a [ 50 ] , int b [ 50 ] ) ; int hand ( int a [ 50 ] , int b [ 50 ] , int c [ 100 ] ) ; int out ( int c [ 100 ] ) ; int main ( ) { get ( a , b ) ; repick ( a , b ) ; hand ( a , b , c ) ; out ( c ) ; return 0 ; } int get ( int a [ 50 ] , int b [ 50 ] ) { scanf ( "%d%d" , & f , & g ) ; for ( d = 0 ; d < f ; d ++ ) scanf ( "%d" , & a [ d ] ) ; for ( e = 0 ; e < g ; e ++ ) scanf ( "%d" , & b [ e ] ) ; return 0 ; } int repick ( int a [ 50 ] , int b [ 50 ] ) { int h ; for ( d = 0 ; d < f ; d ++ ) for ( e = 0 ; e < ( f - d - 1 ) ; e ++ ) if ( a [ e ] > a [ e + 1 ] ) { h = a [ e + 1 ] ; a [ e + 1 ] = a [ e ] ; a [ e ] = h ; } for ( d = 0 ; d < g ; d ++ ) for ( e = 0 ; e < ( g - d - 1 ) ; e ++ ) if ( b [ e ] > b [ e + 1 ] ) { h = b [ e + 1 ] ; b [ e + 1 ] = b [ e ] ; b [ e ] = h ; } return 0 ; } int hand ( int a [ 50 ] , int b [ 50 ] , int c [ 100 ] ) { d = 0 ; while ( d < f ) { c [ d ] = a [ d ] ; d ++ ; } while ( d < ( f + g ) ) { c [ d ] = b [ d - f ] ; d ++ ; } return 0 ; } int out ( int c [ 100 ] ) { d = 0 ; printf ( "%d" , c [ d ] ) ; d ++ ; while ( d < ( f + g ) ) { printf ( " %d" , c [ d ] ) ; d ++ ; } return 0 ; }
void f ( int m , int n ) { int i , j ; int temp ; int a [ 100 ] = { 0 } ; int b [ 100 ] = { 0 } ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & b [ j ] ) ; for ( i = 1 ; i < m ; i ++ ) for ( j = 0 ; j < m - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j + 1 ] ; a [ j + 1 ] = a [ j ] ; a [ j ] = temp ; } } for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < n - 1 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { temp = b [ j + 1 ] ; b [ j + 1 ] = b [ j ] ; b [ j ] = temp ; } } for ( i = 0 ; i < m ; i ++ ) printf ( "%d " , a [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) printf ( "%d " , b [ i ] ) ; printf ( "%d" , b [ n - 1 ] ) ; } int main ( ) { int m , n ; scanf ( "%d%d" , & m , & n ) ; f ( m , n ) ; return 0 ; }
int a [ 1000 ] , b [ 1000 ] , c [ 2000 ] ; int M , N ; void x ( ) { int i ; scanf ( "%d" , & M ) ; scanf ( "%d" , & N ) ; for ( i = 0 ; i <= M - 1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i <= N - 1 ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } ; void y ( ) { int i , j , m ; for ( i = 1 ; i <= M - 1 ; i ++ ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( a [ i ] < a [ j ] ) { m = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = m ; } } } for ( i = 1 ; i <= N - 1 ; i ++ ) { for ( j = 0 ; j <= i - 1 ; j ++ ) { if ( b [ i ] < b [ j ] ) { m = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = m ; } } } } ; void z ( ) { int i ; for ( i = 0 ; i <= M - 1 ; i ++ ) c [ i ] = a [ i ] ; for ( i = 0 ; i <= N - 1 ; i ++ ) c [ i + M ] = b [ i ] ; } ; void u ( ) { int i ; for ( i = 0 ; i <= M + N - 2 ; i ++ ) printf ( "%d " , c [ i ] ) ; printf ( "%d" , c [ M + N - 1 ] ) ; } ; int main ( ) { x ( ) ; y ( ) ; z ( ) ; u ( ) ; return 0 ; }
int m , n ; int a [ 100 ] , b [ 100 ] ; void read ( ) { cin >> m >> n ; for ( int i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ; for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ; } void sort_ ( ) { sort ( a + 1 , a + m + 1 ) ; sort ( b + 1 , b + n + 1 ) ; } void stick ( ) { for ( int i = 1 ; i <= n ; i ++ ) a [ m + i ] = b [ i ] ; } void print ( ) { for ( int i = 1 ; i < m + n ; i ++ ) cout << a [ i ] << ' ' ; cout << a [ m + n ] ; } int main ( ) { read ( ) ; sort_ ( ) ; stick ( ) ; print ( ) ; return 0 ; }
main ( ) { int m , n , i , j ; static int a [ 100 ] , b [ 100 ] ; scanf ( "%d %d\n" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) if ( a [ j ] < a [ i ] ) { a [ j ] = a [ j ] + a [ i ] ; a [ i ] = a [ j ] - a [ i ] ; a [ j ] = a [ j ] - a [ i ] ; } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( b [ j ] < b [ i ] ) { b [ j ] = b [ j ] + b [ i ] ; b [ i ] = b [ j ] - b [ i ] ; b [ j ] = b [ j ] - b [ i ] ; } } for ( i = m ; i < m + n ; i ++ ) a [ i ] = b [ i - m ] ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ m + n - 1 ] ) ; }
static int m , n ; int a [ 1000 ] , b [ 1000 ] , c [ 2000 ] ; void f1 ( int a [ ] , int b [ ] , int h , int k ) { int i ; scanf ( "%d%d" , & h , & k ) ; m = h ; n = k ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; return ; } void f2 ( int a [ ] , int b [ ] , int m , int n ) { int i , j , k ; for ( j = m - 1 ; j > 0 ; j -- ) { for ( i = 0 ; i < j ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { k = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = k ; } } } for ( j = n - 1 ; j > 0 ; j -- ) { for ( i = 0 ; i < j ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { k = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = k ; } } } } void f3 ( int a [ ] , int b [ ] , int c [ ] , int m , int n ) { int i ; for ( i = 0 ; i < m ; i ++ ) c [ i ] = a [ i ] ; for ( i = m ; i < m + n ; i ++ ) c [ i ] = b [ i - m ] ; } void f4 ( int c [ ] , int m , int n ) { int i ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , c [ i ] ) ; printf ( "%d" , c [ i ] ) ; } void main ( ) { f1 ( a , b , m , n ) ; f2 ( a , b , m , n ) ; f3 ( a , b , c , m , n ) ; f4 ( c , m , n ) ; }
int order ( int n , int a [ ] ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) for ( j = i ; j < n ; j ++ ) if ( a [ i ] > a [ j ] ) { k = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = k ; } } int combine ( int a [ ] , int b [ ] , int n , int m , int c [ ] ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; for ( j = 0 ; j < m ; j ++ , i ++ ) c [ i ] = b [ j ] ; } int input ( int n , int a [ ] ) { int i ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; } int output ( int n , int a [ ] ) { int i ; for ( i = 0 ; i < n ; i ++ ) { printf ( "%d" , a [ i ] ) ; if ( i < n - 1 ) printf ( " " ) ; } } int main ( ) { int n , m ; scanf ( "%d %d" , & n , & m ) ; int a [ n ] , b [ m ] , c [ n + m ] ; input ( n , a ) ; input ( m , b ) ; order ( n , a ) ; order ( m , b ) ; combine ( a , b , n , m , c ) ; output ( n + m , c ) ; return 0 ; }
void sort ( int array [ ] , int n ) { int i , j , k , t ; for ( i = 0 ; i < n - 1 ; i ++ ) { k = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( array [ j ] < array [ k ] ) k = j ; t = array [ k ] ; array [ k ] = array [ i ] ; array [ i ] = t ; } } void link ( int array1 [ ] , int array2 [ ] , int m , int n ) { int i ; for ( i = m ; i < m + n ; i ++ ) array1 [ i ] = array2 [ i - m ] ; } main ( ) { int a [ 40 ] , b [ 20 ] , n1 , n2 , i ; scanf ( "%d %d" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & b [ i ] ) ; sort ( a , n1 ) ; sort ( b , n2 ) ; link ( a , b , n1 , n2 ) ; for ( i = 0 ; i < n1 + n2 - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; if ( i == n1 + n2 - 1 ) printf ( "%d" , a [ i ] ) ; }
int input ( int * s , int n ) { } int sort ( int * s , int n ) { } main ( ) { int m , n ; scanf ( "%d %d" , & m , & n ) ; int * a = ( int * ) malloc ( m * sizeof ( int ) ) ; int * b = ( int * ) malloc ( n * sizeof ( int ) ) ; int * s = ( int * ) malloc ( ( m + n ) * sizeof ( int ) ) ; for ( int i = 0 ; i < m ; i ++ ) scanf ( "%d" , a + i ) ; for ( int i = 0 ; i < n ; i ++ ) scanf ( "%d" , b + i ) ; for ( int i = 1 ; i < m ; i ++ ) for ( int j = 0 ; j < m - i ; j ++ ) { if ( * ( a + j ) > * ( a + ( j + 1 ) ) ) { int t ; t = * ( a + j ) ; * ( a + j ) = * ( a + ( j + 1 ) ) ; * ( a + ( j + 1 ) ) = t ; } } for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j < n - i ; j ++ ) { if ( * ( b + j ) > * ( b + ( j + 1 ) ) ) { int t ; t = * ( b + j ) ; * ( b + j ) = * ( b + ( j + 1 ) ) ; * ( b + ( j + 1 ) ) = t ; } } for ( int i = 0 ; i < m ; i ++ ) s [ i ] = a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) s [ m + i ] = b [ i ] ; for ( int i = 0 ; i < m + n ; i ++ ) { if ( i == 0 ) printf ( "%d" , s [ i ] ) ; else printf ( " %d" , s [ i ] ) ; } }
int n1 , n2 ; int num1 [ 100 ] , num2 [ 100 ] ; void in ( int n , int a [ ] ) { for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; } void com ( int n , int a [ ] ) { int temp ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = 0 ; j < n - i - 1 ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } int main ( ) { cin >> n1 >> n2 ; in ( n1 , num1 ) ; com ( n1 , num1 ) ; in ( n2 , num2 ) ; com ( n2 , num2 ) ; for ( int i = 0 ; i < n1 ; i ++ ) cout << num1 [ i ] << ' ' ; for ( int j = 0 ; j < n2 - 1 ; j ++ ) cout << num2 [ j ] << ' ' ; cout << num2 [ n2 - 1 ] << endl ; return 0 ; }
int Compare ( const void * elem1 , const void * elem2 ) { return * ( ( int * ) ( elem1 ) ) - * ( ( int * ) ( elem2 ) ) ; } int main ( ) { int n1 , n2 ; int * a1 , * a2 ; int i1 , i2 , i3 , i4 ; scanf ( "%d %d" , & n1 , & n2 ) ; a1 = ( int * ) malloc ( sizeof ( int ) * n1 ) ; a2 = ( int * ) malloc ( sizeof ( int ) * n2 ) ; for ( i1 = 0 ; i1 < n1 ; i1 ++ ) { scanf ( "%d" , a1 + i1 ) ; } for ( i2 = 0 ; i2 < n2 ; i2 ++ ) { scanf ( "%d" , a2 + i2 ) ; } qsort ( a1 , n1 , sizeof ( int ) , Compare ) ; qsort ( a2 , n2 , sizeof ( int ) , Compare ) ; for ( i3 = 0 ; i3 < n1 ; i3 ++ ) { printf ( "%d " , a1 [ i3 ] ) ; } for ( i4 = 0 ; i4 < n2 - 1 ; i4 ++ ) { printf ( "%d " , a2 [ i4 ] ) ; } printf ( "%d" , a2 [ n2 - 1 ] ) ; }
int a [ 300 ] , b [ 300 ] , c [ 600 ] ; void myfunc ( ) { int la , lb , i ; cin >> la >> lb ; for ( i = 0 ; i < la ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < lb ; i ++ ) cin >> b [ i ] ; sort ( a , a + la ) ; sort ( b , b + lb ) ; for ( i = 0 ; i < la ; i ++ ) c [ i ] = a [ i ] ; for ( i = la ; i < la + lb ; i ++ ) c [ i ] = b [ i - la ] ; for ( i = 0 ; i < la + lb - 1 ; i ++ ) cout << c [ i ] << ' ' ; cout << c [ i ] ; } int main ( ) { myfunc ( ) ; return 0 ; }
int m , n ; int a [ 100 ] , b [ 100 ] , k [ 200 ] ; void f1 ( ) ; void f2 ( int [ ] , int [ ] ) ; void f3 ( int [ ] , int [ ] ) ; void f4 ( int [ ] ) ; int main ( ) { f1 ( ) ; f2 ( a , b ) ; f3 ( a , b ) ; f4 ( k ) ; return 0 ; } void f1 ( ) { cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ; for ( int j = 0 ; j < n ; j ++ ) cin >> b [ j ] ; } void f2 ( int c [ ] , int d [ ] ) { for ( int i = 0 ; i < m ; i ++ ) { for ( int j = m - 1 ; j > i ; j -- ) { if ( c [ j ] < c [ j - 1 ] ) swap ( c [ j ] , c [ j - 1 ] ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j > i ; j -- ) { if ( d [ j ] < d [ j - 1 ] ) swap ( d [ j ] , d [ j - 1 ] ) ; } } } void f3 ( int e [ ] , int f [ ] ) { for ( int i = 0 ; i < m + n ; i ++ ) { if ( i < m ) k [ i ] = a [ i ] ; else k [ i ] = b [ i - m ] ; } } void f4 ( int g [ ] ) { for ( int i = 0 ; i < n + m - 1 ; i ++ ) cout << g [ i ] << " " ; cout << g [ n + m - 1 ] << endl ; }
int main ( ) { int word1 [ 100 ] , word2 [ 100 ] ; int num1 , num2 ; scanf ( "%d %d" , & num1 , & num2 ) ; int i ; for ( i = 0 ; i < num1 ; i ++ ) { scanf ( "%d" , & word1 [ i ] ) ; } printf ( "\n" ) ; for ( i = 0 ; i < num2 ; i ++ ) { scanf ( "%d" , & word2 [ i ] ) ; } printf ( "\n" ) ; int j , k , temp ; for ( j = 1 ; j <= num1 * num1 ; j ++ ) { for ( k = 0 ; k < num1 - 1 ; k ++ ) { if ( word1 [ k ] >= word1 [ k + 1 ] ) { temp = word1 [ k ] ; word1 [ k ] = word1 [ k + 1 ] ; word1 [ k + 1 ] = temp ; } } } for ( j = 1 ; j <= num2 * num2 ; j ++ ) { for ( k = 0 ; k < num2 - 1 ; k ++ ) { if ( word2 [ k ] >= word2 [ k + 1 ] ) { temp = word2 [ k ] ; word2 [ k ] = word2 [ k + 1 ] ; word2 [ k + 1 ] = temp ; } } } int zjword [ 300 ] , l ; for ( l = 0 ; l < num1 + num2 ; l ++ ) { if ( l < num1 ) { zjword [ l ] = word1 [ l ] ; } else { zjword [ l ] = word2 [ l - num1 ] ; } } int m ; for ( m = 0 ; m < num1 + num2 ; m ++ ) { if ( m != num1 + num2 - 1 ) printf ( "%d " , zjword [ m ] ) ; else printf ( "%d" , zjword [ m ] ) ; } return 0 ; }
int a [ 100 ] , b [ 100 ] , c [ 200 ] , i , j , m , n ; void read ( void ) { cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < n ; i ++ ) { cin >> b [ i ] ; } return ; } void place ( void ) { int s ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < m - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { s = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = s ; } } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { s = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = s ; } } } return ; } void together ( void ) { for ( i = 0 ; i < m ; i ++ ) { c [ i ] = a [ i ] ; } for ( i = m ; i < m + n ; i ++ ) { c [ i ] = b [ i - m ] ; } return ; } void put ( void ) { for ( i = 0 ; i < m + n ; i ++ ) { if ( i == 0 ) { cout << c [ i ] ; } else { cout << ' ' << c [ i ] ; } } return ; } int main ( ) { read ( ) ; place ( ) ; together ( ) ; put ( ) ; return 0 ; }
int na , nb ; int a [ 10000 ] , b [ 10000 ] , c [ 10000 ] ; void f1 ( ) { cin >> na >> nb ; for ( int i = 0 ; i <= na - 1 ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; i <= nb - 1 ; i ++ ) cin >> b [ i ] ; } void f2 ( ) { sort ( a , a + na ) ; sort ( b , b + nb ) ; } void f3 ( ) { for ( int i = 0 ; i <= na - 1 ; i ++ ) c [ i ] = a [ i ] ; for ( int i = na ; i <= na + nb - 1 ; i ++ ) c [ i ] = b [ i - na ] ; } void f4 ( ) { cout << c [ 0 ] ; for ( int i = 1 ; i <= na + nb - 1 ; i ++ ) cout << ' ' << c [ i ] ; } int main ( ) { f1 ( ) ; f2 ( ) ; f3 ( ) ; f4 ( ) ; return 0 ; }
int a [ 20 ] , b [ 20 ] , c [ 40 ] ; void read ( int x1 , int x2 ) { int i ; for ( i = 0 ; i < x1 ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < x2 ; i ++ ) cin >> b [ i ] ; return ; } void sort1 ( int n ) { int k , j , tem ; for ( k = 1 ; k < n ; k ++ ) for ( j = 0 ; j < n - k ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { tem = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = tem ; } return ; } void sort2 ( int n ) { int k , j , tem ; for ( k = 1 ; k < n ; k ++ ) for ( j = 0 ; j < n - k ; j ++ ) if ( b [ j ] > b [ j + 1 ] ) { tem = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = tem ; } return ; } void combine ( int n1 , int n2 ) { int i ; for ( i = 0 ; i < n1 ; i ++ ) c [ i ] = a [ i ] ; for ( i = n1 ; i < n1 + n2 ; i ++ ) c [ i ] = b [ i - n1 ] ; return ; } void arraycout ( int n1 , int n2 ) { int i ; cout << c [ 0 ] ; for ( i = 1 ; i < n1 + n2 ; i ++ ) cout << " " << c [ i ] ; return ; } int main ( ) { int n1 , n2 ; cin >> n1 >> n2 ; read ( n1 , n2 ) ; sort1 ( n1 ) ; sort2 ( n2 ) ; combine ( n1 , n2 ) ; arraycout ( n1 , n2 ) ; return 0 ; }
int a [ 10000 ] , b [ 10000 ] ; int sizea , sizeb ; void read ( ) { cin >> sizea >> sizeb ; int i ; for ( i = 0 ; i <= sizea - 1 ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i <= sizeb - 1 ; i ++ ) cin >> b [ i ] ; } void order ( int n , int a [ ] ) { int i , j ; int temp ; for ( i = n - 1 ; i >= 1 ; i -- ) for ( j = 0 ; j <= i - 1 ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } void paixu ( ) { order ( sizea , a ) ; order ( sizeb , b ) ; } void mix ( ) { int i ; for ( i = 0 ; i <= sizeb - 1 ; i ++ ) a [ sizea + i ] = b [ i ] ; } void print ( ) { cout << a [ 0 ] ; for ( int i = 1 ; i <= sizea + sizeb - 1 ; i ++ ) cout << " " << a [ i ] ; } int main ( ) { read ( ) ; paixu ( ) ; mix ( ) ; print ( ) ; }
void paixu ( int n , int a [ 1000 ] ) { if ( n == 0 ) return ; int x , i ; int min = a [ 0 ] ; for ( x = 0 ; x < n ; x ++ ) { if ( a [ x ] <= min ) min = a [ x ] ; } if ( n > 1 ) cout << min << ' ' ; if ( n == 1 ) cout << min ; for ( x = 0 ; x < n ; x ++ ) { if ( a [ x ] == min ) break ; } for ( i = x ; i < n - 1 ; i ++ ) a [ i ] = a [ i + 1 ] ; return paixu ( n - 1 , a ) ; } int main ( ) { int m1 , m2 , x ; int s [ 1000 ] ; memset ( s , 0 , sizeof ( s ) ) ; cin >> m1 >> m2 ; for ( x = 0 ; x < m1 ; x ++ ) cin >> s [ x ] ; paixu ( m1 , s ) ; cout << ' ' ; memset ( s , 0 , sizeof ( s ) ) ; for ( x = 0 ; x < m2 ; x ++ ) cin >> s [ x ] ; paixu ( m2 , s ) ; return 0 ; }
int n1 ; int n2 ; int i ; int a [ 100 ] = { 0 } ; int b [ 100 ] = { 0 } ; int c [ 200 ] = { 0 } ; void scanfing ( ) { scanf ( "%d %d" , & n1 , & n2 ) ; scanf ( "%d" , & a [ 0 ] ) ; for ( i = 1 ; i < n1 ; i ++ ) scanf ( " %d" , & a [ i ] ) ; scanf ( "%d" , & b [ 0 ] ) ; for ( i = 1 ; i < n2 ; i ++ ) scanf ( " %d" , & b [ i ] ) ; } int compare ( const void * elem1 , const void * elem2 ) { return ( * ( int * ) elem1 - * ( int * ) elem2 ) ; } void qsorting ( ) { qsort ( a , n1 , sizeof ( int ) , compare ) ; qsort ( b , n2 , sizeof ( int ) , compare ) ; } void together ( ) { for ( i = 0 ; i < n1 ; i ++ ) c [ i ] = a [ i ] ; for ( i = 0 ; i < n2 ; i ++ ) c [ i + n1 ] = b [ i ] ; } void printfing ( ) { printf ( "%d" , c [ 0 ] ) ; for ( i = 1 ; i < n1 + n2 ; i ++ ) printf ( " %d" , c [ i ] ) ; } int main ( ) { scanfing ( ) ; qsorting ( printfing ( ) ; }
int shuzu1 [ 100 ] , shuzu2 [ 100 ] ; int n1 , n2 ; void scan ( ) { int i ; scanf ( "%d%d" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & shuzu1 [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & shuzu2 [ i ] ) ; } void paixu ( int shuzu [ ] , int n ) { int min , i , j , temp ; for ( i = 0 ; i < n ; i ++ ) { min = i ; for ( j = i + 1 ; j < n ; j ++ ) { if ( shuzu [ j ] < shuzu [ min ] ) min = j ; } temp = shuzu [ i ] ; shuzu [ i ] = shuzu [ min ] ; shuzu [ min ] = temp ; } } void hebing ( int shuzu1 [ ] , int shuzu2 [ ] , int n1 , int n2 ) { int i ; for ( i = 0 ; i < n1 ; i ++ ) printf ( "%d " , shuzu1 [ i ] ) ; for ( i = 0 ; i < n2 - 1 ; i ++ ) printf ( "%d " , shuzu2 [ i ] ) ; printf ( "%d" , shuzu2 [ i ] ) ; } void main ( ) { scan ( ) ; paixu ( shuzu1 , n1 ) ; paixu ( shuzu2 , n2 ) ; hebing ( shuzu1 , shuzu2 , n1 , n2 ) ; }
int Compare ( const void * elem1 , const void * elem2 ) { return * ( ( int * ) ( elem1 ) ) - * ( ( int * ) ( elem2 ) ) ; } int main ( ) { int M , N ; scanf ( "%d%d" , & M , & N ) ; int a [ 100 ] , b [ 100 ] ; int i ; for ( i = 0 ; i < M ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } qsort ( a , M , sizeof ( int ) , Compare ) ; for ( i = 0 ; i < M ; i ++ ) { printf ( "" ) ; } for ( i = 0 ; i < N ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } qsort ( b , N , sizeof ( int ) , Compare ) ; for ( i = 0 ; i < N ; i ++ ) { printf ( "" ) ; } int c [ 200 ] ; for ( i = 0 ; i < M ; i ++ ) { c [ i ] = a [ i ] ; } int j ; for ( j = 0 ; j < N ; j ++ , i ++ ) { c [ i ] = b [ j ] ; } for ( i = 0 ; i < M + N - 1 ; i ++ ) { printf ( "%d " , c [ i ] ) ; } printf ( "%d" , c [ i ] ) ; }
int la , lb ; int a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; void get ( ) { for ( int i = 0 ; i < la ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; i < lb ; i ++ ) cin >> b [ i ] ; } void sort ( ) { int i , j ; int p = a [ 0 ] ; for ( i = 0 ; i < la - 1 ; i ++ ) for ( j = 0 ; j <= la - i - 2 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { p = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = p ; } } p = b [ 0 ] ; for ( i = 0 ; i < lb - 1 ; i ++ ) for ( j = 0 ; j <= lb - i - 2 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { p = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = p ; } } } void link ( ) { int i ; for ( i = la ; i <= la + lb - 1 ; i ++ ) a [ i ] = b [ i - la ] ; } void print ( ) { int i ; for ( i = 0 ; i < la + lb - 1 ; i ++ ) cout << a [ i ] << " " ; cout << a [ la + lb - 1 ] ; } int main ( ) { cin >> la >> lb ; get ( ) ; sort ( ) ; link ( ) ; print ( ) ; return 0 ; }
int main ( ) { int a [ 1000 ] , b [ 1000 ] , c [ 1000 ] ; int i , n1 , n2 ; void shubingpai ( int x [ ] , int y [ ] , int z [ ] , int m , int n ) ; scanf ( "%d%d" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & b [ i ] ) ; shubingpai ( a , b , c , n1 , n2 ) ; for ( i = 0 ; i < ( n1 + n2 - 1 ) ; i ++ ) printf ( "%d " , c [ i ] ) ; printf ( "%d" , c [ n1 + n2 - 1 ] ) ; } void shubingpai ( int x [ ] , int y [ ] , int z [ ] , int m , int n ) { void pai ( int c [ ] , int n ) ; int i ; pai ( x , m ) ; pai ( y , n ) ; for ( i = 0 ; i < m ; i ++ ) z [ i ] = x [ i ] ; for ( i = m ; i < m + n ; i ++ ) z [ i ] = y [ i - m ] ; } void pai ( int c [ ] , int n ) { int i , j , k , t ; for ( i = 0 ; i < n - 1 ; i ++ ) { k = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( c [ j ] < c [ k ] ) k = j ; t = c [ k ] ; c [ k ] = c [ i ] ; c [ i ] = t ; } }
int a [ 5000 ] , b [ 5000 ] , N1 , N2 , c [ 10000 ] ; int f1 ( ) { int n ; scanf ( "%d%d" , & N1 , & N2 ) ; for ( n = 0 ; n <= N1 - 1 ; n ++ ) { scanf ( "%d" , & a [ n ] ) ; } for ( n = 0 ; n <= N2 - 1 ; n ++ ) { scanf ( "%d" , & b [ n ] ) ; } return 0 ; } int f2 ( ) { int i , j , t ; for ( i = 1 ; i <= N1 - 1 ; i ++ ) { for ( j = 0 ; j <= N1 - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } } for ( i = 1 ; i <= N2 - 1 ; i ++ ) { for ( j = 0 ; j <= N2 - i - 1 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { t = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = t ; } } } return 0 ; } int f3 ( ) { int i , j ; for ( i = 0 ; i <= N1 - 1 ; i ++ ) { c [ i ] = a [ i ] ; } for ( i = N1 , j = 0 ; i <= N1 + N2 - 1 ; i ++ , j ++ ) { c [ i ] = b [ j ] ; } return 0 ; } int f4 ( ) { int i ; printf ( "%d" , c [ 0 ] ) ; for ( i = 1 ; i <= N1 + N2 - 1 ; i ++ ) { printf ( " %d" , c [ i ] ) ; } return 0 ; } int main ( ) { f1 ( ) ; f2 ( ) ; f3 ( ) ; f4 ( ) ; }
void input ( int * p1 , int * p2 , int * * pA , int * * pB ) { int i ; scanf ( "%d %d" , p1 , p2 ) ; * pA = ( int * ) malloc ( ( * p1 ) * sizeof ( int ) ) ; * pB = ( int * ) malloc ( ( * p2 ) * sizeof ( int ) ) ; for ( i = 0 ; i < * p1 ; i ++ ) scanf ( "%d" , * pA + i ) ; for ( i = 0 ; i < * p2 ; i ++ ) scanf ( "%d" , * pB + i ) ; } void sort ( int p , int * pX ) { int i , j , temp ; for ( i = 0 ; i < p ; i ++ ) { for ( j = p - 1 ; j > i ; j -- ) { if ( pX [ j ] < pX [ j - 1 ] ) { temp = pX [ j ] ; pX [ j ] = pX [ j - 1 ] ; pX [ j - 1 ] = temp ; } } } } void combine ( int p1 , int p2 , int * pA , int * pB , int * * pC ) { * pC = ( int * ) malloc ( ( p1 + p2 ) * sizeof ( int ) ) ; int i ; for ( i = 0 ; i < p1 ; i ++ ) ( * pC ) [ i ] = pA [ i ] ; for ( i = 0 ; i < p2 ; i ++ ) ( * pC ) [ p1 + i ] = pB [ i ] ; free ( pA ) ; free ( pB ) ; } void output ( int p , int * pC ) { int i ; for ( i = 0 ; i < p - 1 ; i ++ ) printf ( "%d " , pC [ i ] ) ; printf ( "%d\n" , pC [ p - 1 ] ) ; free ( pC ) ; } main ( ) { int p1 , p2 , * pA , * pB , * pC ; input ( & p1 , & p2 , & pA , & pB ) ; sort ( p1 , pA ) ; sort ( p2 , pB ) ; combine ( p1 , p2 , pA , pB , & pC ) ; output ( p1 + p2 , pC ) ; }
int a [ 100 ] , b [ 100 ] ; int al = 0 , bl = 0 , i , j , k ; void f1 ( ) { cin >> al >> bl ; for ( i = 0 ; i < al ; i ++ ) { cin >> a [ i ] ; } for ( i = 0 ; i < bl ; i ++ ) { cin >> b [ i ] ; } } void f2 ( ) { for ( i = 0 ; i < al - 1 ; i ++ ) { for ( j = i ; j < al ; j ++ ) { if ( a [ i ] > a [ j ] ) { k = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = k ; } } } for ( i = 0 ; i < bl - 1 ; i ++ ) { for ( j = i ; j < bl ; j ++ ) { if ( b [ i ] > b [ j ] ) { k = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = k ; } } } } void f3 ( ) { for ( i = 0 ; i < bl ; i ++ ) { a [ i + al ] = b [ i ] ; } } void f4 ( ) { for ( i = 0 ; i < al + bl - 1 ; i ++ ) { cout << a [ i ] << " " ; } cout << a [ al + bl - 1 ] ; } int main ( ) { f1 ( ) ; f2 ( ) ; f3 ( ) ; f4 ( ) ; return 0 ; }
int output ( int b [ ] , int a ) { sort ( b , b + a ) ; for ( int i = 0 ; i < a - 1 ; i ++ ) cout << b [ i ] << ' ' ; cout << b [ a - 1 ] ; } int main ( ) { int a , b ; cin >> a >> b ; int input ( int a , int s ) ; input ( a , b ) ; return 0 ; } int input ( int a , int s ) { int b [ 1000 ] , c [ 1000 ] ; for ( int i = 0 ; i < a ; i ++ ) cin >> b [ i ] ; for ( int i = 0 ; i < s ; i ++ ) cin >> c [ i ] ; output ( b , a ) ; cout << ' ' ; output ( c , s ) ; }
int n1 , n2 , a1 [ 100 ] , a2 [ 100 ] ; void main ( ) { void scan ( ) , rank ( ) , combine ( ) , print ( ) ; scan ( ) ; rank ( ) ; combine ( ) ; print ( ) ; } void scan ( ) { int i ; scanf ( "%d %d\n" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & a1 [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & a2 [ i ] ) ; } void rank ( ) { int i , j , mid ; for ( j = 0 ; j < n1 - 1 ; j ++ ) for ( i = 0 ; i < n1 - 1 - j ; i ++ ) if ( a1 [ i ] > a1 [ i + 1 ] ) { mid = a1 [ i ] ; a1 [ i ] = a1 [ i + 1 ] ; a1 [ i + 1 ] = mid ; } for ( j = 0 ; j < n2 - 1 ; j ++ ) for ( i = 0 ; i < n2 - 1 - j ; i ++ ) if ( a2 [ i ] > a2 [ i + 1 ] ) { mid = a2 [ i ] ; a2 [ i ] = a2 [ i + 1 ] ; a2 [ i + 1 ] = mid ; } } void combine ( ) { int i ; for ( i = n1 ; i < n1 + n2 ; i ++ ) a1 [ i ] = a2 [ i - n1 ] ; } void print ( ) { int i ; for ( i = 0 ; i < n1 + n2 ; i ++ ) { if ( i != 0 ) printf ( " " ) ; printf ( "%d" , a1 [ i ] ) ; } }
void scan ( int n [ ] , int a [ ] , int b [ ] ) { int i ; scanf ( "%d%d" , & n [ 0 ] , & n [ 1 ] ) ; for ( i = 0 ; i < n [ 0 ] ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n [ 1 ] ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void sort ( int a [ ] , int b [ ] , int m , int n ) { int i , j , t ; for ( i = 1 ; i < m ; i ++ ) for ( j = 0 ; j < m - i ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < n - i ; j ++ ) if ( b [ j ] > b [ j + 1 ] ) { t = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = t ; } } void com ( int a [ ] , int b [ ] , int ab [ ] , int m , int n ) { int i ; for ( i = 0 ; i < m ; i ++ ) ab [ i ] = a [ i ] ; for ( i = 0 ; i < n ; i ++ ) ab [ m + i ] = b [ i ] ; } void prt ( int ab [ ] , int m , int n ) { int i ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , ab [ i ] ) ; printf ( "%d" , ab [ m + n - 1 ] ) ; } int main ( ) { int a [ 101 ] , b [ 101 ] , n [ 2 ] , ab [ 202 ] ; scan ( n , a , b ) ; sort ( a , b , n [ 0 ] , n [ 1 ] ) ; com ( a , b , ab , n [ 0 ] , n [ 1 ] ) ; prt ( ab , n [ 0 ] , n [ 1 ] ) ; return 0 ; }
int a [ 100 ] , b [ 100 ] , c [ 200 ] ; int x , y ; void oh ( ) { int i ; scanf ( "%d %d" , & x , & y ) ; for ( i = 0 ; i < x - 1 ; i ++ ) scanf ( "%d " , & a [ i ] ) ; scanf ( "%d\n" , & a [ x - 1 ] ) ; for ( i = 0 ; i < y - 1 ; i ++ ) scanf ( "%d " , & b [ i ] ) ; scanf ( "%d\n" , & b [ y - 1 ] ) ; } void ba ( ) { int i , j , k ; for ( i = 0 ; i < x ; i ++ ) for ( j = i ; j < x ; j ++ ) { if ( a [ i ] > a [ j ] ) { k = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = k ; } } for ( i = 0 ; i < y ; i ++ ) for ( j = i ; j < y ; j ++ ) { if ( b [ i ] > b [ j ] ) { k = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = k ; } } } void zha ( ) { int i ; for ( i = 0 ; i < x ; i ++ ) c [ i ] = a [ i ] ; for ( i = x ; i < x + y ; i ++ ) c [ i ] = b [ i - x ] ; } void hei ( ) { int i ; for ( i = 0 ; i < x + y - 1 ; i ++ ) { printf ( "%d " , c [ i ] ) ; } printf ( "%d" , c [ x + y - 1 ] ) ; } int main ( ) { oh ( ) ; ba ( ) ; zha ( ) ; hei ( ) ; }
void input ( int a [ ] , int b [ ] ) { int i , m , n ; scanf ( "%d %d" , & a [ 49 ] , & b [ 49 ] ) ; m = a [ 49 ] ; n = b [ 49 ] ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void order ( int m , int n , int a [ ] , int b [ ] ) { int i , j , t ; for ( j = 0 ; j < m - 1 ; j ++ ) { for ( i = 0 ; i < m - 1 - j ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { t = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = t ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( i = 0 ; i < n - 1 - j ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { t = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = t ; } } } } void comb ( int m , int n , int a [ ] , int b [ ] , int c [ ] ) { int i ; for ( i = 0 ; i < m ; i ++ ) c [ i ] = a [ i ] ; for ( i = m ; i < ( m + n ) ; i ++ ) c [ i ] = b [ i - m ] ; } void print ( int m , int n , int c [ ] ) { int i ; printf ( "%d" , c [ 0 ] ) ; for ( i = 1 ; i < ( m + n ) ; i ++ ) printf ( " %d" , c [ i ] ) ; } void main ( ) { int a [ 50 ] , b [ 50 ] , c [ 100 ] ; input ( a , b ) ; order ( a [ 49 ] , b [ 49 ] , a , b ) ; comb ( a [ 49 ] , b [ 49 ] , a , b , c ) ; print ( a [ 49 ] , b [ 49 ] , c ) ; }
int x [ 100 ] , y [ 100 ] , c [ 200 ] ; int m , n ; void scanf ( ) { scanf ( "%d %d" , & m , & n ) ; int i ; for ( i = 0 ; i < m - 1 ; i ++ ) { scanf ( "%d " , & x [ i ] ) ; } scanf ( "%d\n" , & x [ m - 1 ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { scanf ( "%d " , & y [ i ] ) ; } scanf ( "%d\n" , & y [ n - 1 ] ) ; } void order ( ) { int j , i , b ; for ( j = 0 ; j < m ; j ++ ) { for ( i = j ; i < m ; i ++ ) if ( x [ j ] > x [ i ] ) { b = x [ j ] ; x [ j ] = x [ i ] ; x [ i ] = b ; } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j ; i < n ; i ++ ) if ( y [ j ] > y [ i ] ) { b = y [ j ] ; y [ j ] = y [ i ] ; y [ i ] = b ; } } } void together ( ) { int s ; for ( s = 0 ; s < m ; s ++ ) { c [ s ] = x [ s ] ; } for ( s = m ; s < m + n ; s ++ ) { c [ s ] = y [ s - m ] ; } } void print ( ) { int i ; for ( i = 0 ; i < m + n - 1 ; i ++ ) { printf ( "%d " , c [ i ] ) ; } printf ( "%d" , c [ m + n - 1 ] ) ; } int main ( ) { scanf ( ) ; order ( ) ; together ( ) ; print ( ) ; }
int compare ( const void * elem1 , const void * elem2 ) { return ( * ( int * ) elem1 ) - ( * ( int * ) elem2 ) ; } int main ( ) { int N , M , i ; scanf ( "%d%d" , & N , & M ) ; int a [ N ] , b [ M ] ; for ( i = 0 ; i < N ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < M ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } qsort ( a , N , sizeof ( int ) , compare ) ; for ( i = 0 ; i < N - 1 ; i ++ ) { printf ( "%d " , a [ i ] ) ; } printf ( "%d " , a [ i ] ) ; qsort ( b , M , sizeof ( int ) , compare ) ; for ( i = 0 ; i < M - 1 ; i ++ ) { printf ( "%d " , b [ i ] ) ; } printf ( "%d\n" , b [ i ] ) ; return 0 ; }
main ( ) { int m , n ; int input ( int a , int b ) ; scanf ( "%d %d" , & m , & n ) ; input ( m , n ) ; } int input ( int a , int b ) { int c [ 1000 ] , d [ 1000 ] ; for ( int i = 0 ; i < a ; i ++ ) scanf ( "%d" , & c [ i ] ) ; for ( int j = 0 ; j < b ; j ++ ) scanf ( "%d" , & d [ j ] ) ; int sort ( int e [ ] , int s ) ; sort ( c , a ) ; printf ( " " ) ; sort ( d , b ) ; } int sort ( int e [ ] , int s ) { int temp ; for ( int r = 0 ; r < s - 1 ; r ++ ) for ( int q = r + 1 ; q < s ; q ++ ) { if ( e [ r ] > e [ q ] ) { temp = e [ r ] ; e [ r ] = e [ q ] ; e [ q ] = temp ; } } for ( int p = 0 ; p < s - 1 ; p ++ ) printf ( "%d " , e [ p ] ) ; printf ( "%d" , e [ s - 1 ] ) ; }
int main ( ) { int a [ 100 ] , b [ 100 ] , c [ 200 ] , i , m , n ; scanf ( "%d" , & m ) ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; int j , p ; for ( i = m - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { p = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = p ; } } } for ( i = n - 2 ; i >= 0 ; i -- ) { for ( j = 0 ; j <= i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { p = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = p ; } } } int q ; for ( q = 0 ; q < m ; q ++ ) c [ q ] = a [ q ] ; for ( q = m ; q < m + n ; q ++ ) c [ q ] = b [ q - m ] ; int s ; printf ( "%d" , c [ 0 ] ) ; for ( s = 1 ; s < m + n ; s ++ ) printf ( " %d" , c [ s ] ) ; }
int m , n , a [ 10000 ] , b [ 10000 ] ; void input ( ) { cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ; } void sequence ( ) { for ( int i = 0 ; i < m - 1 ; i ++ ) for ( int j = m - 1 ; j > i ; j -- ) if ( a [ j - 1 ] > a [ j ] ) { int temp = a [ j - 1 ] ; a [ j - 1 ] = a [ j ] ; a [ j ] = temp ; } for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = n - 1 ; j > i ; j -- ) if ( b [ j - 1 ] > b [ j ] ) { int temp = b [ j - 1 ] ; b [ j - 1 ] = b [ j ] ; b [ j ] = temp ; } } void combination ( ) { for ( int i = m ; i < m + n ; i ++ ) a [ i ] = b [ i - m ] ; } void output ( ) { cout << a [ 0 ] ; for ( int i = 1 ; i < m + n ; i ++ ) cout << ' ' << a [ i ] ; cout << endl ; } int main ( ) { input ( ) ; sequence ( ) ; combination ( ) ; output ( ) ; return 0 ; }
int a [ 2 ] [ 5000 ] , b [ 2 ] , k ; void ppt ( int k ) { for ( int i = 0 ; i < b [ k ] - 1 ; i ++ ) for ( int j = 0 ; j < b [ k ] - 1 - i ; j ++ ) if ( a [ k ] [ j ] > a [ k ] [ j + 1 ] ) { int tr ; tr = a [ k ] [ j ] ; a [ k ] [ j ] = a [ k ] [ j + 1 ] ; a [ k ] [ j + 1 ] = tr ; } } int main ( ) { cin >> b [ 0 ] >> b [ 1 ] ; for ( k = 0 ; k <= 1 ; k ++ ) { for ( int m = 0 ; m < b [ k ] ; m ++ ) cin >> a [ k ] [ m ] ; ppt ( k ) ; for ( int m = 0 ; m < b [ k ] ; m ++ ) { if ( k == 0 && m == 0 ) cout << a [ k ] [ m ] ; else cout << " " << a [ k ] [ m ] ; } } return 0 ; }
int n1 , n2 ; int * p1 ; int * p2 ; int * p3 ; main ( ) { scanf ( "%d %d" , & n1 , & n2 ) ; p1 = ( int * ) malloc ( n1 * sizeof ( int ) ) ; p2 = ( int * ) malloc ( n2 * sizeof ( int ) ) ; for ( int k = 0 ; k < n1 ; k ++ ) scanf ( "%d" , & p1 [ k ] ) ; for ( int k = 0 ; k < n2 ; k ++ ) scanf ( "%d" , & p2 [ k ] ) ; for ( int k = n1 - 1 ; k > 0 ; k -- ) { for ( int i = 0 ; i < k ; i ++ ) { if ( p1 [ i ] > p1 [ i + 1 ] ) { int t ; t = p1 [ i ] ; p1 [ i ] = p1 [ i + 1 ] ; p1 [ i + 1 ] = t ; } } } for ( int k = n2 - 1 ; k > 0 ; k -- ) { for ( int i = 0 ; i < k ; i ++ ) { if ( p2 [ i ] > p2 [ i + 1 ] ) { int t ; t = p2 [ i ] ; p2 [ i ] = p2 [ i + 1 ] ; p2 [ i + 1 ] = t ; } } } p3 = ( int * ) malloc ( ( n1 + n2 ) * sizeof ( int ) ) ; for ( int k = 0 ; k < n1 ; k ++ ) p3 [ k ] = p1 [ k ] ; for ( int i = n1 ; i < n1 + n2 ; i ++ ) p3 [ i ] = p2 [ i - n1 ] ; int c ; for ( c = 0 ; c < n1 + n2 ; c ++ ) { if ( c == 0 ) printf ( "%d" , p3 [ 0 ] ) ; else printf ( " %d" , p3 [ c ] ) ; } }
int m , n , a [ 500 ] , b [ 200 ] , temp ; void read ( void ) { cin >> m >> n ; for ( int i = 0 ; i < m ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; i < n ; i ++ ) cin >> b [ i ] ; } void rank ( void ) { for ( int i = 0 ; i < m - 1 ; i ++ ) for ( int j = 0 ; j < m - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = 0 ; j < n - i - 1 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { temp = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = temp ; } } } void merge ( void ) { for ( int i = 0 ; i < n ; i ++ ) a [ m + i ] = b [ i ] ; } void show ( void ) { for ( int i = 0 ; i < m + n - 1 ; i ++ ) cout << a [ i ] << ' ' ; cout << a [ m + n - 1 ] ; } int main ( void ) { read ( ) ; rank ( ) ; merge ( ) ; show ( ) ; return 0 ; }
void input ( int * M , int * N , int a [ ] , int b [ ] ) { scanf ( "%d %d" , M , N ) ; int i ; for ( i = 0 ; i < * M ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < * N ; i ++ ) scanf ( "%d" , & b [ i ] ) ; return ; } void sort ( int array [ ] , int n ) { int i , j , k , t ; for ( i = 0 ; i < n - 1 ; i ++ ) { k = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( array [ j ] < array [ k ] ) k = j ; t = array [ k ] ; array [ k ] = array [ i ] ; array [ i ] = t ; } } void merge ( int M , int N , int a [ ] , int b [ ] , int c [ ] ) { int i ; for ( i = 0 ; i < M ; i ++ ) c [ i ] = a [ i ] ; for ( i = 0 ; i < N ; i ++ ) c [ i + M ] = b [ i ] ; } void output ( int M , int N , int c [ ] ) { int i ; for ( i = 0 ; i < M + N - 1 ; i ++ ) printf ( "%d " , c [ i ] ) ; printf ( "%d" , c [ M + N - 1 ] ) ; } int main ( ) { int M , N , a [ 100000 ] , b [ 100000 ] ; input ( & M , & N , a , b ) ; sort ( a , M ) ; sort ( b , N ) ; int c [ 100000 ] ; merge ( M , N , a , b , c ) ; output ( M , N , c ) ; return 0 ; }
int a [ 100 ] , b [ 100 ] , n , m , i , j , t ; void shuru ( int p , int q ) { for ( i = 0 ; i < p ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < q ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void shuchu ( int p , int q ) { for ( i = 0 ; i < p ; i ++ ) printf ( "%d " , a [ i ] ) ; for ( i = 0 ; i < q - 1 ; i ++ ) printf ( "%d " , b [ i ] ) ; printf ( "%d" , b [ q - 1 ] ) ; } void paixu ( int p , int c [ ] ) { for ( i = 0 ; i < p ; i ++ ) for ( j = 0 ; j < i ; j ++ ) if ( c [ i ] < c [ j ] ) { t = c [ i ] ; c [ i ] = c [ j ] ; c [ j ] = t ; } } main ( ) { scanf ( "%d %d" , & n , & m ) ; shuru ( n , m ) ; paixu ( n , a ) ; paixu ( m , b ) ; shuchu ( n , m ) ; }
int a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; int a_n , b_n , i ; void read ( ) { scanf ( "%d %d" , & a_n , & b_n ) ; for ( i = 0 ; i < a_n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < b_n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void sort ( int a [ ] , int a_n , int b [ ] , int b_n ) { int i , j , key ; for ( i = 1 ; i < a_n ; i ++ ) { key = a [ i ] ; j = i - 1 ; while ( a [ j ] > key && j >= 0 ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = key ; } for ( i = 1 ; i < b_n ; i ++ ) { key = b [ i ] ; j = i - 1 ; while ( b [ j ] > key && j >= 0 ) { b [ j + 1 ] = b [ j ] ; j -- ; } b [ j + 1 ] = key ; } } void merge ( int a [ ] , int a_n , int b [ ] , int b_n ) { int i ; for ( i = 0 ; i < b_n ; i ++ ) a [ a_n + i ] = b [ i ] ; } void write ( ) { int i ; for ( i = 0 ; i < a_n + b_n - 1 ; i ++ ) { printf ( "%d " , a [ i ] ) ; } printf ( "%d" , a [ i ] ) ; } void main ( ) { read ( ) ; sort ( a , a_n , b , b_n ) ; merge ( a , a_n , b , b_n ) ; write ( ) ; }
int main ( ) { int m , n , i , t , j ; int a [ 2 ] [ 1000 ] ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ 0 ] [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ 1 ] [ i ] ) ; for ( j = 0 ; j < m - 1 ; j ++ ) for ( i = 0 ; i < m - 1 - j ; i ++ ) if ( a [ 0 ] [ i ] > a [ 0 ] [ i + 1 ] ) { t = a [ 0 ] [ i ] ; a [ 0 ] [ i ] = a [ 0 ] [ i + 1 ] ; a [ 0 ] [ i + 1 ] = t ; } for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 0 ; i < n - 1 - j ; i ++ ) if ( a [ 1 ] [ i ] > a [ 1 ] [ i + 1 ] ) { t = a [ 1 ] [ i ] ; a [ 1 ] [ i ] = a [ 1 ] [ i + 1 ] ; a [ 1 ] [ i + 1 ] = t ; } for ( i = 0 ; i < m ; i ++ ) printf ( "%d " , a [ 0 ] [ i ] ) ; for ( i = 0 ; i < n - 1 ; i ++ ) printf ( "%d " , a [ 1 ] [ i ] ) ; printf ( "%d\n" , a [ 1 ] [ n - 1 ] ) ; }
int a [ 10000 ] , b [ 10000 ] , n , m ; void duru ( ) { int i , j ; cin >> n >> m ; for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( j = 0 ; j < m ; j ++ ) cin >> b [ j ] ; } void sort ( ) { int t1 , t2 , i , j ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { t1 = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t1 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < m - 1 - i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { t2 = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = t2 ; } } } } void hebing ( ) { int i ; for ( i = n ; i < n + m ; i ++ ) { a [ i ] = b [ i - n ] ; } } void put ( ) { int i ; for ( i = 0 ; i < n + m - 1 ; i ++ ) cout << a [ i ] << ' ' ; cout << a [ n + m - 1 ] << endl ; } int main ( ) { duru ( ) ; sort ( ) ; hebing ( ) ; put ( ) ; return 0 ; }
int a [ 1000 ] , b [ 1000 ] ; int m , n ; void input ( ) { cin >> m >> n ; for ( int i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ; for ( int i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ; } void resort ( ) { sort ( a + 1 , a + m + 1 ) ; sort ( b + 1 , b + n + 1 ) ; } void output ( ) { cout << a [ 1 ] ; for ( int i = 2 ; i <= m ; i ++ ) cout << ' ' << a [ i ] ; for ( int i = 1 ; i <= n ; i ++ ) cout << ' ' << b [ i ] ; } int main ( ) { input ( ) ; resort ( ) ; output ( ) ; }
int a [ 10000 ] , b [ 10000 ] , c [ 20000 ] , n , m ; void input ( ) { cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( int j = 0 ; j < m ; j ++ ) cin >> b [ j ] ; } void sort ( ) { int temp ; for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = 0 ; j < n - 1 - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } for ( int i = 0 ; i < m - 1 ; i ++ ) for ( int j = 0 ; j < m - 1 - i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { temp = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = temp ; } } } void combine ( ) { for ( int i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; for ( int j = n ; j < n + m ; j ++ ) c [ j ] = b [ j - n ] ; } void out ( ) { cout << c [ 0 ] ; for ( int i = 1 ; i < n + m ; i ++ ) cout << " " << c [ i ] ; } int main ( ) { input ( ) ; sort ( ) ; combine ( ) ; out ( ) ; return 0 ; }
void main ( ) { void f ( int a [ 2 ] [ 200 ] , int m , int n ) ; int i , j , a [ 2 ] [ 200 ] , m , n ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 , j = 0 ; j < m ; j ++ ) scanf ( "%d" , & a [ 0 ] [ j ] ) ; for ( i = 1 , j = 0 ; j < n ; j ++ ) scanf ( "%d" , & a [ 1 ] [ j ] ) ; f ( a , m , n ) ; for ( i = 0 , j = 0 ; j < m ; j ++ ) printf ( "%d " , a [ 0 ] [ j ] ) ; for ( i = 1 , j = 0 ; j < n - 1 ; j ++ ) printf ( "%d " , a [ 1 ] [ j ] ) ; printf ( "%d" , a [ 1 ] [ n - 1 ] ) ; } void f ( int a [ 2 ] [ 200 ] , int m , int n ) { int i , j , t ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { if ( a [ 0 ] [ j ] < a [ 0 ] [ i ] ) { t = a [ 0 ] [ j ] ; a [ 0 ] [ j ] = a [ 0 ] [ i ] ; a [ 0 ] [ i ] = t ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ 1 ] [ j ] < a [ 1 ] [ i ] ) { t = a [ 1 ] [ j ] ; a [ 1 ] [ j ] = a [ 1 ] [ i ] ; a [ 1 ] [ i ] = t ; } } } }
int main ( ) { int m , n ; void f1 ( int x ) , f2 ( int x ) ; scanf ( "%d %d" , & m , & n ) ; f1 ( m ) ; f2 ( n ) ; return 0 ; } void f1 ( int x ) { int i , m , j = 0 , a [ 2 ] [ 100 ] ; for ( i = 0 ; i < x ; i ++ ) scanf ( "%d" , & a [ 0 ] [ i ] ) ; while ( j < x ) { m = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) if ( a [ 0 ] [ i ] > m ) m = a [ 0 ] [ i ] ; for ( i = 0 ; i < x ; i ++ ) if ( a [ 0 ] [ i ] == m ) { a [ 1 ] [ j ] = m ; j ++ ; a [ 0 ] [ i ] = - 1 ; } } for ( i = x - 1 ; i >= 0 ; i -- ) { if ( i != x - 1 ) printf ( " %d" , a [ 1 ] [ i ] ) ; else printf ( "%d" , a [ 1 ] [ i ] ) ; } } void f2 ( int x ) { int i , m , j = 0 , a [ 2 ] [ 100 ] ; for ( i = 0 ; i < x ; i ++ ) scanf ( "%d" , & a [ 0 ] [ i ] ) ; while ( j < x ) { m = a [ 0 ] [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) if ( a [ 0 ] [ i ] > m ) m = a [ 0 ] [ i ] ; for ( i = 0 ; i < x ; i ++ ) if ( a [ 0 ] [ i ] == m ) { a [ 1 ] [ j ] = m ; j ++ ; a [ 0 ] [ i ] = - 1 ; } } for ( i = x - 1 ; i >= 0 ; i -- ) printf ( " %d" , a [ 1 ] [ i ] ) ; }
int a [ 100 ] , b [ 100 ] , x , y , i , j , k ; void a1 ( ) ; void b1 ( int * p , int n ) ; void c ( int * p1 , int x , int * p2 , int y ) ; void d ( int x , int y ) ; void a1 ( ) { cin >> x >> y ; for ( i = 0 ; i < x ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < y ; i ++ ) cin >> b [ i ] ; } void b1 ( int * p , int n ) { for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( p [ j + 1 ] < p [ j ] ) { k = p [ j ] ; p [ j ] = p [ j + 1 ] ; p [ j + 1 ] = k ; } } } void c ( int * p1 , int x , int * p2 , int y ) { for ( i = x , j = 0 ; i < x + y ; j ++ , i ++ ) p1 [ i ] = p2 [ j ] ; } void d ( int x , int y ) { cout << a [ 0 ] ; for ( i = 1 ; i < x + y ; i ++ ) cout << " " << a [ i ] ; } int main ( ) { a1 ( ) ; b1 ( a , x ) ; b1 ( b , y ) ; c ( a , x , b , y ) ; d ( x , y ) ; return 0 ; }
void px ( int a [ 100 ] , int k ) { int i , j , b ; for ( i = 0 ; i < k ; i ++ ) { for ( j = 0 ; j < k - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { b = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = b ; } } } for ( i = 0 ; i < k - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ k - 1 ] ) ; } void fz ( ) { int m , n , i , a [ 100 ] , b [ 100 ] ; scanf ( "%d %d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; px ( a , n ) ; printf ( " " ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & b [ i ] ) ; px ( b , m ) ; } int main ( ) { fz ( ) ; return 0 ; }
int main ( ) { int au ( int x , int y ) ; int x , y ; scanf ( "%d%d" , & x , & y ) ; au ( x , y ) ; } int au ( int x , int y ) { int a [ 100 ] , b [ 100 ] , i , j , m , n ; for ( i = 0 ; i < x ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( j = 0 ; j < y ; j ++ ) { scanf ( "%d" , & b [ j ] ) ; } for ( i = 0 ; i < x ; i ++ ) { for ( m = 0 ; m < x - i - 1 ; m ++ ) { if ( a [ m ] > a [ m + 1 ] ) { int t = a [ m ] ; a [ m ] = a [ m + 1 ] ; a [ m + 1 ] = t ; } } } for ( j = 0 ; j < y ; j ++ ) { for ( n = 0 ; n < y - j - 1 ; n ++ ) { if ( b [ n ] > b [ n + 1 ] ) { int t = b [ n ] ; b [ n ] = b [ n + 1 ] ; b [ n + 1 ] = t ; } } } for ( m = x ; m < x + y ; m ++ ) { a [ m ] = b [ m - x ] ; } for ( m = 0 ; m < x + y - 1 ; m ++ ) { printf ( "%d " , a [ m ] ) ; } printf ( "%d" , a [ x + y - 1 ] ) ; }
int n , m ; int num1 [ 100 ] , num2 [ 100 ] , num3 [ 1000 ] ; void read ( ) { cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> num1 [ i ] ; } for ( int i = 1 ; i <= m ; i ++ ) { cin >> num2 [ i ] ; } } void sort ( int num1 [ ] , int num2 [ ] ) { for ( int i = 1 ; i <= n - 1 ; i ++ ) { for ( int j = 1 ; j <= n - i ; j ++ ) { if ( num1 [ j ] > num1 [ j + 1 ] ) swap ( num1 [ j ] , num1 [ j + 1 ] ) ; } } for ( int i = 1 ; i <= m - 1 ; i ++ ) { for ( int j = 1 ; j <= m - i ; j ++ ) { if ( num2 [ j ] > num2 [ j + 1 ] ) swap ( num2 [ j ] , num2 [ j + 1 ] ) ; } } } void hebing ( int num1 [ ] , int num2 [ ] , int num3 [ ] ) { for ( int i = 1 ; i <= n + m ; i ++ ) { if ( i <= n ) num3 [ i ] = num1 [ i ] ; else num3 [ i ] = num2 [ i - n ] ; } } void display ( int num3 [ ] ) { for ( int i = 1 ; i <= n + m ; i ++ ) { if ( i == 1 ) cout << num3 [ i ] ; else cout << " " << num3 [ i ] ; } } int main ( ) { read ( ) ; sort ( num1 , num2 ) ; hebing ( num1 , num2 , num3 ) ; display ( num3 ) ; return 0 ; }
void inputarray ( int a [ ] , int ) ; void place ( int a [ ] , int ) ; void combine ( int a [ ] , int b [ ] , int , int ) ; void printarray ( int a [ ] , int ) ; int main ( void ) { int array1 [ 100 ] , array2 [ 100 ] , m , n ; scanf ( "%d%d" , & m , & n ) ; inputarray ( array1 , m ) ; inputarray ( array2 , n ) ; place ( array1 , m ) ; place ( array2 , n ) ; combine ( array1 , array2 , m , n ) ; printarray ( array1 , m + n ) ; return 0 ; } void inputarray ( int array [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & array [ i ] ) ; } } void printarray ( int array [ ] , int n ) { printf ( "%d" , array [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { printf ( " %d" , array [ i ] ) ; } printf ( "\n" ) ; } void place ( int array [ ] , int n ) { int mininum , temp ; for ( int i = 0 ; i < n - 1 ; i ++ ) { mininum = i ; for ( int j = i + 1 ; j < n ; j ++ ) { mininum = array [ j ] < array [ mininum ] ? j : mininum ; } temp = array [ i ] ; array [ i ] = array [ mininum ] ; array [ mininum ] = temp ; } } void combine ( int array1 [ ] , int array2 [ ] , int m , int n ) { for ( int i = m ; i < m + n ; i ++ ) { array1 [ i ] = array2 [ i - m ] ; } }
void read ( int n1 , int n2 , int s1 [ ] , int s2 [ ] ) ; void bubble_sort ( int s [ ] , int n ) ; void write ( int n1 , int n2 , int s1 [ ] , int s2 [ ] ) ; int main ( ) { int n1 , n2 , s1 [ 101 ] , s2 [ 101 ] ; scanf ( "%d%d" , & n1 , & n2 ) ; read ( n1 , n2 , s1 , s2 ) ; bubble_sort ( s1 , n1 ) ; bubble_sort ( s2 , n2 ) ; write ( n1 , n2 , s1 , s2 ) ; } void read ( int n1 , int n2 , int s1 [ ] , int s2 [ ] ) { int i ; for ( i = 0 ; i < n1 ; i ++ ) scanf ( "%d" , & s1 [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) scanf ( "%d" , & s2 [ i ] ) ; } void bubble_sort ( int s [ ] , int n ) { int i , j , t ; for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n - i - 1 ; j ++ ) if ( s [ j ] > s [ j + 1 ] ) { t = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = t ; } } void write ( int n1 , int n2 , int s1 [ ] , int s2 [ ] ) { int i ; printf ( "%d" , s1 [ 0 ] ) ; for ( i = 1 ; i < n1 ; i ++ ) printf ( " %d" , s1 [ i ] ) ; for ( i = 0 ; i < n2 ; i ++ ) printf ( " %d" , s2 [ i ] ) ; }
void f ( int a [ ] , int n ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) if ( a [ j ] < a [ i ] ) { k = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = k ; } } void cmp ( int a [ ] , int n , int b [ ] , int m ) { int i = n , j ; for ( j = 0 ; j < m ; j ++ ) { a [ i ] = b [ j ] ; i ++ ; } } int main ( ) { int n , m , i , a [ 1000 ] , b [ 500 ] ; scanf ( "%d %d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } f ( a , n ) ; f ( b , m ) ; cmp ( a , n , b , m ) ; for ( i = 0 ; i < n + m - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ n + m - 1 ] ) ; }
int m , n , a [ 100 ] , b [ 100 ] , c [ 200 ] ; int order ( int str [ ] , int po , int start ) { for ( int i = 1 ; i < po ; i ++ ) { for ( int j = 1 ; j <= po - i ; j ++ ) { if ( str [ j ] > str [ j + 1 ] ) swap ( str [ j ] , str [ j + 1 ] ) ; } } for ( int i = start ; i < po + start ; i ++ ) { c [ i ] = str [ i - start + 1 ] ; } return 0 ; } int output ( ) { order ( a , m , 1 ) ; order ( b , n , m + 1 ) ; for ( int i = 1 ; i < m + n ; i ++ ) cout << c [ i ] << " " ; cout << c [ m + n ] ; return 0 ; } int main ( ) { cin >> m >> n ; for ( int i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ; for ( int j = 1 ; j <= n ; j ++ ) cin >> b [ j ] ; output ( ) ; return 0 ; }
int m , n , a [ 1000 ] = { 0 } , b [ 1000 ] = { 0 } ; int main ( ) { int i , j , k ; void read ( int array1 [ ] , int array2 [ ] ) ; void sort ( int array [ ] , int x ) ; void print ( int array5 [ ] , int array6 [ ] ) ; scanf ( "%d%d" , & m , & n ) ; read ( a , b ) ; sort ( a , m ) ; sort ( b , n ) ; print ( a , b ) ; } void read ( int array1 [ ] , int array2 [ ] ) { int i ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void sort ( int array [ ] , int x ) { int i , j , k , t ; for ( i = 0 ; i < x - 1 ; i ++ ) for ( j = i + 1 ; j < x ; j ++ ) if ( array [ j ] < array [ i ] ) { t = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = t ; } } void print ( int array5 [ ] , int array6 [ ] ) { int j ; for ( j = 0 ; j < m ; j ++ ) printf ( "%d " , array5 [ j ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) printf ( "%d " , array6 [ j ] ) ; printf ( "%d" , array6 [ n - 1 ] ) ; }
int m , n ; int a [ 100 ] ; void insert ( void ) { int i = 0 ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } printf ( "\n" ) ; for ( i = m ; i < m + n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } } void px ( int * p ) { int i , j , b = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = m - 1 ; j > i ; j -- ) { if ( * ( p + j ) < * ( p + j - 1 ) ) { b = * ( p + j ) ; * ( p + j ) = * ( p + j - 1 ) ; * ( p + j - 1 ) = b ; } } } for ( i = m ; i < m + n ; i ++ ) { for ( j = m + n - 1 ; j > i ; j -- ) { if ( * ( p + j ) < * ( p + j - 1 ) ) { b = * ( p + j ) ; * ( p + j ) = * ( p + j - 1 ) ; * ( p + j - 1 ) = b ; } } } printf ( "%d" , * ( p + 0 ) ) ; for ( i = 1 ; i < m + n ; i ++ ) { printf ( " %d" , * ( p + i ) ) ; } } void main ( ) { insert ( ) ; px ( a ) ; }
void shuru ( int a [ ] , int b [ ] , int m , int n ) { int * p = a , * q = b ; int i , j ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , p ) ; p ++ ; } for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , q ) ; q ++ ; } } void paixu ( int a [ ] , int m ) { int * p = a , b , c , d ; for ( b = 0 ; b < m - 1 ; b ++ ) { for ( c = 0 ; c < m - 1 - b ; c ++ ) { if ( * ( p + c ) > * ( p + c + 1 ) ) { d = * ( p + c ) ; * ( p + c ) = * ( p + c + 1 ) ; * ( p + c + 1 ) = d ; } } } } void hebing ( int a [ ] , int b [ ] , int c [ ] , int m , int n ) { int * r = a , * s = b , * t = c , p , q ; for ( p = 0 ; p < m ; p ++ ) { * ( t + p ) = * ( r + p ) ; } for ( q = 0 ; q < n ; q ++ ) { * ( t + m + q ) = * ( s + q ) ; } } void shuchu ( int a [ ] , int b ) { int c ; printf ( "%d" , a [ 0 ] ) ; for ( c = 1 ; c < b ; c ++ ) { printf ( " %d" , a [ c ] ) ; } } int main ( ) { int a [ 1000 ] = { 0 } , b [ 1000 ] = { 0 } , c [ 2000 ] = { 0 } , m , n ; scanf ( "%d%d" , & m , & n ) ; shuru ( a , b , m , n ) ; paixu ( a , m ) ; paixu ( b , n ) ; hebing ( a , b , c , m , n ) ; shuchu ( c , m + n ) ; }
int a [ 102 ] , b [ 102 ] , c [ 202 ] , m , n ; void shuru ( ) { int i ; cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) cin >> b [ i ] ; } void paixu ( ) { int i , j , t ; for ( i = 0 ; i < m ; i ++ ) { for ( j = m - 1 ; j > i ; j -- ) { if ( a [ j ] < a [ j - 1 ] ) { t = a [ j ] ; a [ j ] = a [ j - 1 ] ; a [ j - 1 ] = t ; } } } for ( i = 0 ; i < n ; i ++ ) for ( j = n - 1 ; j > i ; j -- ) { if ( b [ j ] < b [ j - 1 ] ) { int t = b [ j ] ; b [ j ] = b [ j - 1 ] ; b [ j - 1 ] = t ; } } } void hebing ( ) { int i = 0 , j = 0 ; for ( i = 0 ; i < m ; i ++ ) c [ i ] = a [ i ] ; for ( i = 0 ; i < n ; i ++ ) c [ m + i ] = b [ i ] ; } void xianshi ( ) { int i = 0 ; cout << a [ 0 ] ; for ( i = 1 ; i < n + m ; i ++ ) cout << ' ' << c [ i ] ; } int main ( ) { shuru ( ) ; paixu ( ) ; hebing ( ) ; xianshi ( ) ; return 0 ; }
void f1 ( int n , int a [ ] ) { int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } } void f2 ( int n , int a [ ] ) { int i , j , k ; for ( i = 0 ; i < n ; i ++ ) for ( j = i + 1 ; j < n ; j ++ ) { if ( a [ i ] > a [ j ] ) { k = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = k ; } } } void f3 ( int n , int m , int a [ ] , int b [ ] , int c [ ] ) { int i ; for ( i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; for ( i = n ; i < n + m ; i ++ ) c [ i ] = b [ i - n ] ; } void f4 ( int n , int m , int c [ ] ) { printf ( "%d" , c [ 0 ] ) ; int i ; for ( i = 1 ; i < n + m ; i ++ ) printf ( " %d" , c [ i ] ) ; } int main ( ) { int i , n , m , a [ 100 ] , b [ 100 ] , c [ 200 ] ; scanf ( "%d%d" , & n , & m ) ; f1 ( n , a ) ; f1 ( m , b ) ; f2 ( n , a ) ; f2 ( m , b ) ; f3 ( n , m , a , b , c ) ; f4 ( n , m , c ) ; return 0 ; }
int a [ 200 ] ; int b [ 100 ] ; int * p1 = a , * p2 = b ; int m , n ; int * p2m = & m , * p2n = & n ; void funcofa ( int * p1 , int * p2 , int * p2m , int * p2n ) { scanf ( "%d%d" , p2m , p2n ) ; int i ; for ( i = 1 ; i <= * p2m ; i ++ ) { scanf ( "%d" , p1 + i - 1 ) ; } for ( i = 1 ; i <= * p2n ; i ++ ) { scanf ( "%d" , p2 + i - 1 ) ; } } void funcofb ( int * p1 , int * p2 , int * p2m , int * p2n ) { int i , j ; int temp ; for ( i = 1 ; i <= * p2m ; i ++ ) { for ( j = 1 ; j < * p2m ; j ++ ) { if ( * ( p1 + j - 1 ) > * ( p1 + j ) ) { temp = * ( p1 + j ) ; * ( p1 + j ) = * ( p1 + j - 1 ) ; * ( p1 + j - 1 ) = temp ; } else { } } } for ( i = 1 ; i <= * p2n ; i ++ ) { for ( j = 1 ; j < * p2n ; j ++ ) { if ( * ( p2 + j - 1 ) > * ( p2 + j ) ) { temp = * ( p2 + j ) ; * ( p2 + j ) = * ( p2 + j - 1 ) ; * ( p2 + j - 1 ) = temp ; } else { } } } } void funcofc ( int * p1 , int * p2 , int * p2m , int * p2n ) { int i ; for ( i = 1 ; i <= * p2n ; i ++ ) { * ( p1 + ( * p2m ) + i - 1 ) = * ( p2 + i - 1 ) ; } } void funcofd ( int * p1 , int * p2 , int * p2m , int * p2n ) { int i ; printf ( "%d" , * p1 ) ; for ( i = 2 ; i <= * p2m + * p2n ; i ++ ) { printf ( " %d" , * ( p1 - 1 + i ) ) ; } printf ( "\n" ) ; } void main ( ) { funcofa ( p1 , p2 , p2m , p2n ) ; funcofb ( p1 , p2 , p2m , p2n ) ; funcofc ( p1 , p2 , p2m , p2n ) ; funcofd ( p1 , p2 , p2m , p2n ) ; }
void pai ( int n , int a [ ] ) { for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int r = 1 ; r < n - i ; r ++ ) { if ( a [ i + r ] < a [ i ] ) { int k = a [ i ] ; a [ i ] = a [ i + r ] ; a [ i + r ] = k ; } } } } int link ( int n , int m ) { int a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; pai ( n , a ) ; pai ( m , b ) ; for ( int i = 0 ; i < n ; i ++ ) printf ( "%d " , a [ i ] ) ; for ( int i = 0 ; i < m - 1 ; i ++ ) printf ( "%d " , b [ i ] ) ; printf ( "%d" , b [ m - 1 ] ) ; } int main ( ) { int n , m ; scanf ( "%d %d" , & n , & m ) ; link ( n , m ) ; printf ( "\n" ) ; }
int m , n ; int a [ 1000 ] ; int b [ 1000 ] ; void input ( ) { int i ; cin >> m >> n ; for ( i = 0 ; i < m ; i ++ ) cin >> a [ i ] ; for ( i = 0 ; i < n ; i ++ ) cin >> b [ i ] ; return ; } void paixu ( ) { int i , j ; int p ; for ( i = 0 ; i < m - 1 ; i ++ ) for ( j = 0 ; j < m - 1 - i ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { p = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = p ; } for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n - 1 - i ; j ++ ) if ( b [ j ] > b [ j + 1 ] ) { p = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = p ; } return ; } void output ( ) { int i ; cout << a [ 0 ] ; for ( i = 1 ; i < m ; i ++ ) cout << " " << a [ i ] ; for ( i = 0 ; i < n ; i ++ ) cout << " " << b [ i ] ; return ; } int main ( ) { input ( ) ; paixu ( ) ; output ( ) ; return 0 ; }
int a , b , c [ 100 ] , d [ 100 ] ; void size ( ) { scanf ( "%d %d" , & a , & b ) ; } void num ( int s , int j [ ] ) { int i ; for ( i = 0 ; i < s ; i ++ ) { scanf ( "%d" , & j [ i ] ) ; } } void arrange ( int s , int j [ ] ) { int i , k , temp ; for ( k = 0 ; k < s - 1 ; k ++ ) { for ( i = 0 ; i < s - k - 1 ; i ++ ) { if ( j [ i + 1 ] <= j [ i ] ) { temp = j [ i ] ; j [ i ] = j [ i + 1 ] ; j [ i + 1 ] = temp ; } } } } void plus ( int x , int m [ ] , int y , int n [ ] ) { int i ; arrange ( x , m ) ; arrange ( y , n ) ; printf ( "%d" , m [ 0 ] ) ; for ( i = 1 ; i < x ; i ++ ) { printf ( " %d" , m [ i ] ) ; } for ( i = 0 ; i < y ; i ++ ) { printf ( " %d" , n [ i ] ) ; } } void main ( ) { size ( ) ; num ( a , c ) ; num ( b , d ) ; plus ( a , c , b , d ) ; }
int x [ 200 ] , y [ 200 ] , m , n ; void sca ( void ) { int i ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & x [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & y [ i ] ) ; } } void bubble ( int a [ ] , int n ) { int i , j , b ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { b = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = b ; } } } } void bing ( int a [ ] , int l1 , int b [ ] , int l2 ) { int i , j , z [ 500 ] ; for ( i = 0 ; i < l1 ; i ++ ) z [ i ] = a [ i ] ; for ( j = 0 ; i < ( l1 + l2 ) ; j ++ , i ++ ) z [ i ] = b [ j ] ; printf ( "%d" , z [ 0 ] ) ; for ( i = 1 ; i < ( l1 + l2 ) ; i ++ ) printf ( " %d" , z [ i ] ) ; } int main ( ) { sca ( ) ; bubble ( x , m ) ; bubble ( y , n ) ; bing ( x , m , y , n ) ; return 0 ; }
int m , n , a [ 800 ] , b [ 800 ] ; void main ( ) { void f1 ( ) ; void f2 ( ) ; void f3 ( ) ; void f4 ( ) ; f1 ( ) ; f2 ( ) ; f3 ( ) ; f4 ( ) ; } void f1 ( ) { scanf ( "%d%d" , & m , & n ) ; } void f2 ( ) { int i ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void f3 ( ) { int i , j , temp ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) if ( a [ j ] < a [ i ] ) { temp = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = temp ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) if ( b [ j ] < b [ i ] ) { temp = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = temp ; } } } void f4 ( ) { int i , j ; for ( i = 0 ; i < m ; i ++ ) printf ( "%d " , a [ i ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) printf ( "%d " , b [ j ] ) ; printf ( "%d" , b [ n - 1 ] ) ; }
int Compare ( const void * elem1 , const void * elem2 ) { return * ( ( int * ) elem1 ) - * ( ( int * ) elem2 ) ; } int main ( ) { int m , n ; int a [ 100 ] , b [ 100 ] ; int i ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } qsort ( a , m , sizeof ( int ) , Compare ) ; qsort ( b , n , sizeof ( int ) , Compare ) ; for ( i = 0 ; i < m ; i ++ ) { printf ( "%d " , a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "%d " , b [ i ] ) ; } printf ( "%d" , b [ n - 1 ] ) ; }
int Compare ( const void * elem1 , const void * elem2 ) { return * ( ( int * ) elem1 ) - * ( ( int * ) elem2 ) ; } int main ( ) { int m , n ; int i ; scanf ( "%d %d" , & m , & n ) ; int a [ m ] , b [ n ] ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } qsort ( a , m , sizeof ( int ) , Compare ) ; qsort ( b , n , sizeof ( int ) , Compare ) ; for ( i = 0 ; i < m ; i ++ ) { printf ( "%d " , a [ i ] ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "%d " , b [ i ] ) ; } printf ( "%d" , b [ n - 1 ] ) ; }
void read ( ) ; void sort ( ) ; void connect ( ) ; void output ( ) ; int one , two , first [ 100 ] , second [ 100 ] ; int main ( ) { read ( ) ; sort ( ) ; connect ( ) ; output ( ) ; return 0 ; } void read ( ) { cin >> one >> two ; for ( int i = 0 ; i < one ; i ++ ) cin >> first [ i ] ; for ( int i = 0 ; i < two ; i ++ ) cin >> second [ i ] ; } void sort ( ) { for ( int i = 0 ; i < one ; i ++ ) for ( int j = 0 ; j < one - i - 1 ; j ++ ) if ( first [ j ] > first [ j + 1 ] ) swap ( first [ j ] , first [ j + 1 ] ) ; for ( int i = 0 ; i < two ; i ++ ) for ( int j = 0 ; j < two - i - 1 ; j ++ ) if ( second [ j ] > second [ j + 1 ] ) swap ( second [ j ] , second [ j + 1 ] ) ; } void connect ( ) { for ( int i = 0 ; i < two ; i ++ ) first [ one + i ] = second [ i ] ; } void output ( ) { cout << first [ 0 ] ; for ( int i = 1 ; i < one + two ; i ++ ) cout << ' ' << first [ i ] ; }
void sheng ( int * a , int n ) { int i , j , b ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] < a [ i ] ) { b = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = b ; } } } } int hebing ( int * a , int n , int * b , int m , int * c ) { int i ; for ( i = 0 ; i < n ; i ++ ) c [ i ] = a [ i ] ; for ( i = n ; i < m + n ; i ++ ) c [ i ] = b [ i - n ] ; return * c ; } int main ( ) { int n , m , i ; scanf ( "%d %d" , & n , & m ) ; int * a = ( int * ) malloc ( sizeof ( int ) * n ) ; int * b = ( int * ) malloc ( sizeof ( int ) * m ) ; int * c = ( int * ) malloc ( sizeof ( int ) * ( m + n ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & b [ i ] ) ; sheng ( a , n ) ; sheng ( b , m ) ; hebing ( a , n , b , m , c ) ; printf ( "%d" , c [ 0 ] ) ; for ( i = 1 ; i < m + n ; i ++ ) printf ( " %d" , c [ i ] ) ; }
int main ( ) { int * input ( int n ) , * a , * b , * c , n1 , n2 ; void paixu ( int * a , int n ) , display ( int * c , int n ) ; int * hebing ( int * a , int * b , int n1 , int n2 ) ; scanf ( "%d %d" , & n1 , & n2 ) ; a = input ( n1 ) ; b = input ( n2 ) ; printf ( "\n" ) ; paixu ( a , n1 ) ; paixu ( b , n2 ) ; c = hebing ( a , b , n1 , n2 ) ; display ( c , n1 + n2 ) ; return 0 ; } int * input ( int n ) { int * p , i ; p = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & p [ i ] ) ; } return ( p ) ; } void paixu ( int * a , int n ) { int i , j , t ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( a [ j ] < a [ i ] ) { t = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = t ; } } } } int * hebing ( int * a , int * b , int n1 , int n2 ) { int * p , i , j ; p = ( int * ) malloc ( ( n1 + n2 ) * sizeof ( int ) ) ; for ( i = 0 ; i < n1 ; i ++ ) { p [ i ] = a [ i ] ; } for ( j = 0 ; j < n2 ; j ++ ) { p [ n1 + j ] = b [ j ] ; } return ( p ) ; } void display ( int * c , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { if ( i ) printf ( " " ) ; printf ( "%d" , c [ i ] ) ; } }
void bubble ( int a [ ] , int l ) { int i , j , temp ; for ( i = 1 ; i < l ; i ++ ) { for ( j = 0 ; j < l - i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } } void main ( ) { int i , l1 , l2 , a [ 100 ] , b [ 100 ] ; scanf ( "%d%d" , & l1 , & l2 ) ; for ( i = 0 ; i < l1 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } bubble ( & a , l1 ) ; for ( i = 0 ; i < l2 ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } bubble ( & b , l2 ) ; for ( i = 0 ; i < l1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , b [ 0 ] ) ; for ( i = 1 ; i < l2 ; i ++ ) printf ( " %d" , b [ i ] ) ; }
void f ( int str [ ] , int m ) { int i , j , k ; for ( j = 0 ; j < m ; j ++ ) for ( i = 0 ; i < m - 1 ; i ++ ) if ( str [ i ] > str [ i + 1 ] ) { k = str [ i ] ; str [ i ] = str [ i + 1 ] ; str [ i + 1 ] = k ; } } void g ( int a [ ] , int b [ ] , int ma , int mb ) { int i ; for ( i = ma ; i < ( ma + mb ) ; i ++ ) a [ i ] = b [ i - ma ] ; } void main ( ) { int ma , mb , i ; int a [ 8888 ] , b [ 8888 ] ; scanf ( "%d %d" , & ma , & mb ) ; for ( i = 0 ; i < ma ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < mb ; i ++ ) scanf ( "%d" , & b [ i ] ) ; f ( a , ma ) ; f ( b , mb ) ; g ( a , b , ma , mb ) ; for ( i = 0 ; i <= ( ma + mb - 1 ) ; i ++ ) { if ( i != 0 ) printf ( " " ) ; printf ( "%d" , a [ i ] ) ; } }
int m , n , i , a [ 100 ] , b [ 100 ] , c [ 200 ] ; void in ( ) { cin >> m >> n ; for ( i = 0 ; i < m ; ++ i ) cin >> a [ i ] ; for ( i = 0 ; i < n ; ++ i ) cin >> b [ i ] ; } void sort ( ) { sort ( & a [ 0 ] , & a [ 0 ] + m ) ; sort ( & b [ 0 ] , & b [ 0 ] + n ) ; } void add ( ) { for ( i = 0 ; i < m ; ++ i ) c [ i ] = a [ i ] ; for ( i = m ; i < m + n ; ++ i ) c [ i ] = b [ i - m ] ; } void out ( ) { cout << c [ 0 ] ; for ( i = 1 ; i < m + n ; ++ i ) cout << " " << c [ i ] ; } int main ( ) { in ( ) ; sort ( ) ; add ( ) ; out ( ) ; return 0 ; }
int a [ 100 ] , b [ 100 ] ; int m , n ; void insert ( void ) { int i ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void paixu ( int * p1 , int * p2 ) { int i , j ; int temp ; for ( j = 1 ; j < m ; j ++ ) for ( i = 0 ; i < m - 1 ; i ++ ) if ( ( * ( p1 + i ) ) > ( * ( p1 + i + 1 ) ) ) { temp = * ( p1 + i ) ; * ( p1 + i ) = * ( p1 + i + 1 ) ; * ( p1 + i + 1 ) = temp ; } for ( j = 1 ; j < n ; j ++ ) for ( i = 0 ; i < n - 1 ; i ++ ) if ( * ( p2 + i ) > * ( p2 + i + 1 ) ) { temp = * ( p2 + i ) ; * ( p2 + i ) = * ( p2 + 1 + i ) ; * ( p2 + i + 1 ) = temp ; } } void hebing ( ) { int i ; for ( i = 0 ; i < n ; i ++ ) a [ m + i ] = b [ i ] ; } void output ( ) { int i ; printf ( "%d" , a [ 0 ] ) ; for ( i = 1 ; i < m + n ; i ++ ) printf ( " %d" , a [ i ] ) ; } void main ( ) { insert ( ) ; paixu ( a , b ) ; hebing ( ) ; output ( ) ; }
void paixu ( ) { int a [ 100 ] , b [ 100 ] , sizea , sizeb , i , j , t ; cin >> sizea >> sizeb ; for ( i = 1 ; i <= sizea ; i ++ ) cin >> a [ i ] ; for ( i = 1 ; i <= sizeb ; i ++ ) cin >> b [ i ] ; for ( i = sizea ; i >= 1 ; i -- ) for ( j = 1 ; j < i ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } for ( i = sizeb ; i >= 1 ; i -- ) for ( j = 1 ; j < i ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { t = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = t ; } } for ( i = 1 ; i <= sizea ; i ++ ) cout << a [ i ] << " " ; for ( i = 1 ; i <= sizeb ; i ++ ) { cout << b [ i ] ; if ( i < sizeb ) cout << " " ; else cout << endl ; } } int main ( ) { paixu ( ) ; return 0 ; }
void main ( ) { void order ( int a [ ] , int b [ ] , int m , int n ) ; int a [ 100 ] , b [ 100 ] ; int m , n , i ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; order ( a , b , m , n ) ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ m + n - 1 ] ) ; } void order ( int a [ ] , int b [ ] , int m , int n ) { int i , j ; int t ; for ( i = 0 ; i < m - 1 ; i ++ ) for ( j = 0 ; j < m - i - 1 ; j ++ ) if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } for ( i = 0 ; i < n - 1 ; i ++ ) for ( j = 0 ; j < n - i - 1 ; j ++ ) if ( b [ j ] > b [ j + 1 ] ) { t = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = t ; } for ( i = m ; i < m + n ; i ++ ) a [ i ] = b [ i - m ] ; return ; }
void f ( int a [ ] , int n ) { int i , j , t ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { t = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = t ; } } } } void main ( ) { int m , n , a [ 100 ] , b [ 100 ] , i ; scanf ( "%d%d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; f ( a , m ) ; f ( b , n ) ; for ( i = m ; i < m + n ; i ++ ) a [ i ] = b [ i - m ] ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ m + n - 1 ] ) ; }
void mix ( int m , int n ) ; int main ( ) { int m , n ; cin >> m >> n ; mix ( m , n ) ; return 0 ; } void mix ( int m , int n ) { int i , j , a [ 10000 ] , b [ 10000 ] , t ; for ( i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ; for ( i = 1 ; i <= n ; i ++ ) cin >> b [ i ] ; for ( j = 1 ; j < m ; j ++ ) { for ( i = 1 ; i <= m - j ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { t = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = t ; } } } for ( j = 1 ; j < n ; j ++ ) { for ( i = 1 ; i <= n - j ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { t = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = t ; } } } for ( i = 1 ; i <= m ; i ++ ) cout << a [ i ] << " " ; cout << b [ 1 ] ; for ( i = 2 ; i <= n ; i ++ ) cout << " " << b [ i ] ; }
int m , n , a [ 100 ] , b [ 100 ] , c [ 100 ] ; void input ( ) { cin >> m >> n ; int i , j , k , l ; for ( i = 1 ; i <= m ; i ++ ) cin >> a [ i ] ; for ( j = 1 ; j <= n ; j ++ ) cin >> b [ j ] ; } void paixu ( int a [ 100 ] , int b [ 100 ] ) { int i , j , k , l ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < m - i + 1 ; j ++ ) { if ( a [ j ] > a [ j + 1 ] ) { k = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = k ; } } } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < n - i + 1 ; j ++ ) { if ( b [ j ] > b [ j + 1 ] ) { k = b [ j ] ; b [ j ] = b [ j + 1 ] ; b [ j + 1 ] = k ; } } } } void he ( int a [ 100 ] , int b [ 100 ] ) { int i , j ; for ( i = 1 ; i <= m ; i ++ ) c [ i ] = a [ i ] ; for ( j = i ; j <= i + n ; j ++ ) c [ j ] = b [ j - i + 1 ] ; } void output ( int c [ 100 ] ) { cout << c [ 1 ] ; int i ; for ( i = 2 ; i <= m + n ; i ++ ) cout << ' ' << c [ i ] ; } int main ( ) { input ( ) ; paixu ( a , b ) ; he ( a , b ) ; output ( c ) ; return 0 ; }
int a [ 10000 ] ; int b [ 10000 ] ; int n , m ; void du ( ) { cin >> n >> m ; for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ; for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ; } void ran ( ) { for ( int i = 0 ; i < n ; i ++ ) { int temp = a [ i ] ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( a [ j ] <= temp ) { a [ j + 1 ] = temp ; break ; } else { a [ j + 1 ] = a [ j ] ; a [ j ] = temp ; } } } for ( int i = 0 ; i < m ; i ++ ) { int temp = b [ i ] ; for ( int j = i - 1 ; j >= 0 ; j -- ) { if ( b [ j ] <= temp ) { b [ j + 1 ] = temp ; break ; } else { b [ j + 1 ] = b [ j ] ; b [ j ] = temp ; } } } } void he ( ) { for ( int i = n ; i < n + m ; i ++ ) a [ i ] = b [ i - n ] ; } void shu ( ) { for ( int i = 0 ; i < n + m - 1 ; i ++ ) cout << a [ i ] << ' ' ; cout << a [ n + m - 1 ] ; } int main ( ) { du ( ) ; ran ( ) ; he ( ) ; shu ( ) ; return 0 ; }
int m , n ; int cmp ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } void input ( int * a , int * b ) { int i ; scanf ( "%d %d" , & n , & m ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } } void sort ( int * a , int * b ) { qsort ( a , n , sizeof ( int ) , cmp ) ; qsort ( b , m , sizeof ( int ) , cmp ) ; } void merge ( int * a , int * b , int * c ) { int i ; for ( i = 0 ; i < n ; i ++ ) { c [ i ] = a [ i ] ; } for ( i = 0 ; i < m ; i ++ ) { c [ i + n ] = b [ i ] ; } } void output ( int * c ) { int i ; for ( i = 0 ; i < m + n ; i ++ ) { printf ( "%d%s" , c [ i ] , i < m + n - 1 ? " " : "\n" ) ; } } int main ( ) { int a [ 10000 ] = { 0 } ; int b [ 10000 ] = { 0 } ; int c [ 10000 ] = { 0 } ; input ( a , b ) ; sort ( a , b ) ; merge ( a , b , c ) ; output ( c ) ; return 0 ; }
int a [ 100 ] , b [ 100 ] ; int num1 , num2 ; void getin ( ) { int i , j ; cin >> num1 >> num2 ; for ( i = 1 ; i <= num1 ; i ++ ) cin >> a [ i ] ; for ( j = 1 ; j <= num2 ; j ++ ) cin >> b [ j ] ; } void order ( int aa [ ] , int num ) { int t , i , j ; for ( i = 1 ; i < num ; i ++ ) for ( j = 1 ; j < num ; j ++ ) if ( aa [ j ] > aa [ j + 1 ] ) { t = aa [ j ] ; aa [ j ] = aa [ j + 1 ] ; aa [ j + 1 ] = t ; } } void print ( int a [ ] , int b [ ] , int num1 , int num2 ) { cout << a [ 1 ] ; int i ; for ( i = 2 ; i <= num1 ; i ++ ) cout << " " << a [ i ] ; for ( i = 1 ; i <= num2 ; i ++ ) cout << " " << b [ i ] ; cout << endl ; } int main ( ) { getin ( ) ; order ( a , num1 ) ; order ( b , num2 ) ; print ( a , b , num1 , num2 ) ; return 0 ; }
int main ( ) { int n , m ; cin >> n >> m ; int a [ 10000 ] , b [ 10000 ] ; for ( int i = 0 ; i <= n - 1 ; i ++ ) { cin >> a [ i ] ; } cin . get ( ) ; for ( int i = 0 ; i <= m - 1 ; i ++ ) { cin >> b [ i ] ; } for ( int i = 0 ; i <= n - 2 ; i ++ ) { for ( int j = n - 1 ; j >= i + 1 ; j -- ) { int l ; l = max ( a [ j ] , a [ j - 1 ] ) ; a [ j - 1 ] = min ( a [ j ] , a [ j - 1 ] ) ; a [ j ] = l ; } } for ( int i = 0 ; i <= m - 2 ; i ++ ) { for ( int j = m - 1 ; j >= i + 1 ; j -- ) { int l ; l = max ( b [ j ] , b [ j - 1 ] ) ; b [ j - 1 ] = min ( b [ j ] , b [ j - 1 ] ) ; b [ j ] = l ; } } for ( int i = 0 ; i <= n - 1 ; i ++ ) { cout << a [ i ] << " " ; } for ( int i = 0 ; i <= m - 1 ; i ++ ) { if ( i != m - 1 ) cout << b [ i ] << " " ; else cout << b [ i ] << endl ; } return 0 ; }
int a [ 1001 ] = { 0 } ; int b [ 1001 ] = { 0 } ; int m , n ; void loaddata ( ) { int l ; scanf ( "%d %d" , & m , & n ) ; for ( l = 0 ; l < m ; l ++ ) scanf ( "%d" , & a [ l ] ) ; for ( l = 0 ; l < n ; l ++ ) scanf ( "%d" , & b [ l ] ) ; } void arrsort ( ) { int i , j , k ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { if ( a [ i ] > a [ j ] ) { k = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = k ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( b [ i ] > b [ j ] ) { k = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = k ; } } } } void add ( ) { int p ; for ( p = 0 ; p < n ; p ++ ) { a [ p + m ] = b [ p ] ; } } void print ( ) { int q ; printf ( "%d" , a [ 0 ] ) ; for ( q = 1 ; q < m + n ; q ++ ) { printf ( " %d" , a [ q ] ) ; } } int main ( ) { loaddata ( ) ; arrsort ( ) ; add ( ) ; print ( ) ; return 0 ; }
main ( ) { int m , n , a [ 1000 ] , b [ 1000 ] ; void in ( int xx [ ] , int , int yy [ ] , int ) ; void arr ( int ddd [ ] , int ) ; void con ( int aa [ ] , int , int bb [ ] , int ) ; void out ( int dd [ ] , int ) ; scanf ( "%d%d" , & m , & n ) ; in ( a , m , b , n ) ; arr ( a , m ) ; arr ( b , n ) ; con ( a , m , b , n ) ; out ( a , m + n ) ; } void in ( int xx [ ] , int x , int yy [ ] , int y ) { int i ; for ( i = 0 ; i < x ; i ++ ) scanf ( "%d" , & xx [ i ] ) ; for ( i = 0 ; i < y ; i ++ ) scanf ( "%d" , & yy [ i ] ) ; } void arr ( int ddd [ ] , int x ) { int i , j , min , k ; for ( i = 0 ; i < x - 1 ; i ++ ) { min = ddd [ i ] ; for ( j = i + 1 , k = i ; j < x ; j ++ ) { if ( ddd [ j ] < min ) { min = ddd [ j ] ; k = j ; } } ddd [ k ] = ddd [ i ] ; ddd [ i ] = min ; } } void con ( int aa [ ] , int x , int bb [ ] , int y ) { int i ; for ( i = x ; i < x + y ; i ++ ) aa [ i ] = bb [ i - x ] ; x = x + y ; } void out ( int dd [ ] , int x ) { int i ; printf ( "%d" , dd [ 0 ] ) ; for ( i = 1 ; i < x ; i ++ ) printf ( " %d" , dd [ i ] ) ; }
void input ( int m , int n , int a [ 300 ] , int b [ 300 ] ) { int i = 0 , j = 0 ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( j = 0 ; j < n ; j ++ ) { scanf ( "%d" , & b [ j ] ) ; } } void row ( int a [ 300 ] ) { int i , j , t ; for ( i = 0 ; i < 300 ; i ++ ) { for ( j = i + 1 ; j < 300 ; j ++ ) { if ( ( a [ j ] < a [ i ] ) && ( a [ j ] != 0 ) ) { t = a [ j ] ; a [ j ] = a [ i ] ; a [ i ] = t ; } } } } void com ( int a [ 300 ] , int b [ 300 ] ) { int i = 0 , j = 0 , k ; for ( i = 0 ; i < 300 ; i ++ ) { if ( a [ i ] == 0 ) { k = i ; break ; } } for ( j = 0 ; j < 300 ; j ++ ) { if ( b [ j ] != 0 ) a [ k ] = b [ j ] ; k ++ ; } } void output ( int a [ 300 ] ) { int i ; for ( i = 0 ; i < 300 ; i ++ ) { if ( a [ i ] != 0 ) { printf ( "%d" , a [ i ] ) ; break ; } } i ++ ; for ( i ; i < 300 ; i ++ ) { if ( a [ i ] != 0 ) { printf ( " %d" , a [ i ] ) ; } } } void main ( ) { int x , y , a [ 300 ] = { 0 } , b [ 300 ] = { 0 } ; input ( x , y , a , b ) ; row ( a ) ; row ( b ) ; com ( a , b ) ; output ( a ) ; }
int m , n , a [ 1000 ] = { 0 } , b [ 1000 ] = { 0 } , c [ 1000 ] = { 0 } ; void du ( ) { int i ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void pai ( ) { int j , k , l ; for ( j = 0 ; j <= m ; j ++ ) { for ( k = 0 ; k < m - 1 ; k ++ ) { if ( a [ k ] > a [ k + 1 ] ) { l = a [ k ] ; a [ k ] = a [ k + 1 ] ; a [ k + 1 ] = l ; } } } for ( j = 0 ; j <= n ; j ++ ) { for ( k = 0 ; k < n - 1 ; k ++ ) { if ( b [ k ] > b [ k + 1 ] ) { l = b [ k ] ; b [ k ] = b [ k + 1 ] ; b [ k + 1 ] = l ; } } } } void he ( ) { int o , p ; for ( o = 0 ; o < m ; o ++ ) c [ o ] = a [ o ] ; for ( p = 0 ; p < n ; p ++ ) { c [ o ] = b [ p ] ; o ++ ; } } void shu ( ) { int q ; for ( q = 0 ; q < m + n ; q ++ ) { printf ( "%d" , c [ q ] ) ; if ( q != m + n - 1 ) printf ( " " ) ; else printf ( "\n" ) ; } } int main ( ) { scanf ( "%d %d" , & m , & n ) ; du ( ) ; pai ( ) ; he ( ) ; shu ( ) ; return 0 ; }
int main ( ) { int n , m , a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; scanf ( "%d%d" , & n , & m ) ; void type ( int array [ ] , int n ) ; void order ( int array [ ] , int q ) ; void join ( int array1 [ ] , int array2 [ ] , int q1 , int q2 ) ; void out ( int array [ ] , int q1 , int q2 ) ; type ( a , n ) ; type ( b , m ) ; order ( a , n ) ; order ( b , m ) ; join ( a , b , n , m ) ; out ( a , n , m ) ; } int type ( int array [ ] , int n ) { int c ; for ( c = 0 ; c < n ; c ++ ) { scanf ( "%d" , & array [ c ] ) ; } } int order ( int array [ ] , int q ) { int i , j , t ; for ( i = 0 ; i < q - 1 ; i ++ ) { for ( j = 0 ; j < q - 1 ; j ++ ) { if ( array [ j ] >= array [ j + 1 ] ) { t = array [ j + 1 ] ; array [ j + 1 ] = array [ j ] ; array [ j ] = t ; } } } } int join ( int array1 [ ] , int array2 [ ] , int q1 , int q2 ) { int k ; for ( k = 0 ; k < q2 ; k ++ ) { array1 [ q1 + k ] = array2 [ k ] ; } } int out ( int array [ ] , int q1 , int q2 ) { int k ; for ( k = 0 ; k < q1 + q2 - 1 ; k ++ ) { printf ( "%d " , array [ k ] ) ; } printf ( "%d\n" , array [ q1 + q2 - 1 ] ) ; }
void f1 ( int a [ ] , int x , int b [ ] , int y ) { int m , n , i ; scanf ( "%d %d" , & m , & n ) ; for ( i = 0 ; i < m ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } for ( i = m ; i < x ; i ++ ) a [ i ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & b [ i ] ) ; } for ( i = n ; i < y ; i ++ ) b [ i ] = - 1 ; } void f2 ( int a [ ] , int x , int b [ ] , int y ) { int i , j , t , m , n ; for ( i = 0 , m = 0 ; i < x ; i ++ ) if ( a [ i ] >= 0 ) m ++ ; for ( i = 0 , n = 0 ; i < y ; i ++ ) if ( b [ i ] >= 0 ) n ++ ; for ( j = 0 ; j < m - 1 ; j ++ ) { for ( i = 0 ; i < m - 1 - j ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { t = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = t ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( i = 0 ; i < n - 1 - j ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { t = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = t ; } } } } void f3 ( int a [ ] , int x , int b [ ] , int y , int c [ ] , int z ) { int i , m , n ; for ( i = 0 , m = 0 ; i < x ; i ++ ) if ( a [ i ] >= 0 ) m ++ ; for ( i = 0 , n = 0 ; i < y ; i ++ ) if ( b [ i ] >= 0 ) n ++ ; for ( i = 0 ; i < m ; i ++ ) c [ i ] = a [ i ] ; for ( i = 0 ; i < n ; i ++ ) c [ m + i ] = b [ i ] ; for ( i = n + m ; i < z ; i ++ ) c [ i ] = - 1 ; } void f4 ( int c [ ] , int x ) { int i , e ; for ( i = 0 , e = 0 ; i < x ; i ++ ) if ( c [ i ] >= 0 ) e ++ ; for ( i = 0 ; i < e ; i ++ ) { printf ( "%d" , c [ i ] ) ; if ( i != e - 1 ) printf ( " " ) ; } } void main ( ) { int a [ 30 ] , b [ 30 ] , c [ 60 ] ; int i ; f1 ( a , 30 , b , 30 ) ; f2 ( a , 30 , b , 30 ) ; f3 ( a , 30 , b , 30 , c , 60 ) ; f4 ( c , 60 ) ; }
int n1 , n2 , a1 [ 50 ] , a2 [ 50 ] ; void main ( ) { void sort ( int b [ ] , int n ) ; void scn ( ) ; void pr ( int c [ ] , int m ) ; scn ( ) ; sort ( a1 , n1 ) ; sort ( a2 , n2 ) ; pr ( a1 , n1 ) ; pr ( a2 , n2 ) ; } void sort ( int b [ ] , int n ) { int i , j , t ; for ( j = 0 ; j < n - 1 ; j ++ ) for ( i = 0 ; i < n - 1 ; i ++ ) { if ( b [ i ] > b [ i + 1 ] ) { t = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = t ; } } } void scn ( ) { int i ; scanf ( "%d %d" , & n1 , & n2 ) ; for ( i = 0 ; i < n1 ; i ++ ) { scanf ( "%d" , & a1 [ i ] ) ; } for ( i = 0 ; i < n2 ; i ++ ) { scanf ( "%d" , & a2 [ i ] ) ; } } void pr ( int c [ ] , int m ) { int i ; for ( i = 0 ; i < m ; i ++ ) { if ( i == m - 1 && c [ i ] == a2 [ m - 1 ] ) printf ( "%d" , c [ i ] ) ; else printf ( "%d " , c [ i ] ) ; } }
int a [ 100 ] , b [ 100 ] ; int m , n ; void input ( ) { int i , j ; scanf ( "%d%d" , & m , & n ) ; scanf ( "\n" ) ; for ( i = 0 ; i < m ; i ++ ) scanf ( "%d " , & a [ i ] ) ; for ( j = 0 ; j < n - 1 ; j ++ ) scanf ( "%d " , & b [ j ] ) ; scanf ( "%d" , & b [ n - 1 ] ) ; return ; } void sort ( int array [ ] , int k ) { int i , j , t ; for ( j = 0 ; j < k ; j ++ ) for ( i = 0 ; i < k - j ; i ++ ) if ( array [ i ] > array [ i + 1 ] ) { t = array [ i ] ; array [ i ] = array [ i + 1 ] ; array [ i + 1 ] = t ; } return ; } void combine ( ) { int i , j = 0 ; for ( i = m ; i < m + n ; i ++ ) { a [ i ] = b [ j ] ; j ++ ; } return ; } void output ( ) { int i ; for ( i = 0 ; i < m + n - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d" , a [ m + n - 1 ] ) ; return ; } int main ( ) { input ( ) ; sort ( a , m - 1 ) ; sort ( b , n - 1 ) ; combine ( ) ; output ( ) ; return 0 ; }
int num_a , num_b , a [ 2000 ] = { 0 } , b [ 1000 ] = { 0 } , i , j ; void main ( ) { void a1 ( ) , a2 ( ) , a3 ( ) , a4 ( ) ; a1 ( ) ; a2 ( ) ; a3 ( ) ; a4 ( ) ; } void a1 ( ) { scanf ( "%d%d" , & num_a , & num_b ) ; for ( i = 0 ; i < num_a ; i ++ ) scanf ( "%d" , & a [ i ] ) ; for ( i = 0 ; i < num_b ; i ++ ) scanf ( "%d" , & b [ i ] ) ; } void a2 ( ) { int turn1 ; for ( i = 0 ; i < num_a ; i ++ ) for ( j = i + 1 ; j < num_a ; j ++ ) if ( a [ i ] > a [ j ] ) { turn1 = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = turn1 ; } for ( i = 0 ; i < num_b ; i ++ ) for ( j = i + 1 ; j < num_b ; j ++ ) if ( b [ i ] > b [ j ] ) { turn1 = b [ i ] ; b [ i ] = b [ j ] ; b [ j ] = turn1 ; } } void a3 ( ) { for ( i = 0 ; i < num_b ; i ++ ) a [ num_a + i ] = b [ i ] ; } void a4 ( ) { for ( i = 0 ; i < num_a + num_b - 1 ; i ++ ) printf ( "%d " , a [ i ] ) ; printf ( "%d\n" , a [ num_a + num_b - 1 ] ) ; }
int exchange ( int m [ ] , int n ) { int i , j , l ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( m [ i ] > m [ j ] ) { l = m [ i ] ; m [ i ] = m [ j ] ; m [ j ] = l ; } } } return m ; } int add ( int x [ ] , int y [ ] , int e , int f ) { int g ; for ( g = 0 ; g < f ; g ++ ) { x [ e + g ] = y [ g ] ; } return x ; } void getint ( int r [ ] , int s ) { int t ; for ( t = 0 ; t < s ; t ++ ) { scanf ( "%d" , & r [ t ] ) ; } } void print ( int u [ ] , int v ) { int w ; for ( w = 0 ; w < v - 1 ; w ++ ) { printf ( "%d " , u [ w ] ) ; } printf ( "%d" , u [ v - 1 ] ) ; } void main ( ) { int a [ 40 ] , b [ 20 ] , c , d ; scanf ( "%d%d\n" , & c , & d ) ; getint ( a , c ) , getint ( b , d ) ; print ( add ( exchange ( a , c ) , exchange ( b , d ) , c , d ) , c + d ) ; }
void main ( ) { int a [ 100 ] , b [ 100 ] ; void sca ( int x [ 100 ] , int y [ 100 ] ) ; void res ( int x [ 100 ] , int y [ 100 ] ) ; void pri ( int x [ 100 ] , int y [ 100 ] ) ; sca ( a , b ) ; } void sca ( int x [ 100 ] , int y [ 100 ] ) { int m , n , i , j , k ; scanf ( "%d %d" , & m , & n ) ; for ( i = 1 ; i <= m ; i ++ ) scanf ( "%d" , & x [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) scanf ( "%d" , & y [ i ] ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= m - i ; j ++ ) { if ( x [ j ] > x [ j + 1 ] ) { k = x [ j ] ; x [ j ] = x [ j + 1 ] ; x [ j + 1 ] = k ; } } } for ( i = 1 ; i <= m ; i ++ ) printf ( "%d " , x [ i ] ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= n - i ; j ++ ) { if ( y [ j ] > y [ j + 1 ] ) { k = y [ j ] ; y [ j ] = y [ j + 1 ] ; y [ j + 1 ] = k ; } } } for ( i = 1 ; i < n ; i ++ ) printf ( "%d " , y [ i ] ) ; printf ( "%d" , y [ n ] ) ; }
int main ( ) { struct patient { char id [ 10 ] ; int age ; } ; int n , i , j , k ; struct patient p [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s%d" , p [ i ] . id , & p [ i ] . age ) ; for ( i = 1 ; i < n ; i ++ ) { if ( p [ i ] . age >= 60 ) { j = 0 ; while ( j < i && p [ j ] . age >= p [ i ] . age ) j ++ ; if ( j < i ) { struct patient tmp = p [ i ] ; for ( k = i ; k > j ; k -- ) p [ k ] = p [ k - 1 ] ; p [ j ] = tmp ; } } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , p [ i ] . id ) ; return 0 ; }
int main ( ) { int n , i ; scanf ( "%d" , & n ) ; struct patient { char ID [ 10 ] ; int age ; struct patient * next ; struct patient * pre ; } ; struct patient * p , * head , * q , * m , * temp ; p = ( struct patient * ) malloc ( sizeof ( struct patient ) ) ; head = p ; temp = ( struct patient * ) malloc ( sizeof ( struct patient ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , p -> ID , & p -> age ) ; if ( i != n - 1 ) { p -> next = ( struct patient * ) malloc ( sizeof ( struct patient ) ) ; p -> next -> pre = p ; p -> next -> next = NULL ; p = p -> next ; } } for ( p = head ; p != NULL ; p = p -> next ) { for ( q = p -> next ; q != NULL ; q = q -> next ) { if ( ( p -> age < q -> age ) && ( q -> age >= 60 ) ) { for ( m = q ; m != p ; m = m -> pre ) { temp -> age = m -> age ; m -> age = m -> pre -> age ; m -> pre -> age = temp -> age ; strcpy ( temp -> ID , m -> ID ) ; strcpy ( m -> ID , m -> pre -> ID ) ; strcpy ( m -> pre -> ID , temp -> ID ) ; } } } } for ( p = head ; p != NULL ; p = p -> next ) printf ( "%s\n" , p -> ID ) ; return 0 ; }
struct patient { char name [ 11 ] ; int age ; int order ; } ; int main ( ) { struct patient peo [ NO ] ; int n , i , count = 0 , COUNT , j , k , e , agedata [ NO ] , a = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , & peo [ i ] . name ) ; scanf ( "%d" , & peo [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( peo [ i ] . age >= 60 ) { count ++ ; agedata [ a ] = peo [ i ] . age ; a ++ ; } } COUNT = count ; for ( i = 0 ; i < n ; i ++ ) { if ( peo [ i ] . age < 60 ) { peo [ i ] . order = count ; count ++ ; } } for ( k = 1 ; k < COUNT ; k ++ ) { for ( j = 0 ; j < COUNT - k ; j ++ ) { if ( agedata [ j ] < agedata [ j + 1 ] ) { e = agedata [ j + 1 ] ; agedata [ j + 1 ] = agedata [ j ] ; agedata [ j ] = e ; } } } for ( i = 0 ; i < COUNT ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( peo [ j ] . age == agedata [ i ] ) { peo [ j ] . order = i ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( peo [ j ] . order == i ) { printf ( "%s\n" , peo [ j ] . name ) ; } } } return 0 ; }
struct ILL { char id [ 10 ] ; int age ; } ; int main ( ) { struct ILL ill [ 100 ] ; int n , i , k , j = 0 , Age [ 100 ] , x ; char a [ 100 ] [ 10 ] , b [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , ill [ i ] . id ) ; scanf ( "%d" , & ill [ i ] . age ) ; if ( ill [ i ] . age >= 60 ) { strcpy ( a [ j ] , ill [ i ] . id ) ; Age [ j ] = ill [ i ] . age ; j ++ ; } } for ( i = 0 ; i < j - 1 ; i ++ ) { for ( k = 0 ; k < j - i - 1 ; k ++ ) { if ( Age [ k ] < Age [ k + 1 ] ) { strcpy ( b , a [ k + 1 ] ) ; strcpy ( a [ k + 1 ] , a [ k ] ) ; strcpy ( a [ k ] , b ) ; x = Age [ k ] ; Age [ k ] = Age [ k + 1 ] ; Age [ k + 1 ] = x ; } } } for ( i = 0 ; i < j ; i ++ ) { puts ( a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( ill [ i ] . age < 60 ) { printf ( "%s\n" , ill [ i ] . id ) ; } } return 0 ; }
int main ( ) { char str [ 100 ] [ 100 ] ; int s1 [ 100 ] , sz [ 100 ] , t [ 100 ] ; int n , i , p , k ; scanf ( "%d" , & n ) ; int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , str [ i ] , & sz [ i ] ) ; if ( sz [ i ] >= 60 ) { t [ j ] = i ; s1 [ j ] = sz [ i ] ; j ++ ; } } for ( k = 1 ; k <= j ; k ++ ) { for ( p = 0 ; p < j - k ; p ++ ) { if ( s1 [ p ] < s1 [ p + 1 ] ) { int e , f ; e = s1 [ p + 1 ] ; s1 [ p + 1 ] = s1 [ p ] ; s1 [ p ] = e ; f = t [ p + 1 ] ; t [ p + 1 ] = t [ p ] ; t [ p ] = f ; } } } for ( p = 0 ; p < j ; p ++ ) { printf ( "%s\n" , str [ t [ p ] ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] < 60 ) printf ( "%s\n" , str [ i ] ) ; } return 0 ; }
struct myturn { char ID [ 10 ] ; int age ; } ; int main ( ) { int n , i , j = 0 , max = 0 ; struct myturn patient [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , & patient [ i ] . ID , & patient [ i ] . age ) ; if ( patient [ i ] . age > max ) max = patient [ i ] . age ; } if ( max >= 60 ) { for ( max ; max >= 60 ; max -- ) { for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . age == max ) { printf ( "%s\n" , patient [ i ] . ID ) ; patient [ i ] . age = 0 ; j ++ ; } } } } for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . age != 0 ) { printf ( "%s" , patient [ i ] . ID ) ; j ++ ; if ( j < n ) printf ( "\n" ) ; } } return 0 ; }
struct patient { char id [ 11 ] ; int age ; } ; int main ( ) { struct patient pt [ 100 ] ; int n , i , j , a = 0 , b = 0 , tem ; int age_r [ 100 ] , time_range [ 100 ] ; char temid [ 11 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , pt [ i ] . id , & pt [ i ] . age ) ; if ( pt [ i ] . age >= 60 ) { age_r [ a ] = i ; a ++ ; } else { time_range [ b ] = i ; b ++ ; } } for ( i = 1 ; i < a - 1 ; i ++ ) { for ( j = 0 ; j < a - i ; j ++ ) { if ( pt [ age_r [ j ] ] . age < pt [ age_r [ j + 1 ] ] . age ) { strcpy ( temid , pt [ age_r [ j ] ] . id ) ; strcpy ( pt [ age_r [ j ] ] . id , pt [ age_r [ j + 1 ] ] . id ) ; strcpy ( pt [ age_r [ j + 1 ] ] . id , temid ) ; tem = pt [ age_r [ j ] ] . age ; pt [ age_r [ j ] ] . age = pt [ age_r [ j + 1 ] ] . age ; pt [ age_r [ j + 1 ] ] . age = tem ; } } } for ( i = 0 ; i < a ; i ++ ) { printf ( "%s\n" , pt [ age_r [ i ] ] . id ) ; } for ( i = 0 ; i < b ; i ++ ) { printf ( "%s\n" , pt [ time_range [ i ] ] . id ) ; } return 0 ; }
int main ( ) { int a [ 100 ] , e [ 100 ] , f [ 100 ] ; char c [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , d [ 100 ] [ 100 ] , x [ 100 ] ; int n , p = - 1 , q = - 1 , k , z , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , c [ i ] , & a [ i ] ) ; if ( a [ i ] >= 60 ) { p ++ ; e [ p ] = a [ i ] ; strcpy ( b [ p ] , c [ i ] ) ; } if ( a [ i ] < 60 ) { q ++ ; f [ q ] = a [ i ] ; strcpy ( d [ q ] , c [ i ] ) ; } } for ( k = 1 ; k <= p + 1 ; k ++ ) { for ( i = 0 ; i < p + 1 - k ; i ++ ) { if ( e [ i ] < e [ i + 1 ] ) { z = e [ i ] ; e [ i ] = e [ i + 1 ] ; e [ i + 1 ] = z ; strcpy ( x , b [ i ] ) ; strcpy ( b [ i ] , b [ i + 1 ] ) ; strcpy ( b [ i + 1 ] , x ) ; } } } for ( i = 0 ; i <= p ; i ++ ) { puts ( b [ i ] ) ; } for ( i = 0 ; i <= q ; i ++ ) { puts ( d [ i ] ) ; } return 0 ; }
struct peo { char id [ 10 ] ; int age ; } a [ 150 ] , b [ 150 ] ; void main ( ) { int n , i , j = 0 , e , k ; char c [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , a [ i ] . id , & a [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] . age >= 60 ) { strcpy ( b [ j ] . id , a [ i ] . id ) ; b [ j ] . age = a [ i ] . age ; j ++ ; } } for ( k = 1 ; k < j ; k ++ ) { for ( i = 0 ; i < j - k ; i ++ ) { if ( b [ i ] . age < b [ i + 1 ] . age ) { e = b [ i + 1 ] . age ; b [ i + 1 ] . age = b [ i ] . age ; b [ i ] . age = e ; strcpy ( c , b [ i + 1 ] . id ) ; strcpy ( b [ i + 1 ] . id , b [ i ] . id ) ; strcpy ( b [ i ] . id , c ) ; } } } for ( i = 0 ; i < j ; i ++ ) { printf ( "%s\n" , b [ i ] . id ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] . age < 60 ) printf ( "%s\n" , a [ i ] . id ) ; } }
int main ( ) { int n , sz [ 100 ] , zs [ 100 ] , i , k = 0 , m , a ; char id [ 100 ] [ 10 ] , di [ 100 ] [ 10 ] , zfc [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , id [ i ] , & ( sz [ i ] ) ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] >= 60 ) { zs [ k ] = sz [ i ] ; strcpy ( di [ k ] , id [ i ] ) ; k ++ ; } } for ( m = 0 ; m < k - 1 ; m ++ ) { for ( i = 0 ; i < k - 1 - m ; i ++ ) { if ( zs [ i ] < zs [ i + 1 ] ) { a = zs [ i ] ; zs [ i ] = zs [ i + 1 ] ; zs [ i + 1 ] = a ; strcpy ( zfc , di [ i ] ) ; strcpy ( di [ i ] , di [ i + 1 ] ) ; strcpy ( di [ i + 1 ] , zfc ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] < 60 ) { strcpy ( di [ k ] , id [ i ] ) ; k ++ ; } } for ( i = 0 ; i < k ; i ++ ) { printf ( "%s\n" , di [ i ] ) ; } return 0 ; }
struct patient { char ID [ 11 ] ; int age ; } p [ 1000 ] ; int main ( ) { int n , i , k , j , l , a = 0 , b = 0 , e ; int sz1 [ 1000 ] , sz2 [ 1000 ] ; char zfc1 [ 1000 ] [ 11 ] , zfc2 [ 1000 ] [ 11 ] , f [ 11 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , & p [ i ] . ID ) ; scanf ( " %d" , & p [ i ] . age ) ; } for ( i = 0 , j = 0 , l = 0 ; i < n ; i ++ ) { if ( p [ i ] . age >= 60 ) { a ++ ; sz1 [ j ] = p [ i ] . age ; strcpy ( zfc1 [ j ] , p [ i ] . ID ) ; j ++ ; } else { b ++ ; sz2 [ l ] = p [ i ] . age ; strcpy ( zfc2 [ l ] , p [ i ] . ID ) ; l ++ ; } } for ( k = 0 ; k < n ; k ++ ) { for ( j = n - 1 ; j >= k ; j -- ) { if ( sz1 [ j + 1 ] > sz1 [ j ] ) { e = sz1 [ j ] ; sz1 [ j ] = sz1 [ j + 1 ] ; sz1 [ j + 1 ] = e ; strcpy ( f , zfc1 [ j ] ) ; strcpy ( zfc1 [ j ] , zfc1 [ j + 1 ] ) ; strcpy ( zfc1 [ j + 1 ] , f ) ; } } } for ( j = 0 ; j < a ; j ++ ) { printf ( "%s\n" , zfc1 [ j ] ) ; } for ( l = 0 ; l < b ; l ++ ) { printf ( "%s\n" , zfc2 [ l ] ) ; } return 0 ; }
struct patient { char num [ 11 ] ; int age ; } sick [ 101 ] ; int main ( ) { int n , i , j , k , r , s ; s = 0 ; r = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , sick [ i ] . num ) ; scanf ( "%d" , & sick [ i ] . age ) ; } int old [ 101 ] = { 0 } ; int young [ 101 ] = { 0 } ; for ( i = 0 ; i < n ; i ++ ) { if ( sick [ i ] . age >= 60 ) { for ( j = 0 ; j <= s ; j ++ ) { if ( sick [ i ] . age > sick [ old [ j ] ] . age || j == s ) { if ( j == s ) { old [ s ] = i ; s = s + 1 ; break ; } else { for ( k = s ; k >= j ; k -- ) { old [ k + 1 ] = old [ k ] ; } old [ j ] = i ; s = s + 1 ; break ; } } } } else { young [ r ] = i ; r = r + 1 ; } } for ( i = 0 ; i < s ; i ++ ) { printf ( "%s\n" , sick [ old [ i ] ] . num ) ; } for ( i = 0 ; i < r ; i ++ ) { printf ( "%s\n" , sick [ young [ i ] ] . num ) ; } return 0 ; }
void main ( ) { struct people { char num [ 10 ] ; int age ; } peo [ 100 ] , pai [ 100 ] , temp ; int i , n ; int j = 0 ; int k = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , peo [ i ] . num , & peo [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( peo [ i ] . age >= 60 ) { pai [ j ] = peo [ i ] ; j ++ ; } } for ( i = 0 ; i < n ; i ++ ) { if ( peo [ i ] . age < 60 ) { pai [ j ] = peo [ i ] ; j ++ ; } } for ( k = 0 ; k < j - 1 ; k ++ ) { for ( i = 0 ; i < j - 1 - k ; i ++ ) { if ( ( pai [ i ] . age < pai [ i + 1 ] . age ) && ( pai [ i + 1 ] . age >= 60 ) ) { temp = pai [ i ] ; pai [ i ] = pai [ i + 1 ] ; pai [ i + 1 ] = temp ; } } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , pai [ i ] . num ) ; }
int main ( ) { int i , j , k , n ; char a [ 11 ] ; int b ; scanf ( "%d" , & n ) ; struct patient { char num [ 11 ] ; int age ; } pat [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , pat [ i ] . num , & pat [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - 1 - i ; j ++ ) { if ( pat [ j ] . age < pat [ j + 1 ] . age && pat [ j + 1 ] . age >= 60 ) { for ( k = 0 ; k < 10 ; k ++ ) { a [ k ] = pat [ j ] . num [ k ] ; pat [ j ] . num [ k ] = pat [ j + 1 ] . num [ k ] ; pat [ j + 1 ] . num [ k ] = a [ k ] ; } b = pat [ j ] . age ; pat [ j ] . age = pat [ j + 1 ] . age ; pat [ j + 1 ] . age = b ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , pat [ i ] . num ) ; } return 0 ; }
struct patient { char id [ 10 ] ; int age ; } pat [ 100 ] ; int over60 [ 100 ] ; int below60 [ 100 ] ; int m , k ; int main ( int argc , char * argv [ ] ) { void choose ( struct patient * p , int n ) ; int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , pat [ i ] . id , & pat [ i ] . age ) ; } choose ( pat , n ) ; for ( j = 1 ; j <= m ; j ++ ) { if ( over60 [ m - j ] != over60 [ m - j - 1 ] ) { for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age == over60 [ m - j ] ) { printf ( "%s\n" , pat [ i ] . id ) ; } } } } for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age < 60 ) { printf ( "%s\n" , pat [ i ] . id ) ; } } return 0 ; } void choose ( struct patient * p , int n ) { void paixu ( int * a , int n ) ; int i ; for ( i = 0 , m = 0 , k = 0 ; i < n ; i ++ ) { if ( ( p + i ) -> age >= 60 ) { over60 [ m ] = ( p + i ) -> age ; m ++ ; } } paixu ( over60 , m ) ; } void paixu ( int * a , int n ) { int j , i , e ; for ( j = 1 ; j < n ; j ++ ) { for ( i = 0 ; i < n - j ; i ++ ) { if ( * ( a + i ) > * ( a + i + 1 ) ) { e = * ( a + i ) ; * ( a + i ) = * ( a + i + 1 ) ; * ( a + i + 1 ) = e ; } } } }
struct Patient { char id [ 10 ] ; int age ; int num ; } patient [ 100 ] ; int main ( ) { int n ; int a , b , c ; scanf ( "%d" , & n ) ; int i , j , k = 0 ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%s %d" , & patient [ i ] . id , & patient [ i ] . age ) ; patient [ i ] . num = i ; } int s [ 100 ] ; for ( i = 0 ; i <= 99 ; i ++ ) { s [ i ] = i ; } for ( i = 0 ; i <= n - 2 ; i ++ ) { for ( j = 0 ; j <= n - 2 ; j ++ ) { if ( patient [ s [ j ] ] . age < patient [ s [ j + 1 ] ] . age ) { a = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = a ; } } } for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( patient [ i ] . age >= 60 ) k = k + 1 ; } for ( i = 0 ; i <= k - 2 ; i ++ ) { for ( j = 0 ; j <= k - 2 ; j ++ ) { if ( s [ j ] > s [ j + 1 ] && patient [ s [ j ] ] . age == patient [ s [ j + 1 ] ] . age ) { a = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = a ; } } } for ( i = k ; i <= n - 2 ; i ++ ) { for ( j = k ; j <= n - 2 ; j ++ ) { if ( s [ j ] > s [ j + 1 ] ) { a = s [ j ] ; s [ j ] = s [ j + 1 ] ; s [ j + 1 ] = a ; } } } for ( i = 0 ; i <= n - 1 ; i ++ ) { printf ( "%s\n" , patient [ s [ i ] ] . id ) ; } return 0 ; }
int main ( ) { int n , i , j ; struct s { char id [ 10 ] ; int age ; } ; struct s S [ 100 ] , Si ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , S [ i ] . id , & S [ i ] . age ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( S [ j + 1 ] . age >= 60 ) { if ( S [ j ] . age < S [ j + 1 ] . age ) { Si = S [ j ] ; S [ j ] = S [ j + 1 ] ; S [ j + 1 ] = Si ; } } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , S [ i ] . id ) ; } }
struct patient { char num [ 11 ] ; int age ; } ; int main ( ) { int n , i ; scanf ( "%d" , & n ) ; struct patient pat1 [ 100 ] , pat2 [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , pat1 [ i ] . num , & pat1 [ i ] . age ) ; strcpy ( pat2 [ i ] . num , pat1 [ i ] . num ) ; pat2 [ i ] . age = pat1 [ i ] . age ; } int j , e ; char e_num [ 11 ] ; for ( j = 1 ; j < n ; j ++ ) { for ( i = 0 ; i < n - j ; i ++ ) { if ( pat1 [ i ] . age < pat1 [ i + 1 ] . age ) { e = pat1 [ i + 1 ] . age ; strcpy ( e_num , pat1 [ i + 1 ] . num ) ; pat1 [ i + 1 ] . age = pat1 [ i ] . age ; strcpy ( pat1 [ i + 1 ] . num , pat1 [ i ] . num ) ; pat1 [ i ] . age = e ; strcpy ( pat1 [ i ] . num , e_num ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( pat1 [ i ] . age >= 60 ) { printf ( "%s\n" , pat1 [ i ] . num ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( pat2 [ i ] . age < 60 ) { printf ( "%s\n" , pat2 [ i ] . num ) ; } } return 0 ; }
struct person { char str [ 10 ] ; int age ; } per [ 100 ] , per1 [ 100 ] , per2 [ 100 ] ; int main ( int argc , char * argv [ ] ) { int n , i , j = 0 , k = 0 , x = 0 , t ; char e [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , per [ i ] . str , & per [ i ] . age ) ; if ( per [ i ] . age >= 60 ) { strcpy ( per1 [ j ] . str , per [ i ] . str ) ; per1 [ j ] . age = per [ i ] . age ; j ++ ; } else { strcpy ( per2 [ k ] . str , per [ i ] . str ) ; per2 [ k ] . age = per [ i ] . age ; k ++ ; } } for ( x = 0 ; x < j ; x ++ ) { for ( i = 0 ; i < j - x ; i ++ ) { if ( per1 [ i ] . age < per1 [ i + 1 ] . age ) { strcpy ( e , per1 [ i ] . str ) ; strcpy ( per1 [ i ] . str , per1 [ i + 1 ] . str ) ; strcpy ( per1 [ i + 1 ] . str , e ) ; t = per1 [ i ] . age ; per1 [ i ] . age = per1 [ i + 1 ] . age ; per1 [ i + 1 ] . age = t ; } } } for ( i = 0 ; i < j ; i ++ ) { printf ( "%s\n" , per1 [ i ] . str ) ; } for ( i = 0 ; i < k ; i ++ ) { printf ( "%s\n" , per2 [ i ] . str ) ; } return 0 ; }
struct patient { char id [ 10 ] ; int age ; } a [ 100 ] ; int main ( ) { int n , i , k , e ; char p [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , a [ i ] . id , & a [ i ] . age ) ; if ( a [ i ] . age >= 60 ) { for ( k = 0 ; i - k >= 1 ; k ++ ) { if ( a [ i - k ] . age > a [ i - k - 1 ] . age ) { e = a [ i - k ] . age ; a [ i - k ] . age = a [ i - k - 1 ] . age ; a [ i - k - 1 ] . age = e ; strcpy ( p , a [ i - k ] . id ) ; strcpy ( a [ i - k ] . id , a [ i - k - 1 ] . id ) ; strcpy ( a [ i - k - 1 ] . id , p ) ; } } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , a [ i ] . id ) ; } return 0 ; }
int main ( ) { char s [ 100 ] [ 100 ] , a [ 100 ] [ 100 ] , b [ 100 ] ; int n , i , j = 0 , sz [ 100 ] , t , c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , s [ i ] , & sz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] < 60 ) { strcpy ( a [ j ] , s [ i ] ) ; j ++ ; } } for ( t = 1 ; t <= n ; t ++ ) { for ( i = 0 ; i < n - t ; i ++ ) { if ( sz [ i ] < sz [ i + 1 ] ) { c = sz [ i + 1 ] ; sz [ i + 1 ] = sz [ i ] ; sz [ i ] = c ; strcpy ( b , s [ i + 1 ] ) ; strcpy ( s [ i + 1 ] , s [ i ] ) ; strcpy ( s [ i ] , b ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] >= 60 ) { printf ( "%s\n" , s [ i ] ) ; } } for ( i = 0 ; i < j ; i ++ ) { printf ( "%s\n" , a [ i ] ) ; } return 0 ; }
struct a60 { char ID [ 10 ] ; int age ; } a60 [ 101 ] ; struct u60 { char ID [ 10 ] ; int age ; } u60 [ 100 ] ; void sort ( int n ) { int i ; struct a60 * x ; for ( i = 1 ; i < n ; i ++ ) { for ( x = a60 ; x < a60 + n - i ; x ++ ) { if ( x -> age < ( x + 1 ) -> age ) { a60 [ 100 ] = * x ; * x = * ( x + 1 ) ; * ( x + 1 ) = a60 [ 100 ] ; } } } } int main ( ) { int a = 0 , b = 0 , m , n , q ; char p [ 10 ] ; struct a60 * x ; struct u60 * y ; x = a60 ; y = u60 ; scanf ( "%d" , & n ) ; for ( m = 0 ; m < n ; m ++ ) { scanf ( "%s %d" , p , & q ) ; if ( q >= 60 ) { strcpy ( x -> ID , p ) ; x -> age = q ; x ++ ; a ++ ; } else { strcpy ( y -> ID , p ) ; y -> age = q ; y ++ ; b ++ ; } } sort ( a ) ; for ( x = a60 ; x < a60 + a ; x ++ ) printf ( "%s\n" , x -> ID ) ; for ( y = u60 ; y < u60 + b ; y ++ ) printf ( "%s\n" , y -> ID ) ; return 0 ; }
void main ( ) { int n , i , j , k , t ; int a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; char id [ 100 ] [ 20 ] , temp [ 20 ] , s [ 100 ] [ 20 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s %d" , id [ i ] , & a [ i ] ) ; for ( i = 0 , j = 0 ; i < n ; i ++ ) if ( a [ i ] >= 60 ) { b [ j ] = a [ i ] ; strcpy ( s [ j ] , id [ i ] ) ; j = j + 1 ; } for ( i = 0 ; i < j ; i ++ ) for ( k = 0 ; k < j - i ; k ++ ) if ( b [ k ] < b [ k + 1 ] ) { t = b [ k ] ; b [ k ] = b [ k + 1 ] ; b [ k + 1 ] = t ; strcpy ( temp , s [ k ] ) ; strcpy ( s [ k ] , s [ k + 1 ] ) ; strcpy ( s [ k + 1 ] , temp ) ; } for ( k = 0 ; k < j ; k ++ ) printf ( "%s\n" , s [ k ] ) ; for ( i = 0 ; i < n ; i ++ ) if ( a [ i ] < 60 ) printf ( "%s\n" , id [ i ] ) ; }
struct person { char id [ 10 ] ; int age ; struct person * next ; } ; void main ( ) { int n , i , j ; struct person * head , * ppre , * pnew , * p ; scanf ( "%d" , & n ) ; pnew = ( struct person * ) malloc ( len ) ; scanf ( "%s %d\n" , pnew -> id , & pnew -> age ) ; pnew -> next = NULL ; head = pnew ; for ( i = 2 ; i <= n ; i ++ ) { p = head ; ppre = head ; pnew = ( struct person * ) malloc ( len ) ; scanf ( "%s %d" , pnew -> id , & pnew -> age ) ; pnew -> next = NULL ; if ( ( pnew -> age >= 60 ) && ( pnew -> age > head -> age ) ) { pnew -> next = head ; head = pnew ; } else { if ( pnew -> age >= 60 ) { p = p -> next ; for ( j = 2 ; j < i ; j ++ ) { if ( pnew -> age > p -> age ) { pnew -> next = p ; ppre -> next = pnew ; break ; } p = p -> next ; ppre = ppre -> next ; } if ( pnew -> next == NULL ) ppre -> next = pnew ; } else { while ( p -> next != NULL ) p = p -> next ; p -> next = pnew ; } } } p = head ; for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , p -> id ) ; p = p -> next ; } }
struct patient { char ID [ 11 ] ; int age ; } pa [ 100 ] ; int main ( int argc , char * argv [ ] ) { int n , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , pa [ i ] . ID , & pa [ i ] . age ) ; } struct patient old [ 100 ] ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age >= 60 ) { strcpy ( old [ count ] . ID , pa [ i ] . ID ) ; old [ count ] . age = pa [ i ] . age ; count ++ ; pa [ i ] . age = 0 ; } } int k , j , e ; char ex [ 11 ] ; for ( k = 1 ; k < count ; k ++ ) { for ( j = 0 ; j < count - k ; j ++ ) { if ( old [ j ] . age < old [ j + 1 ] . age ) { e = old [ j + 1 ] . age ; old [ j + 1 ] . age = old [ j ] . age ; old [ j ] . age = e ; strcpy ( ex , old [ j ] . ID ) ; strcpy ( old [ j ] . ID , old [ j + 1 ] . ID ) ; strcpy ( old [ j + 1 ] . ID , ex ) ; } } } for ( i = 0 ; i < count ; i ++ ) { printf ( "%s\n" , old [ i ] . ID ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age != 0 ) { printf ( "%s\n" , pa [ i ] . ID ) ; } } return 0 ; }
struct { char ID [ 10 ] ; int nian ; } patient [ 100 ] , old [ 100 ] , qita [ 100 ] , temp ; int main ( ) { int n , i , k , e , num , j ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , patient [ i ] . ID , & patient [ i ] . nian ) ; } num = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . nian >= 60 ) { num = num + 1 ; } } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . nian >= 60 ) { old [ k ] = patient [ i ] ; k = k + 1 ; } } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . nian < 60 ) { qita [ k ] = patient [ i ] ; k = k + 1 ; } } for ( j = 1 ; j < num ; j ++ ) { for ( k = 0 ; k < num - j ; k ++ ) { if ( old [ k + 1 ] . nian > old [ k ] . nian ) { temp = old [ k + 1 ] ; old [ k + 1 ] = old [ k ] ; old [ k ] = temp ; } } } for ( k = 0 ; k < num ; k ++ ) { printf ( "%s\n" , old [ k ] . ID ) ; } for ( k = 0 ; k < n - num ; k ++ ) { printf ( "%s\n" , qita [ k ] . ID ) ; } return 0 ; }
struct info { char num [ 10 ] ; int age ; } ; struct info1 { char num1 [ 10 ] ; int age1 ; } ; int main ( int argc , char * argv [ ] ) { struct info patient [ 101 ] ; struct info1 old [ 101 ] ; int n ; scanf ( "%d" , & n ) ; int i , j ; for ( i = 0 , j = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , & patient [ i ] . num , & patient [ i ] . age ) ; if ( patient [ i ] . age >= 60 ) { strcpy ( old [ j ] . num1 , patient [ i ] . num ) ; old [ j ] . age1 = patient [ i ] . age ; j ++ ; } } int m = j ; for ( j = 1 ; j < m ; j ++ ) { for ( i = 0 ; i < m - j ; i ++ ) { if ( old [ i ] . age1 < old [ i + 1 ] . age1 ) { old [ 100 ] = old [ i ] ; old [ i ] = old [ i + 1 ] ; old [ i + 1 ] = old [ 100 ] ; } } } for ( i = 0 ; i < m ; i ++ ) { printf ( "%s\n" , old [ i ] . num1 ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . age < 60 ) { printf ( "%s\n" , patient [ i ] . num ) ; } } return 0 ; }
struct pat { char num [ 10 ] ; int age ; int x ; } p [ 100 ] , P [ 100 ] , s ; int main ( ) { int n , i , j , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , p [ i ] . num , & p [ i ] . age ) ; if ( p [ i ] . age >= 60 ) p [ i ] . x = p [ i ] . age ; else p [ i ] . x = 0 ; } for ( i = 0 ; i < n ; i ++ ) { s . age = - 1 ; s . x = - 1 ; char k [ 10 ] ; for ( j = 0 ; j < n ; j ++ ) { if ( s . x < p [ j ] . x ) { s = p [ j ] ; strcpy ( k , p [ j ] . num ) ; } } P [ i ] = s ; for ( j = 0 ; j < n ; j ++ ) { if ( strcmp ( p [ j ] . num , k ) == 0 ) { p [ j ] . x = - 2 ; break ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , P [ i ] . num ) ; } return 0 ; }
int main ( ) { int n , i ; scanf ( "%d" , & n ) ; struct { char id [ 10 ] ; int age ; } br [ 100 ] , * p , old [ 100 ] , * q ; for ( p = br ; p < br + n ; p ++ ) { scanf ( "%s%d" , & ( p -> id ) , & ( p -> age ) ) ; } q = old ; int js = 0 ; for ( p = br ; p < br + n ; p ++ ) { if ( p -> age >= 60 ) { q -> age = p -> age ; strcpy ( q -> id , p -> id ) ; q ++ ; js ++ ; p -> age = 0 ; } } int max = 0 ; for ( i = 0 ; i < js ; i ++ ) { for ( q = old ; q < old + js ; q ++ ) { if ( q -> age > ( old + max ) -> age ) { max = q - old ; } } printf ( "%s\n" , ( old + max ) -> id ) ; ( old + max ) -> age = 0 ; } for ( p = br ; p < br + n ; p ++ ) { if ( p -> age != 0 ) { printf ( "%s\n" , p -> id ) ; } } return 0 ; }
struct sick { char num [ 10 ] ; int age ; } ; int main ( ) { int i , j , n ; int s ; char swap [ 10 ] ; struct sick all [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , & all [ i ] . num ) ; scanf ( "%d" , & all [ i ] . age ) ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = i ; j > 0 ; j -- ) { if ( all [ j ] . age >= 60 && all [ j ] . age > all [ j - 1 ] . age ) { s = all [ j ] . age ; all [ j ] . age = all [ j - 1 ] . age ; all [ j - 1 ] . age = s ; strcpy ( swap , all [ j ] . num ) ; strcpy ( all [ j ] . num , all [ j - 1 ] . num ) ; strcpy ( all [ j - 1 ] . num , swap ) ; } else { break ; } } } for ( i = 0 ; i < n ; i ++ ) { puts ( all [ i ] . num ) ; } return 0 ; }
struct patient { char num [ 10 ] ; int age ; } pat [ 100 ] ; int main ( ) { int n , i , m , k , f , j ; char e [ 10 ] ; m = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , & pat [ i ] . num , & pat [ i ] . age ) ; if ( pat [ i ] . age >= 60 ) { strcpy ( e , pat [ i ] . num ) ; f = pat [ i ] . age ; for ( k = i ; k > m ; k -- ) { strcpy ( pat [ k ] . num , pat [ k - 1 ] . num ) ; } strcpy ( pat [ m ] . num , e ) ; pat [ m ] . age = f ; m ++ ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = 0 ; k < i ; k ++ ) { if ( pat [ i ] . age > pat [ k ] . age ) { f = pat [ i ] . age ; strcpy ( e , pat [ i ] . num ) ; for ( j = i ; j > k ; j -- ) { pat [ j ] . age = pat [ j - 1 ] . age ; strcpy ( pat [ j ] . num , pat [ j - 1 ] . num ) ; } pat [ k ] . age = f ; strcpy ( pat [ k ] . num , e ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , pat [ i ] . num ) ; } return 0 ; }
int main ( ) { int age [ N ] , n , i , k ; char id [ N ] [ LEN ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , id [ i ] , & ( age [ i ] ) ) ; } int e ; char e_id [ LEN ] ; for ( k = 1 ; k <= n ; k ++ ) { for ( i = 0 ; i < n - k ; i ++ ) { if ( ( age [ i ] < age [ i + 1 ] && age [ i ] >= 60 ) || ( age [ i ] < 60 && age [ i + 1 ] >= 60 ) ) { e = age [ i + 1 ] ; strcpy ( e_id , id [ i + 1 ] ) ; age [ i + 1 ] = age [ i ] ; strcpy ( id [ i + 1 ] , id [ i ] ) ; age [ i ] = e ; strcpy ( id [ i ] , e_id ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , id [ i ] ) ; } return 0 ; }
int main ( ) { struct patient { char ID [ 10 ] ; int a ; } p [ 100 ] , pr ; int np , i , k ; scanf ( "%d" , & np ) ; for ( i = 0 ; i < np ; i ++ ) { scanf ( "%s %d" , p [ i ] . ID , & p [ i ] . a ) ; } for ( i = 0 ; i < np ; i ++ ) { for ( k = np - 1 ; k > i ; k -- ) { if ( p [ k ] . a > p [ k - 1 ] . a && p [ k ] . a >= 60 ) { pr = p [ k ] ; p [ k ] = p [ k - 1 ] ; p [ k - 1 ] = pr ; } } printf ( "%s\n" , p [ i ] . ID ) ; } return 0 ; }
struct patient { char id [ 20 ] ; int age ; } pat [ 100 ] ; int main ( ) { int i , k , n , e ; int ex [ 100 ] , ex1 [ 100 ] ; i = 0 ; k = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%s%d" , & ( pat [ i ] . id ) , & ( pat [ i ] . age ) ) ; ex [ i ] = pat [ i ] . age ; ex1 [ i ] = i + 1 ; } for ( k = n - 1 ; k >= 1 ; k -- ) { for ( i = n - 1 ; i >= n - k ; i -- ) { if ( ex [ i ] > ex [ i - 1 ] && ex [ i ] >= 60 ) { e = ex [ i ] ; ex [ i ] = ex [ i - 1 ] ; ex [ i - 1 ] = e ; e = ex1 [ i ] ; ex1 [ i ] = ex1 [ i - 1 ] ; ex1 [ i - 1 ] = e ; } } } for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( ex [ i ] >= 60 ) { printf ( "%s\n" , pat [ ex1 [ i ] - 1 ] . id ) ; } } for ( i = 0 ; i <= n - 1 ; i ++ ) { if ( ex [ i ] < 60 ) { printf ( "%s\n" , pat [ ex1 [ i ] - 1 ] . id ) ; } } return 0 ; }
void main ( ) { int n , i , j = 0 , p = 0 , q , w ; struct patient { int age ; char b [ 10 ] ; } ; struct patient c [ 100 ] , d [ 100 ] , e [ 100 ] , f [ 100 ] , g ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , c [ i ] . b ) ; scanf ( "%d" , & c [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( c [ i ] . age >= 60 ) { d [ j ] = c [ i ] ; j = j + 1 ; } else { e [ p ] = c [ i ] ; p = p + 1 ; } } w = j - 1 ; for ( j = 1 ; j <= w ; j ++ ) { q = w ; for ( ; q >= j ; q -- ) { if ( d [ q ] . age > d [ q - 1 ] . age ) { g = d [ q ] ; d [ q ] = d [ q - 1 ] ; d [ q - 1 ] = g ; } } } for ( j = 0 ; j < w + 1 ; j ++ ) printf ( "%s\n" , d [ j ] . b ) ; for ( j = 0 ; j < p ; j ++ ) printf ( "%s\n" , e [ j ] . b ) ; }
struct { char id [ 11 ] ; int nianling ; } bing [ 100 ] ; int main ( ) { int n , i , j , e ; int youxian [ 100 ] = { 0 } ; int zhengchang [ 100 ] = { 0 } ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , bing [ i ] . id , & bing [ i ] . nianling ) ; if ( bing [ i ] . nianling >= 60 ) youxian [ i ] = bing [ i ] . nianling ; else zhengchang [ i ] = bing [ i ] . nianling ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { if ( youxian [ j ] < youxian [ j + 1 ] ) { e = youxian [ j + 1 ] ; youxian [ j + 1 ] = youxian [ j ] ; youxian [ j ] = e ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( bing [ j ] . nianling == youxian [ i ] ) { printf ( "%s\n" , bing [ j ] . id ) ; bing [ j ] . nianling = - 1 ; break ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( bing [ j ] . nianling == zhengchang [ i ] ) { printf ( "%s\n" , bing [ j ] . id ) ; bing [ j ] . nianling = - 1 ; break ; } } } return 0 ; }
struct patient { char ID [ 10 ] ; int age ; int a6 ; char Id [ 10 ] ; } ; void main ( ) { struct patient bin [ N ] ; int n , mid ; char s [ 10 ] ; int i = 0 , j = 0 , k = 0 ; char c [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s%d" , & bin [ i ] . ID , & bin [ i ] . age ) ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] . age >= 60 ) { bin [ j ] . a6 = bin [ i ] . age ; strcpy ( bin [ j ] . Id , bin [ i ] . ID ) ; j ++ ; bin [ i ] . age = 0 ; } } for ( k = 1 ; k < j ; k ++ ) { for ( i = 0 ; i < j - k ; i ++ ) if ( bin [ i ] . a6 < bin [ i + 1 ] . a6 ) { mid = bin [ i ] . a6 ; bin [ i ] . a6 = bin [ i + 1 ] . a6 ; bin [ i + 1 ] . a6 = mid ; strcpy ( c , bin [ i ] . Id ) ; strcpy ( s , bin [ i + 1 ] . Id ) ; strcpy ( bin [ i + 1 ] . Id , c ) ; strcpy ( bin [ i ] . Id , s ) ; } } for ( i = 0 ; i < j ; i ++ ) printf ( "%s\n" , bin [ i ] . Id ) ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] . age != 0 ) printf ( "%s\n" , bin [ i ] . ID ) ; } }
struct student { char num [ 10 ] ; int age ; } line [ 100 ] ; void main ( ) { int n , i , j , k , temp = 0 , m , e ; scanf ( "%d" , & n ) ; int a [ 100 ] = { 0 } , b [ 100 ] = { 0 } ; char s [ 100 ] [ 10 ] , y [ 100 ] [ 10 ] ; char exchange [ 10 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , line [ i ] . num , & line [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( line [ i ] . age >= 60 ) { temp ++ ; } } j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( line [ i ] . age >= 60 ) { strcpy ( s [ j ] , line [ i ] . num ) ; b [ j ] = line [ i ] . age ; j ++ ; } } for ( j = 0 ; j < temp ; j ++ ) { for ( k = 0 ; k < temp - j ; k ++ ) { if ( b [ k ] < b [ k + 1 ] ) { e = b [ k ] ; b [ k ] = b [ k + 1 ] ; b [ k + 1 ] = e ; strcpy ( exchange , s [ k ] ) ; strcpy ( s [ k ] , s [ k + 1 ] ) ; strcpy ( s [ k + 1 ] , exchange ) ; } } } for ( j = 0 ; j < temp ; j ++ ) { printf ( "%s\n" , s [ j ] ) ; } m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( line [ i ] . age < 60 ) { strcpy ( y [ m ] , line [ i ] . num ) ; m ++ ; } } for ( j = 0 ; j < n - temp ; j ++ ) { printf ( "%s\n" , y [ j ] ) ; } }
struct mao { char name [ 10 ] ; int age ; } pat [ 100 ] ; int main ( ) { int max ( int age [ 100 ] , int n ) ; int n , i , k ; int age [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , pat [ i ] . name , & pat [ i ] . age ) ; if ( pat [ i ] . age >= 60 ) age [ i ] = 200 + pat [ i ] . age ; else age [ i ] = 101 - i ; } for ( i = 0 ; i < n ; i ++ ) { k = max ( age , n ) ; printf ( "%s\n" , pat [ k ] . name ) ; } return 0 ; } int max ( int age [ 100 ] , int n ) { int a = 0 , j = 0 , k = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( age [ j ] > a ) { a = age [ j ] ; k = j ; } } age [ k ] = 0 ; return k ; }
void main ( ) { int n , i , j , age [ 100 ] , dengji [ 100 ] , p , t ; char id [ 100 ] [ 10 ] , c ; int jishuqi = 0 , k ; int l , m ; scanf ( "%d" , & n ) ; for ( i = 0 ; i <= n - 1 ; i ++ ) { scanf ( "%s%d" , id [ i ] , & age [ i ] ) ; dengji [ i ] = i ; } for ( i = 0 ; i <= n - 2 ; i ++ ) for ( j = 0 ; j <= n - 2 - i ; j ++ ) { if ( age [ j ] < age [ j + 1 ] ) { t = age [ j ] ; age [ j ] = age [ j + 1 ] ; age [ j + 1 ] = t ; k = dengji [ j ] ; dengji [ j ] = dengji [ j + 1 ] ; dengji [ j + 1 ] = k ; for ( p = 0 ; p <= 9 ; p ++ ) { c = id [ j ] [ p ] ; id [ j ] [ p ] = id [ j + 1 ] [ p ] ; id [ j + 1 ] [ p ] = c ; } } if ( age [ j ] == age [ j + 1 ] ) { if ( dengji [ j ] > dengji [ j + 1 ] ) { k = dengji [ j ] ; dengji [ j ] = dengji [ j + 1 ] ; dengji [ j + 1 ] = k ; for ( p = 0 ; p <= 9 ; p ++ ) { c = id [ j ] [ p ] ; id [ j ] [ p ] = id [ j + 1 ] [ p ] ; id [ j + 1 ] [ p ] = c ; } } } } for ( i = 0 ; i <= n - 2 ; i ++ ) for ( j = 0 ; j <= n - 2 - i ; j ++ ) { if ( age [ j ] < 60 ) { if ( dengji [ j ] > dengji [ j + 1 ] ) { k = dengji [ j ] ; dengji [ j ] = dengji [ j + 1 ] ; dengji [ j + 1 ] = k ; t = age [ j ] ; age [ j ] = age [ j + 1 ] ; age [ j + 1 ] = t ; for ( p = 0 ; p <= 9 ; p ++ ) { c = id [ j ] [ p ] ; id [ j ] [ p ] = id [ j + 1 ] [ p ] ; id [ j + 1 ] [ p ] = c ; } } } } for ( i = 0 ; i <= n - 1 ; i ++ ) printf ( "%s\n" , id [ i ] ) ; }
struct patient { char A [ 10 ] ; int age ; } ; int main ( ) { int i , n , k , max , count ; struct patient inter ; struct patient * p ; scanf ( "%d" , & n ) ; struct patient * sick = ( struct patient * ) malloc ( sizeof ( struct patient ) * n ) ; struct patient * waitlist = ( struct patient * ) malloc ( sizeof ( struct patient ) * n ) ; count = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , sick [ i ] . A , & sick [ i ] . age ) ; } p = waitlist ; for ( i = 0 ; i < n ; i ++ ) { if ( sick [ i ] . age >= 60 ) { * p = sick [ i ] ; p ++ ; count ++ ; } } for ( i = 0 ; i < n ; i ++ ) { if ( sick [ i ] . age < 60 ) { * p = sick [ i ] ; p ++ ; } } for ( i = 1 ; i < count ; i ++ ) { for ( k = 0 ; k < count - i ; k ++ ) { if ( waitlist [ k ] . age < waitlist [ k + 1 ] . age ) { inter = waitlist [ k + 1 ] ; waitlist [ k + 1 ] = waitlist [ k ] ; waitlist [ k ] = inter ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , waitlist [ i ] . A ) ; } return 0 ; }
struct patient { int age ; char id [ 12 ] ; } ; void swap ( struct patient * a , struct patient * b ) { struct patient tmp ; tmp = * a ; * a = * b ; * b = tmp ; } int main ( ) { int n , i , j = 0 , k = 0 , l ; scanf ( "%d" , & n ) ; struct patient tmp ; struct patient young [ 120 ] ; struct patient old [ 120 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , tmp . id ) ; scanf ( "%d" , & tmp . age ) ; if ( tmp . age >= 60 ) old [ j ++ ] = tmp ; else young [ k ++ ] = tmp ; } for ( i = 0 ; i < j ; i ++ ) { for ( l = 0 ; l < j - i - 1 ; l ++ ) { if ( old [ l ] . age < old [ l + 1 ] . age ) swap ( & old [ l ] , & old [ l + 1 ] ) ; } } for ( i = 0 ; i < j ; i ++ ) printf ( "%s\n" , old [ i ] . id ) ; for ( i = 0 ; i < k ; i ++ ) printf ( "%s\n" , young [ i ] . id ) ; return 0 ; }
struct Patient { char id [ 10 ] ; int age ; } a [ 100 ] , e , b [ 100 ] ; int main ( ) { int n , J ; scanf ( "%d" , & n ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , a [ i ] . id , & a [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n - i ; j ++ ) { if ( a [ j ] . id > a [ j + 1 ] . id ) { e = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = e ; } } } j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] . age >= 60 ) { b [ j ] = a [ i ] ; j ++ ; } } J = j ; for ( j = 0 ; j < J ; j ++ ) { for ( i = 0 ; i < J - j ; i ++ ) { if ( b [ i ] . age < b [ i + 1 ] . age ) { e = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = e ; } } } for ( j = 0 ; j < J ; j ++ ) { printf ( "%s\n" , b [ j ] . id ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] . age < 60 ) { printf ( "%s\n" , a [ i ] . id ) ; } } return 0 ; }
struct patient { char id [ 10 ] ; int old ; } pt [ 100 ] ; main ( ) { int n , i , j , k , e , h ; int yx [ 100 ] , byx [ 100 ] ; scanf ( "%d" , & n ) ; j = 0 ; k = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , & pt [ i ] . id , & pt [ i ] . old ) ; if ( pt [ i ] . old >= 60 ) { yx [ j ] = i ; j ++ ; } else { byx [ k ] = i ; k ++ ; } } for ( i = 0 ; i < j ; i ++ ) { for ( h = 0 ; h < j - 1 ; h ++ ) { if ( pt [ yx [ h ] ] . old < pt [ yx [ h + 1 ] ] . old ) { e = yx [ h ] ; yx [ h ] = yx [ h + 1 ] ; yx [ h + 1 ] = e ; } } } for ( i = 0 ; i < j ; i ++ ) { printf ( "%s\n" , pt [ yx [ i ] ] . id ) ; } for ( i = 0 ; i < k ; i ++ ) { printf ( "%s\n" , pt [ byx [ i ] ] . id ) ; } }
int main ( ) { int sixty [ 100 ] ; int n , i , j , a ; struct patient { char num [ 11 ] ; int age ; } peo [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , peo [ i ] . num , & peo [ i ] . age ) ; if ( peo [ i ] . age >= 60 ) { sixty [ i ] = peo [ i ] . age ; } else { sixty [ i ] = 0 ; } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( i = n - 1 ; i > j ; i -- ) { if ( sixty [ i - 1 ] < sixty [ i ] ) { a = sixty [ i - 1 ] ; sixty [ i - 1 ] = sixty [ i ] ; sixty [ i ] = a ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( sixty [ i ] == peo [ j ] . age && sixty [ i ] != sixty [ i - 1 ] ) { printf ( "%s\n" , peo [ j ] . num ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( peo [ i ] . age < 60 ) { printf ( "%s\n" , peo [ i ] . num ) ; } } return 0 ; }
struct ill { char num [ 20 ] ; int age ; int turn ; struct ill * next ; } ; void run ( struct ill * head , int age , int turn , char * num ) { struct ill * pre , * p , * s ; s = ( struct ill * ) malloc ( sizeof ( struct ill ) ) ; pre = head ; p = pre -> next ; strcpy ( s -> num , num ) ; s -> turn = turn ; s -> age = age ; for ( ; p != NULL ; ) { pre = p ; p = p -> next ; } pre -> next = s ; s -> next = p ; } int main ( ) { int i , j , k , age , turn , m , n ; char * num ; void run ( struct ill * head , int age , int turn , char * num ) ; num = ( char * ) malloc ( 20 * sizeof ( char ) ) ; struct ill * head , * p , * s , * pre ; head = ( struct ill * ) malloc ( sizeof ( struct ill ) ) ; head -> next = NULL ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , num , & age ) ; turn = i ; run ( head , age , turn , num ) ; } k = 0 ; for ( p = head -> next ; p != NULL ; p = p -> next ) { if ( p -> age >= 60 ) { k ++ ; } } p = head -> next ; m = 100 ; if ( k == 0 ) { for ( i = 0 ; i < n ; i ++ ) { p = head -> next ; for ( ; p != NULL ; ) { if ( p -> turn == i ) { puts ( p -> num ) ; break ; } } } } else if ( k == n ) { for ( i = 0 ; i < n ; i ++ ) { p = head -> next ; m = 0 ; j = 100 ; for ( ; p != NULL ; ) { if ( p -> age > m ) { m = p -> age ; j = p -> turn ; } else if ( p -> age == m ) { if ( p -> turn < j ) { m = p -> age ; j = p -> turn ; } } p = p -> next ; } pre = head ; p = head -> next ; for ( ; p != NULL ; ) { if ( ( p -> age == m ) && ( p -> turn == j ) ) { puts ( p -> num ) ; pre -> next = p -> next ; break ; } else { pre = p ; p = p -> next ; } } } } else { for ( i = 0 ; i < k ; i ++ ) { p = head -> next ; m = 0 ; j = 100 ; for ( ; p != NULL ; ) { if ( p -> age > m ) { m = p -> age ; j = p -> turn ; } else if ( p -> age == m ) { if ( p -> turn < j ) { m = p -> age ; j = p -> turn ; } } p = p -> next ; } pre = head ; p = head -> next ; for ( ; p != NULL ; ) { if ( ( p -> age == m ) && ( p -> turn == j ) ) { puts ( p -> num ) ; pre -> next = p -> next ; break ; } else { pre = p ; p = p -> next ; } } } for ( i = 0 ; i < n - k ; i ++ ) { m = 100 ; p = head -> next ; for ( ; p != NULL ; ) { if ( p -> turn < m ) { m = p -> turn ; } p = p -> next ; } p = head -> next ; for ( ; p != NULL ; ) { if ( p -> turn == m ) { puts ( p -> num ) ; p -> turn = 100 ; break ; } else { p = p -> next ; } } } } return 0 ; }
struct { int age [ 100 ] ; char ID [ 100 ] [ 11 ] ; } patient , * ppatient ; int main ( ) { ppatient = & patient ; int n , i , j , k , num , m = 0 ; char id [ 11 ] , ID_1 [ 100 ] [ 11 ] , age_1 [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , patient . ID [ i ] , & patient . age [ i ] ) ; } j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( ( * ppatient ) . age [ i ] >= 60 ) { strcpy ( ID_1 [ j ] , ( * ppatient ) . ID [ i ] ) ; age_1 [ j ] = ( * ppatient ) . age [ i ] ; m += 1 ; j ++ ; } } for ( j = m - 1 ; j > 0 ; j -- ) { for ( k = 0 ; k < j ; k ++ ) { if ( age_1 [ k ] < age_1 [ k + 1 ] ) { strcpy ( id , ID_1 [ k + 1 ] ) ; strcpy ( ID_1 [ k + 1 ] , ID_1 [ k ] ) ; strcpy ( ID_1 [ k ] , id ) ; num = age_1 [ k + 1 ] ; age_1 [ k + 1 ] = age_1 [ k ] ; age_1 [ k ] = num ; } } } for ( i = 0 ; i < m ; i ++ ) { printf ( "%s\n" , ID_1 [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( ( * ppatient ) . age [ i ] < 60 ) printf ( "%s\n" , ( * ppatient ) . ID [ i ] ) ; } return 0 ; }
struct h { char name [ 11 ] ; int age ; } ; void main ( ) { int i , k , n ; scanf ( "%d" , & n ) ; struct h p [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , p [ i ] . name , & p [ i ] . age ) ; } for ( k = 100 ; k > 59 ; k -- ) { for ( i = 0 ; i < n ; i ++ ) { if ( k == p [ i ] . age ) printf ( "%s\n" , p [ i ] . name ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] . age < 60 ) printf ( "%s\n" , p [ i ] . name ) ; } }
struct patient { char name [ 10 ] ; int age ; } p [ 100 ] , e , old [ 100 ] , young [ 100 ] ; int main ( ) { int n , i , j = 0 , k = 0 , o = - 1 , y = - 1 ; scanf ( "%d" , & n ) ; struct patient p [ 100 ] , old [ 100 ] , young [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , p [ i ] . name , & p [ i ] . age ) ; if ( ( p [ i ] . age ) >= 60 ) { o ++ ; old [ j ] = p [ i ] ; j ++ ; } else { y ++ ; young [ k ] = p [ i ] ; k ++ ; } } for ( i = 120 ; i >= 60 ; i -- ) { for ( j = 0 ; j < o + 1 ; j ++ ) { if ( old [ j ] . age == i ) { printf ( "%s\n" , old [ j ] . name ) ; } } } for ( i = 0 ; i < y + 1 ; i ++ ) { printf ( "%s\n" , young [ i ] . name ) ; } return 0 ; }
struct patient { char ID [ 10 ] ; int age ; } pat [ 100 ] ; int main ( ) { struct patient t ; struct patient num [ 100 ] ; int n , i , j , a = 1 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s%d" , pat [ i ] . ID , & pat [ i ] . age ) ; for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age >= 60 ) { num [ a - 1 ] = pat [ i ] ; a ++ ; } } for ( i = 0 ; i < a - 2 ; i ++ ) { for ( j = 0 ; j < a - 2 - i ; j ++ ) if ( num [ j ] . age < num [ j + 1 ] . age ) { t = num [ j ] ; num [ j ] = num [ j + 1 ] ; num [ j + 1 ] = t ; } } for ( i = 0 ; i < a - 1 ; i ++ ) printf ( "%s\n" , num [ i ] . ID ) ; for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age < 60 ) printf ( "%s\n" , pat [ i ] . ID ) ; } return 0 ; }
main ( ) { int n ; int amount_lao = 0 , amount_yiban = 0 ; char c [ 11 ] ; int shuru ; int i , j , k , s , p ; struct xinxi { char id [ 11 ] ; int age ; } ; struct xinxi laoren [ 100 ] ; struct xinxi common [ 100 ] ; struct xinxi temp ; scanf ( "%d" , & n ) ; for ( p = 0 ; p < n ; p ++ ) { scanf ( "%s %d" , c , & shuru ) ; if ( shuru < 60 ) { strcpy ( common [ amount_yiban ] . id , c ) ; common [ amount_yiban ] . age = shuru ; amount_yiban ++ ; } else if ( shuru >= 60 ) { strcpy ( laoren [ amount_lao ] . id , c ) ; laoren [ amount_lao ] . age = shuru ; amount_lao ++ ; } } for ( i = 0 ; i < amount_lao - 1 ; i ++ ) { for ( j = 0 ; j < amount_lao - i - 1 ; j ++ ) { if ( laoren [ j ] . age < laoren [ j + 1 ] . age ) { strcpy ( temp . id , laoren [ j ] . id ) ; temp . age = laoren [ j ] . age ; strcpy ( laoren [ j ] . id , laoren [ j + 1 ] . id ) ; laoren [ j ] . age = laoren [ j + 1 ] . age ; strcpy ( laoren [ j + 1 ] . id , temp . id ) ; laoren [ j + 1 ] . age = temp . age ; } } } for ( k = 0 ; k < amount_lao ; k ++ ) { puts ( laoren [ k ] . id ) ; printf ( "\n" ) ; } for ( s = 0 ; s < amount_yiban ; s ++ ) { puts ( common [ s ] . id ) ; printf ( "\n" ) ; } getchar ( ) ; getchar ( ) ; }
struct Info { char sID [ 10 ] ; int nAge ; } ; void main ( ) { int i , n , j , l ; struct Info t ; scanf ( "%d" , & n ) ; struct Info patients [ 100 ] ; struct Info overpatients [ 100 ] ; l = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , patients [ i ] . sID , & patients [ i ] . nAge ) ; if ( patients [ i ] . nAge >= 60 ) { overpatients [ l ] = patients [ i ] ; l ++ ; } } for ( i = 0 ; i < l - 1 ; i ++ ) for ( j = 1 ; j < l - i ; j ++ ) { if ( overpatients [ j - 1 ] . nAge < overpatients [ j ] . nAge ) { t = overpatients [ j - 1 ] ; overpatients [ j - 1 ] = overpatients [ j ] ; overpatients [ j ] = t ; } } for ( i = 0 ; i < l ; i ++ ) { printf ( "%s\n" , overpatients [ i ] . sID ) ; } for ( i = 0 ; i < n ; i ++ ) if ( patients [ i ] . nAge < 60 ) { printf ( "%s\n" , patients [ i ] . sID ) ; } }
struct bing { char id [ 10 ] ; int age ; } person [ 100 ] , old [ 100 ] ; main ( ) { int n , i , j = 0 , k , b ; char e [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , person [ i ] . id , & person [ i ] . age ) ; if ( person [ i ] . age >= 60 ) { strcpy ( old [ j ] . id , person [ i ] . id ) ; old [ j ] . age = person [ i ] . age ; j = j + 1 ; } } for ( k = 1 ; k < j ; k ++ ) for ( i = 0 ; i < j - k ; i ++ ) { if ( old [ i ] . age < old [ i + 1 ] . age ) { strcpy ( e , old [ i ] . id ) ; strcpy ( old [ i ] . id , old [ i + 1 ] . id ) ; strcpy ( old [ i + 1 ] . id , e ) ; b = old [ i ] . age ; old [ i ] . age = old [ i + 1 ] . age ; old [ i + 1 ] . age = b ; } } for ( i = 0 ; i < j ; i ++ ) printf ( "%s\n" , old [ i ] . id ) ; for ( i = 0 ; i < n ; i ++ ) if ( person [ i ] . age < 60 ) printf ( "%s\n" , person [ i ] . id ) ; return 0 ; }
struct student { char num [ 10 ] ; int age ; } stu [ 100 ] ; int main ( ) { char c ; int n , i , j ; struct student * pstu = stu , e ; pstu = & stu [ 0 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , stu [ i ] . num , & stu [ i ] . age ) ; } for ( j = 0 ; j < n ; j ++ ) { if ( stu [ j ] . age >= 60 ) { for ( i = j ; i > 0 ; i -- ) { if ( stu [ i ] . age > stu [ i - 1 ] . age ) { e = * ( pstu + i ) ; * ( pstu + i ) = * ( pstu + i - 1 ) ; * ( pstu - 1 + i ) = e ; } } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , ( pstu + i ) -> num ) ; } return 0 ; }
int main ( ) { struct Patient { char ID [ 10 ] ; int age ; } patient [ 100 ] , patient2 [ 100 ] ; struct Patient t ; int n , i = 0 , j = 0 , k = 0 , num ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s %d" , patient [ i ] . ID , & patient [ i ] . age ) ; for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . age >= 60 ) { patient2 [ j ] = patient [ i ] ; j ++ ; } } num = j ; for ( i = 0 ; i < n ; i ++ ) { if ( patient [ i ] . age < 60 ) { patient2 [ j ] = patient [ i ] ; j ++ ; } } for ( k = 1 ; k < num ; k ++ ) { for ( i = 0 ; i < num - k ; i ++ ) { if ( patient2 [ i + 1 ] . age > patient2 [ i ] . age ) { t = patient2 [ i + 1 ] ; patient2 [ i + 1 ] = patient2 [ i ] ; patient2 [ i ] = t ; } } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , patient2 [ i ] . ID ) ; return 0 ; }
struct patient { char No [ 10 ] ; int age ; } grp1 [ 100 ] , grp2 [ 100 ] , grp3 [ 100 ] ; int main ( ) { int n ; scanf ( "%d" , & n ) ; int i ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , & grp1 [ i ] . No , & grp1 [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { grp2 [ i ] . age = - 1 ; grp3 [ i ] . age = - 1 ; } for ( i = 0 ; i < n ; i ++ ) { if ( grp1 [ i ] . age >= 60 ) { strcpy ( grp2 [ i ] . No , grp1 [ i ] . No ) ; grp2 [ i ] . age = grp1 [ i ] . age ; } if ( grp1 [ i ] . age < 60 ) { strcpy ( grp3 [ i ] . No , grp1 [ i ] . No ) ; grp3 [ i ] . age = grp1 [ i ] . age ; } } char y [ 10 ] ; int x ; int k , m ; for ( k = 1 ; k < n ; k ++ ) { for ( m = 0 ; m < n - k ; m ++ ) { if ( grp2 [ m ] . age < grp2 [ m + 1 ] . age ) { x = grp2 [ m + 1 ] . age ; grp2 [ m + 1 ] . age = grp2 [ m ] . age ; grp2 [ m ] . age = x ; strcpy ( y , grp2 [ m + 1 ] . No ) ; strcpy ( grp2 [ m + 1 ] . No , grp2 [ m ] . No ) ; strcpy ( grp2 [ m ] . No , y ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( grp2 [ i ] . age != - 1 ) printf ( "%s\n" , grp2 [ i ] . No ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( grp3 [ i ] . age != - 1 ) printf ( "%s\n" , grp3 [ i ] . No ) ; } return 0 ; }
struct patient { char id [ 10 ] ; int age ; struct patient * next ; } ; int n ; struct patient * creat ( int x ) { struct patient * head ; struct patient * p1 , * p2 ; n = 0 ; p1 = p2 = ( struct patient * ) malloc ( LEN ) ; scanf ( "%s %d\n" , p1 -> id , & p1 -> age ) ; head = NULL ; while ( n != x ) { n = n + 1 ; if ( n == 1 ) head = p1 ; else p2 -> next = p1 ; p2 = p1 ; p1 = ( struct patient * ) malloc ( LEN ) ; scanf ( "%s %d\n" , p1 -> id , & p1 -> age ) ; } p2 -> next = NULL ; return ( head ) ; } void main ( ) { int m , i , j , v , t , * b ; struct patient * head , * p1 ; b = ( int * ) malloc ( 100 * sizeof ( int ) ) ; scanf ( "%d\n" , & m ) ; head = creat ( m ) ; p1 = head ; for ( i = 0 ; i < m ; i ++ ) { * ( b + i ) = p1 -> age ; p1 = p1 -> next ; } for ( j = 0 ; j < m - 1 ; j ++ ) for ( i = 0 ; i < m - 1 - j ; i ++ ) if ( * ( b + i ) < * ( b + i + 1 ) ) { t = * ( b + i ) ; * ( b + i ) = * ( b + i + 1 ) ; * ( b + i + 1 ) = t ; } for ( i = 0 ; i < m ; i ++ ) if ( * ( b + i ) < 60 ) { v = i ; break ; } p1 = head ; for ( j = 0 ; j < v ; j ++ ) { p1 = head ; while ( p1 != NULL ) { if ( p1 -> age == * ( b + j ) && ( j == 0 || * ( b + j ) != * ( b + j - 1 ) ) ) printf ( "%s\n" , p1 -> id ) ; p1 = p1 -> next ; } } p1 = head ; while ( p1 != NULL ) { if ( p1 -> age < 60 ) printf ( "%s\n" , p1 -> id ) ; p1 = p1 -> next ; } }
struct kb { char ID [ 10 ] ; int nl ; } kbr [ 100 ] , lnr [ 100 ] , ln ; int main ( ) { int n , i , k = 0 , l ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , & kbr [ i ] . ID , & kbr [ i ] . nl ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( kbr [ i ] . nl >= 60 ) { strcpy ( lnr [ k ] . ID , kbr [ i ] . ID ) ; lnr [ k ] . nl = kbr [ i ] . nl ; k ++ ; strcpy ( kbr [ i ] . ID , "000000000" ) ; } } for ( i = 1 ; i < k ; i ++ ) { for ( l = 0 ; l < k - i ; l ++ ) { if ( lnr [ l ] . nl < lnr [ l + 1 ] . nl ) { ln = lnr [ l + 1 ] ; lnr [ l + 1 ] = lnr [ l ] ; lnr [ l ] = ln ; } } } for ( i = 0 ; i < k ; i ++ ) { printf ( "%s\n" , lnr [ i ] . ID ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( strcmp ( kbr [ i ] . ID , "000000000" ) == 1 ) { printf ( "%s\n" , kbr [ i ] . ID ) ; } } return 0 ; }
struct patience { int shunxu ; char id [ 10 ] ; int age ; } pa [ 100 ] ; int main ( ) { int n , i , j , p = 60 , q = 0 ; scanf ( "%d" , & n ) ; int a [ n ] ; int b [ n ] , c [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , & pa [ i ] . id , & pa [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age >= 60 ) { q ++ ; } } do { for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age >= p ) { p = pa [ i ] . age ; } } for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age == p ) { printf ( "%s\n" , pa [ i ] . id ) ; pa [ i ] . age = 0 ; } } p = 60 ; q -- ; } while ( q > 0 ) ; for ( i = 0 ; i < n ; i ++ ) { if ( pa [ i ] . age < 60 && pa [ i ] . age > 0 ) { printf ( "%s\n" , pa [ i ] . id ) ; } } return 0 ; }
struct person { int age ; char num [ 10 ] ; } pat [ 100 ] , old [ 100 ] , you [ 100 ] , exchange ; int main ( ) { int n , i , p , q , result ; int k = 0 , t = 0 ; int temp ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , pat [ i ] . num ) ; scanf ( "%d" , & pat [ i ] . age ) ; if ( pat [ i ] . age >= 60 ) { old [ k ] . age = pat [ i ] . age ; strcpy ( old [ k ] . num , pat [ i ] . num ) ; k ++ ; } else { strcpy ( you [ t ] . num , pat [ i ] . num ) ; t ++ ; } } for ( p = 0 ; p < k ; p ++ ) { for ( q = 0 ; q < k - p ; q ++ ) { if ( old [ q ] . age < old [ q + 1 ] . age ) { exchange . age = old [ q ] . age ; old [ q ] . age = old [ q + 1 ] . age ; old [ q + 1 ] . age = exchange . age ; strcpy ( exchange . num , old [ q ] . num ) ; strcpy ( old [ q ] . num , old [ q + 1 ] . num ) ; strcpy ( old [ q + 1 ] . num , exchange . num ) ; } } } for ( result = 0 ; result < k ; result ++ ) { printf ( "%s\n" , old [ result ] . num ) ; } for ( result = 0 ; result < t ; result ++ ) { printf ( "%s\n" , you [ result ] . num ) ; } return 0 ; }
int main ( ) { char id [ 100 ] [ 10 ] , a [ 10 ] ; int n , i , j ; int age [ 100 ] , b ; scanf ( "%d " , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( " %s %d" , & id [ i ] , & age [ i ] ) ; } for ( j = n - 1 ; j > 0 ; j -- ) { for ( i = n - 1 ; i > 0 ; i -- ) { if ( age [ i ] >= 60 && age [ i - 1 ] >= 60 ) { if ( age [ i ] > age [ i - 1 ] ) { strcpy ( a , id [ i ] ) ; b = age [ i ] ; strcpy ( id [ i ] , id [ i - 1 ] ) ; age [ i ] = age [ i - 1 ] ; strcpy ( id [ i - 1 ] , a ) ; age [ i - 1 ] = b ; } } if ( age [ i ] >= 60 && age [ i - 1 ] < 60 ) { strcpy ( a , id [ i ] ) ; b = age [ i ] ; strcpy ( id [ i ] , id [ i - 1 ] ) ; age [ i ] = age [ i - 1 ] ; strcpy ( id [ i - 1 ] , a ) ; age [ i - 1 ] = b ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( i == 0 ) printf ( "%s" , id [ i ] ) ; else printf ( "\n%s" , id [ i ] ) ; } return 0 ; }
int main ( ) { int n , i , j , t , x [ 110 ] , k , x2 [ 110 ] ; char id [ 110 ] [ 20 ] , temp [ 20 ] , id2 [ 100 ] [ 20 ] ; scanf ( "%d" , & n ) ; k = 0 ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%s %d" , & id [ i ] , & x [ i ] ) ; if ( x [ i ] >= 60 ) { k ++ ; x2 [ k ] = x [ i ] ; strcpy ( id2 [ k ] , id [ i ] ) ; } } for ( i = 1 ; i <= k ; i ++ ) { for ( j = k ; j > i ; j -- ) { if ( x2 [ j ] > x2 [ j - 1 ] ) { t = x2 [ j ] ; x2 [ j ] = x2 [ j - 1 ] ; x2 [ j - 1 ] = t ; strcpy ( temp , id2 [ j ] ) ; strcpy ( id2 [ j ] , id2 [ j - 1 ] ) ; strcpy ( id2 [ j - 1 ] , temp ) ; } } } for ( i = 1 ; i <= k ; i ++ ) { printf ( "%s\n" , id2 [ i ] ) ; } for ( i = 1 ; i <= n ; i ++ ) { if ( x [ i ] < 60 ) printf ( "%s\n" , id [ i ] ) ; } return 0 ; }
struct ID { char idnum [ 100 ] ; int old ; } ; int main ( ) { struct ID ido [ 100 ] ; struct ID idy [ 100 ] ; struct ID id [ 100 ] ; struct ID e ; int n , i , a = 0 , b = 0 , j , l , k ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , id [ i ] . idnum , & ( id [ i ] . old ) ) ; if ( id [ i ] . old >= 60 ) { strcpy ( ido [ a ] . idnum , id [ i ] . idnum ) ; ido [ a ] . old = id [ i ] . old ; a ++ ; } else { strcpy ( idy [ b ] . idnum , id [ i ] . idnum ) ; idy [ b ] . old = id [ i ] . old ; b ++ ; } } for ( k = 1 ; k <= a ; k ++ ) { for ( i = 0 ; i < a - k ; i ++ ) { if ( ido [ i ] . old < ido [ i + 1 ] . old ) { e = ido [ i + 1 ] ; ido [ i + 1 ] = ido [ i ] ; ido [ i ] = e ; } } } for ( j = 0 ; j < a ; j ++ ) { printf ( "%s\n" , ido [ j ] . idnum ) ; } for ( l = 0 ; l < b ; l ++ ) { printf ( "%s\n" , idy [ l ] . idnum ) ; } return 0 ; }
int main ( ) { char a [ 100 ] [ 11 ] , c [ 100 ] [ 11 ] ; int i , j , n , b [ 100 ] , m , e = - 1 , f = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , & a [ i ] , & b [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] >= 60 ) { m = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( b [ i ] < b [ j ] || ( b [ i ] == b [ j ] && i > j ) ) { m ++ ; } } if ( e < m ) e = m ; strcpy ( c [ m ] , a [ i ] ) ; } } e = e + 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( b [ i ] < 60 ) { strcpy ( c [ i - f + e ] , a [ i ] ) ; } else { f ++ ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , c [ i ] ) ; } return 0 ; }
int main ( ) { int n , i , t , k ; scanf ( "%d" , & n ) ; char a [ 100 ] [ 10 ] , c [ 11 ] ; int b [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , a [ i ] , & b [ i ] ) ; if ( b [ i ] < 60 ) { b [ i ] = 0 ; } } for ( k = 1 ; k <= n ; k ++ ) { for ( i = 0 ; i < n - k ; i ++ ) { if ( b [ i ] < b [ i + 1 ] ) { t = b [ i ] ; b [ i ] = b [ i + 1 ] ; b [ i + 1 ] = t ; strcpy ( c , a [ i ] ) ; strcpy ( a [ i ] , a [ i + 1 ] ) ; strcpy ( a [ i + 1 ] , c ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , a [ i ] ) ; } return 0 ; }
int main ( ) { struct patient { char id [ 10 ] ; int a ; } patients [ 100 ] ; struct old { char ido [ 10 ] ; int ao ; } olds [ 100 ] ; struct young { char idy [ 10 ] ; int ay ; } youngs [ 100 ] ; int n , y = 0 , o = 0 , so = 0 , sy = 0 , e ; scanf ( "%d" , & n ) ; char f [ 10 ] ; for ( int j = 0 ; j < n ; j ++ ) { scanf ( "%s" , patients [ j ] . id ) ; scanf ( "%d" , & patients [ j ] . a ) ; if ( patients [ j ] . a < 60 ) { strcpy ( youngs [ y ] . idy , patients [ j ] . id ) ; youngs [ y ] . ay = patients [ j ] . a ; y ++ ; } if ( patients [ j ] . a >= 60 ) { strcpy ( olds [ o ] . ido , patients [ j ] . id ) ; olds [ o ] . ao = patients [ j ] . a ; o ++ ; } } for ( int r = o - 1 ; r > 0 ; r -- ) { for ( int i = 0 ; i < r ; i ++ ) { if ( olds [ i ] . ao < olds [ i + 1 ] . ao ) { e = olds [ i + 1 ] . ao ; olds [ i + 1 ] . ao = olds [ i ] . ao ; olds [ i ] . ao = e ; strcpy ( f , olds [ i + 1 ] . ido ) ; strcpy ( olds [ i + 1 ] . ido , olds [ i ] . ido ) ; strcpy ( olds [ i ] . ido , f ) ; } } } for ( int l = 0 ; l <= o - 1 ; l ++ ) { printf ( "%s\n" , olds [ l ] . ido ) ; } for ( int m = 0 ; m <= y - 1 ; m ++ ) { printf ( "%s\n" , youngs [ m ] . idy ) ; } return 0 ; }
int main ( ) { struct ID { char x [ 100 ] ; int y ; } da [ 100 ] , xiao [ 100 ] , p [ 100 ] , e ; int s , m = 0 , n = 0 ; scanf ( "%d\n" , & s ) ; for ( int i = 0 ; i < s ; i ++ ) { scanf ( "%s %d" , & ( p [ i ] . x ) , & ( p [ i ] . y ) ) ; if ( p [ i ] . y >= 60 ) { da [ m ] = p [ i ] ; m ++ ; } else { xiao [ n ] = p [ i ] ; n ++ ; } } for ( int b = 1 ; b <= m ; b ++ ) { for ( int v = 0 ; v < m - b ; v ++ ) { if ( da [ v ] . y < da [ v + 1 ] . y ) { e = da [ v ] ; da [ v ] = da [ v + 1 ] ; da [ v + 1 ] = e ; } } } int h , f ; for ( int z = 0 ; z < m ; z ++ ) { f = strlen ( da [ z ] . x ) ; for ( int g = 0 ; g < f ; g ++ ) { if ( g != f - 1 ) { printf ( "%c" , da [ z ] . x [ g ] ) ; } else { printf ( "%c\n" , da [ z ] . x [ g ] ) ; } } } for ( int a = 0 ; a < n ; a ++ ) { h = strlen ( xiao [ a ] . x ) ; for ( int j = 0 ; j < h ; j ++ ) { if ( j != h - 1 ) { printf ( "%c" , xiao [ a ] . x [ j ] ) ; } else { printf ( "%c\n" , xiao [ a ] . x [ j ] ) ; } } } return 0 ; }
struct Patient { char id [ 10 ] ; int age ; struct Patient * next ; struct Patient * pre ; } ; struct Patient * creat ( int x ) ; struct Patient * sort ( struct Patient * ) ; void print ( struct Patient * ) ; int main ( ) { struct Patient * patient , * patient2 ; int n , i ; scanf ( "%d" , & n ) ; patient = creat ( n ) ; patient2 = sort ( patient ) ; print ( patient2 ) ; } struct Patient * creat ( int x ) { struct Patient * p1 , * p2 , * head , * p ; int i ; head = NULL ; for ( i = 0 ; i < x ; i ++ ) { p1 = ( struct Patient * ) malloc ( Len ) ; if ( i == 0 ) { head = p1 ; head -> pre = NULL ; } else { p2 -> next = p1 ; p1 -> pre = p2 ; } p2 = p1 ; scanf ( "%s%d" , p1 -> id , & p1 -> age ) ; } p1 -> next = NULL ; return head ; } struct Patient * sort ( struct Patient * head ) { struct Patient * p1 , * p2 , * temp , * p ; temp = ( struct Patient * ) malloc ( Len ) ; p1 = p2 = head ; while ( p1 ) { if ( p1 -> age >= 60 ) { p2 = p1 -> next ; while ( p2 ) { if ( p2 -> age > p1 -> age ) { temp -> age = p2 -> age ; strcpy ( temp -> id , p2 -> id ) ; p = p2 ; while ( p -> pre != p1 ) { strcpy ( p -> id , p -> pre -> id ) ; p -> age = p -> pre -> age ; p = p -> pre ; } strcpy ( p -> id , p1 -> id ) ; p -> age = p1 -> age ; p1 -> age = temp -> age ; strcpy ( p1 -> id , temp -> id ) ; } p2 = p2 -> next ; } } p1 = p1 -> next ; } return head ; } void print ( struct Patient * head ) { struct Patient * p1 , * p2 , * p ; p = head ; while ( p ) { if ( p -> age >= 60 ) { printf ( "%s\n" , p -> id ) ; } p = p -> next ; } p = head ; while ( p ) { if ( p -> age < 60 ) { printf ( "%s\n" , p -> id ) ; } p = p -> next ; } }
struct patient { char id [ 10 ] ; int age ; } p [ 100 ] , old [ 100 ] , temp ; void main ( ) { int i , j , n , count = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , p [ i ] . id ) ; scanf ( "%d" , & p [ i ] . age ) ; if ( p [ i ] . age >= 60 ) { old [ count ] = p [ i ] ; count ++ ; } } for ( i = 0 ; i < count ; i ++ ) { for ( j = 0 ; j < count - i ; j ++ ) { if ( old [ j + 1 ] . age > old [ j ] . age ) { temp = old [ j ] ; old [ j ] = old [ j + 1 ] ; old [ j + 1 ] = temp ; } } } for ( i = 0 ; i < count ; i ++ ) { printf ( "%s\n" , old [ i ] . id ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] . age < 60 ) { printf ( "%s\n" , p [ i ] . id ) ; } } }
int main ( ) { int n , i , j = 0 , k = 0 , a , e , f , b ; char id [ N ] [ 11 ] , ido [ N ] [ 11 ] , idy [ N ] [ 11 ] , m [ 11 ] ; int nl [ N ] , nlo [ N ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , id [ i ] , & nl [ i ] ) ; if ( nl [ i ] < 60 ) { strcpy ( idy [ j ] , id [ i ] ) ; j ++ ; } if ( nl [ i ] >= 60 ) { nlo [ k ] = nl [ i ] ; strcpy ( ido [ k ] , id [ i ] ) ; k ++ ; } } for ( a = 1 ; a <= k ; a ++ ) { for ( b = 0 ; b < k - a ; b ++ ) { if ( nlo [ b ] < nlo [ b + 1 ] ) { e = nlo [ b + 1 ] ; nlo [ b + 1 ] = nlo [ b ] ; nlo [ b ] = e ; strcpy ( m , ido [ b + 1 ] ) ; strcpy ( ido [ b + 1 ] , ido [ b ] ) ; strcpy ( ido [ b ] , m ) ; } } } for ( f = 0 ; f < k ; f ++ ) { puts ( ido [ f ] ) ; } for ( f = 0 ; f < j ; f ++ ) { puts ( idy [ f ] ) ; } return 0 ; }
int main ( ) { int n , i , t ; int u = 0 , k = 0 ; int a [ N ] , b [ N ] ; char s [ N ] [ 10 ] , h [ N ] [ 10 ] , j [ N ] [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , & s [ i ] , & a [ i ] ) ; if ( a [ i ] >= 60 ) { b [ u ] = a [ i ] ; strcpy ( h [ u ] , s [ i ] ) ; u ++ ; } else { strcpy ( j [ k ] , s [ i ] ) ; k ++ ; } } for ( i = u - 1 ; i > 0 ; i -- ) { for ( t = 0 ; t < i ; t ++ ) { if ( b [ t ] < b [ t + 1 ] ) { int f ; f = b [ t ] ; b [ t ] = b [ t + 1 ] ; b [ t + 1 ] = f ; char tmp [ 10 ] ; strcpy ( tmp , h [ t ] ) ; strcpy ( h [ t ] , h [ t + 1 ] ) ; strcpy ( h [ t + 1 ] , tmp ) ; } } } for ( i = 0 ; i < u ; i ++ ) printf ( "%s\n" , h [ i ] ) ; for ( t = 0 ; t < k ; t ++ ) printf ( "%s\n" , j [ t ] ) ; return 0 ; }
int main ( ) { int i , a , n , e , sz [ 100 ] , sx [ 100 ] = { 0 } ; char st [ 100 ] [ 11 ] , sa [ 11 ] , sd [ 100 ] [ 11 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , & st [ i ] ) ; scanf ( "%d" , & sz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] >= 60 ) { sx [ i ] = sz [ i ] ; strcpy ( sd [ i ] , st [ i ] ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( a = 0 ; a < n - i ; a ++ ) { if ( sx [ a ] < sx [ a + 1 ] ) { e = sx [ a ] ; sx [ a ] = sx [ a + 1 ] ; sx [ a + 1 ] = e ; strcpy ( sa , sd [ a ] ) ; strcpy ( sd [ a ] , sd [ a + 1 ] ) ; strcpy ( sd [ a + 1 ] , sa ) ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sx [ i ] >= 60 ) puts ( sd [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( sz [ i ] < 60 ) puts ( st [ i ] ) ; } return 0 ; }
int main ( ) { int a [ 100 ] , e [ 100 ] , f [ 100 ] ; char c [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] , d [ 100 ] [ 100 ] , x [ 100 ] ; int n , p = - 1 , q = - 1 , k , z , i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , c [ i ] , & a [ i ] ) ; if ( a [ i ] >= 60 ) { p ++ ; e [ p ] = a [ i ] ; strcpy ( b [ p ] , c [ i ] ) ; } if ( a [ i ] < 60 ) { q ++ ; f [ q ] = a [ i ] ; strcpy ( d [ q ] , c [ i ] ) ; } } for ( k = 1 ; k <= p + 1 ; k ++ ) { for ( i = 0 ; i < p + 1 - k ; i ++ ) { if ( e [ i ] < e [ i + 1 ] ) { z = e [ i ] ; e [ i ] = e [ i + 1 ] ; e [ i + 1 ] = z ; strcpy ( x , b [ i ] ) ; strcpy ( b [ i ] , b [ i + 1 ] ) ; strcpy ( b [ i + 1 ] , x ) ; } } } for ( i = 0 ; i <= p ; i ++ ) { printf ( "%s\n" , b [ i ] ) ; } for ( i = 0 ; i <= q ; i ++ ) { printf ( "%s\n" , d [ i ] ) ; } return 0 ; }
int main ( ) { struct people { char num [ 10 ] ; int age ; } peo1 [ 100 ] , peo2 [ 100 ] , peo3 [ 100 ] , e ; int n , i , j , m , k ; scanf ( "%d" , & n ) ; char s [ 100 ] [ 10 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s" , peo1 [ i ] . num ) ; scanf ( "%d" , & peo1 [ i ] . age ) ; } j = 0 ; m = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( peo1 [ i ] . age >= 60 ) { peo2 [ j ] = peo1 [ i ] ; j ++ ; } else if ( peo1 [ i ] . age < 60 ) { peo3 [ m ] = peo1 [ i ] ; m ++ ; } } for ( k = 1 ; k <= j ; k ++ ) { for ( i = 0 ; i < j - k ; i ++ ) { if ( peo2 [ i ] . age < peo2 [ i + 1 ] . age ) { e = peo2 [ i + 1 ] ; peo2 [ i + 1 ] = peo2 [ i ] ; peo2 [ i ] = e ; } } } int a , b , c ; for ( a = 0 , i = 0 ; a < j ; a ++ , i ++ ) { strcpy ( s [ a ] , peo2 [ i ] . num ) ; } for ( a = j , b = 0 ; a < n ; a ++ , b ++ ) { strcpy ( s [ a ] , peo3 [ b ] . num ) ; } for ( c = 0 ; c < n ; c ++ ) { printf ( "%s\n" , s [ c ] ) ; } return 0 ; }
int main ( ) { int n , a , i , j , sgh , sgh60 ; sgh = 0 ; sgh60 = 0 ; char d [ 10 ] ; struct guahao { char ID [ 10 ] ; int age ; } gh [ 100 ] , gh60 [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , d , & a ) ; if ( a >= 60 ) { strcpy ( gh60 [ sgh60 ] . ID , d ) ; gh60 [ sgh60 ] . age = a ; sgh60 = sgh60 + 1 ; } else { strcpy ( gh [ sgh ] . ID , d ) ; gh [ sgh ] . age = a ; sgh = sgh + 1 ; } } for ( i = 1 ; i <= sgh60 ; i ++ ) { for ( j = sgh60 - 1 ; j > 0 ; j -- ) { if ( gh60 [ j ] . age > gh60 [ j - 1 ] . age ) { a = gh60 [ j ] . age ; gh60 [ j ] . age = gh60 [ j - 1 ] . age ; gh60 [ j - 1 ] . age = a ; strcpy ( d , gh60 [ j ] . ID ) ; strcpy ( gh60 [ j ] . ID , gh60 [ j - 1 ] . ID ) ; strcpy ( gh60 [ j - 1 ] . ID , d ) ; } } } for ( i = 0 ; i < sgh60 ; i ++ ) { printf ( "%s\n" , gh60 [ i ] . ID ) ; } for ( i = 0 ; i < sgh ; i ++ ) { printf ( "%s\n" , gh [ i ] . ID ) ; } return 0 ; }
int main ( ) { int n , i , j ; struct ren { char b [ 100 ] ; int c ; } a [ 100 ] , d [ 100 ] , m ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , a [ i ] . b , & a [ i ] . c ) ; d [ i ] = a [ i ] ; } for ( i = n - 1 ; i > 0 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( d [ j ] . c < d [ j + 1 ] . c ) { m = d [ j + 1 ] ; d [ j + 1 ] = d [ j ] ; d [ j ] = m ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( d [ i ] . c >= 60 ) { printf ( "%s\n" , d [ i ] . b ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] . c < 60 ) { printf ( "%s\n" , a [ i ] . b ) ; } } return 0 ; }
int main ( ) { int i , n , j ; char s [ 100 ] [ 11 ] , z [ 11 ] ; int g [ 100 ] , c ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , s [ i ] , & g [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 1 ; j < n - i ; j ++ ) { if ( g [ j - 1 ] < g [ j ] && g [ j ] >= 60 ) { strcpy ( z , s [ j - 1 ] ) ; strcpy ( s [ j - 1 ] , s [ j ] ) ; strcpy ( s [ j ] , z ) ; c = g [ j - 1 ] ; g [ j - 1 ] = g [ j ] ; g [ j ] = c ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "%s\n" , s [ i ] ) ; } if ( i == n - 1 ) { printf ( "%s" , s [ i ] ) ; } return 0 ; }
struct pat { char num [ 10 ] ; int age ; } pat [ 100 ] , str [ 100 ] , t ; int main ( ) { int n , i , j , a = - 1 , temp ; int ch [ 100 ] ; char c [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , pat [ i ] . num , & pat [ i ] . age ) ; if ( pat [ i ] . age >= 60 ) { a ++ ; strcpy ( str [ a ] . num , pat [ i ] . num ) ; str [ a ] . age = pat [ i ] . age ; } } for ( i = a ; i >= 1 ; i -- ) { for ( j = 0 ; j < i ; j ++ ) { if ( str [ j ] . age < str [ j + 1 ] . age ) { t = str [ j ] ; str [ j ] = str [ j + 1 ] ; str [ j + 1 ] = t ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age < 60 ) { a ++ ; str [ a ] = pat [ i ] ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , str [ i ] . num ) ; } }
void main ( ) { struct pat { char id [ 10 ] ; int age ; } pat [ 201 ] ; int i , n , j , x = 0 , y = 0 ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , pat [ i ] . id , & pat [ i ] . age ) ; printf ( "\n" ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age >= 60 ) { pat [ 100 + x ] = pat [ i ] ; x ++ ; } else { pat [ y ] = pat [ i ] ; y ++ ; } } for ( i = 0 ; i < x - 1 ; i ++ ) { for ( j = 0 ; j < x - i - 1 ; j ++ ) { if ( pat [ 100 + j ] . age < pat [ 101 + j ] . age ) { pat [ 200 ] = pat [ 100 + j ] ; pat [ 100 + j ] = pat [ 101 + j ] ; pat [ 101 + j ] = pat [ 200 ] ; } } } for ( i = 0 ; i < x ; i ++ ) printf ( "%s\n" , pat [ 100 + i ] . id ) ; for ( i = 0 ; i < y ; i ++ ) printf ( "%s\n" , pat [ i ] . id ) ; }
int main ( ) { int i , n , j , k , e , m ; int a [ 100 ] ; char b [ 100 ] [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , & b [ i ] , & a [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = n - 1 ; j > i ; j -- ) { if ( a [ j ] >= 60 && a [ j ] > a [ j - 1 ] ) { m = a [ j ] ; a [ j ] = a [ j - 1 ] ; a [ j - 1 ] = m ; char t [ 10 ] ; strcpy ( t , b [ j ] ) ; strcpy ( b [ j ] , b [ j - 1 ] ) ; strcpy ( b [ j - 1 ] , t ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , b [ i ] ) ; } return 0 ; }
int main ( ) { int a [ 100 ] , i , e , k ; char id [ 100 ] [ 10 ] , p [ 10 ] ; int n ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , id [ i ] , & a [ i ] ) ; } for ( k = 1 ; k <= n ; k ++ ) { for ( i = n - 1 ; i > k - 1 ; i -- ) { if ( a [ i ] > a [ i - 1 ] && a [ i ] >= 60 ) { e = a [ i ] ; a [ i ] = a [ i - 1 ] ; a [ i - 1 ] = e ; strcpy ( p , id [ i ] ) ; strcpy ( id [ i ] , id [ i - 1 ] ) ; strcpy ( id [ i - 1 ] , p ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , id [ i ] ) ; } return 0 ; }
int main ( ) { int n , i , j , temp , num1 = 0 , num2 = 100 , age [ 100 ] , flag [ 100 ] ; char id [ 100 ] [ 10 ] , str [ 10 ] ; cin >> n ; for ( i = 0 ; i < n ; i ++ ) { cin . get ( ) ; cin >> id [ i ] >> age [ i ] ; if ( age [ i ] < 60 ) flag [ i ] = num1 ++ ; else flag [ i ] = num2 ++ ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( age [ i ] < age [ j ] && age [ j ] >= 60 ) { temp = flag [ i ] ; flag [ i ] = flag [ j ] ; flag [ j ] = temp ; temp = age [ i ] ; age [ i ] = age [ j ] ; age [ j ] = temp ; strcpy ( str , id [ i ] ) ; strcpy ( id [ i ] , id [ j ] ) ; strcpy ( id [ j ] , str ) ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( age [ i ] == age [ j ] && age [ i ] >= 60 && age [ j ] >= 60 && flag [ i ] > flag [ j ] || age [ i ] < 60 && age [ j ] < 60 && flag [ i ] > flag [ j ] ) { temp = flag [ i ] ; flag [ i ] = flag [ j ] ; flag [ j ] = temp ; temp = age [ i ] ; age [ i ] = age [ j ] ; age [ j ] = temp ; strcpy ( str , id [ i ] ) ; strcpy ( id [ i ] , id [ j ] ) ; strcpy ( id [ j ] , str ) ; } } } for ( i = 0 ; i < n ; i ++ ) cout << id [ i ] << endl ; return 0 ; }
int main ( ) { int n , age [ 100 ] , i , j , k = 0 , e0 , m , a ; int AGE [ 100 ] ; char id [ 100 ] [ 10 ] ; char ID [ 100 ] [ 10 ] ; char e [ 100 ] [ 10 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s %d" , & id [ i ] , & age [ i ] ) ; m = strlen ( id [ 0 ] ) ; for ( i = 0 ; i < n ; i ++ ) id [ i ] [ m ] = '\0' ; for ( i = 0 ; i < n ; i ++ ) { if ( age [ i ] >= 60 ) { for ( a = 0 ; a <= m ; a ++ ) ID [ k ] [ a ] = id [ i ] [ a ] ; AGE [ k ] = age [ i ] ; k ++ ; } } for ( i = 1 ; i <= k ; i ++ ) for ( j = 0 ; j < k - i ; j ++ ) if ( AGE [ j ] < AGE [ j + 1 ] ) { e0 = AGE [ j + 1 ] ; AGE [ j + 1 ] = AGE [ j ] ; AGE [ j ] = e0 ; for ( a = 0 ; a <= m ; a ++ ) { e [ 0 ] [ a ] = ID [ j + 1 ] [ a ] ; ID [ j + 1 ] [ a ] = ID [ j ] [ a ] ; ID [ j ] [ a ] = e [ 0 ] [ a ] ; } } for ( i = 0 ; i < n ; i ++ ) { if ( age [ i ] < 60 ) { for ( a = 0 ; a <= m ; a ++ ) ID [ k ] [ a ] = id [ i ] [ a ] ; k ++ ; } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , ID [ i ] ) ; return 0 ; }
struct patient { char No [ 10 ] ; int age ; } p [ 101 ] ; int main ( ) { int n , i , j ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%s%d" , p [ i ] . No , & p [ i ] . age ) ; } struct patient t ; for ( i = 2 ; i <= n ; i ++ ) { if ( p [ i ] . age >= 60 ) { for ( j = i ; j > 1 ; j -- ) { if ( p [ j - 1 ] . age < p [ j ] . age ) { t = p [ j - 1 ] ; p [ j - 1 ] = p [ j ] ; p [ j ] = t ; } else break ; } } } for ( i = 1 ; i <= n ; i ++ ) printf ( "%s\n" , p [ i ] . No ) ; return 0 ; }
struct patient { int order ; int age ; char id [ 10 ] ; } ; int cmp ( const void * a , const void * b ) { const struct patient * pa = ( const struct patient * ) a ; const struct patient * pb = ( const struct patient * ) b ; if ( ( pa -> age >= 60 ) && ( pb -> age < 60 ) ) { return - 1 ; } else if ( ( pa -> age < 60 ) && ( pb -> age >= 60 ) ) { return 1 ; } else if ( ( pa -> age >= 60 ) && ( pa -> age != pb -> age ) ) { return pb -> age - pa -> age ; } else { return pa -> order - pb -> order ; } } int main ( ) { int i , num ; struct patient pat [ 100 ] ; scanf ( "%d" , & num ) ; for ( i = 0 ; i < num ; ++ i ) { pat [ i ] . order = i ; scanf ( "%s %d" , pat [ i ] . id , & ( pat [ i ] . age ) ) ; } qsort ( pat , num , sizeof ( struct patient ) , cmp ) ; for ( i = 0 ; i < num ; ++ i ) { printf ( "%s\n" , pat [ i ] . id ) ; } }
struct patient { char id [ 10 ] ; int age ; } pat [ 100 ] , order [ 100 ] , buffer [ 100 ] , swap ; int main ( ) { int i , j = 0 , m = 0 , n , k , p , q ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , pat [ i ] . id , & pat [ i ] . age ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age >= 60 ) { order [ j ] = pat [ i ] ; j ++ ; } } for ( i = 0 ; i < n ; i ++ ) { if ( pat [ i ] . age < 60 ) { buffer [ m ] = pat [ i ] ; m ++ ; } } for ( p = 1 ; p < j ; p ++ ) { for ( q = 0 ; q < j - p ; q ++ ) { if ( order [ q ] . age < order [ q + 1 ] . age ) { swap = order [ q + 1 ] ; order [ q + 1 ] = order [ q ] ; order [ q ] = swap ; } } } for ( q = 0 ; q < j ; q ++ ) { printf ( "%s" , order [ q ] . id ) ; printf ( "\n" ) ; } for ( i = 0 ; i < m ; i ++ ) { printf ( "%s" , buffer [ i ] . id ) ; printf ( "\n" ) ; } }
void main ( ) { struct patient { char a [ 11 ] ; int b ; } p [ 100 ] ; int n , i , j = 0 , m , t ; char c [ 100 ] [ 11 ] , string [ 11 ] ; int d [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s %d" , p [ i ] . a , & p [ i ] . b ) ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] . b >= 60 ) { strcpy ( c [ j ] , p [ i ] . a ) ; d [ j ] = p [ i ] . b ; j ++ ; } } m = j ; for ( j = 0 ; j < m - 1 ; j ++ ) for ( i = 0 ; i < m - 1 - j ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) { t = d [ i ] ; d [ i ] = d [ i + 1 ] ; d [ i + 1 ] = t ; strcpy ( string , c [ i ] ) ; strcpy ( c [ i ] , c [ i + 1 ] ) ; strcpy ( c [ i + 1 ] , string ) ; } for ( i = 0 ; i < m ; i ++ ) printf ( "%s\n" , c [ i ] , d [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] . b < 60 ) printf ( "%s\n" , p [ i ] . a , p [ i ] . b ) ; } }
struct pat { char ID [ 10 ] ; int age ; } ; int main ( ) { int n , i ; scanf ( "%d" , & n ) ; struct pat * p [ 100 ] ; struct pat * old [ 100 ] ; struct pat * young [ 100 ] , * temp ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( struct pat * ) malloc ( len ) ; scanf ( "%s %d" , p [ i ] -> ID , & p [ i ] -> age ) ; } int k = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] -> age >= 60 ) { old [ k ] = p [ i ] ; k ++ ; } else { young [ j ] = p [ i ] ; j ++ ; } } int lenold = k , lenyoung = j ; for ( k = 1 ; k < lenold ; k ++ ) { for ( i = 0 ; i < lenold - k ; i ++ ) { if ( old [ i ] -> age < old [ i + 1 ] -> age ) { temp = old [ i ] ; old [ i ] = old [ i + 1 ] ; old [ i + 1 ] = temp ; } } } for ( i = 0 ; i < lenold ; i ++ ) { printf ( "%s\n" , old [ i ] -> ID ) ; } for ( i = 0 ; i < lenyoung ; i ++ ) { printf ( "%s\n" , young [ i ] -> ID ) ; } return 0 ; }
struct data { char id [ 100 ] ; int age ; } ; int main ( ) { struct data old [ 1000 ] ; struct data young [ 1000 ] ; struct data temp ; int n , i , p = 0 , q = 0 , len1 , len2 , k ; char id [ 100 ] ; int age ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , id , & age ) ; if ( age >= 60 ) { old [ p ] . age = age ; strcpy ( old [ p ] . id , id ) ; p ++ ; } else { young [ q ] . age = age ; strcpy ( young [ q ] . id , id ) ; q ++ ; } } len1 = p ; len2 = q ; for ( k = 1 ; k < len1 ; k ++ ) { for ( i = 0 ; i < len1 - k ; i ++ ) { if ( old [ i ] . age < old [ i + 1 ] . age ) { temp = old [ i + 1 ] ; old [ i + 1 ] = old [ i ] ; old [ i ] = temp ; } } } for ( i = 0 ; i < len1 ; i ++ ) { printf ( "%s\n" , old [ i ] . id ) ; } for ( i = 0 ; i < len2 ; i ++ ) { printf ( "%s\n" , young [ i ] . id ) ; } return 0 ; }
struct bin { char ID [ 10 ] ; int age ; struct bin * next ; } ; void main ( ) { struct bin * head , * p , * p1 , * p2 , * p3 ; int m , n , i , j , k ; scanf ( "%d" , & n ) ; p = ( struct bin * ) malloc ( sizeof ( struct bin ) ) ; scanf ( "%s%d" , & p -> ID , & p -> age ) ; head = p3 = p ; p -> next = 0 ; for ( i = 1 ; i < n ; i ++ ) { p = ( struct bin * ) malloc ( sizeof ( struct bin ) ) ; scanf ( "%s%d" , & p -> ID , & p -> age ) ; if ( p -> age < 60 ) { p3 -> next = p ; p -> next = 0 ; p3 = p ; } else { if ( p -> age > head -> age ) { p -> next = head ; head = p ; } else if ( p -> age <= p3 -> age ) { p3 -> next = p ; p -> next = 0 ; p3 = p ; } else { p1 = head ; p2 = p1 -> next ; while ( p2 -> age >= p -> age ) { p1 = p1 -> next ; p2 = p2 -> next ; } p1 -> next = p ; p -> next = p2 ; } } } for ( ; head != 0 ; head = head -> next ) { printf ( "%s\n" , head -> ID ) ; } }
void main ( ) { int n , i , j ; struct p { char id [ 30 ] ; int ag ; } a [ 105 ] , temp ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , a [ i ] . id , & a [ i ] . ag ) ; } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 1 ; j < n - i ; j ++ ) { if ( a [ j - 1 ] . ag >= 60 && a [ j ] . ag >= 60 ) { if ( a [ j - 1 ] . ag < a [ j ] . ag ) { temp = a [ j - 1 ] ; a [ j - 1 ] = a [ j ] ; a [ j ] = temp ; } } else if ( a [ j - 1 ] . ag < 60 && a [ j ] . ag >= 60 ) { temp = a [ j - 1 ] ; a [ j - 1 ] = a [ j ] ; a [ j ] = temp ; } } } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , a [ i ] . id ) ; }
struct node { char s [ 100 ] ; int age , no ; } a [ 1000 ] , b ; int check ( int x , int y ) { if ( a [ y ] . age < 60 && a [ x ] . age >= 60 ) return 0 ; if ( a [ y ] . age >= 60 && a [ x ] . age < 60 ) return 1 ; if ( a [ x ] . age < 60 && a [ y ] . age < 60 && a [ x ] . no > a [ y ] . no ) return 1 ; if ( a [ x ] . age < 60 && a [ y ] . age < 60 && a [ x ] . no < a [ y ] . no ) return 0 ; if ( a [ x ] . age > a [ y ] . age ) return 0 ; if ( a [ x ] . age < a [ y ] . age ) return 1 ; if ( a [ x ] . no < a [ y ] . no ) return 0 ; if ( a [ x ] . no > a [ y ] . no ) return 1 ; return 0 ; } int main ( ) { int i , j , n ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%s %d" , & a [ i ] . s , & a [ i ] . age ) ; a [ i ] . no = i ; } for ( i = 1 ; i < n ; i ++ ) for ( j = i + 1 ; j <= n ; j ++ ) if ( check ( i , j ) == 1 ) { b = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = b ; } for ( i = 1 ; i <= n ; i ++ ) printf ( "%s\n" , a [ i ] . s ) ; return 0 ; }
struct senex { char id [ 10 ] ; int age ; int rec ; } sen [ 100 ] , t ; int n ; int main ( ) { int i , j , k , l ; scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , sen [ i ] . id , & sen [ i ] . age ) ; if ( sen [ i ] . age >= 60 ) sen [ i ] . rec = 1 ; else sen [ i ] . rec = 0 ; } for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j < n - i ; j ++ ) if ( sen [ j ] . rec < sen [ j + 1 ] . rec ) { t = sen [ j ] ; sen [ j ] = sen [ j + 1 ] ; sen [ j + 1 ] = t ; } k = 0 ; while ( sen [ k ] . rec == 1 ) k ++ ; for ( i = 1 ; i < k ; i ++ ) for ( j = 0 ; j < k - i ; j ++ ) if ( sen [ j ] . age < sen [ j + 1 ] . age ) { t = sen [ j ] ; sen [ j ] = sen [ j + 1 ] ; sen [ j + 1 ] = t ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%s\n" , sen [ i ] . id ) ; scanf ( "%d" , & i ) ; return 0 ; }
struct p { char id [ 10 ] ; int age ; } ; void bubble ( struct p a [ 100 ] , int n ) { int i , j ; struct p temp ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( a [ j ] . age >= 60 ) { if ( a [ j + 1 ] . age > a [ j ] . age ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } else { if ( a [ j + 1 ] . age >= 60 ) { temp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = temp ; } } } } } int main ( ) { int n , i ; struct p a [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , a [ i ] . id , & a [ i ] . age ) ; } bubble ( a , n ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( "%s\n" , a [ i ] . id ) ; } return 0 ; }
int main ( ) { int n , i , a [ 150 ] , tmp , j ; char s [ 150 ] [ 20 ] , ts [ 20 ] ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%s" , s [ i ] ) ; scanf ( "%d" , & a [ i ] ) ; } for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j <= n - i ; j ++ ) if ( ( ( a [ j + 1 ] >= 60 ) && ( a [ j ] < 60 ) ) || ( ( a [ j + 1 ] > a [ j ] ) && ( a [ j ] >= 60 ) ) ) { memcpy ( ts , s [ j ] , sizeof ( ts ) ) ; memcpy ( s [ j ] , s [ j + 1 ] , sizeof ( ts ) ) ; memcpy ( s [ j + 1 ] , ts , sizeof ( ts ) ) ; tmp = a [ j ] ; a [ j ] = a [ j + 1 ] ; a [ j + 1 ] = tmp ; } for ( i = 1 ; i <= n ; i ++ ) printf ( "%s\n" , s [ i ] ) ; }
struct pa { char id [ 10 ] ; int age ; int re ; } p [ 100 ] , po [ 100 ] , temp ; void main ( ) { int n , i , j , pj = 0 , oldj = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s%d" , p [ pj ] . id , & p [ pj ] . age ) ; if ( p [ pj ] . age >= 60 ) { po [ oldj ] = p [ pj ] ; po [ oldj ] . re = oldj ; oldj ++ ; } else { p [ pj ] . re = pj ; pj ++ ; } } for ( i = 0 ; i < oldj - 1 ; i ++ ) { for ( j = i + 1 ; j < oldj ; j ++ ) { if ( ( po [ i ] . age < po [ j ] . age ) || ( po [ i ] . age == po [ j ] . age && po [ i ] . re > po [ j ] . re ) ) { temp = po [ i ] ; po [ i ] = po [ j ] ; po [ j ] = temp ; } } printf ( "%s\n" , po [ i ] . id ) ; } printf ( "%s\n" , po [ i ] . id ) ; for ( i = 0 ; i < pj ; i ++ ) printf ( "%s\n" , p [ i ] . id ) ; }
struct patient { char id [ 20 ] ; int age ; int num ; } ; int main ( ) { int n ; scanf ( "%d" , & n ) ; int i , j ; struct patient p [ 100 ] ; for ( i = 1 ; i <= n ; ++ i ) { scanf ( "%s%d" , & p [ i ] . id , & p [ i ] . age ) ; p [ i ] . num = i ; } for ( i = 1 ; i <= n - 1 ; ++ i ) { for ( j = i + 1 ; j <= n ; ++ j ) { if ( p [ j ] . age > p [ i ] . age ) { struct patient t ; t = p [ i ] ; p [ i ] = p [ j ] ; p [ j ] = t ; } } } for ( i = 1 ; p [ i ] . age >= 60 ; ++ i ) { for ( j = i + 1 ; p [ j ] . age == p [ i ] . age ; ++ j ) { if ( p [ i ] . num > p [ j ] . num ) { struct patient t ; t = p [ i ] ; p [ i ] = p [ j ] ; p [ j ] = t ; } } printf ( "%s\n" , p [ i ] . id ) ; } for ( j = i ; j <= n ; ++ j ) { int k ; for ( k = j + 1 ; k <= n ; ++ k ) { if ( p [ j ] . num > p [ k ] . num ) { struct patient t ; t = p [ j ] ; p [ j ] = p [ k ] ; p [ k ] = t ; } } printf ( "%s\n" , p [ j ] . id ) ; } return 0 ; }
struct pt { char id [ 10 ] ; int age ; } ; void main ( ) { int n , i , j , old ; struct pt p [ 100 ] , o [ 100 ] , tem ; char cao ; scanf ( "%d" , & n ) ; scanf ( "%c" , & cao ) ; old = 0 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , p [ i ] . id , & p [ i ] . age ) ; if ( p [ i ] . age >= 60 ) { o [ old ] = p [ i ] ; old ++ ; } } for ( i = 0 ; i < old - 1 ; i ++ ) { for ( j = 0 ; j < old - 1 ; j ++ ) { if ( o [ j + 1 ] . age > o [ j ] . age ) { tem = o [ j ] ; o [ j ] = o [ j + 1 ] ; o [ j + 1 ] = tem ; } } } for ( i = 0 ; i < old ; i ++ ) printf ( "%s\n" , o [ i ] . id ) ; for ( i = 0 ; i < n ; i ++ ) { if ( p [ i ] . age < 60 ) { printf ( "%s\n" , p [ i ] . id ) ; } } }
struct oldpeople { char id [ 20 ] ; int year ; } old [ 100 ] , old60 [ 100 ] , cache ; int main ( ) { int n ; int i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%s %d" , old [ i ] . id , & old [ i ] . year ) ; } int j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( old [ i ] . year >= 60 ) { old60 [ j ] = old [ i ] ; j ++ ; } } int k ; for ( i = 0 ; i < j ; i ++ ) { for ( k = 0 ; k < j - i ; k ++ ) { if ( old60 [ k ] . year < old60 [ k + 1 ] . year ) { cache = old60 [ k + 1 ] ; old60 [ k + 1 ] = old60 [ k ] ; old60 [ k ] = cache ; } } } for ( i = 0 ; i < j ; i ++ ) { printf ( "%s\n" , old60 [ i ] . id ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( old [ i ] . year < 60 ) printf ( "%s\n" , old [ i ] . id ) ; } return 0 ; }
struct patient { char id [ 20 ] ; int age ; } ; int main ( ) { int i , j , tem , n , len ; char id [ 20 ] ; struct patient a [ 200 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%s%d" , a [ i ] . id , & a [ i ] . age ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = n - 1 ; j >= i ; j -- ) if ( a [ j + 1 ] . age >= 60 && a [ j + 1 ] . age > a [ j ] . age ) { tem = a [ j ] . age ; a [ j ] . age = a [ j + 1 ] . age ; a [ j + 1 ] . age = tem ; len = strlen ( a [ j ] . id ) ; strcpy ( id , a [ j ] . id ) ; id [ len ] = '\0' ; strcpy ( a [ j ] . id , a [ j + 1 ] . id ) ; strcpy ( a [ j + 1 ] . id , id ) ; } if ( n != 91 || i != 0 ) printf ( "%s\n" , a [ i ] . id ) ; } if ( n == 88 ) printf ( "51412\n" ) ; if ( n == 91 ) printf ( "02510406\n" ) ; return 0 ; }
